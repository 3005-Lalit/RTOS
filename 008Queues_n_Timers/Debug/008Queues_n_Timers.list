
008Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009608  08009608  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009610  08009610  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009614  08009614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012f24  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fb0  20012fb0  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fee4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e34  00000000  00000000  0003ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00043dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001310  00000000  00000000  00045260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281f0  00000000  00000000  00046570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195ca  00000000  00000000  0006e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb07e  00000000  00000000  00087d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00172da8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e04  00000000  00000000  00172dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800915c 	.word	0x0800915c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800915c 	.word	0x0800915c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	e00e      	b.n	80005e2 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <led_effect_stop+0x3c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	2103      	movs	r1, #3
 80005d8:	f006 fc6c 	bl	8006eb4 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	dded      	ble.n	80005c4 <led_effect_stop+0xc>
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20012e7c 	.word	0x20012e7c

080005f8 <led_effect>:

void led_effect(int n )
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000600:	f7ff ffda 	bl	80005b8 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	4a08      	ldr	r2, [pc, #32]	; (800062c <led_effect+0x34>)
 800060a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800060e:	f005 fd53 	bl	80060b8 <xTaskGetTickCount>
 8000612:	4602      	mov	r2, r0
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4620      	mov	r0, r4
 8000620:	f006 fc48 	bl	8006eb4 <xTimerGenericCommand>

}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	20012e7c 	.word	0x20012e7c

08000630 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <turn_off_all_leds+0x34>)
 800063c:	f002 f86c 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <turn_off_all_leds+0x34>)
 8000648:	f002 f866 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2108      	movs	r1, #8
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <turn_off_all_leds+0x38>)
 8000652:	f002 f861 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2110      	movs	r1, #16
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <turn_off_all_leds+0x38>)
 800065c:	f002 f85c 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021800 	.word	0x40021800
 8000668:	40020400 	.word	0x40020400

0800066c <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <turn_on_all_leds+0x34>)
 8000678:	f002 f84e 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <turn_on_all_leds+0x34>)
 8000684:	f002 f848 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2108      	movs	r1, #8
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <turn_on_all_leds+0x38>)
 800068e:	f002 f843 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <turn_on_all_leds+0x38>)
 8000698:	f002 f83e 	bl	8002718 <HAL_GPIO_WritePin>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021800 	.word	0x40021800
 80006a4:	40020400 	.word	0x40020400

080006a8 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <turn_on_odd_leds+0x34>)
 80006b4:	f002 f830 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <turn_on_odd_leds+0x34>)
 80006c0:	f002 f82a 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2108      	movs	r1, #8
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <turn_on_odd_leds+0x38>)
 80006ca:	f002 f825 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <turn_on_odd_leds+0x38>)
 80006d4:	f002 f820 	bl	8002718 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021800 	.word	0x40021800
 80006e0:	40020400 	.word	0x40020400

080006e4 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <turn_on_even_leds+0x34>)
 80006f0:	f002 f812 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <turn_on_even_leds+0x34>)
 80006fc:	f002 f80c 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2108      	movs	r1, #8
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <turn_on_even_leds+0x38>)
 8000706:	f002 f807 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2110      	movs	r1, #16
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <turn_on_even_leds+0x38>)
 8000710:	f002 f802 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021800 	.word	0x40021800
 800071c:	40020400 	.word	0x40020400

08000720 <LED_control>:

void LED_control( int value )
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e014      	b.n	8000758 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800072e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b299      	uxth	r1, r3
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	fa42 f303 	asr.w	r3, r2, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <LED_control+0x48>)
 800074e:	f001 ffe3 	bl	8002718 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2b03      	cmp	r3, #3
 800075c:	dde7      	ble.n	800072e <LED_control+0xe>
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021800 	.word	0x40021800

0800076c <LED_effect1>:


void LED_effect1(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <LED_effect1+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <LED_effect1+0x28>)
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LED_effect1+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <LED_effect1+0x1e>
 8000784:	f7ff ff54 	bl	8000630 <turn_off_all_leds>
}
 8000788:	e001      	b.n	800078e <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800078a:	f7ff ff6f 	bl	800066c <turn_on_all_leds>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000

08000798 <LED_effect2>:


void LED_effect2(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <LED_effect2+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <LED_effect2+0x28>)
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <LED_effect2+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <LED_effect2+0x1e>
 80007b0:	f7ff ff98 	bl	80006e4 <turn_on_even_leds>
}
 80007b4:	e001      	b.n	80007ba <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007b6:	f7ff ff77 	bl	80006a8 <turn_on_odd_leds>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000004 	.word	0x20000004

080007c4 <LED_effect3>:

void LED_effect3(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <LED_effect3+0x2c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <LED_effect3+0x2c>)
 80007d0:	600a      	str	r2, [r1, #0]
 80007d2:	425a      	negs	r2, r3
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	f002 0203 	and.w	r2, r2, #3
 80007dc:	bf58      	it	pl
 80007de:	4253      	negpl	r3, r2
 80007e0:	2201      	movs	r2, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff9a 	bl	8000720 <LED_control>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000a8 	.word	0x200000a8

080007f4 <LED_effect4>:


void LED_effect4(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <LED_effect4+0x2c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <LED_effect4+0x2c>)
 8000800:	600a      	str	r2, [r1, #0]
 8000802:	425a      	negs	r2, r3
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	f002 0203 	and.w	r2, r2, #3
 800080c:	bf58      	it	pl
 800080e:	4253      	negpl	r3, r2
 8000810:	2208      	movs	r2, #8
 8000812:	fa42 f303 	asr.w	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff82 	bl	8000720 <LED_control>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000ac 	.word	0x200000ac

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f001 fc13 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f911 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f9cd 	bl	8000bd0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000836:	f000 f97b 	bl	8000b30 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800083a:	f000 f99f 	bl	8000b7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800083e:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <main+0x1cc>)
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	2302      	movs	r3, #2
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2300      	movs	r3, #0
 8000848:	22fa      	movs	r2, #250	; 0xfa
 800084a:	496a      	ldr	r1, [pc, #424]	; (80009f4 <main+0x1d0>)
 800084c:	486a      	ldr	r0, [pc, #424]	; (80009f8 <main+0x1d4>)
 800084e:	f005 f9f1 	bl	8005c34 <xTaskCreate>
 8000852:	6238      	str	r0, [r7, #32]

  	configASSERT(status == pdPASS);
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00a      	beq.n	8000870 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800086c:	bf00      	nop
 800086e:	e7fe      	b.n	800086e <main+0x4a>

  	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000870:	4b62      	ldr	r3, [pc, #392]	; (80009fc <main+0x1d8>)
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	2302      	movs	r3, #2
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2300      	movs	r3, #0
 800087a:	22fa      	movs	r2, #250	; 0xfa
 800087c:	4960      	ldr	r1, [pc, #384]	; (8000a00 <main+0x1dc>)
 800087e:	4861      	ldr	r0, [pc, #388]	; (8000a04 <main+0x1e0>)
 8000880:	f005 f9d8 	bl	8005c34 <xTaskCreate>
 8000884:	6238      	str	r0, [r7, #32]

  	configASSERT(status == pdPASS);
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d00a      	beq.n	80008a2 <main+0x7e>
        __asm volatile
 800088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000890:	f383 8811 	msr	BASEPRI, r3
 8000894:	f3bf 8f6f 	isb	sy
 8000898:	f3bf 8f4f 	dsb	sy
 800089c:	61bb      	str	r3, [r7, #24]
    }
 800089e:	bf00      	nop
 80008a0:	e7fe      	b.n	80008a0 <main+0x7c>

  	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80008a2:	4b59      	ldr	r3, [pc, #356]	; (8000a08 <main+0x1e4>)
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	2302      	movs	r3, #2
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2300      	movs	r3, #0
 80008ac:	22fa      	movs	r2, #250	; 0xfa
 80008ae:	4957      	ldr	r1, [pc, #348]	; (8000a0c <main+0x1e8>)
 80008b0:	4857      	ldr	r0, [pc, #348]	; (8000a10 <main+0x1ec>)
 80008b2:	f005 f9bf 	bl	8005c34 <xTaskCreate>
 80008b6:	6238      	str	r0, [r7, #32]

  	configASSERT(status == pdPASS);
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d00a      	beq.n	80008d4 <main+0xb0>
        __asm volatile
 80008be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	617b      	str	r3, [r7, #20]
    }
 80008d0:	bf00      	nop
 80008d2:	e7fe      	b.n	80008d2 <main+0xae>

  	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008d4:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <main+0x1f0>)
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	2302      	movs	r3, #2
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	22fa      	movs	r2, #250	; 0xfa
 80008e0:	494d      	ldr	r1, [pc, #308]	; (8000a18 <main+0x1f4>)
 80008e2:	484e      	ldr	r0, [pc, #312]	; (8000a1c <main+0x1f8>)
 80008e4:	f005 f9a6 	bl	8005c34 <xTaskCreate>
 80008e8:	6238      	str	r0, [r7, #32]

  	configASSERT(status == pdPASS);
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00a      	beq.n	8000906 <main+0xe2>
        __asm volatile
 80008f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f4:	f383 8811 	msr	BASEPRI, r3
 80008f8:	f3bf 8f6f 	isb	sy
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	613b      	str	r3, [r7, #16]
    }
 8000902:	bf00      	nop
 8000904:	e7fe      	b.n	8000904 <main+0xe0>

  	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8000906:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <main+0x1fc>)
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	2302      	movs	r3, #2
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2300      	movs	r3, #0
 8000910:	22fa      	movs	r2, #250	; 0xfa
 8000912:	4944      	ldr	r1, [pc, #272]	; (8000a24 <main+0x200>)
 8000914:	4844      	ldr	r0, [pc, #272]	; (8000a28 <main+0x204>)
 8000916:	f005 f98d 	bl	8005c34 <xTaskCreate>
 800091a:	6238      	str	r0, [r7, #32]

  	configASSERT(status == pdPASS);
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d00a      	beq.n	8000938 <main+0x114>
        __asm volatile
 8000922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000926:	f383 8811 	msr	BASEPRI, r3
 800092a:	f3bf 8f6f 	isb	sy
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	60fb      	str	r3, [r7, #12]
    }
 8000934:	bf00      	nop
 8000936:	e7fe      	b.n	8000936 <main+0x112>

  	q_data = xQueueCreate (10, sizeof(char));
 8000938:	2200      	movs	r2, #0
 800093a:	2101      	movs	r1, #1
 800093c:	200a      	movs	r0, #10
 800093e:	f004 fc2d 	bl	800519c <xQueueGenericCreate>
 8000942:	4603      	mov	r3, r0
 8000944:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <main+0x208>)
 8000946:	6013      	str	r3, [r2, #0]

  	configASSERT(q_data != NULL);
 8000948:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <main+0x208>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10a      	bne.n	8000966 <main+0x142>
        __asm volatile
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	60bb      	str	r3, [r7, #8]
    }
 8000962:	bf00      	nop
 8000964:	e7fe      	b.n	8000964 <main+0x140>

  	q_print = xQueueCreate (10, sizeof(size_t));
 8000966:	2200      	movs	r2, #0
 8000968:	2104      	movs	r1, #4
 800096a:	200a      	movs	r0, #10
 800096c:	f004 fc16 	bl	800519c <xQueueGenericCreate>
 8000970:	4603      	mov	r3, r0
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <main+0x20c>)
 8000974:	6013      	str	r3, [r2, #0]

  	configASSERT(q_print != NULL);
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <main+0x20c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10a      	bne.n	8000994 <main+0x170>
        __asm volatile
 800097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000982:	f383 8811 	msr	BASEPRI, r3
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	f3bf 8f4f 	dsb	sy
 800098e:	607b      	str	r3, [r7, #4]
    }
 8000990:	bf00      	nop
 8000992:	e7fe      	b.n	8000992 <main+0x16e>

  	//Create software timers for LED effects
  	for(int i = 0 ; i < 4 ; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	e013      	b.n	80009c2 <main+0x19e>
  			handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	3301      	adds	r3, #1
 800099e:	461a      	mov	r2, r3
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <main+0x210>)
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	4613      	mov	r3, r2
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ac:	4822      	ldr	r0, [pc, #136]	; (8000a38 <main+0x214>)
 80009ae:	f006 fa25 	bl	8006dfc <xTimerCreate>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4921      	ldr	r1, [pc, #132]	; (8000a3c <main+0x218>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  	for(int i = 0 ; i < 4 ; i++)
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009be:	3301      	adds	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	dde8      	ble.n	800099a <main+0x176>


  	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <main+0x21c>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d4:	481b      	ldr	r0, [pc, #108]	; (8000a44 <main+0x220>)
 80009d6:	f006 fa11 	bl	8006dfc <xTimerCreate>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <main+0x224>)
 80009de:	6013      	str	r3, [r2, #0]

  	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	491a      	ldr	r1, [pc, #104]	; (8000a4c <main+0x228>)
 80009e4:	481a      	ldr	r0, [pc, #104]	; (8000a50 <main+0x22c>)
 80009e6:	f003 fbd4 	bl	8004192 <HAL_UART_Receive_IT>

  	vTaskStartScheduler();
 80009ea:	f005 fa69 	bl	8005ec0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <main+0x1ca>
 80009f0:	20012e9c 	.word	0x20012e9c
 80009f4:	08009174 	.word	0x08009174
 80009f8:	080017dd 	.word	0x080017dd
 80009fc:	20012e94 	.word	0x20012e94
 8000a00:	08009180 	.word	0x08009180
 8000a04:	08001ee5 	.word	0x08001ee5
 8000a08:	20012ec4 	.word	0x20012ec4
 8000a0c:	0800918c 	.word	0x0800918c
 8000a10:	08001ea5 	.word	0x08001ea5
 8000a14:	20012ec8 	.word	0x20012ec8
 8000a18:	08009198 	.word	0x08009198
 8000a1c:	080018c5 	.word	0x080018c5
 8000a20:	20012e90 	.word	0x20012e90
 8000a24:	080091a4 	.word	0x080091a4
 8000a28:	08001a39 	.word	0x08001a39
 8000a2c:	20012e98 	.word	0x20012e98
 8000a30:	20012ea0 	.word	0x20012ea0
 8000a34:	080010e1 	.word	0x080010e1
 8000a38:	080091b0 	.word	0x080091b0
 8000a3c:	20012e7c 	.word	0x20012e7c
 8000a40:	080010cd 	.word	0x080010cd
 8000a44:	080091bc 	.word	0x080091bc
 8000a48:	20012e8c 	.word	0x20012e8c
 8000a4c:	20012ecc 	.word	0x20012ecc
 8000a50:	20012ed0 	.word	0x20012ed0

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 fa58 	bl	8007f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <SystemClock_Config+0xd8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <SystemClock_Config+0xd8>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <SystemClock_Config+0xd8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2310      	movs	r3, #16
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ad0:	2332      	movs	r3, #50	; 0x32
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fe33 	bl	800274c <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aec:	f000 fb86 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000afc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 f894 	bl	8002c3c <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b1a:	f000 fb6f 	bl	80011fc <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3750      	adds	r7, #80	; 0x50
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b42:	227f      	movs	r2, #127	; 0x7f
 8000b44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_RTC_Init+0x44>)
 8000b60:	f002 fc58 	bl	8003414 <HAL_RTC_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b6a:	f000 fb47 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20012ea4 	.word	0x20012ea4
 8000b78:	40002800 	.word	0x40002800

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f003 fa0e 	bl	8003fd4 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 fb1d 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20012ed0 	.word	0x20012ed0
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
 8000bea:	4bb2      	ldr	r3, [pc, #712]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4ab1      	ldr	r2, [pc, #708]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4baf      	ldr	r3, [pc, #700]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	4bab      	ldr	r3, [pc, #684]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4aaa      	ldr	r2, [pc, #680]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4ba8      	ldr	r3, [pc, #672]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	4ba4      	ldr	r3, [pc, #656]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4aa3      	ldr	r2, [pc, #652]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4ba1      	ldr	r3, [pc, #644]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	4b9d      	ldr	r3, [pc, #628]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a9c      	ldr	r2, [pc, #624]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b9a      	ldr	r3, [pc, #616]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b96      	ldr	r3, [pc, #600]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a95      	ldr	r2, [pc, #596]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b93      	ldr	r3, [pc, #588]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b8f      	ldr	r3, [pc, #572]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a8e      	ldr	r2, [pc, #568]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b8c      	ldr	r3, [pc, #560]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a87      	ldr	r2, [pc, #540]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b85      	ldr	r3, [pc, #532]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b81      	ldr	r3, [pc, #516]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a80      	ldr	r2, [pc, #512]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b7e      	ldr	r3, [pc, #504]	; (8000eb4 <MX_GPIO_Init+0x2e4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2116      	movs	r1, #22
 8000cca:	487b      	ldr	r0, [pc, #492]	; (8000eb8 <MX_GPIO_Init+0x2e8>)
 8000ccc:	f001 fd24 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	4879      	ldr	r0, [pc, #484]	; (8000ebc <MX_GPIO_Init+0x2ec>)
 8000cd6:	f001 fd1f 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ce0:	4877      	ldr	r0, [pc, #476]	; (8000ec0 <MX_GPIO_Init+0x2f0>)
 8000ce2:	f001 fd19 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cec:	4875      	ldr	r0, [pc, #468]	; (8000ec4 <MX_GPIO_Init+0x2f4>)
 8000cee:	f001 fd13 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, User_LED_Blue_Pin|User_LED_White_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2118      	movs	r1, #24
 8000cf6:	4874      	ldr	r0, [pc, #464]	; (8000ec8 <MX_GPIO_Init+0x2f8>)
 8000cf8:	f001 fd0e 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000cfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	486c      	ldr	r0, [pc, #432]	; (8000ecc <MX_GPIO_Init+0x2fc>)
 8000d1a:	f001 fb51 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d1e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d30:	2305      	movs	r3, #5
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4864      	ldr	r0, [pc, #400]	; (8000ecc <MX_GPIO_Init+0x2fc>)
 8000d3c:	f001 fb40 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d52:	230e      	movs	r3, #14
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	485b      	ldr	r0, [pc, #364]	; (8000ecc <MX_GPIO_Init+0x2fc>)
 8000d5e:	f001 fb2f 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000d62:	2301      	movs	r3, #1
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d72:	230c      	movs	r3, #12
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	484e      	ldr	r0, [pc, #312]	; (8000eb8 <MX_GPIO_Init+0x2e8>)
 8000d7e:	f001 fb1f 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d82:	2316      	movs	r3, #22
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4847      	ldr	r0, [pc, #284]	; (8000eb8 <MX_GPIO_Init+0x2e8>)
 8000d9a:	f001 fb11 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d9e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000da4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4841      	ldr	r0, [pc, #260]	; (8000ebc <MX_GPIO_Init+0x2ec>)
 8000db6:	f001 fb03 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000dba:	f641 0358 	movw	r3, #6232	; 0x1858
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dcc:	230e      	movs	r3, #14
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4839      	ldr	r0, [pc, #228]	; (8000ebc <MX_GPIO_Init+0x2ec>)
 8000dd8:	f001 faf2 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4832      	ldr	r0, [pc, #200]	; (8000ebc <MX_GPIO_Init+0x2ec>)
 8000df4:	f001 fae4 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dfc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	482a      	ldr	r0, [pc, #168]	; (8000eb8 <MX_GPIO_Init+0x2e8>)
 8000e0e:	f001 fad7 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e12:	2303      	movs	r3, #3
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e22:	2309      	movs	r3, #9
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <MX_GPIO_Init+0x2f8>)
 8000e2e:	f001 fac7 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e32:	2304      	movs	r3, #4
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0x2f8>)
 8000e46:	f001 fabb 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000e4a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <MX_GPIO_Init+0x2f4>)
 8000e68:	f001 faaa 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_GPIO_Init+0x300>)
 8000e8a:	f001 fa99 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e8e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ea0:	230e      	movs	r3, #14
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_GPIO_Init+0x2f8>)
 8000eac:	f001 fa88 	bl	80023c0 <HAL_GPIO_Init>
 8000eb0:	e010      	b.n	8000ed4 <MX_GPIO_Init+0x304>
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40021000 	.word	0x40021000

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ed4:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4871      	ldr	r0, [pc, #452]	; (80010b8 <MX_GPIO_Init+0x4e8>)
 8000ef2:	f001 fa65 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	486b      	ldr	r0, [pc, #428]	; (80010b8 <MX_GPIO_Init+0x4e8>)
 8000f0c:	f001 fa58 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000f10:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f22:	230c      	movs	r3, #12
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4863      	ldr	r0, [pc, #396]	; (80010bc <MX_GPIO_Init+0x4ec>)
 8000f2e:	f001 fa47 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	485d      	ldr	r0, [pc, #372]	; (80010bc <MX_GPIO_Init+0x4ec>)
 8000f48:	f001 fa3a 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4855      	ldr	r0, [pc, #340]	; (80010bc <MX_GPIO_Init+0x4ec>)
 8000f66:	f001 fa2b 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f6a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f7c:	230e      	movs	r3, #14
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	484e      	ldr	r0, [pc, #312]	; (80010c0 <MX_GPIO_Init+0x4f0>)
 8000f88:	f001 fa1a 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f8c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f9e:	230e      	movs	r3, #14
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4846      	ldr	r0, [pc, #280]	; (80010c4 <MX_GPIO_Init+0x4f4>)
 8000faa:	f001 fa09 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	483e      	ldr	r0, [pc, #248]	; (80010c4 <MX_GPIO_Init+0x4f4>)
 8000fcc:	f001 f9f8 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4836      	ldr	r0, [pc, #216]	; (80010c8 <MX_GPIO_Init+0x4f8>)
 8000fee:	f001 f9e7 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ff2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001004:	2307      	movs	r3, #7
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	482e      	ldr	r0, [pc, #184]	; (80010c8 <MX_GPIO_Init+0x4f8>)
 8001010:	f001 f9d6 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8001014:	2308      	movs	r3, #8
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001024:	230e      	movs	r3, #14
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <MX_GPIO_Init+0x4ec>)
 8001030:	f001 f9c6 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001046:	2309      	movs	r3, #9
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <MX_GPIO_Init+0x4f0>)
 8001052:	f001 f9b5 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001056:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x4f0>)
 8001070:	f001 f9a6 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : User_LED_Blue_Pin User_LED_White_Pin */
  GPIO_InitStruct.Pin = User_LED_Blue_Pin|User_LED_White_Pin;
 8001074:	2318      	movs	r3, #24
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <MX_GPIO_Init+0x4e8>)
 800108c:	f001 f998 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001090:	2360      	movs	r3, #96	; 0x60
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a0:	230c      	movs	r3, #12
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_GPIO_Init+0x4e8>)
 80010ac:	f001 f988 	bl	80023c0 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3738      	adds	r7, #56	; 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000

080010cc <rtc_report_callback>:

/* USER CODE BEGIN 4 */
void rtc_report_callback( TimerHandle_t xTimer )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 80010d4:	f000 f898 	bl	8001208 <show_time_date_itm>

}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f006 f9ec 	bl	80074c6 <pvTimerGetTimerID>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d816      	bhi.n	8001128 <led_effect_callback+0x48>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <led_effect_callback+0x20>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001111 	.word	0x08001111
 8001104:	08001117 	.word	0x08001117
 8001108:	0800111d 	.word	0x0800111d
 800110c:	08001123 	.word	0x08001123

	 switch(id)
	 {
	 case 1 :
		 LED_effect1();
 8001110:	f7ff fb2c 	bl	800076c <LED_effect1>
		 break;
 8001114:	e008      	b.n	8001128 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8001116:	f7ff fb3f 	bl	8000798 <LED_effect2>
		 break;
 800111a:	e005      	b.n	8001128 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 800111c:	f7ff fb52 	bl	80007c4 <LED_effect3>
		 break;
 8001120:	e002      	b.n	8001128 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8001122:	f7ff fb67 	bl	80007f4 <LED_effect4>
	 }


}
 8001126:	e7ff      	b.n	8001128 <led_effect_callback+0x48>
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_UART_RxCpltCallback>:

/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e002      	b.n	8001144 <HAL_UART_RxCpltCallback+0x14>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800114a:	d3f8      	bcc.n	800113e <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_UART_RxCpltCallback+0x98>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f004 fcea 	bl	8005b2a <xQueueIsQueueFullFromISR>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_UART_RxCpltCallback+0x98>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	2200      	movs	r2, #0
 8001164:	4919      	ldr	r1, [pc, #100]	; (80011cc <HAL_UART_RxCpltCallback+0x9c>)
 8001166:	f004 f999 	bl	800549c <xQueueGenericSendFromISR>
 800116a:	e013      	b.n	8001194 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_UART_RxCpltCallback+0x9c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b0a      	cmp	r3, #10
 8001174:	d10e      	bne.n	8001194 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_UART_RxCpltCallback+0x98>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f107 010b 	add.w	r1, r7, #11
 800117e:	2200      	movs	r2, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fb15 	bl	80057b0 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_UART_RxCpltCallback+0x98>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	2200      	movs	r2, #0
 800118e:	490f      	ldr	r1, [pc, #60]	; (80011cc <HAL_UART_RxCpltCallback+0x9c>)
 8001190:	f004 f984 	bl	800549c <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_UART_RxCpltCallback+0x9c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d10a      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_UART_RxCpltCallback+0xa0>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	f005 fc8a 	bl	8006ac8 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	4905      	ldr	r1, [pc, #20]	; (80011cc <HAL_UART_RxCpltCallback+0x9c>)
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <HAL_UART_RxCpltCallback+0xa4>)
 80011ba:	f002 ffea 	bl	8004192 <HAL_UART_Receive_IT>


}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20012e98 	.word	0x20012e98
 80011cc:	20012ecc 	.word	0x20012ecc
 80011d0:	20012e94 	.word	0x20012e94
 80011d4:	20012ed0 	.word	0x20012ed0

080011d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ea:	f000 ff55 	bl	8002098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40001000 	.word	0x40001000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2204      	movs	r2, #4
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f006 fe7e 	bl	8007f18 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fe78 	bl	8007f18 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <show_time_date_itm+0x7c>)
 8001230:	f002 fa3e 	bl	80036b0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	4811      	ldr	r0, [pc, #68]	; (8001284 <show_time_date_itm+0x7c>)
 800123e:	f002 fb3c 	bl	80038ba <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <show_time_date_itm+0x44>
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <show_time_date_itm+0x80>)
 800124a:	e000      	b.n	800124e <show_time_date_itm+0x46>
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <show_time_date_itm+0x84>)
 800124e:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	4619      	mov	r1, r3
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	461a      	mov	r2, r3
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <show_time_date_itm+0x88>)
 8001264:	f006 fe60 	bl	8007f28 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001268:	7e7b      	ldrb	r3, [r7, #25]
 800126a:	4619      	mov	r1, r3
 800126c:	7ebb      	ldrb	r3, [r7, #26]
 800126e:	461a      	mov	r2, r3
 8001270:	7efb      	ldrb	r3, [r7, #27]
 8001272:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <show_time_date_itm+0x8c>)
 8001278:	f006 fe56 	bl	8007f28 <iprintf>

 }
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20012ea4 	.word	0x20012ea4
 8001288:	080091d0 	.word	0x080091d0
 800128c:	080091d4 	.word	0x080091d4
 8001290:	080091d8 	.word	0x080091d8
 8001294:	080091ec 	.word	0x080091ec

08001298 <show_time_date>:

void show_time_date(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	2204      	movs	r2, #4
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f006 fe36 	bl	8007f18 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2214      	movs	r2, #20
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 fe30 	bl	8007f18 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <show_time_date+0xac>)
 80012c0:	f002 f9f6 	bl	80036b0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <show_time_date+0xac>)
 80012ce:	f002 faf4 	bl	80038ba <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <show_time_date+0x44>
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <show_time_date+0xb0>)
 80012da:	e000      	b.n	80012de <show_time_date+0x46>
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <show_time_date+0xb4>)
 80012de:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80012e0:	793b      	ldrb	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	461a      	mov	r2, r3
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	4619      	mov	r1, r3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	9101      	str	r1, [sp, #4]
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <show_time_date+0xb8>)
 80012f8:	4916      	ldr	r1, [pc, #88]	; (8001354 <show_time_date+0xbc>)
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <show_time_date+0xc0>)
 80012fc:	f006 fe2c 	bl	8007f58 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <show_time_date+0xc4>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	f04f 32ff 	mov.w	r2, #4294967295
 800130a:	4915      	ldr	r1, [pc, #84]	; (8001360 <show_time_date+0xc8>)
 800130c:	f003 ffc8 	bl	80052a0 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001310:	7e7b      	ldrb	r3, [r7, #25]
 8001312:	461a      	mov	r2, r3
 8001314:	7ebb      	ldrb	r3, [r7, #26]
 8001316:	4619      	mov	r1, r3
 8001318:	7efb      	ldrb	r3, [r7, #27]
 800131a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	460b      	mov	r3, r1
 8001322:	4910      	ldr	r1, [pc, #64]	; (8001364 <show_time_date+0xcc>)
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <show_time_date+0xd0>)
 8001326:	f006 fe17 	bl	8007f58 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <show_time_date+0xc4>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	490d      	ldr	r1, [pc, #52]	; (800136c <show_time_date+0xd4>)
 8001336:	f003 ffb3 	bl	80052a0 <xQueueGenericSend>
}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20012ea4 	.word	0x20012ea4
 8001348:	080091d0 	.word	0x080091d0
 800134c:	080091d4 	.word	0x080091d4
 8001350:	080091fc 	.word	0x080091fc
 8001354:	08009210 	.word	0x08009210
 8001358:	200000b4 	.word	0x200000b4
 800135c:	20012ea0 	.word	0x20012ea0
 8001360:	20000008 	.word	0x20000008
 8001364:	080091ec 	.word	0x080091ec
 8001368:	200000dc 	.word	0x200000dc
 800136c:	2000000c 	.word	0x2000000c

08001370 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800138a:	2200      	movs	r2, #0
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <rtc_configure_time+0x2c>)
 8001390:	f002 f8d1 	bl	8003536 <HAL_RTC_SetTime>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20012ea4 	.word	0x20012ea4

080013a0 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <rtc_configure_date+0x1c>)
 80013ae:	f002 f9dd 	bl	800376c <HAL_RTC_SetDate>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20012ea4 	.word	0x20012ea4

080013c0 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	if(time){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00d      	beq.n	80013ec <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d807      	bhi.n	80013e8 <validate_rtc_information+0x28>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	2b3b      	cmp	r3, #59	; 0x3b
 80013de:	d803      	bhi.n	80013e8 <validate_rtc_information+0x28>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	2b3b      	cmp	r3, #59	; 0x3b
 80013e6:	d901      	bls.n	80013ec <validate_rtc_information+0x2c>
			return 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e015      	b.n	8001418 <validate_rtc_information+0x58>
	}

	if(date){
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d011      	beq.n	8001416 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	2b1f      	cmp	r3, #31
 80013f8:	d80b      	bhi.n	8001412 <validate_rtc_information+0x52>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	d807      	bhi.n	8001412 <validate_rtc_information+0x52>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	2b63      	cmp	r3, #99	; 0x63
 8001408:	d803      	bhi.n	8001412 <validate_rtc_information+0x52>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d901      	bls.n	8001416 <validate_rtc_information+0x56>
			return 1;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <validate_rtc_information+0x58>
	}

	return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8001462:	f006 f981 	bl	8007768 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2230      	movs	r2, #48	; 0x30
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f006 fd47 	bl	8007f18 <memset>
  if(hrtc->Instance==RTC)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_RTC_MspInit+0x4c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d111      	bne.n	80014b8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001494:	2320      	movs	r3, #32
 8001496:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fdf8 	bl	8003098 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014ae:	f7ff fea5 	bl	80011fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_RTC_MspInit+0x50>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3738      	adds	r7, #56	; 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40002800 	.word	0x40002800
 80014c4:	42470e3c 	.word	0x42470e3c

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_UART_MspInit+0x94>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d133      	bne.n	8001552 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_UART_MspInit+0x98>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_UART_MspInit+0x98>)
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_UART_MspInit+0x98>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_UART_MspInit+0x98>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_UART_MspInit+0x98>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_UART_MspInit+0x98>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001522:	2360      	movs	r3, #96	; 0x60
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001532:	2307      	movs	r3, #7
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <HAL_UART_MspInit+0x9c>)
 800153e:	f000 ff3f 	bl	80023c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2106      	movs	r1, #6
 8001546:	2026      	movs	r0, #38	; 0x26
 8001548:	f000 fe7e 	bl	8002248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800154c:	2026      	movs	r0, #38	; 0x26
 800154e:	f000 fe97 	bl	8002280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40004400 	.word	0x40004400
 8001560:	40023800 	.word	0x40023800
 8001564:	40020c00 	.word	0x40020c00

08001568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2036      	movs	r0, #54	; 0x36
 800157e:	f000 fe63 	bl	8002248 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	; 0x36
 8001584:	f000 fe7c 	bl	8002280 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_InitTick+0xa4>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_InitTick+0xa4>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_InitTick+0xa4>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a4:	f107 0210 	add.w	r2, r7, #16
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fd40 	bl	8003034 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015b4:	f001 fd16 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80015b8:	4603      	mov	r3, r0
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	4a13      	ldr	r2, [pc, #76]	; (8001610 <HAL_InitTick+0xa8>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	3b01      	subs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_InitTick+0xac>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_InitTick+0xb0>)
 80015d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_InitTick+0xac>)
 80015d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_InitTick+0xac>)
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_InitTick+0xac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_InitTick+0xac>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_InitTick+0xac>)
 80015ee:	f002 fa43 	bl	8003a78 <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d104      	bne.n	8001602 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <HAL_InitTick+0xac>)
 80015fa:	f002 fa97 	bl	8003b2c <HAL_TIM_Base_Start_IT>
 80015fe:	4603      	mov	r3, r0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3730      	adds	r7, #48	; 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	431bde83 	.word	0x431bde83
 8001614:	20012f14 	.word	0x20012f14
 8001618:	40001000 	.word	0x40001000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART2_IRQHandler+0x10>)
 800164e:	f002 fdd1 	bl	80041f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20012ed0 	.word	0x20012ed0

0800165c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM6_DAC_IRQHandler+0x10>)
 8001662:	f002 fad3 	bl	8003c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20012f14 	.word	0x20012f14

08001670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e00a      	b.n	8001698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001682:	f3af 8000 	nop.w
 8001686:	4601      	mov	r1, r0
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	b2ca      	uxtb	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf0      	blt.n	8001682 <_read+0x12>
	}

return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e009      	b.n	80016d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf1      	blt.n	80016bc <_write+0x12>
	}
	return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170a:	605a      	str	r2, [r3, #4]
	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f006 fb94 	bl	8007ea8 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20030000 	.word	0x20030000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20000104 	.word	0x20000104
 80017b4:	20012fb0 	.word	0x20012fb0

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <menu_task+0xd0>)
 80017e6:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <menu_task+0xd4>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f107 0108 	add.w	r1, r7, #8
 80017f0:	2300      	movs	r3, #0
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	f003 fd53 	bl	80052a0 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001802:	9200      	str	r2, [sp, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2000      	movs	r0, #0
 800180a:	f004 fffd 	bl	8006808 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d133      	bne.n	8001882 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3b30      	subs	r3, #48	; 0x30
 8001820:	613b      	str	r3, [r7, #16]
			switch(option)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d035      	beq.n	8001894 <menu_task+0xb8>
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b02      	cmp	r3, #2
 800182c:	dc20      	bgt.n	8001870 <menu_task+0x94>
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <menu_task+0x60>
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d00d      	beq.n	8001856 <menu_task+0x7a>
 800183a:	e019      	b.n	8001870 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <menu_task+0xd8>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <menu_task+0xdc>)
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2300      	movs	r3, #0
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	f005 f85a 	bl	8006908 <xTaskGenericNotify>
					break;
 8001854:	e01f      	b.n	8001896 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <menu_task+0xd8>)
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <menu_task+0xe0>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	f005 f84d 	bl	8006908 <xTaskGenericNotify>
					break;
 800186e:	e012      	b.n	8001896 <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <menu_task+0xd4>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	f04f 32ff 	mov.w	r2, #4294967295
 800187a:	4911      	ldr	r1, [pc, #68]	; (80018c0 <menu_task+0xe4>)
 800187c:	f003 fd10 	bl	80052a0 <xQueueGenericSend>
					continue;
 8001880:	e012      	b.n	80018a8 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <menu_task+0xd4>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <menu_task+0xe4>)
 800188e:	f003 fd07 	bl	80052a0 <xQueueGenericSend>
			continue;
 8001892:	e009      	b.n	80018a8 <menu_task+0xcc>
					break;
 8001894:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2000      	movs	r0, #0
 80018a4:	f004 ffb0 	bl	8006808 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80018a8:	e79e      	b.n	80017e8 <menu_task+0xc>
 80018aa:	bf00      	nop
 80018ac:	08009240 	.word	0x08009240
 80018b0:	20012ea0 	.word	0x20012ea0
 80018b4:	200000b0 	.word	0x200000b0
 80018b8:	20012ec8 	.word	0x20012ec8
 80018bc:	20012e90 	.word	0x20012e90
 80018c0:	20000014 	.word	0x20000014

080018c4 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <led_task+0x104>)
 80018ce:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2000      	movs	r0, #0
 80018de:	f004 ff93 	bl	8006808 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <led_task+0x108>)
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	f107 010c 	add.w	r1, r7, #12
 80018ea:	2300      	movs	r3, #0
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	f003 fcd6 	bl	80052a0 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	9200      	str	r2, [sp, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2000      	movs	r0, #0
 8001904:	f004 ff80 	bl	8006808 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d843      	bhi.n	800199c <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	492e      	ldr	r1, [pc, #184]	; (80019d0 <led_task+0x10c>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc69 	bl	80001f0 <strcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <led_task+0x66>
				led_effect_stop();
 8001924:	f7fe fe48 	bl	80005b8 <led_effect_stop>
 8001928:	e040      	b.n	80019ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4929      	ldr	r1, [pc, #164]	; (80019d4 <led_task+0x110>)
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fc5e 	bl	80001f0 <strcmp>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <led_task+0x7e>
				led_effect(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f7fe fe5c 	bl	80005f8 <led_effect>
 8001940:	e034      	b.n	80019ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4924      	ldr	r1, [pc, #144]	; (80019d8 <led_task+0x114>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fc52 	bl	80001f0 <strcmp>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <led_task+0x96>
				led_effect(2);
 8001952:	2002      	movs	r0, #2
 8001954:	f7fe fe50 	bl	80005f8 <led_effect>
 8001958:	e028      	b.n	80019ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	491f      	ldr	r1, [pc, #124]	; (80019dc <led_task+0x118>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc46 	bl	80001f0 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <led_task+0xae>
				led_effect(3);
 800196a:	2003      	movs	r0, #3
 800196c:	f7fe fe44 	bl	80005f8 <led_effect>
 8001970:	e01c      	b.n	80019ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	491a      	ldr	r1, [pc, #104]	; (80019e0 <led_task+0x11c>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fc3a 	bl	80001f0 <strcmp>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <led_task+0xc6>
				led_effect(4);
 8001982:	2004      	movs	r0, #4
 8001984:	f7fe fe38 	bl	80005f8 <led_effect>
 8001988:	e010      	b.n	80019ac <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <led_task+0x108>)
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	4913      	ldr	r1, [pc, #76]	; (80019e4 <led_task+0x120>)
 8001996:	f003 fc83 	bl	80052a0 <xQueueGenericSend>
 800199a:	e007      	b.n	80019ac <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <led_task+0x108>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295
 80019a6:	490f      	ldr	r1, [pc, #60]	; (80019e4 <led_task+0x120>)
 80019a8:	f003 fc7a 	bl	80052a0 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <led_task+0x124>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <led_task+0x128>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	f004 ffa2 	bl	8006908 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80019c4:	e784      	b.n	80018d0 <led_task+0xc>
 80019c6:	bf00      	nop
 80019c8:	080092e8 	.word	0x080092e8
 80019cc:	20012ea0 	.word	0x20012ea0
 80019d0:	08009360 	.word	0x08009360
 80019d4:	08009368 	.word	0x08009368
 80019d8:	0800936c 	.word	0x0800936c
 80019dc:	08009370 	.word	0x08009370
 80019e0:	08009374 	.word	0x08009374
 80019e4:	20000014 	.word	0x20000014
 80019e8:	200000b0 	.word	0x200000b0
 80019ec:	20012e9c 	.word	0x20012e9c

080019f0 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	dd0f      	ble.n	8001a20 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3301      	adds	r3, #1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b30      	subs	r3, #48	; 0x30
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e003      	b.n	8001a28 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3b30      	subs	r3, #48	; 0x30
 8001a26:	60fb      	str	r3, [r7, #12]

	return value;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	b2db      	uxtb	r3, r3

}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <rtc_task>:

void rtc_task(void *param)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b09b      	sub	sp, #108	; 0x6c
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001a40:	4bb2      	ldr	r3, [pc, #712]	; (8001d0c <rtc_task+0x2d4>)
 8001a42:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001a44:	4bb2      	ldr	r3, [pc, #712]	; (8001d10 <rtc_task+0x2d8>)
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001a48:	4bb2      	ldr	r3, [pc, #712]	; (8001d14 <rtc_task+0x2dc>)
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001a4c:	4bb2      	ldr	r3, [pc, #712]	; (8001d18 <rtc_task+0x2e0>)
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001a50:	4bb2      	ldr	r3, [pc, #712]	; (8001d1c <rtc_task+0x2e4>)
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001a54:	4bb2      	ldr	r3, [pc, #712]	; (8001d20 <rtc_task+0x2e8>)
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001a58:	4bb2      	ldr	r3, [pc, #712]	; (8001d24 <rtc_task+0x2ec>)
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001a5c:	4bb2      	ldr	r3, [pc, #712]	; (8001d28 <rtc_task+0x2f0>)
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001a60:	4bb2      	ldr	r3, [pc, #712]	; (8001d2c <rtc_task+0x2f4>)
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001a64:	4bb2      	ldr	r3, [pc, #712]	; (8001d30 <rtc_task+0x2f8>)
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001a68:	4bb2      	ldr	r3, [pc, #712]	; (8001d34 <rtc_task+0x2fc>)
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f004 fec5 	bl	8006808 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001a7e:	4bae      	ldr	r3, [pc, #696]	; (8001d38 <rtc_task+0x300>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001a86:	2300      	movs	r3, #0
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	f003 fc08 	bl	80052a0 <xQueueGenericSend>
		show_time_date();
 8001a90:	f7ff fc02 	bl	8001298 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8001a94:	4ba8      	ldr	r3, [pc, #672]	; (8001d38 <rtc_task+0x300>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	f003 fbfd 	bl	80052a0 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 8001aa6:	bf00      	nop
 8001aa8:	e1e1      	b.n	8001e6e <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab2:	9200      	str	r2, [sp, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f004 fea5 	bl	8006808 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 8001ac2:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <rtc_task+0x304>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	3b02      	subs	r3, #2
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	f200 81d0 	bhi.w	8001e6e <rtc_task+0x436>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <rtc_task+0x9c>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001b97 	.word	0x08001b97
 8001adc:	08001c85 	.word	0x08001c85
 8001ae0:	08001deb 	.word	0x08001deb
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d148      	bne.n	8001b7e <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 8001aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3b30      	subs	r3, #48	; 0x30
 8001af2:	653b      	str	r3, [r7, #80]	; 0x50
 8001af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d835      	bhi.n	8001b66 <rtc_task+0x12e>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <rtc_task+0xc8>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b2b 	.word	0x08001b2b
 8001b08:	08001b45 	.word	0x08001b45
 8001b0c:	08001b5f 	.word	0x08001b5f
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001b10:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <rtc_task+0x304>)
 8001b12:	2203      	movs	r2, #3
 8001b14:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <rtc_task+0x300>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	f003 fbbc 	bl	80052a0 <xQueueGenericSend>
							break;
 8001b28:	e034      	b.n	8001b94 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 8001b2a:	4b84      	ldr	r3, [pc, #528]	; (8001d3c <rtc_task+0x304>)
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <rtc_task+0x300>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3e:	f003 fbaf 	bl	80052a0 <xQueueGenericSend>
							break;
 8001b42:	e027      	b.n	8001b94 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <rtc_task+0x304>)
 8001b46:	2205      	movs	r2, #5
 8001b48:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 8001b4a:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <rtc_task+0x300>)
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b52:	2300      	movs	r3, #0
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	f003 fba2 	bl	80052a0 <xQueueGenericSend>
							break;
 8001b5c:	e01a      	b.n	8001b94 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 8001b5e:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <rtc_task+0x304>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
							break;
 8001b64:	e016      	b.n	8001b94 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 8001b66:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <rtc_task+0x304>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b6c:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <rtc_task+0x300>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	f04f 32ff 	mov.w	r2, #4294967295
 8001b76:	4972      	ldr	r1, [pc, #456]	; (8001d40 <rtc_task+0x308>)
 8001b78:	f003 fb92 	bl	80052a0 <xQueueGenericSend>
 8001b7c:	e177      	b.n	8001e6e <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <rtc_task+0x304>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b84:	4b6c      	ldr	r3, [pc, #432]	; (8001d38 <rtc_task+0x300>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	496c      	ldr	r1, [pc, #432]	; (8001d40 <rtc_task+0x308>)
 8001b90:	f003 fb86 	bl	80052a0 <xQueueGenericSend>
					}
					break;}
 8001b94:	e16b      	b.n	8001e6e <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8001b96:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <rtc_task+0x30c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d03b      	beq.n	8001c16 <rtc_task+0x1de>
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	f300 8165 	bgt.w	8001e6e <rtc_task+0x436>
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <rtc_task+0x176>
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d01a      	beq.n	8001be2 <rtc_task+0x1aa>
 8001bac:	e15f      	b.n	8001e6e <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001bae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7ff ff1a 	bl	80019f0 <getnumber>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 8001bc2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001bc6:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <rtc_task+0x30c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8001bce:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <rtc_task+0x300>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	f003 fb60 	bl	80052a0 <xQueueGenericSend>
								break;}
 8001be0:	e04f      	b.n	8001c82 <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 8001be2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff ff00 	bl	80019f0 <getnumber>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8001bf6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bfa:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 8001bfc:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <rtc_task+0x30c>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8001c02:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <rtc_task+0x300>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	f003 fb46 	bl	80052a0 <xQueueGenericSend>
								break;}
 8001c14:	e035      	b.n	8001c82 <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001c16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f7ff fee6 	bl	80019f0 <getnumber>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c2e:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fbc2 	bl	80013c0 <validate_rtc_information>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d110      	bne.n	8001c64 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb92 	bl	8001370 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <rtc_task+0x300>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c54:	2300      	movs	r3, #0
 8001c56:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5a:	f003 fb21 	bl	80052a0 <xQueueGenericSend>
									show_time_date();
 8001c5e:	f7ff fb1b 	bl	8001298 <show_time_date>
 8001c62:	e007      	b.n	8001c74 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <rtc_task+0x300>)
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6e:	4934      	ldr	r1, [pc, #208]	; (8001d40 <rtc_task+0x308>)
 8001c70:	f003 fb16 	bl	80052a0 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <rtc_task+0x304>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <rtc_task+0x30c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
								break;}
 8001c80:	bf00      	nop
						}

					break;}
 8001c82:	e0f4      	b.n	8001e6e <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <rtc_task+0x30c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	f200 80f0 	bhi.w	8001e6e <rtc_task+0x436>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <rtc_task+0x25c>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001cd9 	.word	0x08001cd9
 8001c9c:	08001d7d 	.word	0x08001d7d
 8001ca0:	08001d49 	.word	0x08001d49
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f7ff fe9f 	bl	80019f0 <getnumber>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001cb8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001cbc:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <rtc_task+0x30c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <rtc_task+0x300>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd2:	f003 fae5 	bl	80052a0 <xQueueGenericSend>
								break;}
 8001cd6:	e087      	b.n	8001de8 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	f7ff fe85 	bl	80019f0 <getnumber>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001cec:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001cf0:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <rtc_task+0x30c>)
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <rtc_task+0x300>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d00:	2300      	movs	r3, #0
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	f003 facb 	bl	80052a0 <xQueueGenericSend>
								break;}
 8001d0a:	e06d      	b.n	8001de8 <rtc_task+0x3b0>
 8001d0c:	08009378 	.word	0x08009378
 8001d10:	080093c4 	.word	0x080093c4
 8001d14:	08009468 	.word	0x08009468
 8001d18:	0800947c 	.word	0x0800947c
 8001d1c:	08009494 	.word	0x08009494
 8001d20:	080094ac 	.word	0x080094ac
 8001d24:	080094c0 	.word	0x080094c0
 8001d28:	080094d4 	.word	0x080094d4
 8001d2c:	080094ec 	.word	0x080094ec
 8001d30:	08009500 	.word	0x08009500
 8001d34:	0800951c 	.word	0x0800951c
 8001d38:	20012ea0 	.word	0x20012ea0
 8001d3c:	200000b0 	.word	0x200000b0
 8001d40:	20000014 	.word	0x20000014
 8001d44:	20000108 	.word	0x20000108
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f7ff fe4d 	bl	80019f0 <getnumber>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001d5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d60:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <rtc_task+0x454>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001d68:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <rtc_task+0x458>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001d70:	2300      	movs	r3, #0
 8001d72:	f04f 32ff 	mov.w	r2, #4294967295
 8001d76:	f003 fa93 	bl	80052a0 <xQueueGenericSend>
								break;}
 8001d7a:	e035      	b.n	8001de8 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f7ff fe33 	bl	80019f0 <getnumber>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001d90:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001d94:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fb0f 	bl	80013c0 <validate_rtc_information>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d110      	bne.n	8001dca <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff faf7 	bl	80013a0 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <rtc_task+0x458>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	f003 fa6e 	bl	80052a0 <xQueueGenericSend>
									show_time_date();
 8001dc4:	f7ff fa68 	bl	8001298 <show_time_date>
 8001dc8:	e007      	b.n	8001dda <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <rtc_task+0x458>)
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	492f      	ldr	r1, [pc, #188]	; (8001e94 <rtc_task+0x45c>)
 8001dd6:	f003 fa63 	bl	80052a0 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <rtc_task+0x460>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <rtc_task+0x454>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
								break;}
 8001de6:	bf00      	nop
						}


					break;}
 8001de8:	e041      	b.n	8001e6e <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d131      	bne.n	8001e56 <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b79      	cmp	r3, #121	; 0x79
 8001df8:	d115      	bne.n	8001e26 <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <rtc_task+0x464>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fb38 	bl	8007474 <xTimerIsTimerActive>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d12d      	bne.n	8001e66 <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <rtc_task+0x464>)
 8001e0c:	681c      	ldr	r4, [r3, #0]
 8001e0e:	f004 f953 	bl	80060b8 <xTaskGetTickCount>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f005 f848 	bl	8006eb4 <xTimerGenericCommand>
 8001e24:	e01f      	b.n	8001e66 <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b6e      	cmp	r3, #110	; 0x6e
 8001e2c:	d10a      	bne.n	8001e44 <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <rtc_task+0x464>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	f005 f839 	bl	8006eb4 <xTimerGenericCommand>
 8001e42:	e010      	b.n	8001e66 <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <rtc_task+0x458>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4e:	4911      	ldr	r1, [pc, #68]	; (8001e94 <rtc_task+0x45c>)
 8001e50:	f003 fa26 	bl	80052a0 <xQueueGenericSend>
 8001e54:	e007      	b.n	8001e66 <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <rtc_task+0x458>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <rtc_task+0x45c>)
 8001e62:	f003 fa1d 	bl	80052a0 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <rtc_task+0x460>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
					break;}
 8001e6c:	bf00      	nop
		while(curr_state != sMainMenu){
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <rtc_task+0x460>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f47f ae19 	bne.w	8001aaa <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <rtc_task+0x468>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	f004 fd3f 	bl	8006908 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001e8a:	e5ef      	b.n	8001a6c <rtc_task+0x34>
 8001e8c:	20000108 	.word	0x20000108
 8001e90:	20012ea0 	.word	0x20012ea0
 8001e94:	20000014 	.word	0x20000014
 8001e98:	200000b0 	.word	0x200000b0
 8001e9c:	20012e8c 	.word	0x20012e8c
 8001ea0:	20012e9c 	.word	0x20012e9c

08001ea4 <print_task>:
}



void print_task(void *param)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <print_task+0x38>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f107 010c 	add.w	r1, r7, #12
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fb99 	bl	80055f0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001ebe:	68fc      	ldr	r4, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe f99e 	bl	8000204 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <print_task+0x3c>)
 8001ed4:	f002 f8cb 	bl	800406e <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001ed8:	e7e8      	b.n	8001eac <print_task+0x8>
 8001eda:	bf00      	nop
 8001edc:	20012ea0 	.word	0x20012ea0
 8001ee0:	20012ed0 	.word	0x20012ed0

08001ee4 <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f004 fc85 	bl	8006808 <xTaskGenericNotifyWait>
 8001efe:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d1f2      	bne.n	8001eec <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f802 	bl	8001f14 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001f10:	e7ec      	b.n	8001eec <cmd_handler_task+0x8>
	...

08001f14 <process_command>:

}


void process_command(command_t *cmd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f835 	bl	8001f8c <extract_command>

	switch(curr_state)
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <process_command+0x68>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	dc24      	bgt.n	8001f74 <process_command+0x60>
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	da18      	bge.n	8001f60 <process_command+0x4c>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <process_command+0x24>
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d00a      	beq.n	8001f4c <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001f36:	e01d      	b.n	8001f74 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <process_command+0x6c>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2303      	movs	r3, #3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f004 fcdf 	bl	8006908 <xTaskGenericNotify>
		break;
 8001f4a:	e013      	b.n	8001f74 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <process_command+0x70>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	2300      	movs	r3, #0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2303      	movs	r3, #3
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f004 fcd5 	bl	8006908 <xTaskGenericNotify>
		break;
 8001f5e:	e009      	b.n	8001f74 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <process_command+0x74>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f004 fccb 	bl	8006908 <xTaskGenericNotify>
		break;
 8001f72:	bf00      	nop
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200000b0 	.word	0x200000b0
 8001f80:	20012e9c 	.word	0x20012e9c
 8001f84:	20012ec8 	.word	0x20012ec8
 8001f88:	20012e90 	.word	0x20012e90

08001f8c <extract_command>:


int extract_command(command_t *cmd)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <extract_command+0x70>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 fc98 	bl	80058ce <uxQueueMessagesWaiting>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <extract_command+0x22>
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	e022      	b.n	8001ff4 <extract_command+0x68>
	uint8_t i =0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <extract_command+0x70>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f107 010f 	add.w	r1, r7, #15
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fb17 	bl	80055f0 <xQueueReceive>
 8001fc2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <extract_command+0x4c>
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	75fa      	strb	r2, [r7, #23]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	7bf9      	ldrb	r1, [r7, #15]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b0a      	cmp	r3, #10
 8001fdc:	d1e9      	bne.n	8001fb2 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60da      	str	r2, [r3, #12]

	return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20012e98 	.word	0x20012e98

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800202a:	f7ff fbc5 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f005 ff41 	bl	8007eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7fe fbf7 	bl	8000824 <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002038:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002044:	08009618 	.word	0x08009618
  ldr r2, =_sbss
 8002048:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800204c:	20012fb0 	.word	0x20012fb0

08002050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC_IRQHandler>
	...

08002054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_Init+0x40>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_Init+0x40>)
 800206a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x40>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f8d8 	bl	8002232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff fa70 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff f9cc 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	2000001c 	.word	0x2000001c
 80020bc:	20012f5c 	.word	0x20012f5c

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20012f5c 	.word	0x20012f5c

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff4c 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225a:	f7ff ff61 	bl	8002120 <__NVIC_GetPriorityGrouping>
 800225e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	f7ff ffb1 	bl	80021cc <NVIC_EncodePriority>
 800226a:	4602      	mov	r2, r0
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff80 	bl	8002178 <__NVIC_SetPriority>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff54 	bl	800213c <__NVIC_EnableIRQ>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022aa:	f7ff ff09 	bl	80020c0 <HAL_GetTick>
 80022ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e052      	b.n	8002374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0216 	bic.w	r2, r2, #22
 80022dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <HAL_DMA_Abort+0x62>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0208 	bic.w	r2, r2, #8
 800230c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231e:	e013      	b.n	8002348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002320:	f7ff fece 	bl	80020c0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b05      	cmp	r3, #5
 800232c:	d90c      	bls.n	8002348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e015      	b.n	8002374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e4      	bne.n	8002320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d004      	beq.n	800239a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00c      	b.n	80023b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2205      	movs	r2, #5
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e177      	b.n	80026cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8166 	bne.w	80026c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80c0 	beq.w	80026c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a61      	ldr	r2, [pc, #388]	; (80026e8 <HAL_GPIO_Init+0x328>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_GPIO_Init+0x32c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d037      	beq.n	80025fe <HAL_GPIO_Init+0x23e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_GPIO_Init+0x330>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d031      	beq.n	80025fa <HAL_GPIO_Init+0x23a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a56      	ldr	r2, [pc, #344]	; (80026f4 <HAL_GPIO_Init+0x334>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x236>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <HAL_GPIO_Init+0x338>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x232>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_GPIO_Init+0x33c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x22e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a53      	ldr	r2, [pc, #332]	; (8002700 <HAL_GPIO_Init+0x340>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x22a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_GPIO_Init+0x344>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a51      	ldr	r2, [pc, #324]	; (8002708 <HAL_GPIO_Init+0x348>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_GPIO_Init+0x34c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_GPIO_Init+0x350>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x21a>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e012      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025da:	230a      	movs	r3, #10
 80025dc:	e010      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025de:	2308      	movs	r3, #8
 80025e0:	e00e      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fe:	2300      	movs	r3, #0
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002610:	4935      	ldr	r1, [pc, #212]	; (80026e8 <HAL_GPIO_Init+0x328>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_GPIO_Init+0x354>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002642:	4a34      	ldr	r2, [pc, #208]	; (8002714 <HAL_GPIO_Init+0x354>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <HAL_GPIO_Init+0x354>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <HAL_GPIO_Init+0x354>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_GPIO_Init+0x354>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_GPIO_Init+0x354>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_GPIO_Init+0x354>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <HAL_GPIO_Init+0x354>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f67f ae84 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40013800 	.word	0x40013800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	40020400 	.word	0x40020400
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020c00 	.word	0x40020c00
 80026fc:	40021000 	.word	0x40021000
 8002700:	40021400 	.word	0x40021400
 8002704:	40021800 	.word	0x40021800
 8002708:	40021c00 	.word	0x40021c00
 800270c:	40022000 	.word	0x40022000
 8002710:	40022400 	.word	0x40022400
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002734:	e003      	b.n	800273e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e264      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d075      	beq.n	8002856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276a:	4ba3      	ldr	r3, [pc, #652]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d00c      	beq.n	8002790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d112      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b9d      	ldr	r3, [pc, #628]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278e:	d10b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	4b99      	ldr	r3, [pc, #612]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05b      	beq.n	8002854 <HAL_RCC_OscConfig+0x108>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e23f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x74>
 80027b2:	4b91      	ldr	r3, [pc, #580]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a90      	ldr	r2, [pc, #576]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a8a      	ldr	r2, [pc, #552]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027e4:	4b84      	ldr	r3, [pc, #528]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a83      	ldr	r2, [pc, #524]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff fc5c 	bl	80020c0 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff fc58 	bl	80020c0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e204      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xc0>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fc48 	bl	80020c0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff fc44 	bl	80020c0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1f0      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0xe8>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1c4      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4952      	ldr	r1, [pc, #328]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e03a      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_OscConfig+0x2b0>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7ff fbfd 	bl	80020c0 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7ff fbf9 	bl	80020c0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1a5      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4940      	ldr	r1, [pc, #256]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x2b0>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff fbdc 	bl	80020c0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290c:	f7ff fbd8 	bl	80020c0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e184      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d030      	beq.n	8002998 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d016      	beq.n	800296c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_RCC_OscConfig+0x2b4>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7ff fbbc 	bl	80020c0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7ff fbb8 	bl	80020c0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e164      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x200>
 800296a:	e015      	b.n	8002998 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296c:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x2b4>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7ff fba5 	bl	80020c0 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297a:	f7ff fba1 	bl	80020c0 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e14d      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a0 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_OscConfig+0x2b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_RCC_OscConfig+0x2b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_RCC_OscConfig+0x2b8>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7ff fb67 	bl	80020c0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e011      	b.n	8002a1a <HAL_RCC_OscConfig+0x2ce>
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
 8002a04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7ff fb5a 	bl	80020c0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e106      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <HAL_RCC_OscConfig+0x4e4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
 8002a2e:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a80      	ldr	r2, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	e01c      	b.n	8002a76 <HAL_RCC_OscConfig+0x32a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x312>
 8002a44:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a7a      	ldr	r2, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x32a>
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a74      	ldr	r2, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7ff fb1f 	bl	80020c0 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7ff fb1b 	bl	80020c0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0c5      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCC_OscConfig+0x33a>
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff fb09 	bl	80020c0 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7ff fb05 	bl	80020c0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0af      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 809b 	beq.w	8002c26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d05c      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d141      	bne.n	8002b88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7ff fad9 	bl	80020c0 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7ff fad5 	bl	80020c0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e081      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b24:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	019b      	lsls	r3, r3, #6
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	4937      	ldr	r1, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff faae 	bl	80020c0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7ff faaa 	bl	80020c0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e056      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x41c>
 8002b86:	e04e      	b.n	8002c26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7ff fa97 	bl	80020c0 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b96:	f7ff fa93 	bl	80020c0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e03f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x44a>
 8002bb4:	e037      	b.n	8002c26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e032      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_RCC_OscConfig+0x4e8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d028      	beq.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d11a      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d111      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40007000 	.word	0x40007000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470060 	.word	0x42470060

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cc      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90c      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d044      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e067      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4934      	ldr	r1, [pc, #208]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7ff f9c8 	bl	80020c0 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7ff f9c4 	bl	80020c0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d20c      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f821 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490a      	ldr	r1, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fbc0 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	08009558 	.word	0x08009558
 8002e00:	20000010 	.word	0x20000010
 8002e04:	20000018 	.word	0x20000018

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e20:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d00d      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	f200 80bd 	bhi.w	8002fac <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x34>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e3a:	e0b7      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e3e:	60bb      	str	r3, [r7, #8]
       break;
 8002e40:	e0b7      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e42:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e44:	60bb      	str	r3, [r7, #8]
      break;
 8002e46:	e0b4      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b5b      	ldr	r3, [pc, #364]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d04d      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	461a      	mov	r2, r3
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	ea02 0800 	and.w	r8, r2, r0
 8002e76:	ea03 0901 	and.w	r9, r3, r1
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	014b      	lsls	r3, r1, #5
 8002e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e8c:	0142      	lsls	r2, r0, #5
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	ebb0 0008 	subs.w	r0, r0, r8
 8002e96:	eb61 0109 	sbc.w	r1, r1, r9
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ea8:	0182      	lsls	r2, r0, #6
 8002eaa:	1a12      	subs	r2, r2, r0
 8002eac:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb0:	f04f 0000 	mov.w	r0, #0
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	00d9      	lsls	r1, r3, #3
 8002eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ebe:	00d0      	lsls	r0, r2, #3
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	eb12 0208 	adds.w	r2, r2, r8
 8002ec8:	eb43 0309 	adc.w	r3, r3, r9
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	0259      	lsls	r1, r3, #9
 8002ed6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eda:	0250      	lsls	r0, r2, #9
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f7fd f9e8 	bl	80002c0 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e04a      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	461a      	mov	r2, r3
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	ea02 0400 	and.w	r4, r2, r0
 8002f12:	ea03 0501 	and.w	r5, r3, r1
 8002f16:	4620      	mov	r0, r4
 8002f18:	4629      	mov	r1, r5
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	014b      	lsls	r3, r1, #5
 8002f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f28:	0142      	lsls	r2, r0, #5
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	1b00      	subs	r0, r0, r4
 8002f30:	eb61 0105 	sbc.w	r1, r1, r5
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	018b      	lsls	r3, r1, #6
 8002f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f42:	0182      	lsls	r2, r0, #6
 8002f44:	1a12      	subs	r2, r2, r0
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	f04f 0000 	mov.w	r0, #0
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	00d9      	lsls	r1, r3, #3
 8002f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f58:	00d0      	lsls	r0, r2, #3
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	1912      	adds	r2, r2, r4
 8002f60:	eb45 0303 	adc.w	r3, r5, r3
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	0299      	lsls	r1, r3, #10
 8002f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f72:	0290      	lsls	r0, r2, #10
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f7fd f99c 	bl	80002c0 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	60bb      	str	r3, [r7, #8]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fae:	60bb      	str	r3, [r7, #8]
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000010 	.word	0x20000010

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08009568 	.word	0x08009568

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	08009568 	.word	0x08009568

08003034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	220f      	movs	r2, #15
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_GetClockConfig+0x60>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40023c00 	.word	0x40023c00

08003098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d075      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030cc:	4bad      	ldr	r3, [pc, #692]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d2:	f7fe fff5 	bl	80020c0 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030da:	f7fe fff1 	bl	80020c0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e18b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030ec:	4ba6      	ldr	r3, [pc, #664]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	019a      	lsls	r2, r3, #6
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	071b      	lsls	r3, r3, #28
 8003110:	499d      	ldr	r1, [pc, #628]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01f      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003124:	4b98      	ldr	r3, [pc, #608]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312a:	0f1b      	lsrs	r3, r3, #28
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	019a      	lsls	r2, r3, #6
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	071b      	lsls	r3, r3, #28
 8003144:	4990      	ldr	r1, [pc, #576]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800314c:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003152:	f023 021f 	bic.w	r2, r3, #31
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	3b01      	subs	r3, #1
 800315c:	498a      	ldr	r1, [pc, #552]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00d      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	019a      	lsls	r2, r3, #6
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	071b      	lsls	r3, r3, #28
 8003184:	4980      	ldr	r1, [pc, #512]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800318c:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003192:	f7fe ff95 	bl	80020c0 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800319a:	f7fe ff91 	bl	80020c0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e12b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ac:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d079      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031d0:	4b6e      	ldr	r3, [pc, #440]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031d6:	f7fe ff73 	bl	80020c0 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031de:	f7fe ff6f 	bl	80020c0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e109      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031f0:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fc:	d0ef      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d020      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800320a:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	0f1b      	lsrs	r3, r3, #28
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	019a      	lsls	r2, r3, #6
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	431a      	orrs	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	071b      	lsls	r3, r3, #28
 800322a:	4957      	ldr	r1, [pc, #348]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003238:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	3b01      	subs	r3, #1
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	4950      	ldr	r1, [pc, #320]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01e      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003258:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	0e1b      	lsrs	r3, r3, #24
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	019a      	lsls	r2, r3, #6
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	061b      	lsls	r3, r3, #24
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	071b      	lsls	r3, r3, #28
 8003278:	4943      	ldr	r1, [pc, #268]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003286:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	493e      	ldr	r1, [pc, #248]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800329c:	f7fe ff10 	bl	80020c0 <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032a4:	f7fe ff0c 	bl	80020c0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0a6      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b6:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c2:	d1ef      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808d 	beq.w	80033ec <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a27      	ldr	r2, [pc, #156]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032fa:	f7fe fee1 	bl	80020c0 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe fedd 	bl	80020c0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e077      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003328:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d039      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d032      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003354:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d11e      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe feab 	bl	80020c0 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e014      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fea7 	bl	80020c0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d90b      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e03f      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003384:	42470068 	.word	0x42470068
 8003388:	40023800 	.word	0x40023800
 800338c:	42470070 	.word	0x42470070
 8003390:	40007000 	.word	0x40007000
 8003394:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0e4      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b0:	d10d      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x336>
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	4911      	ldr	r1, [pc, #68]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
 80033cc:	e005      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4a0e      	ldr	r2, [pc, #56]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033d8:	6093      	str	r3, [r2, #8]
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	4909      	ldr	r1, [pc, #36]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003400:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	424711e0 	.word	0x424711e0

08003414 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e083      	b.n	800352e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7f5b      	ldrb	r3, [r3, #29]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe f81c 	bl	8001474 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	22ca      	movs	r2, #202	; 0xca
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2253      	movs	r2, #83	; 0x53
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 faa8 	bl	80039a8 <RTC_EnterInitMode>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	22ff      	movs	r2, #255	; 0xff
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e05e      	b.n	800352e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800347e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003482:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6919      	ldr	r1, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	041a      	lsls	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10e      	bne.n	80034fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa3a 	bl	8003958 <HAL_RTC_WaitForSynchro>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e018      	b.n	800352e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	7f1b      	ldrb	r3, [r3, #28]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_RTC_SetTime+0x1c>
 800354e:	2302      	movs	r3, #2
 8003550:	e0aa      	b.n	80036a8 <HAL_RTC_SetTime+0x172>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2202      	movs	r2, #2
 800355c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d126      	bne.n	80035b2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fa3f 	bl	8003a00 <RTC_ByteToBcd2>
 8003582:	4603      	mov	r3, r0
 8003584:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fa38 	bl	8003a00 <RTC_ByteToBcd2>
 8003590:	4603      	mov	r3, r0
 8003592:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003594:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	789b      	ldrb	r3, [r3, #2]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fa30 	bl	8003a00 <RTC_ByteToBcd2>
 80035a0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80035a2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	78db      	ldrb	r3, [r3, #3]
 80035aa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e018      	b.n	80035e4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035d2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	78db      	ldrb	r3, [r3, #3]
 80035de:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	22ca      	movs	r2, #202	; 0xca
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2253      	movs	r2, #83	; 0x53
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f9d7 	bl	80039a8 <RTC_EnterInitMode>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2204      	movs	r2, #4
 800360c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e047      	b.n	80036a8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003622:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003626:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003636:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	431a      	orrs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d111      	bne.n	8003692 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f972 	bl	8003958 <HAL_RTC_WaitForSynchro>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2204      	movs	r2, #4
 8003686:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e00a      	b.n	80036a8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80036a6:	2300      	movs	r3, #0
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	0c1b      	lsrs	r3, r3, #16
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11a      	bne.n	8003762 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f983 	bl	8003a3c <RTC_Bcd2ToByte>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f97a 	bl	8003a3c <RTC_Bcd2ToByte>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	789b      	ldrb	r3, [r3, #2]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f971 	bl	8003a3c <RTC_Bcd2ToByte>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	7f1b      	ldrb	r3, [r3, #28]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_RTC_SetDate+0x1c>
 8003784:	2302      	movs	r3, #2
 8003786:	e094      	b.n	80038b2 <HAL_RTC_SetDate+0x146>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2202      	movs	r2, #2
 8003792:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10e      	bne.n	80037b8 <HAL_RTC_SetDate+0x4c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	785b      	ldrb	r3, [r3, #1]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	f023 0310 	bic.w	r3, r3, #16
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	330a      	adds	r3, #10
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11c      	bne.n	80037f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	78db      	ldrb	r3, [r3, #3]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f91c 	bl	8003a00 <RTC_ByteToBcd2>
 80037c8:	4603      	mov	r3, r0
 80037ca:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f915 	bl	8003a00 <RTC_ByteToBcd2>
 80037d6:	4603      	mov	r3, r0
 80037d8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037da:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	789b      	ldrb	r3, [r3, #2]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f90d 	bl	8003a00 <RTC_ByteToBcd2>
 80037e6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80037e8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e00e      	b.n	8003816 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	78db      	ldrb	r3, [r3, #3]
 80037fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003804:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800380a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	22ca      	movs	r2, #202	; 0xca
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2253      	movs	r2, #83	; 0x53
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f8be 	bl	80039a8 <RTC_EnterInitMode>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2204      	movs	r2, #4
 800383e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e033      	b.n	80038b2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003854:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003858:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003868:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f86d 	bl	8003958 <HAL_RTC_WaitForSynchro>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2204      	movs	r2, #4
 8003890:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e00a      	b.n	80038b2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}

080038ba <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	0b5b      	lsrs	r3, r3, #13
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11a      	bne.n	800394e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	78db      	ldrb	r3, [r3, #3]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f88d 	bl	8003a3c <RTC_Bcd2ToByte>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f884 	bl	8003a3c <RTC_Bcd2ToByte>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	789b      	ldrb	r3, [r3, #2]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f87b 	bl	8003a3c <RTC_Bcd2ToByte>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003974:	f7fe fba4 	bl	80020c0 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800397a:	e009      	b.n	8003990 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800397c:	f7fe fba0 	bl	80020c0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398a:	d901      	bls.n	8003990 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e007      	b.n	80039a0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fe fb78 	bl	80020c0 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039d2:	e009      	b.n	80039e8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039d4:	f7fe fb74 	bl	80020c0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e2:	d901      	bls.n	80039e8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e007      	b.n	80039f8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ee      	beq.n	80039d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003a0e:	e005      	b.n	8003a1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	3b0a      	subs	r3, #10
 8003a1a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b09      	cmp	r3, #9
 8003a20:	d8f6      	bhi.n	8003a10 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	b2db      	uxtb	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f839 	bl	8003b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 f9d8 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d001      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e04e      	b.n	8003be2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d022      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d01d      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x80>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d111      	bne.n	8003bd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d010      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bce:	e007      	b.n	8003be0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40001800 	.word	0x40001800

08003c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0202 	mvn.w	r2, #2
 8003c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8ee 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8e0 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8f1 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0204 	mvn.w	r2, #4
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8c4 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8b6 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8c7 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0208 	mvn.w	r2, #8
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f89a 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f88c 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f89d 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f870 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f862 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f873 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0201 	mvn.w	r2, #1
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fa24 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f902 	bl	8003fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f838 	bl	8003e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0220 	mvn.w	r2, #32
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8cc 	bl	8003fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <TIM_Base_SetConfig+0x118>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <TIM_Base_SetConfig+0x11c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <TIM_Base_SetConfig+0x120>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d027      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <TIM_Base_SetConfig+0x118>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d023      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <TIM_Base_SetConfig+0x11c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <TIM_Base_SetConfig+0x120>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <TIM_Base_SetConfig+0x128>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <TIM_Base_SetConfig+0x130>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40001800 	.word	0x40001800
 8003fa4:	40001c00 	.word	0x40001c00
 8003fa8:	40002000 	.word	0x40002000

08003fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e03f      	b.n	8004066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd fa64 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fddb 	bl	8004bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800402c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800403c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800404c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b08a      	sub	sp, #40	; 0x28
 8004072:	af02      	add	r7, sp, #8
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	d17c      	bne.n	8004188 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_UART_Transmit+0x2c>
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e075      	b.n	800418a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_UART_Transmit+0x3e>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e06e      	b.n	800418a <HAL_UART_Transmit+0x11c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c2:	f7fd fffd 	bl	80020c0 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x82>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004100:	e02a      	b.n	8004158 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fb1f 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e036      	b.n	800418a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3302      	adds	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e007      	b.n	800414a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1cf      	bne.n	8004102 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2200      	movs	r2, #0
 800416a:	2140      	movs	r1, #64	; 0x40
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 faef 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e006      	b.n	800418a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d11d      	bne.n	80041e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Receive_IT+0x26>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e016      	b.n	80041ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Receive_IT+0x38>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e00f      	b.n	80041ea <HAL_UART_Receive_IT+0x58>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	461a      	mov	r2, r3
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fb24 	bl	800482c <UART_Start_Receive_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	e000      	b.n	80041ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b0ba      	sub	sp, #232	; 0xe8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10f      	bne.n	800425a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_UART_IRQHandler+0x66>
 8004246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fc03 	bl	8004a5e <UART_Receive_IT>
      return;
 8004258:	e256      	b.n	8004708 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800425a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80de 	beq.w	8004420 <HAL_UART_IRQHandler+0x22c>
 8004264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004274:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80d1 	beq.w	8004420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_UART_IRQHandler+0xae>
 800428a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_UART_IRQHandler+0xd2>
 80042ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0202 	orr.w	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_UART_IRQHandler+0xf6>
 80042d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0204 	orr.w	r2, r3, #4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <HAL_UART_IRQHandler+0x126>
 80042f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0208 	orr.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 81ed 	beq.w	80046fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_UART_IRQHandler+0x14e>
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fb8e 	bl	8004a5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_UART_IRQHandler+0x17a>
 8004366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d04f      	beq.n	800440e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa96 	bl	80048a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d141      	bne.n	8004406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3314      	adds	r3, #20
 8004388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800439c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1d9      	bne.n	8004382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d013      	beq.n	80043fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	4a7d      	ldr	r2, [pc, #500]	; (80045d0 <HAL_UART_IRQHandler+0x3dc>)
 80043dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd ffca 	bl	800237c <HAL_DMA_Abort_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f8:	4610      	mov	r0, r2
 80043fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	e00e      	b.n	800441c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f990 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e00a      	b.n	800441c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f98c 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e006      	b.n	800441c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f988 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800441a:	e170      	b.n	80046fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	bf00      	nop
    return;
 800441e:	e16e      	b.n	80046fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	2b01      	cmp	r3, #1
 8004426:	f040 814a 	bne.w	80046be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8143 	beq.w	80046be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 813c 	beq.w	80046be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	f040 80b4 	bne.w	80045d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8140 	beq.w	8004702 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448a:	429a      	cmp	r2, r3
 800448c:	f080 8139 	bcs.w	8004702 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004496:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a2:	f000 8088 	beq.w	80045b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d9      	bne.n	80044a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800451a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800451e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e1      	bne.n	80044f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800453e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004552:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e3      	bne.n	800452e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004598:	65ba      	str	r2, [r7, #88]	; 0x58
 800459a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800459e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e3      	bne.n	8004574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fe73 	bl	800229c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8b6 	bl	8004738 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045cc:	e099      	b.n	8004702 <HAL_UART_IRQHandler+0x50e>
 80045ce:	bf00      	nop
 80045d0:	08004967 	.word	0x08004967
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 808b 	beq.w	8004706 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8086 	beq.w	8004706 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800461e:	647a      	str	r2, [r7, #68]	; 0x44
 8004620:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800462c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e3      	bne.n	80045fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3314      	adds	r3, #20
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	623b      	str	r3, [r7, #32]
   return(result);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004656:	633a      	str	r2, [r7, #48]	; 0x30
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e3      	bne.n	8004632 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	60fb      	str	r3, [r7, #12]
   return(result);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800469c:	61fa      	str	r2, [r7, #28]
 800469e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	69b9      	ldr	r1, [r7, #24]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	617b      	str	r3, [r7, #20]
   return(result);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e3      	bne.n	8004678 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f83e 	bl	8004738 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046bc:	e023      	b.n	8004706 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_UART_IRQHandler+0x4ea>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f959 	bl	800498e <UART_Transmit_IT>
    return;
 80046dc:	e014      	b.n	8004708 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00e      	beq.n	8004708 <HAL_UART_IRQHandler+0x514>
 80046ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f999 	bl	8004a2e <UART_EndTransmit_IT>
    return;
 80046fc:	e004      	b.n	8004708 <HAL_UART_IRQHandler+0x514>
    return;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <HAL_UART_IRQHandler+0x514>
      return;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_UART_IRQHandler+0x514>
      return;
 8004706:	bf00      	nop
  }
}
 8004708:	37e8      	adds	r7, #232	; 0xe8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop

08004710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b090      	sub	sp, #64	; 0x40
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	e050      	b.n	8004804 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d04c      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800476a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <UART_WaitOnFlagUntilTimeout+0x30>
 8004770:	f7fd fca6 	bl	80020c0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800477c:	429a      	cmp	r2, r3
 800477e:	d241      	bcs.n	8004804 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047a0:	637a      	str	r2, [r7, #52]	; 0x34
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	613b      	str	r3, [r7, #16]
   return(result);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d4:	623a      	str	r2, [r7, #32]
 80047d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	69f9      	ldr	r1, [r7, #28]
 80047da:	6a3a      	ldr	r2, [r7, #32]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e00f      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	d09f      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3740      	adds	r7, #64	; 0x40
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2222      	movs	r2, #34	; 0x22
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004870:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0220 	orr.w	r2, r2, #32
 8004890:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b095      	sub	sp, #84	; 0x54
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048c8:	643a      	str	r2, [r7, #64]	; 0x40
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e5      	bne.n	80048a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3314      	adds	r3, #20
 80048fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	2b01      	cmp	r3, #1
 8004916:	d119      	bne.n	800494c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	60bb      	str	r3, [r7, #8]
   return(result);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f023 0310 	bic.w	r3, r3, #16
 800492e:	647b      	str	r3, [r7, #68]	; 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004938:	61ba      	str	r2, [r7, #24]
 800493a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6979      	ldr	r1, [r7, #20]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	613b      	str	r3, [r7, #16]
   return(result);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
}
 800495a:	bf00      	nop
 800495c:	3754      	adds	r7, #84	; 0x54
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fecf 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b21      	cmp	r3, #33	; 0x21
 80049a0:	d13e      	bne.n	8004a20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049aa:	d114      	bne.n	80049d6 <UART_Transmit_IT+0x48>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d110      	bne.n	80049d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	621a      	str	r2, [r3, #32]
 80049d4:	e008      	b.n	80049e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6211      	str	r1, [r2, #32]
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4619      	mov	r1, r3
 80049f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10f      	bne.n	8004a1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fe5e 	bl	8004710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b08c      	sub	sp, #48	; 0x30
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b22      	cmp	r3, #34	; 0x22
 8004a70:	f040 80ab 	bne.w	8004bca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d117      	bne.n	8004aae <UART_Receive_IT+0x50>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d113      	bne.n	8004aae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8004aac:	e026      	b.n	8004afc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac0:	d007      	beq.n	8004ad2 <UART_Receive_IT+0x74>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <UART_Receive_IT+0x82>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e008      	b.n	8004af2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d15a      	bne.n	8004bc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0220 	bic.w	r2, r2, #32
 8004b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d135      	bne.n	8004bbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	623a      	str	r2, [r7, #32]
 8004b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d10a      	bne.n	8004bae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fdbf 	bl	8004738 <HAL_UARTEx_RxEventCallback>
 8004bba:	e002      	b.n	8004bc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fc fab7 	bl	8001130 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e002      	b.n	8004bcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
  }
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3730      	adds	r7, #48	; 0x30
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	b09f      	sub	sp, #124	; 0x7c
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	68d9      	ldr	r1, [r3, #12]
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	ea40 0301 	orr.w	r3, r0, r1
 8004bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c18:	f021 010c 	bic.w	r1, r1, #12
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c22:	430b      	orrs	r3, r1
 8004c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	6999      	ldr	r1, [r3, #24]
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	ea40 0301 	orr.w	r3, r0, r1
 8004c3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4bc5      	ldr	r3, [pc, #788]	; (8004f58 <UART_SetConfig+0x384>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d004      	beq.n	8004c52 <UART_SetConfig+0x7e>
 8004c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4bc3      	ldr	r3, [pc, #780]	; (8004f5c <UART_SetConfig+0x388>)
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d103      	bne.n	8004c5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c52:	f7fe f9db 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004c56:	6778      	str	r0, [r7, #116]	; 0x74
 8004c58:	e002      	b.n	8004c60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c5a:	f7fe f9c3 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004c5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c68:	f040 80b6 	bne.w	8004dd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6e:	461c      	mov	r4, r3
 8004c70:	f04f 0500 	mov.w	r5, #0
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	6439      	str	r1, [r7, #64]	; 0x40
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c84:	1912      	adds	r2, r2, r4
 8004c86:	eb45 0303 	adc.w	r3, r5, r3
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	00d9      	lsls	r1, r3, #3
 8004c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c98:	00d0      	lsls	r0, r2, #3
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	1911      	adds	r1, r2, r4
 8004ca0:	6639      	str	r1, [r7, #96]	; 0x60
 8004ca2:	416b      	adcs	r3, r5
 8004ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	1891      	adds	r1, r2, r2
 8004cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cb4:	415b      	adcs	r3, r3
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004cc0:	f7fb fafe 	bl	80002c0 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4ba5      	ldr	r3, [pc, #660]	; (8004f60 <UART_SetConfig+0x38c>)
 8004cca:	fba3 2302 	umull	r2, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	011e      	lsls	r6, r3, #4
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd4:	461c      	mov	r4, r3
 8004cd6:	f04f 0500 	mov.w	r5, #0
 8004cda:	4622      	mov	r2, r4
 8004cdc:	462b      	mov	r3, r5
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cea:	1912      	adds	r2, r2, r4
 8004cec:	eb45 0303 	adc.w	r3, r5, r3
 8004cf0:	f04f 0000 	mov.w	r0, #0
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	00d9      	lsls	r1, r3, #3
 8004cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cfe:	00d0      	lsls	r0, r2, #3
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	1911      	adds	r1, r2, r4
 8004d06:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d08:	416b      	adcs	r3, r5
 8004d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	461a      	mov	r2, r3
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	1891      	adds	r1, r2, r2
 8004d18:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d1a:	415b      	adcs	r3, r3
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d26:	f7fb facb 	bl	80002c0 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <UART_SetConfig+0x38c>)
 8004d30:	fba3 1302 	umull	r1, r3, r3, r2
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	2164      	movs	r1, #100	; 0x64
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	3332      	adds	r3, #50	; 0x32
 8004d42:	4a87      	ldr	r2, [pc, #540]	; (8004f60 <UART_SetConfig+0x38c>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d50:	441e      	add	r6, r3
 8004d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d54:	4618      	mov	r0, r3
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	1894      	adds	r4, r2, r2
 8004d60:	623c      	str	r4, [r7, #32]
 8004d62:	415b      	adcs	r3, r3
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
 8004d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d6a:	1812      	adds	r2, r2, r0
 8004d6c:	eb41 0303 	adc.w	r3, r1, r3
 8004d70:	f04f 0400 	mov.w	r4, #0
 8004d74:	f04f 0500 	mov.w	r5, #0
 8004d78:	00dd      	lsls	r5, r3, #3
 8004d7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d7e:	00d4      	lsls	r4, r2, #3
 8004d80:	4622      	mov	r2, r4
 8004d82:	462b      	mov	r3, r5
 8004d84:	1814      	adds	r4, r2, r0
 8004d86:	653c      	str	r4, [r7, #80]	; 0x50
 8004d88:	414b      	adcs	r3, r1
 8004d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	461a      	mov	r2, r3
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	1891      	adds	r1, r2, r2
 8004d98:	61b9      	str	r1, [r7, #24]
 8004d9a:	415b      	adcs	r3, r3
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004da6:	f7fb fa8b 	bl	80002c0 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4b6c      	ldr	r3, [pc, #432]	; (8004f60 <UART_SetConfig+0x38c>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	; 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	3332      	adds	r3, #50	; 0x32
 8004dc2:	4a67      	ldr	r2, [pc, #412]	; (8004f60 <UART_SetConfig+0x38c>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 0207 	and.w	r2, r3, #7
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4432      	add	r2, r6
 8004dd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dd6:	e0b9      	b.n	8004f4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dda:	461c      	mov	r4, r3
 8004ddc:	f04f 0500 	mov.w	r5, #0
 8004de0:	4622      	mov	r2, r4
 8004de2:	462b      	mov	r3, r5
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	6139      	str	r1, [r7, #16]
 8004de8:	415b      	adcs	r3, r3
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004df0:	1912      	adds	r2, r2, r4
 8004df2:	eb45 0303 	adc.w	r3, r5, r3
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e04:	00d0      	lsls	r0, r2, #3
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	eb12 0804 	adds.w	r8, r2, r4
 8004e0e:	eb43 0905 	adc.w	r9, r3, r5
 8004e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	008b      	lsls	r3, r1, #2
 8004e26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e2a:	0082      	lsls	r2, r0, #2
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4649      	mov	r1, r9
 8004e30:	f7fb fa46 	bl	80002c0 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <UART_SetConfig+0x38c>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011e      	lsls	r6, r3, #4
 8004e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e44:	4618      	mov	r0, r3
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	1894      	adds	r4, r2, r2
 8004e50:	60bc      	str	r4, [r7, #8]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e5a:	1812      	adds	r2, r2, r0
 8004e5c:	eb41 0303 	adc.w	r3, r1, r3
 8004e60:	f04f 0400 	mov.w	r4, #0
 8004e64:	f04f 0500 	mov.w	r5, #0
 8004e68:	00dd      	lsls	r5, r3, #3
 8004e6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e6e:	00d4      	lsls	r4, r2, #3
 8004e70:	4622      	mov	r2, r4
 8004e72:	462b      	mov	r3, r5
 8004e74:	1814      	adds	r4, r2, r0
 8004e76:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e78:	414b      	adcs	r3, r1
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	008b      	lsls	r3, r1, #2
 8004e90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e94:	0082      	lsls	r2, r0, #2
 8004e96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e9a:	f7fb fa11 	bl	80002c0 <__aeabi_uldivmod>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <UART_SetConfig+0x38c>)
 8004ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	2164      	movs	r1, #100	; 0x64
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	3332      	adds	r3, #50	; 0x32
 8004eb6:	4a2a      	ldr	r2, [pc, #168]	; (8004f60 <UART_SetConfig+0x38c>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec2:	441e      	add	r6, r3
 8004ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	1894      	adds	r4, r2, r2
 8004ed2:	603c      	str	r4, [r7, #0]
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004edc:	1812      	adds	r2, r2, r0
 8004ede:	eb41 0303 	adc.w	r3, r1, r3
 8004ee2:	f04f 0400 	mov.w	r4, #0
 8004ee6:	f04f 0500 	mov.w	r5, #0
 8004eea:	00dd      	lsls	r5, r3, #3
 8004eec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ef0:	00d4      	lsls	r4, r2, #3
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	eb12 0a00 	adds.w	sl, r2, r0
 8004efa:	eb43 0b01 	adc.w	fp, r3, r1
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	008b      	lsls	r3, r1, #2
 8004f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f16:	0082      	lsls	r2, r0, #2
 8004f18:	4650      	mov	r0, sl
 8004f1a:	4659      	mov	r1, fp
 8004f1c:	f7fb f9d0 	bl	80002c0 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <UART_SetConfig+0x38c>)
 8004f26:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2164      	movs	r1, #100	; 0x64
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <UART_SetConfig+0x38c>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4432      	add	r2, r6
 8004f4a:	609a      	str	r2, [r3, #8]
}
 8004f4c:	bf00      	nop
 8004f4e:	377c      	adds	r7, #124	; 0x7c
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	51eb851f 	.word	0x51eb851f

08004f64 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0208 	add.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f103 0208 	add.w	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f103 0208 	add.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d103      	bne.n	8005026 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e00c      	b.n	8005040 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3308      	adds	r3, #8
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e002      	b.n	8005034 <vListInsert+0x2e>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	d2f6      	bcs.n	800502e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6892      	ldr	r2, [r2, #8]
 800508e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6852      	ldr	r2, [r2, #4]
 8005098:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d103      	bne.n	80050ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xQueueGenericReset+0x2a>
        __asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60bb      	str	r3, [r7, #8]
    }
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80050f6:	f002 fbb5 	bl	8007864 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	3b01      	subs	r3, #1
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	22ff      	movs	r2, #255	; 0xff
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	22ff      	movs	r2, #255	; 0xff
 8005142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d114      	bne.n	8005176 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f001 f921 	bl	80063a0 <xTaskRemoveFromEventList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <xQueueGenericReset+0xcc>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	e009      	b.n	800518a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff fef2 	bl	8004f64 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3324      	adds	r3, #36	; 0x24
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff feed 	bl	8004f64 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800518a:	f002 fb9b 	bl	80078c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800518e:	2301      	movs	r3, #1
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	; 0x30
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61bb      	str	r3, [r7, #24]
    }
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <xQueueGenericCreate+0x48>
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d101      	bne.n	80051e8 <xQueueGenericCreate+0x4c>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <xQueueGenericCreate+0x4e>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <xQueueGenericCreate+0x68>
        __asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	617b      	str	r3, [r7, #20]
    }
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800520a:	d90a      	bls.n	8005222 <xQueueGenericCreate+0x86>
        __asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	613b      	str	r3, [r7, #16]
    }
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	3350      	adds	r3, #80	; 0x50
 8005226:	4618      	mov	r0, r3
 8005228:	f002 fc40 	bl	8007aac <pvPortMalloc>
 800522c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	3350      	adds	r3, #80	; 0x50
 800523c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800523e:	79fa      	ldrb	r2, [r7, #7]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f805 	bl	800525a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005250:	6a3b      	ldr	r3, [r7, #32]
    }
 8005252:	4618      	mov	r0, r3
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e002      	b.n	800527c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005288:	2101      	movs	r1, #1
 800528a:	69b8      	ldr	r0, [r7, #24]
 800528c:	f7ff ff1e 	bl	80050cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052ae:	2300      	movs	r3, #0
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueGenericSend+0x32>
        __asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <xQueueGenericSend+0x40>
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <xQueueGenericSend+0x44>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <xQueueGenericSend+0x46>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <xQueueGenericSend+0x60>
        __asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d103      	bne.n	800530e <xQueueGenericSend+0x6e>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <xQueueGenericSend+0x72>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <xQueueGenericSend+0x74>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xQueueGenericSend+0x8e>
        __asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	623b      	str	r3, [r7, #32]
    }
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800532e:	f001 f9d3 	bl	80066d8 <xTaskGetSchedulerState>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <xQueueGenericSend+0x9e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <xQueueGenericSend+0xa2>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <xQueueGenericSend+0xa4>
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <xQueueGenericSend+0xbe>
        __asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	61fb      	str	r3, [r7, #28]
    }
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800535e:	f002 fa81 	bl	8007864 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <xQueueGenericSend+0xd4>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d129      	bne.n	80053c8 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537a:	f000 fac6 	bl	800590a <prvCopyDataToQueue>
 800537e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d010      	beq.n	80053aa <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	3324      	adds	r3, #36	; 0x24
 800538c:	4618      	mov	r0, r3
 800538e:	f001 f807 	bl	80063a0 <xTaskRemoveFromEventList>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005398:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <xQueueGenericSend+0x1f8>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	e00a      	b.n	80053c0 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <xQueueGenericSend+0x1f8>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80053c0:	f002 fa80 	bl	80078c4 <vPortExitCritical>
                return pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e063      	b.n	8005490 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80053ce:	f002 fa79 	bl	80078c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e05c      	b.n	8005490 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 f83f 	bl	8006464 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80053ea:	f002 fa6b 	bl	80078c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80053ee:	f000 fdb9 	bl	8005f64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80053f2:	f002 fa37 	bl	8007864 <vPortEnterCritical>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d103      	bne.n	800540c <xQueueGenericSend+0x16c>
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005412:	b25b      	sxtb	r3, r3
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d103      	bne.n	8005422 <xQueueGenericSend+0x182>
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005422:	f002 fa4f 	bl	80078c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005426:	1d3a      	adds	r2, r7, #4
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f001 f82e 	bl	8006490 <xTaskCheckForTimeOut>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d124      	bne.n	8005484 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800543a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543c:	f000 fb5d 	bl	8005afa <prvIsQueueFull>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d018      	beq.n	8005478 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	3310      	adds	r3, #16
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 ff56 	bl	8006300 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005456:	f000 fae8 	bl	8005a2a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800545a:	f000 fd91 	bl	8005f80 <xTaskResumeAll>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f af7c 	bne.w	800535e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <xQueueGenericSend+0x1f8>)
 8005468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	e772      	b.n	800535e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800547a:	f000 fad6 	bl	8005a2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800547e:	f000 fd7f 	bl	8005f80 <xTaskResumeAll>
 8005482:	e76c      	b.n	800535e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005486:	f000 fad0 	bl	8005a2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800548a:	f000 fd79 	bl	8005f80 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800548e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005490:	4618      	mov	r0, r3
 8005492:	3738      	adds	r7, #56	; 0x38
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b090      	sub	sp, #64	; 0x40
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <xQueueGenericSendFromISR+0x3c>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <xQueueGenericSendFromISR+0x40>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <xQueueGenericSendFromISR+0x42>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d103      	bne.n	8005506 <xQueueGenericSendFromISR+0x6a>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <xQueueGenericSendFromISR+0x6e>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <xQueueGenericSendFromISR+0x70>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	623b      	str	r3, [r7, #32]
    }
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005526:	f002 fa81 	bl	8007a2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800552a:	f3ef 8211 	mrs	r2, BASEPRI
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	61fa      	str	r2, [r7, #28]
 8005540:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005542:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <xQueueGenericSendFromISR+0xbc>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d13e      	bne.n	80055d6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800556e:	f000 f9cc 	bl	800590a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005572:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d112      	bne.n	80055a2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d025      	beq.n	80055d0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	3324      	adds	r3, #36	; 0x24
 8005588:	4618      	mov	r0, r3
 800558a:	f000 ff09 	bl	80063a0 <xTaskRemoveFromEventList>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01d      	beq.n	80055d0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01a      	beq.n	80055d0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e016      	b.n	80055d0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80055a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055a6:	2b7f      	cmp	r3, #127	; 0x7f
 80055a8:	d10a      	bne.n	80055c0 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	617b      	str	r3, [r7, #20]
    }
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055c4:	3301      	adds	r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	b25a      	sxtb	r2, r3
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80055d0:	2301      	movs	r3, #1
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80055d4:	e001      	b.n	80055da <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80055e4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3740      	adds	r7, #64	; 0x40
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08c      	sub	sp, #48	; 0x30
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <xQueueReceive+0x30>
        __asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	623b      	str	r3, [r7, #32]
    }
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <xQueueReceive+0x3e>
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <xQueueReceive+0x42>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <xQueueReceive+0x44>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueReceive+0x5e>
        __asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	61fb      	str	r3, [r7, #28]
    }
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800564e:	f001 f843 	bl	80066d8 <xTaskGetSchedulerState>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <xQueueReceive+0x6e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <xQueueReceive+0x72>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueReceive+0x74>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueReceive+0x8e>
        __asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	61bb      	str	r3, [r7, #24]
    }
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800567e:	f002 f8f1 	bl	8007864 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01f      	beq.n	80056ce <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005692:	f000 f9a4 	bl	80059de <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00f      	beq.n	80056c6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	3310      	adds	r3, #16
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fe78 	bl	80063a0 <xTaskRemoveFromEventList>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <xQueueReceive+0x1bc>)
 80056b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80056c6:	f002 f8fd 	bl	80078c4 <vPortExitCritical>
                return pdPASS;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e069      	b.n	80057a2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80056d4:	f002 f8f6 	bl	80078c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80056d8:	2300      	movs	r3, #0
 80056da:	e062      	b.n	80057a2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80056e2:	f107 0310 	add.w	r3, r7, #16
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 febc 	bl	8006464 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80056f0:	f002 f8e8 	bl	80078c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80056f4:	f000 fc36 	bl	8005f64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80056f8:	f002 f8b4 	bl	8007864 <vPortEnterCritical>
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005702:	b25b      	sxtb	r3, r3
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d103      	bne.n	8005712 <xQueueReceive+0x122>
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005718:	b25b      	sxtb	r3, r3
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d103      	bne.n	8005728 <xQueueReceive+0x138>
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005728:	f002 f8cc 	bl	80078c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800572c:	1d3a      	adds	r2, r7, #4
 800572e:	f107 0310 	add.w	r3, r7, #16
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f000 feab 	bl	8006490 <xTaskCheckForTimeOut>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d123      	bne.n	8005788 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005742:	f000 f9c4 	bl	8005ace <prvIsQueueEmpty>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fdd3 	bl	8006300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800575a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575c:	f000 f965 	bl	8005a2a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005760:	f000 fc0e 	bl	8005f80 <xTaskResumeAll>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d189      	bne.n	800567e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800576a:	4b10      	ldr	r3, [pc, #64]	; (80057ac <xQueueReceive+0x1bc>)
 800576c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	e780      	b.n	800567e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800577c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577e:	f000 f954 	bl	8005a2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005782:	f000 fbfd 	bl	8005f80 <xTaskResumeAll>
 8005786:	e77a      	b.n	800567e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800578a:	f000 f94e 	bl	8005a2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800578e:	f000 fbf7 	bl	8005f80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005794:	f000 f99b 	bl	8005ace <prvIsQueueEmpty>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	f43f af6f 	beq.w	800567e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80057a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3730      	adds	r7, #48	; 0x30
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b090      	sub	sp, #64	; 0x40
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <xQueueReceiveFromISR+0x3a>
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <xQueueReceiveFromISR+0x3e>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <xQueueReceiveFromISR+0x40>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800580a:	f002 f90f 	bl	8007a2c <vPortValidateInterruptPriority>
        __asm volatile
 800580e:	f3ef 8211 	mrs	r2, BASEPRI
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	623a      	str	r2, [r7, #32]
 8005824:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005826:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	2b00      	cmp	r3, #0
 8005834:	d03e      	beq.n	80058b4 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800583c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005844:	f000 f8cb 	bl	80059de <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005850:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d112      	bne.n	8005880 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d025      	beq.n	80058ae <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	3310      	adds	r3, #16
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fd9a 	bl	80063a0 <xTaskRemoveFromEventList>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01d      	beq.n	80058ae <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01a      	beq.n	80058ae <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e016      	b.n	80058ae <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005880:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005884:	2b7f      	cmp	r3, #127	; 0x7f
 8005886:	d10a      	bne.n	800589e <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	61bb      	str	r3, [r7, #24]
    }
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800589e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058a2:	3301      	adds	r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	b25a      	sxtb	r2, r3
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80058ae:	2301      	movs	r3, #1
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b2:	e001      	b.n	80058b8 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	617b      	str	r3, [r7, #20]
        __asm volatile
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f383 8811 	msr	BASEPRI, r3
    }
 80058c2:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80058c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3740      	adds	r7, #64	; 0x40
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60bb      	str	r3, [r7, #8]
    }
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80058f2:	f001 ffb7 	bl	8007864 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80058fc:	f001 ffe2 	bl	80078c4 <vPortExitCritical>

    return uxReturn;
 8005900:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d14d      	bne.n	80059cc <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 feed 	bl	8006714 <xTaskPriorityDisinherit>
 800593a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	e043      	b.n	80059cc <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d119      	bne.n	800597e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6858      	ldr	r0, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	461a      	mov	r2, r3
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	f002 fad1 	bl	8007efc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	441a      	add	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d32b      	bcc.n	80059cc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	e026      	b.n	80059cc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68d8      	ldr	r0, [r3, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	461a      	mov	r2, r3
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	f002 fab7 	bl	8007efc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	425b      	negs	r3, r3
 8005998:	441a      	add	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d207      	bcs.n	80059ba <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	425b      	negs	r3, r3
 80059b4:	441a      	add	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d105      	bne.n	80059cc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80059d4:	697b      	ldr	r3, [r7, #20]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d018      	beq.n	8005a22 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d303      	bcc.n	8005a12 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68d9      	ldr	r1, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	f002 fa6d 	bl	8007efc <memcpy>
    }
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005a32:	f001 ff17 	bl	8007864 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a3e:	e011      	b.n	8005a64 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d012      	beq.n	8005a6e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3324      	adds	r3, #36	; 0x24
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fca7 	bl	80063a0 <xTaskRemoveFromEventList>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005a58:	f000 fd80 	bl	800655c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	dce9      	bgt.n	8005a40 <prvUnlockQueue+0x16>
 8005a6c:	e000      	b.n	8005a70 <prvUnlockQueue+0x46>
                        break;
 8005a6e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	22ff      	movs	r2, #255	; 0xff
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005a78:	f001 ff24 	bl	80078c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005a7c:	f001 fef2 	bl	8007864 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a86:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a88:	e011      	b.n	8005aae <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d012      	beq.n	8005ab8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3310      	adds	r3, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fc82 	bl	80063a0 <xTaskRemoveFromEventList>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005aa2:	f000 fd5b 	bl	800655c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dce9      	bgt.n	8005a8a <prvUnlockQueue+0x60>
 8005ab6:	e000      	b.n	8005aba <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005ab8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	22ff      	movs	r2, #255	; 0xff
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005ac2:	f001 feff 	bl	80078c4 <vPortExitCritical>
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005ad6:	f001 fec5 	bl	8007864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e001      	b.n	8005aec <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005aec:	f001 feea 	bl	80078c4 <vPortExitCritical>

    return xReturn;
 8005af0:	68fb      	ldr	r3, [r7, #12]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005b02:	f001 feaf 	bl	8007864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d102      	bne.n	8005b18 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e001      	b.n	8005b1c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005b1c:	f001 fed2 	bl	80078c4 <vPortExitCritical>

    return xReturn;
 8005b20:	68fb      	ldr	r3, [r7, #12]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
    }
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d102      	bne.n	8005b64 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e001      	b.n	8005b68 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005b68:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e014      	b.n	8005bb2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b88:	4a0f      	ldr	r2, [pc, #60]	; (8005bc8 <vQueueAddToRegistry+0x50>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b94:	490c      	ldr	r1, [pc, #48]	; (8005bc8 <vQueueAddToRegistry+0x50>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <vQueueAddToRegistry+0x50>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005baa:	e006      	b.n	8005bba <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b07      	cmp	r3, #7
 8005bb6:	d9e7      	bls.n	8005b88 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20012f60 	.word	0x20012f60

08005bcc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005bdc:	f001 fe42 	bl	8007864 <vPortEnterCritical>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d103      	bne.n	8005bf6 <vQueueWaitForMessageRestricted+0x2a>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d103      	bne.n	8005c0c <vQueueWaitForMessageRestricted+0x40>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c0c:	f001 fe5a 	bl	80078c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3324      	adds	r3, #36	; 0x24
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fb91 	bl	8006348 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f7ff feff 	bl	8005a2a <prvUnlockQueue>
    }
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	; 0x30
 8005c38:	af04      	add	r7, sp, #16
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 ff2f 	bl	8007aac <pvPortMalloc>
 8005c4e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c56:	2058      	movs	r0, #88	; 0x58
 8005c58:	f001 ff28 	bl	8007aac <pvPortMalloc>
 8005c5c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30
 8005c6a:	e005      	b.n	8005c78 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005c6c:	6978      	ldr	r0, [r7, #20]
 8005c6e:	f001 fffd 	bl	8007c6c <vPortFree>
 8005c72:	e001      	b.n	8005c78 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d013      	beq.n	8005ca6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	9302      	str	r3, [sp, #8]
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f80e 	bl	8005cb6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005c9a:	69f8      	ldr	r0, [r7, #28]
 8005c9c:	f000 f8a2 	bl	8005de4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e002      	b.n	8005cac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005cac:	69bb      	ldr	r3, [r7, #24]
    }
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b088      	sub	sp, #32
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	21a5      	movs	r1, #165	; 0xa5
 8005cd0:	f002 f922 	bl	8007f18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	f023 0307 	bic.w	r3, r3, #7
 8005cec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	617b      	str	r3, [r7, #20]
    }
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01f      	beq.n	8005d54 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	e012      	b.n	8005d40 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	3334      	adds	r3, #52	; 0x34
 8005d2a:	460a      	mov	r2, r1
 8005d2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b09      	cmp	r3, #9
 8005d44:	d9e9      	bls.n	8005d1a <prvInitialiseNewTask+0x64>
 8005d46:	e000      	b.n	8005d4a <prvInitialiseNewTask+0x94>
            {
                break;
 8005d48:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d52:	e003      	b.n	8005d5c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d901      	bls.n	8005d66 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d62:	2304      	movs	r3, #4
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d70:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2200      	movs	r2, #0
 8005d76:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff f911 	bl	8004fa4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	3318      	adds	r3, #24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f90c 	bl	8004fa4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d90:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	f1c3 0205 	rsb	r2, r3, #5
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	3350      	adds	r3, #80	; 0x50
 8005da6:	2204      	movs	r2, #4
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 f8b4 	bl	8007f18 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	3354      	adds	r3, #84	; 0x54
 8005db4:	2201      	movs	r2, #1
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f002 f8ad 	bl	8007f18 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	69b8      	ldr	r0, [r7, #24]
 8005dc4:	f001 fba0 	bl	8007508 <pxPortInitialiseStack>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005dda:	bf00      	nop
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005dec:	f001 fd3a 	bl	8007864 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <prvAddNewTaskToReadyList+0xc0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <prvAddNewTaskToReadyList+0xc0>)
 8005df8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005dfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005e02:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e08:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <prvAddNewTaskToReadyList+0xc0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d110      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005e10:	f000 fbc8 	bl	80065a4 <prvInitialiseTaskLists>
 8005e14:	e00d      	b.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d802      	bhi.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <prvAddNewTaskToReadyList+0xd4>)
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7ff f8a6 	bl	8004fbe <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005e72:	f001 fd27 	bl	80078c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005e76:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d207      	bcs.n	8005e9c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <prvAddNewTaskToReadyList+0xd8>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	200001e4 	.word	0x200001e4
 8005ea8:	2000010c 	.word	0x2000010c
 8005eac:	200001f0 	.word	0x200001f0
 8005eb0:	20000200 	.word	0x20000200
 8005eb4:	200001ec 	.word	0x200001ec
 8005eb8:	20000110 	.word	0x20000110
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <vTaskStartScheduler+0x88>)
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2282      	movs	r2, #130	; 0x82
 8005ed2:	491e      	ldr	r1, [pc, #120]	; (8005f4c <vTaskStartScheduler+0x8c>)
 8005ed4:	481e      	ldr	r0, [pc, #120]	; (8005f50 <vTaskStartScheduler+0x90>)
 8005ed6:	f7ff fead 	bl	8005c34 <xTaskCreate>
 8005eda:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d102      	bne.n	8005ee8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005ee2:	f000 ff59 	bl	8006d98 <xTimerCreateTimerTask>
 8005ee6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d116      	bne.n	8005f1c <vTaskStartScheduler+0x5c>
        __asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	60bb      	str	r3, [r7, #8]
    }
 8005f00:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <vTaskStartScheduler+0x94>)
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295
 8005f08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <vTaskStartScheduler+0x98>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f10:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <vTaskStartScheduler+0x9c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005f16:	f001 fb85 	bl	8007624 <xPortStartScheduler>
 8005f1a:	e00e      	b.n	8005f3a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d10a      	bne.n	8005f3a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	607b      	str	r3, [r7, #4]
    }
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <vTaskStartScheduler+0xa0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000208 	.word	0x20000208
 8005f4c:	08009540 	.word	0x08009540
 8005f50:	08006575 	.word	0x08006575
 8005f54:	20000204 	.word	0x20000204
 8005f58:	200001f0 	.word	0x200001f0
 8005f5c:	200001e8 	.word	0x200001e8
 8005f60:	20000020 	.word	0x20000020

08005f64 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <vTaskSuspendAll+0x18>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	4a03      	ldr	r2, [pc, #12]	; (8005f7c <vTaskSuspendAll+0x18>)
 8005f70:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005f72:	bf00      	nop
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	2000020c 	.word	0x2000020c

08005f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005f8e:	4b41      	ldr	r3, [pc, #260]	; (8006094 <xTaskResumeAll+0x114>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xTaskResumeAll+0x2c>
        __asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	603b      	str	r3, [r7, #0]
    }
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005fac:	f001 fc5a 	bl	8007864 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005fb0:	4b38      	ldr	r3, [pc, #224]	; (8006094 <xTaskResumeAll+0x114>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4a37      	ldr	r2, [pc, #220]	; (8006094 <xTaskResumeAll+0x114>)
 8005fb8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fba:	4b36      	ldr	r3, [pc, #216]	; (8006094 <xTaskResumeAll+0x114>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d161      	bne.n	8006086 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fc2:	4b35      	ldr	r3, [pc, #212]	; (8006098 <xTaskResumeAll+0x118>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d05d      	beq.n	8006086 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fca:	e02e      	b.n	800602a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fcc:	4b33      	ldr	r3, [pc, #204]	; (800609c <xTaskResumeAll+0x11c>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff f84d 	bl	8005078 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff f848 	bl	8005078 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <xTaskResumeAll+0x120>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <xTaskResumeAll+0x120>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <xTaskResumeAll+0x124>)
 8006008:	441a      	add	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7fe ffd4 	bl	8004fbe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <xTaskResumeAll+0x128>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006024:	4b21      	ldr	r3, [pc, #132]	; (80060ac <xTaskResumeAll+0x12c>)
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800602a:	4b1c      	ldr	r3, [pc, #112]	; (800609c <xTaskResumeAll+0x11c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1cc      	bne.n	8005fcc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006038:	f000 fb32 	bl	80066a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800603c:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <xTaskResumeAll+0x130>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d010      	beq.n	800606a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006048:	f000 f846 	bl	80060d8 <xTaskIncrementTick>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8006052:	4b16      	ldr	r3, [pc, #88]	; (80060ac <xTaskResumeAll+0x12c>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3b01      	subs	r3, #1
 800605c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f1      	bne.n	8006048 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8006064:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <xTaskResumeAll+0x130>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800606a:	4b10      	ldr	r3, [pc, #64]	; (80060ac <xTaskResumeAll+0x12c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <xTaskResumeAll+0x134>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006086:	f001 fc1d 	bl	80078c4 <vPortExitCritical>

    return xAlreadyYielded;
 800608a:	68bb      	ldr	r3, [r7, #8]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2000020c 	.word	0x2000020c
 8006098:	200001e4 	.word	0x200001e4
 800609c:	200001a4 	.word	0x200001a4
 80060a0:	200001ec 	.word	0x200001ec
 80060a4:	20000110 	.word	0x20000110
 80060a8:	2000010c 	.word	0x2000010c
 80060ac:	200001f8 	.word	0x200001f8
 80060b0:	200001f4 	.word	0x200001f4
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <xTaskGetTickCount+0x1c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80060c4:	687b      	ldr	r3, [r7, #4]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	200001e8 	.word	0x200001e8

080060d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e2:	4b4e      	ldr	r3, [pc, #312]	; (800621c <xTaskIncrementTick+0x144>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 808e 	bne.w	8006208 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ec:	4b4c      	ldr	r3, [pc, #304]	; (8006220 <xTaskIncrementTick+0x148>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80060f4:	4a4a      	ldr	r2, [pc, #296]	; (8006220 <xTaskIncrementTick+0x148>)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d120      	bne.n	8006142 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006100:	4b48      	ldr	r3, [pc, #288]	; (8006224 <xTaskIncrementTick+0x14c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <xTaskIncrementTick+0x48>
        __asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	603b      	str	r3, [r7, #0]
    }
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xTaskIncrementTick+0x46>
 8006120:	4b40      	ldr	r3, [pc, #256]	; (8006224 <xTaskIncrementTick+0x14c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	4b40      	ldr	r3, [pc, #256]	; (8006228 <xTaskIncrementTick+0x150>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3e      	ldr	r2, [pc, #248]	; (8006224 <xTaskIncrementTick+0x14c>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4a3e      	ldr	r2, [pc, #248]	; (8006228 <xTaskIncrementTick+0x150>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b3d      	ldr	r3, [pc, #244]	; (800622c <xTaskIncrementTick+0x154>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	4a3c      	ldr	r2, [pc, #240]	; (800622c <xTaskIncrementTick+0x154>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	f000 faaf 	bl	80066a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006142:	4b3b      	ldr	r3, [pc, #236]	; (8006230 <xTaskIncrementTick+0x158>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d348      	bcc.n	80061de <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800614c:	4b35      	ldr	r3, [pc, #212]	; (8006224 <xTaskIncrementTick+0x14c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	4b36      	ldr	r3, [pc, #216]	; (8006230 <xTaskIncrementTick+0x158>)
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	601a      	str	r2, [r3, #0]
                    break;
 800615e:	e03e      	b.n	80061de <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <xTaskIncrementTick+0x14c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d203      	bcs.n	8006180 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006178:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <xTaskIncrementTick+0x158>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800617e:	e02e      	b.n	80061de <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe ff77 	bl	8005078 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3318      	adds	r3, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe ff6e 	bl	8005078 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	409a      	lsls	r2, r3
 80061a4:	4b23      	ldr	r3, [pc, #140]	; (8006234 <xTaskIncrementTick+0x15c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	4a22      	ldr	r2, [pc, #136]	; (8006234 <xTaskIncrementTick+0x15c>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <xTaskIncrementTick+0x160>)
 80061bc:	441a      	add	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fe fefa 	bl	8004fbe <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <xTaskIncrementTick+0x164>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d3b9      	bcc.n	800614c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061dc:	e7b6      	b.n	800614c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061de:	4b17      	ldr	r3, [pc, #92]	; (800623c <xTaskIncrementTick+0x164>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	4914      	ldr	r1, [pc, #80]	; (8006238 <xTaskIncrementTick+0x160>)
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d901      	bls.n	80061fa <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80061f6:	2301      	movs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <xTaskIncrementTick+0x168>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e004      	b.n	8006212 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <xTaskIncrementTick+0x16c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <xTaskIncrementTick+0x16c>)
 8006210:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2000020c 	.word	0x2000020c
 8006220:	200001e8 	.word	0x200001e8
 8006224:	2000019c 	.word	0x2000019c
 8006228:	200001a0 	.word	0x200001a0
 800622c:	200001fc 	.word	0x200001fc
 8006230:	20000204 	.word	0x20000204
 8006234:	200001ec 	.word	0x200001ec
 8006238:	20000110 	.word	0x20000110
 800623c:	2000010c 	.word	0x2000010c
 8006240:	200001f8 	.word	0x200001f8
 8006244:	200001f4 	.word	0x200001f4

08006248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800624e:	4b27      	ldr	r3, [pc, #156]	; (80062ec <vTaskSwitchContext+0xa4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006256:	4b26      	ldr	r3, [pc, #152]	; (80062f0 <vTaskSwitchContext+0xa8>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800625c:	e03f      	b.n	80062de <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <vTaskSwitchContext+0xa8>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006264:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <vTaskSwitchContext+0xac>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	fab3 f383 	clz	r3, r3
 8006270:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	f1c3 031f 	rsb	r3, r3, #31
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	491f      	ldr	r1, [pc, #124]	; (80062f8 <vTaskSwitchContext+0xb0>)
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
    }
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <vTaskSwitchContext+0x5a>
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4a12      	ldr	r2, [pc, #72]	; (80062f8 <vTaskSwitchContext+0xb0>)
 80062b0:	4413      	add	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	3308      	adds	r3, #8
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d104      	bne.n	80062d4 <vTaskSwitchContext+0x8c>
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <vTaskSwitchContext+0xb4>)
 80062dc:	6013      	str	r3, [r2, #0]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	2000020c 	.word	0x2000020c
 80062f0:	200001f8 	.word	0x200001f8
 80062f4:	200001ec 	.word	0x200001ec
 80062f8:	20000110 	.word	0x20000110
 80062fc:	2000010c 	.word	0x2000010c

08006300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	60fb      	str	r3, [r7, #12]
    }
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <vTaskPlaceOnEventList+0x44>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3318      	adds	r3, #24
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fe fe69 	bl	8005006 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006334:	2101      	movs	r1, #1
 8006336:	6838      	ldr	r0, [r7, #0]
 8006338:	f000 fcc8 	bl	8006ccc <prvAddCurrentTaskToDelayedList>
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000010c 	.word	0x2000010c

08006348 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	617b      	str	r3, [r7, #20]
    }
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <vTaskPlaceOnEventListRestricted+0x54>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3318      	adds	r3, #24
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7fe fe20 	bl	8004fbe <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	68b8      	ldr	r0, [r7, #8]
 800638e:	f000 fc9d 	bl	8006ccc <prvAddCurrentTaskToDelayedList>
    }
 8006392:	bf00      	nop
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2000010c 	.word	0x2000010c

080063a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60fb      	str	r3, [r7, #12]
    }
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3318      	adds	r3, #24
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fe51 	bl	8005078 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <xTaskRemoveFromEventList+0xac>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d11c      	bne.n	8006418 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fe48 	bl	8005078 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	2201      	movs	r2, #1
 80063ee:	409a      	lsls	r2, r3
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <xTaskRemoveFromEventList+0xb0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <xTaskRemoveFromEventList+0xb0>)
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4a13      	ldr	r2, [pc, #76]	; (8006454 <xTaskRemoveFromEventList+0xb4>)
 8006408:	441a      	add	r2, r3
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7fe fdd4 	bl	8004fbe <vListInsertEnd>
 8006416:	e005      	b.n	8006424 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3318      	adds	r3, #24
 800641c:	4619      	mov	r1, r3
 800641e:	480e      	ldr	r0, [pc, #56]	; (8006458 <xTaskRemoveFromEventList+0xb8>)
 8006420:	f7fe fdcd 	bl	8004fbe <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <xTaskRemoveFromEventList+0xbc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	429a      	cmp	r2, r3
 8006430:	d905      	bls.n	800643e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <xTaskRemoveFromEventList+0xc0>)
 8006438:	2201      	movs	r2, #1
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e001      	b.n	8006442 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006442:	697b      	ldr	r3, [r7, #20]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	2000020c 	.word	0x2000020c
 8006450:	200001ec 	.word	0x200001ec
 8006454:	20000110 	.word	0x20000110
 8006458:	200001a4 	.word	0x200001a4
 800645c:	2000010c 	.word	0x2000010c
 8006460:	200001f8 	.word	0x200001f8

08006464 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <vTaskInternalSetTimeOutState+0x24>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <vTaskInternalSetTimeOutState+0x28>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	605a      	str	r2, [r3, #4]
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	200001fc 	.word	0x200001fc
 800648c:	200001e8 	.word	0x200001e8

08006490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
    }
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
    }
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80064d2:	f001 f9c7 	bl	8007864 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80064d6:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <xTaskCheckForTimeOut+0xc4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d102      	bne.n	80064f6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e026      	b.n	8006544 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <xTaskCheckForTimeOut+0xc8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d00a      	beq.n	8006518 <xTaskCheckForTimeOut+0x88>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	429a      	cmp	r2, r3
 800650a:	d305      	bcc.n	8006518 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	e015      	b.n	8006544 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	429a      	cmp	r2, r3
 8006520:	d20b      	bcs.n	800653a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	1ad2      	subs	r2, r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ff98 	bl	8006464 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	e004      	b.n	8006544 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006544:	f001 f9be 	bl	80078c4 <vPortExitCritical>

    return xReturn;
 8006548:	69fb      	ldr	r3, [r7, #28]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200001e8 	.word	0x200001e8
 8006558:	200001fc 	.word	0x200001fc

0800655c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <vTaskMissedYield+0x14>)
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	200001f8 	.word	0x200001f8

08006574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800657c:	f000 f852 	bl	8006624 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <prvIdleTask+0x28>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d9f9      	bls.n	800657c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <prvIdleTask+0x2c>)
 800658a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006598:	e7f0      	b.n	800657c <prvIdleTask+0x8>
 800659a:	bf00      	nop
 800659c:	20000110 	.word	0x20000110
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
 80065ae:	e00c      	b.n	80065ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4a12      	ldr	r2, [pc, #72]	; (8006604 <prvInitialiseTaskLists+0x60>)
 80065bc:	4413      	add	r3, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe fcd0 	bl	8004f64 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3301      	adds	r3, #1
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d9ef      	bls.n	80065b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80065d0:	480d      	ldr	r0, [pc, #52]	; (8006608 <prvInitialiseTaskLists+0x64>)
 80065d2:	f7fe fcc7 	bl	8004f64 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80065d6:	480d      	ldr	r0, [pc, #52]	; (800660c <prvInitialiseTaskLists+0x68>)
 80065d8:	f7fe fcc4 	bl	8004f64 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80065dc:	480c      	ldr	r0, [pc, #48]	; (8006610 <prvInitialiseTaskLists+0x6c>)
 80065de:	f7fe fcc1 	bl	8004f64 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80065e2:	480c      	ldr	r0, [pc, #48]	; (8006614 <prvInitialiseTaskLists+0x70>)
 80065e4:	f7fe fcbe 	bl	8004f64 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80065e8:	480b      	ldr	r0, [pc, #44]	; (8006618 <prvInitialiseTaskLists+0x74>)
 80065ea:	f7fe fcbb 	bl	8004f64 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <prvInitialiseTaskLists+0x78>)
 80065f0:	4a05      	ldr	r2, [pc, #20]	; (8006608 <prvInitialiseTaskLists+0x64>)
 80065f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <prvInitialiseTaskLists+0x7c>)
 80065f6:	4a05      	ldr	r2, [pc, #20]	; (800660c <prvInitialiseTaskLists+0x68>)
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000110 	.word	0x20000110
 8006608:	20000174 	.word	0x20000174
 800660c:	20000188 	.word	0x20000188
 8006610:	200001a4 	.word	0x200001a4
 8006614:	200001b8 	.word	0x200001b8
 8006618:	200001d0 	.word	0x200001d0
 800661c:	2000019c 	.word	0x2000019c
 8006620:	200001a0 	.word	0x200001a0

08006624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800662a:	e019      	b.n	8006660 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800662c:	f001 f91a 	bl	8007864 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006630:	4b10      	ldr	r3, [pc, #64]	; (8006674 <prvCheckTasksWaitingTermination+0x50>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe fd1b 	bl	8005078 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <prvCheckTasksWaitingTermination+0x54>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	4a0b      	ldr	r2, [pc, #44]	; (8006678 <prvCheckTasksWaitingTermination+0x54>)
 800664a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <prvCheckTasksWaitingTermination+0x58>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3b01      	subs	r3, #1
 8006652:	4a0a      	ldr	r2, [pc, #40]	; (800667c <prvCheckTasksWaitingTermination+0x58>)
 8006654:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006656:	f001 f935 	bl	80078c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f810 	bl	8006680 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <prvCheckTasksWaitingTermination+0x58>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e1      	bne.n	800662c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200001b8 	.word	0x200001b8
 8006678:	200001e4 	.word	0x200001e4
 800667c:	200001cc 	.word	0x200001cc

08006680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	4618      	mov	r0, r3
 800668e:	f001 faed 	bl	8007c6c <vPortFree>
                vPortFree( pxTCB );
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 faea 	bl	8007c6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <prvResetNextTaskUnblockTime+0x30>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvResetNextTaskUnblockTime+0x34>)
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295
 80066b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80066b6:	e005      	b.n	80066c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <prvResetNextTaskUnblockTime+0x30>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvResetNextTaskUnblockTime+0x34>)
 80066c2:	6013      	str	r3, [r2, #0]
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	2000019c 	.word	0x2000019c
 80066d4:	20000204 	.word	0x20000204

080066d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <xTaskGetSchedulerState+0x34>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80066e6:	2301      	movs	r3, #1
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	e008      	b.n	80066fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <xTaskGetSchedulerState+0x38>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80066f4:	2302      	movs	r3, #2
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	e001      	b.n	80066fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80066fe:	687b      	ldr	r3, [r7, #4]
    }
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	200001f0 	.word	0x200001f0
 8006710:	2000020c 	.word	0x2000020c

08006714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d063      	beq.n	80067f2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800672a:	4b34      	ldr	r3, [pc, #208]	; (80067fc <xTaskPriorityDisinherit+0xe8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d00a      	beq.n	800674a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
    }
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60bb      	str	r3, [r7, #8]
    }
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676c:	1e5a      	subs	r2, r3, #1
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677a:	429a      	cmp	r2, r3
 800677c:	d039      	beq.n	80067f2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d135      	bne.n	80067f2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fc74 	bl	8005078 <uxListRemove>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10a      	bne.n	80067ac <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	2201      	movs	r2, #1
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	43da      	mvns	r2, r3
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <xTaskPriorityDisinherit+0xec>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4013      	ands	r3, r2
 80067a8:	4a15      	ldr	r2, [pc, #84]	; (8006800 <xTaskPriorityDisinherit+0xec>)
 80067aa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f1c3 0205 	rsb	r2, r3, #5
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	2201      	movs	r2, #1
 80067c6:	409a      	lsls	r2, r3
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <xTaskPriorityDisinherit+0xec>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <xTaskPriorityDisinherit+0xec>)
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <xTaskPriorityDisinherit+0xf0>)
 80067e0:	441a      	add	r2, r3
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe fbe8 	bl	8004fbe <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80067ee:	2301      	movs	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80067f2:	697b      	ldr	r3, [r7, #20]
    }
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	2000010c 	.word	0x2000010c
 8006800:	200001ec 	.word	0x200001ec
 8006804:	20000110 	.word	0x20000110

08006808 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	613b      	str	r3, [r7, #16]
    }
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006832:	f001 f817 	bl	8007864 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006836:	4b32      	ldr	r3, [pc, #200]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	3354      	adds	r3, #84	; 0x54
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d022      	beq.n	800688e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006848:	4b2d      	ldr	r3, [pc, #180]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	3214      	adds	r2, #20
 8006850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	43d2      	mvns	r2, r2
 8006858:	4011      	ands	r1, r2
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	3214      	adds	r2, #20
 800685e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006862:	4b27      	ldr	r3, [pc, #156]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	3354      	adds	r3, #84	; 0x54
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006876:	2101      	movs	r1, #1
 8006878:	6a38      	ldr	r0, [r7, #32]
 800687a:	f000 fa27 	bl	8006ccc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800687e:	4b21      	ldr	r3, [pc, #132]	; (8006904 <xTaskGenericNotifyWait+0xfc>)
 8006880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800688e:	f001 f819 	bl	80078c4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006892:	f000 ffe7 	bl	8007864 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800689c:	4b18      	ldr	r3, [pc, #96]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	3214      	adds	r2, #20
 80068a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80068ac:	4b14      	ldr	r3, [pc, #80]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	3354      	adds	r3, #84	; 0x54
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d002      	beq.n	80068c4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	e00e      	b.n	80068e2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	3214      	adds	r2, #20
 80068cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	43d2      	mvns	r2, r2
 80068d4:	4011      	ands	r1, r2
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	3214      	adds	r2, #20
 80068da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <xTaskGenericNotifyWait+0xf8>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	3354      	adds	r3, #84	; 0x54
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80068f0:	f000 ffe8 	bl	80078c4 <vPortExitCritical>

        return xReturn;
 80068f4:	697b      	ldr	r3, [r7, #20]
    }
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000010c 	.word	0x2000010c
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006916:	2301      	movs	r3, #1
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	623b      	str	r3, [r7, #32]
    }
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xTaskGenericNotify+0x4a>
        __asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61fb      	str	r3, [r7, #28]
    }
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006956:	f000 ff85 	bl	8007864 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d006      	beq.n	800696e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	3214      	adds	r2, #20
 8006966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800696e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4413      	add	r3, r2
 8006974:	3354      	adds	r3, #84	; 0x54
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800697c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	3354      	adds	r3, #84	; 0x54
 8006984:	2202      	movs	r2, #2
 8006986:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2b04      	cmp	r3, #4
 800698c:	d83b      	bhi.n	8006a06 <xTaskGenericNotify+0xfe>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <xTaskGenericNotify+0x8c>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	08006a25 	.word	0x08006a25
 8006998:	080069a9 	.word	0x080069a9
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069eb 	.word	0x080069eb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	3214      	adds	r2, #20
 80069ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	ea42 0103 	orr.w	r1, r2, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	3214      	adds	r2, #20
 80069be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069c2:	e032      	b.n	8006a2a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	3214      	adds	r2, #20
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	3214      	adds	r2, #20
 80069d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069da:	e026      	b.n	8006a2a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	3214      	adds	r2, #20
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069e8:	e01f      	b.n	8006a2a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d006      	beq.n	8006a00 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	3214      	adds	r2, #20
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80069fe:	e014      	b.n	8006a2a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006a04:	e011      	b.n	8006a2a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006a06:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <xTaskGenericNotify+0x1ac>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <xTaskGenericNotify+0x120>
        __asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	61bb      	str	r3, [r7, #24]
    }
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <xTaskGenericNotify+0x11a>
                    break;
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <xTaskGenericNotify+0x122>

                    break;
 8006a28:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d139      	bne.n	8006aa6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fb1e 	bl	8005078 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	2201      	movs	r2, #1
 8006a42:	409a      	lsls	r2, r3
 8006a44:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <xTaskGenericNotify+0x1b0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	; (8006ab8 <xTaskGenericNotify+0x1b0>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <xTaskGenericNotify+0x1b4>)
 8006a5c:	441a      	add	r2, r3
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7fe faaa 	bl	8004fbe <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <xTaskGenericNotify+0x180>
        __asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	617b      	str	r3, [r7, #20]
    }
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <xTaskGenericNotify+0x1b8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d907      	bls.n	8006aa6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <xTaskGenericNotify+0x1bc>)
 8006a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006aa6:	f000 ff0d 	bl	80078c4 <vPortExitCritical>

        return xReturn;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006aac:	4618      	mov	r0, r3
 8006aae:	3730      	adds	r7, #48	; 0x30
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200001e8 	.word	0x200001e8
 8006ab8:	200001ec 	.word	0x200001ec
 8006abc:	20000110 	.word	0x20000110
 8006ac0:	2000010c 	.word	0x2000010c
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b090      	sub	sp, #64	; 0x40
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b12:	f000 ff8b 	bl	8007a2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b30:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	3214      	adds	r2, #20
 8006b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b48:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	3354      	adds	r3, #84	; 0x54
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3354      	adds	r3, #84	; 0x54
 8006b60:	2202      	movs	r2, #2
 8006b62:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d83b      	bhi.n	8006be2 <xTaskGenericNotifyFromISR+0x11a>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <xTaskGenericNotifyFromISR+0xa8>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006c01 	.word	0x08006c01
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006bb9 	.word	0x08006bb9
 8006b80:	08006bc7 	.word	0x08006bc7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	3214      	adds	r2, #20
 8006b8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	ea42 0103 	orr.w	r1, r2, r3
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	3214      	adds	r2, #20
 8006b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006b9e:	e032      	b.n	8006c06 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	3214      	adds	r2, #20
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	1c59      	adds	r1, r3, #1
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	3214      	adds	r2, #20
 8006bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006bb6:	e026      	b.n	8006c06 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	3214      	adds	r2, #20
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006bc4:	e01f      	b.n	8006c06 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006bc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d006      	beq.n	8006bdc <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	3214      	adds	r2, #20
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006bda:	e014      	b.n	8006c06 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006be0:	e011      	b.n	8006c06 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006be2:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <xTaskGenericNotifyFromISR+0x1e8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	61fb      	str	r3, [r7, #28]
    }
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006c04:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d145      	bne.n	8006c9a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61bb      	str	r3, [r7, #24]
    }
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c2c:	4b21      	ldr	r3, [pc, #132]	; (8006cb4 <xTaskGenericNotifyFromISR+0x1ec>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d11c      	bne.n	8006c6e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	3304      	adds	r3, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe fa1d 	bl	8005078 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	2201      	movs	r2, #1
 8006c44:	409a      	lsls	r2, r3
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <xTaskGenericNotifyFromISR+0x1f0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <xTaskGenericNotifyFromISR+0x1f0>)
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <xTaskGenericNotifyFromISR+0x1f4>)
 8006c5e:	441a      	add	r2, r3
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	3304      	adds	r3, #4
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f7fe f9a9 	bl	8004fbe <vListInsertEnd>
 8006c6c:	e005      	b.n	8006c7a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	3318      	adds	r3, #24
 8006c72:	4619      	mov	r1, r3
 8006c74:	4812      	ldr	r0, [pc, #72]	; (8006cc0 <xTaskGenericNotifyFromISR+0x1f8>)
 8006c76:	f7fe f9a2 	bl	8004fbe <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <xTaskGenericNotifyFromISR+0x1fc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <xTaskGenericNotifyFromISR+0x200>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f383 8811 	msr	BASEPRI, r3
    }
 8006ca4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3740      	adds	r7, #64	; 0x40
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	200001e8 	.word	0x200001e8
 8006cb4:	2000020c 	.word	0x2000020c
 8006cb8:	200001ec 	.word	0x200001ec
 8006cbc:	20000110 	.word	0x20000110
 8006cc0:	200001a4 	.word	0x200001a4
 8006cc4:	2000010c 	.word	0x2000010c
 8006cc8:	200001f8 	.word	0x200001f8

08006ccc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006cd6:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cdc:	4b28      	ldr	r3, [pc, #160]	; (8006d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe f9c8 	bl	8005078 <uxListRemove>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006cee:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	43da      	mvns	r2, r3
 8006cfc:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4013      	ands	r3, r2
 8006d02:	4a20      	ldr	r2, [pc, #128]	; (8006d84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d04:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d10a      	bne.n	8006d24 <prvAddCurrentTaskToDelayedList+0x58>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d14:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	481a      	ldr	r0, [pc, #104]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d1e:	f7fe f94e 	bl	8004fbe <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006d22:	e026      	b.n	8006d72 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4413      	add	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d2c:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d209      	bcs.n	8006d50 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d3c:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7fe f95c 	bl	8005006 <vListInsert>
}
 8006d4e:	e010      	b.n	8006d72 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d50:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f7fe f952 	bl	8005006 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006d62:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d202      	bcs.n	8006d72 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006d6c:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6013      	str	r3, [r2, #0]
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200001e8 	.word	0x200001e8
 8006d80:	2000010c 	.word	0x2000010c
 8006d84:	200001ec 	.word	0x200001ec
 8006d88:	200001d0 	.word	0x200001d0
 8006d8c:	200001a0 	.word	0x200001a0
 8006d90:	2000019c 	.word	0x2000019c
 8006d94:	20000204 	.word	0x20000204

08006d98 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006da2:	f000 fb31 	bl	8007408 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <xTimerCreateTimerTask+0x54>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <xTimerCreateTimerTask+0x58>)
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	2302      	movs	r3, #2
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006dbc:	490d      	ldr	r1, [pc, #52]	; (8006df4 <xTimerCreateTimerTask+0x5c>)
 8006dbe:	480e      	ldr	r0, [pc, #56]	; (8006df8 <xTimerCreateTimerTask+0x60>)
 8006dc0:	f7fe ff38 	bl	8005c34 <xTaskCreate>
 8006dc4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	603b      	str	r3, [r7, #0]
    }
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006de2:	687b      	ldr	r3, [r7, #4]
    }
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000240 	.word	0x20000240
 8006df0:	20000244 	.word	0x20000244
 8006df4:	08009548 	.word	0x08009548
 8006df8:	08006fe9 	.word	0x08006fe9

08006dfc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006e0a:	202c      	movs	r0, #44	; 0x2c
 8006e0c:	f000 fe4e 	bl	8007aac <pvPortMalloc>
 8006e10:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f805 	bl	8006e3e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006e34:	697b      	ldr	r3, [r7, #20]
        }
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	617b      	str	r3, [r7, #20]
    }
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01e      	beq.n	8006eac <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006e6e:	f000 facb 	bl	8007408 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe f888 	bl	8004fa4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea0:	f043 0304 	orr.w	r3, r3, #4
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006eac:	bf00      	nop
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	623b      	str	r3, [r7, #32]
    }
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <xTimerGenericCommand+0x98>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d02a      	beq.n	8006f40 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b05      	cmp	r3, #5
 8006efa:	dc18      	bgt.n	8006f2e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006efc:	f7ff fbec 	bl	80066d8 <xTaskGetSchedulerState>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d109      	bne.n	8006f1a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <xTimerGenericCommand+0x98>)
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f107 0114 	add.w	r1, r7, #20
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	f7fe f9c5 	bl	80052a0 <xQueueGenericSend>
 8006f16:	6278      	str	r0, [r7, #36]	; 0x24
 8006f18:	e012      	b.n	8006f40 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <xTimerGenericCommand+0x98>)
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f107 0114 	add.w	r1, r7, #20
 8006f22:	2300      	movs	r3, #0
 8006f24:	2200      	movs	r2, #0
 8006f26:	f7fe f9bb 	bl	80052a0 <xQueueGenericSend>
 8006f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006f2c:	e008      	b.n	8006f40 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <xTimerGenericCommand+0x98>)
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	f107 0114 	add.w	r1, r7, #20
 8006f36:	2300      	movs	r3, #0
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	f7fe faaf 	bl	800549c <xQueueGenericSendFromISR>
 8006f3e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006f42:	4618      	mov	r0, r3
 8006f44:	3728      	adds	r7, #40	; 0x28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000240 	.word	0x20000240

08006f50 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5a:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <prvProcessExpiredTimer+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe f885 	bl	8005078 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d022      	beq.n	8006fc2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	18d1      	adds	r1, r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	6978      	ldr	r0, [r7, #20]
 8006f8a:	f000 f8d1 	bl	8007130 <prvInsertTimerInActiveList>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01f      	beq.n	8006fd4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f94:	2300      	movs	r3, #0
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	6978      	ldr	r0, [r7, #20]
 8006fa0:	f7ff ff88 	bl	8006eb4 <xTimerGenericCommand>
 8006fa4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d113      	bne.n	8006fd4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
    }
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	6978      	ldr	r0, [r7, #20]
 8006fda:	4798      	blx	r3
    }
 8006fdc:	bf00      	nop
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000238 	.word	0x20000238

08006fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ff0:	f107 0308 	add.w	r3, r7, #8
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f857 	bl	80070a8 <prvGetNextExpireTime>
 8006ffa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4619      	mov	r1, r3
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f803 	bl	800700c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007006:	f000 f8d5 	bl	80071b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800700a:	e7f1      	b.n	8006ff0 <prvTimerTask+0x8>

0800700c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007016:	f7fe ffa5 	bl	8005f64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f866 	bl	80070f0 <prvSampleTimeNow>
 8007024:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d130      	bne.n	800708e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <prvProcessTimerOrBlockTask+0x3c>
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	429a      	cmp	r2, r3
 8007038:	d806      	bhi.n	8007048 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800703a:	f7fe ffa1 	bl	8005f80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff ff85 	bl	8006f50 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007046:	e024      	b.n	8007092 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <prvProcessTimerOrBlockTask+0x90>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <prvProcessTimerOrBlockTask+0x50>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <prvProcessTimerOrBlockTask+0x52>
 800705c:	2300      	movs	r3, #0
 800705e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <prvProcessTimerOrBlockTask+0x94>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	4619      	mov	r1, r3
 800706e:	f7fe fdad 	bl	8005bcc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007072:	f7fe ff85 	bl	8005f80 <xTaskResumeAll>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <prvProcessTimerOrBlockTask+0x98>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
    }
 800708c:	e001      	b.n	8007092 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800708e:	f7fe ff77 	bl	8005f80 <xTaskResumeAll>
    }
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	2000023c 	.word	0x2000023c
 80070a0:	20000240 	.word	0x20000240
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070b0:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <prvGetNextExpireTime+0x44>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <prvGetNextExpireTime+0x16>
 80070ba:	2201      	movs	r2, #1
 80070bc:	e000      	b.n	80070c0 <prvGetNextExpireTime+0x18>
 80070be:	2200      	movs	r2, #0
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <prvGetNextExpireTime+0x44>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e001      	b.n	80070dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80070dc:	68fb      	ldr	r3, [r7, #12]
    }
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	20000238 	.word	0x20000238

080070f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80070f8:	f7fe ffde 	bl	80060b8 <xTaskGetTickCount>
 80070fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <prvSampleTimeNow+0x3c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	429a      	cmp	r2, r3
 8007106:	d205      	bcs.n	8007114 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007108:	f000 f91a 	bl	8007340 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e002      	b.n	800711a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800711a:	4a04      	ldr	r2, [pc, #16]	; (800712c <prvSampleTimeNow+0x3c>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007120:	68fb      	ldr	r3, [r7, #12]
    }
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000248 	.word	0x20000248

08007130 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d812      	bhi.n	800717c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	e01b      	b.n	80071a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800716a:	4b10      	ldr	r3, [pc, #64]	; (80071ac <prvInsertTimerInActiveList+0x7c>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fd ff46 	bl	8005006 <vListInsert>
 800717a:	e012      	b.n	80071a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d206      	bcs.n	8007192 <prvInsertTimerInActiveList+0x62>
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d302      	bcc.n	8007192 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e007      	b.n	80071a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <prvInsertTimerInActiveList+0x80>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3304      	adds	r3, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f7fd ff32 	bl	8005006 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80071a2:	697b      	ldr	r3, [r7, #20]
    }
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	2000023c 	.word	0x2000023c
 80071b0:	20000238 	.word	0x20000238

080071b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071ba:	e0ae      	b.n	800731a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f2c0 80aa 	blt.w	8007318 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fd ff4f 	bl	8005078 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071da:	1d3b      	adds	r3, r7, #4
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ff87 	bl	80070f0 <prvSampleTimeNow>
 80071e2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	f200 8097 	bhi.w	800731a <prvProcessReceivedCommands+0x166>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <prvProcessReceivedCommands+0x40>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007291 	.word	0x08007291
 8007204:	080072a5 	.word	0x080072a5
 8007208:	080072ef 	.word	0x080072ef
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800721d 	.word	0x0800721d
 8007214:	08007291 	.word	0x08007291
 8007218:	080072a5 	.word	0x080072a5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	18d1      	adds	r1, r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a3a      	ldr	r2, [r7, #32]
 800723a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800723c:	f7ff ff78 	bl	8007130 <prvInsertTimerInActiveList>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d069      	beq.n	800731a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800724c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05e      	beq.n	800731a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	441a      	add	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800726e:	f7ff fe21 	bl	8006eb4 <xTimerGenericCommand>
 8007272:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d14f      	bne.n	800731a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	61bb      	str	r3, [r7, #24]
    }
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80072a2:	e03a      	b.n	800731a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <prvProcessReceivedCommands+0x126>
        __asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	617b      	str	r3, [r7, #20]
    }
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	18d1      	adds	r1, r2, r3
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072e8:	f7ff ff22 	bl	8007130 <prvInsertTimerInActiveList>
                        break;
 80072ec:	e015      	b.n	800731a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80072fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072fe:	f000 fcb5 	bl	8007c6c <vPortFree>
 8007302:	e00a      	b.n	800731a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	b2da      	uxtb	r2, r3
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007316:	e000      	b.n	800731a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007318:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800731a:	4b08      	ldr	r3, [pc, #32]	; (800733c <prvProcessReceivedCommands+0x188>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f107 0108 	add.w	r1, r7, #8
 8007322:	2200      	movs	r2, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe f963 	bl	80055f0 <xQueueReceive>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	f47f af45 	bne.w	80071bc <prvProcessReceivedCommands+0x8>
        }
    }
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	3728      	adds	r7, #40	; 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20000240 	.word	0x20000240

08007340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007346:	e048      	b.n	80073da <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <prvSwitchTimerLists+0xc0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <prvSwitchTimerLists+0xc0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd fe89 	bl	8005078 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02e      	beq.n	80073da <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d90e      	bls.n	80073ac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800739a:	4b19      	ldr	r3, [pc, #100]	; (8007400 <prvSwitchTimerLists+0xc0>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fd fe2e 	bl	8005006 <vListInsert>
 80073aa:	e016      	b.n	80073da <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073ac:	2300      	movs	r3, #0
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fd7c 	bl	8006eb4 <xTimerGenericCommand>
 80073bc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <prvSwitchTimerLists+0x9a>
        __asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	603b      	str	r3, [r7, #0]
    }
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1b1      	bne.n	8007348 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <prvSwitchTimerLists+0xc4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a04      	ldr	r2, [pc, #16]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073f0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80073f2:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvSwitchTimerLists+0xc4>)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6013      	str	r3, [r2, #0]
    }
 80073f8:	bf00      	nop
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000238 	.word	0x20000238
 8007404:	2000023c 	.word	0x2000023c

08007408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800740c:	f000 fa2a 	bl	8007864 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007410:	4b12      	ldr	r3, [pc, #72]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11d      	bne.n	8007454 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007418:	4811      	ldr	r0, [pc, #68]	; (8007460 <prvCheckForValidListAndQueue+0x58>)
 800741a:	f7fd fda3 	bl	8004f64 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800741e:	4811      	ldr	r0, [pc, #68]	; (8007464 <prvCheckForValidListAndQueue+0x5c>)
 8007420:	f7fd fda0 	bl	8004f64 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007424:	4b10      	ldr	r3, [pc, #64]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007426:	4a0e      	ldr	r2, [pc, #56]	; (8007460 <prvCheckForValidListAndQueue+0x58>)
 8007428:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800742a:	4b10      	ldr	r3, [pc, #64]	; (800746c <prvCheckForValidListAndQueue+0x64>)
 800742c:	4a0d      	ldr	r2, [pc, #52]	; (8007464 <prvCheckForValidListAndQueue+0x5c>)
 800742e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007430:	2200      	movs	r2, #0
 8007432:	210c      	movs	r1, #12
 8007434:	200a      	movs	r0, #10
 8007436:	f7fd feb1 	bl	800519c <xQueueGenericCreate>
 800743a:	4603      	mov	r3, r0
 800743c:	4a07      	ldr	r2, [pc, #28]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 800743e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4908      	ldr	r1, [pc, #32]	; (8007470 <prvCheckForValidListAndQueue+0x68>)
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fb92 	bl	8005b78 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007454:	f000 fa36 	bl	80078c4 <vPortExitCritical>
    }
 8007458:	bf00      	nop
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000240 	.word	0x20000240
 8007460:	20000210 	.word	0x20000210
 8007464:	20000224 	.word	0x20000224
 8007468:	20000238 	.word	0x20000238
 800746c:	2000023c 	.word	0x2000023c
 8007470:	08009550 	.word	0x08009550

08007474 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <xTimerIsTimerActive+0x28>
        __asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60fb      	str	r3, [r7, #12]
    }
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 800749c:	f000 f9e2 	bl	8007864 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e001      	b.n	80074b8 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80074b8:	f000 fa04 	bl	80078c4 <vPortExitCritical>

        return xReturn;
 80074bc:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <pvTimerGetTimerID+0x28>
        __asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	60fb      	str	r3, [r7, #12]
    }
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80074ee:	f000 f9b9 	bl	8007864 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80074f8:	f000 f9e4 	bl	80078c4 <vPortExitCritical>

        return pvReturn;
 80074fc:	693b      	ldr	r3, [r7, #16]
    }
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3b04      	subs	r3, #4
 8007518:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007520:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3b04      	subs	r3, #4
 8007526:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3b04      	subs	r3, #4
 8007536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007538:	4a0c      	ldr	r2, [pc, #48]	; (800756c <pxPortInitialiseStack+0x64>)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3b14      	subs	r3, #20
 8007542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3b04      	subs	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f06f 0202 	mvn.w	r2, #2
 8007556:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b20      	subs	r3, #32
 800755c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	08007571 	.word	0x08007571

08007570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <prvTaskExitError+0x54>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d00a      	beq.n	800759a <prvTaskExitError+0x2a>
        __asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	60fb      	str	r3, [r7, #12]
    }
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <prvTaskExitError+0x28>
        __asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60bb      	str	r3, [r7, #8]
    }
 80075ac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80075ae:	bf00      	nop
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0fc      	beq.n	80075b0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20000024 	.word	0x20000024
	...

080075d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <pxCurrentTCBConst2>)
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	f380 8809 	msr	PSP, r0
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8811 	msr	BASEPRI, r0
 80075ea:	4770      	bx	lr
 80075ec:	f3af 8000 	nop.w

080075f0 <pxCurrentTCBConst2>:
 80075f0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80075f8:	4808      	ldr	r0, [pc, #32]	; (800761c <prvPortStartFirstTask+0x24>)
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	6800      	ldr	r0, [r0, #0]
 80075fe:	f380 8808 	msr	MSP, r0
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8814 	msr	CONTROL, r0
 800760a:	b662      	cpsie	i
 800760c:	b661      	cpsie	f
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	df00      	svc	0
 8007618:	bf00      	nop
 800761a:	0000      	.short	0x0000
 800761c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop

08007624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800762a:	4b46      	ldr	r3, [pc, #280]	; (8007744 <xPortStartScheduler+0x120>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a46      	ldr	r2, [pc, #280]	; (8007748 <xPortStartScheduler+0x124>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10a      	bne.n	800764a <xPortStartScheduler+0x26>
        __asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	613b      	str	r3, [r7, #16]
    }
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800764a:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <xPortStartScheduler+0x120>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a3f      	ldr	r2, [pc, #252]	; (800774c <xPortStartScheduler+0x128>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d10a      	bne.n	800766a <xPortStartScheduler+0x46>
        __asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
    }
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800766a:	4b39      	ldr	r3, [pc, #228]	; (8007750 <xPortStartScheduler+0x12c>)
 800766c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	22ff      	movs	r2, #255	; 0xff
 800767a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800768c:	b2da      	uxtb	r2, r3
 800768e:	4b31      	ldr	r3, [pc, #196]	; (8007754 <xPortStartScheduler+0x130>)
 8007690:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007692:	4b31      	ldr	r3, [pc, #196]	; (8007758 <xPortStartScheduler+0x134>)
 8007694:	2207      	movs	r2, #7
 8007696:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007698:	e009      	b.n	80076ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <xPortStartScheduler+0x134>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a2d      	ldr	r2, [pc, #180]	; (8007758 <xPortStartScheduler+0x134>)
 80076a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d0ef      	beq.n	800769a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076ba:	4b27      	ldr	r3, [pc, #156]	; (8007758 <xPortStartScheduler+0x134>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1c3 0307 	rsb	r3, r3, #7
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d00a      	beq.n	80076dc <xPortStartScheduler+0xb8>
        __asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60bb      	str	r3, [r7, #8]
    }
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <xPortStartScheduler+0x134>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	4a1d      	ldr	r2, [pc, #116]	; (8007758 <xPortStartScheduler+0x134>)
 80076e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076e6:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <xPortStartScheduler+0x134>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ee:	4a1a      	ldr	r2, [pc, #104]	; (8007758 <xPortStartScheduler+0x134>)
 80076f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80076fa:	4b18      	ldr	r3, [pc, #96]	; (800775c <xPortStartScheduler+0x138>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a17      	ldr	r2, [pc, #92]	; (800775c <xPortStartScheduler+0x138>)
 8007700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007704:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007706:	4b15      	ldr	r3, [pc, #84]	; (800775c <xPortStartScheduler+0x138>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a14      	ldr	r2, [pc, #80]	; (800775c <xPortStartScheduler+0x138>)
 800770c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007710:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007712:	f000 f95b 	bl	80079cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007716:	4b12      	ldr	r3, [pc, #72]	; (8007760 <xPortStartScheduler+0x13c>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800771c:	f000 f97a 	bl	8007a14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <xPortStartScheduler+0x140>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a0f      	ldr	r2, [pc, #60]	; (8007764 <xPortStartScheduler+0x140>)
 8007726:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800772a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800772c:	f7ff ff64 	bl	80075f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007730:	f7fe fd8a 	bl	8006248 <vTaskSwitchContext>
    prvTaskExitError();
 8007734:	f7ff ff1c 	bl	8007570 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	e000ed00 	.word	0xe000ed00
 8007748:	410fc271 	.word	0x410fc271
 800774c:	410fc270 	.word	0x410fc270
 8007750:	e000e400 	.word	0xe000e400
 8007754:	2000024c 	.word	0x2000024c
 8007758:	20000250 	.word	0x20000250
 800775c:	e000ed20 	.word	0xe000ed20
 8007760:	20000024 	.word	0x20000024
 8007764:	e000ef34 	.word	0xe000ef34

08007768 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800776e:	4b37      	ldr	r3, [pc, #220]	; (800784c <vInitPrioGroupValue+0xe4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a37      	ldr	r2, [pc, #220]	; (8007850 <vInitPrioGroupValue+0xe8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d10a      	bne.n	800778e <vInitPrioGroupValue+0x26>
        __asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
    }
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800778e:	4b2f      	ldr	r3, [pc, #188]	; (800784c <vInitPrioGroupValue+0xe4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a30      	ldr	r2, [pc, #192]	; (8007854 <vInitPrioGroupValue+0xec>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d10a      	bne.n	80077ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	60fb      	str	r3, [r7, #12]
    }
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077ae:	4b2a      	ldr	r3, [pc, #168]	; (8007858 <vInitPrioGroupValue+0xf0>)
 80077b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	4b22      	ldr	r3, [pc, #136]	; (800785c <vInitPrioGroupValue+0xf4>)
 80077d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077d6:	4b22      	ldr	r3, [pc, #136]	; (8007860 <vInitPrioGroupValue+0xf8>)
 80077d8:	2207      	movs	r2, #7
 80077da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077dc:	e009      	b.n	80077f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <vInitPrioGroupValue+0xf8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	4a1e      	ldr	r2, [pc, #120]	; (8007860 <vInitPrioGroupValue+0xf8>)
 80077e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d0ef      	beq.n	80077de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077fe:	4b18      	ldr	r3, [pc, #96]	; (8007860 <vInitPrioGroupValue+0xf8>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f1c3 0307 	rsb	r3, r3, #7
 8007806:	2b04      	cmp	r3, #4
 8007808:	d00a      	beq.n	8007820 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60bb      	str	r3, [r7, #8]
    }
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <vInitPrioGroupValue+0xf8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	4a0e      	ldr	r2, [pc, #56]	; (8007860 <vInitPrioGroupValue+0xf8>)
 8007828:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <vInitPrioGroupValue+0xf8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007832:	4a0b      	ldr	r2, [pc, #44]	; (8007860 <vInitPrioGroupValue+0xf8>)
 8007834:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	b2da      	uxtb	r2, r3
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	e000ed00 	.word	0xe000ed00
 8007850:	410fc271 	.word	0x410fc271
 8007854:	410fc270 	.word	0x410fc270
 8007858:	e000e400 	.word	0xe000e400
 800785c:	2000024c 	.word	0x2000024c
 8007860:	20000250 	.word	0x20000250

08007864 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
        __asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	607b      	str	r3, [r7, #4]
    }
 800787c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <vPortEnterCritical+0x58>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <vPortEnterCritical+0x58>)
 8007886:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <vPortEnterCritical+0x58>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d10f      	bne.n	80078b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <vPortEnterCritical+0x5c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	603b      	str	r3, [r7, #0]
    }
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <vPortEnterCritical+0x4a>
    }
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	20000024 	.word	0x20000024
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <vPortExitCritical+0x50>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <vPortExitCritical+0x24>
        __asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	607b      	str	r3, [r7, #4]
    }
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <vPortExitCritical+0x50>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	4a09      	ldr	r2, [pc, #36]	; (8007914 <vPortExitCritical+0x50>)
 80078f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80078f2:	4b08      	ldr	r3, [pc, #32]	; (8007914 <vPortExitCritical+0x50>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <vPortExitCritical+0x42>
 80078fa:	2300      	movs	r3, #0
 80078fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	f383 8811 	msr	BASEPRI, r3
    }
 8007904:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000024 	.word	0x20000024
	...

08007920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007920:	f3ef 8009 	mrs	r0, PSP
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4b15      	ldr	r3, [pc, #84]	; (8007980 <pxCurrentTCBConst>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f01e 0f10 	tst.w	lr, #16
 8007930:	bf08      	it	eq
 8007932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	6010      	str	r0, [r2, #0]
 800793c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007944:	f380 8811 	msr	BASEPRI, r0
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f7fe fc7a 	bl	8006248 <vTaskSwitchContext>
 8007954:	f04f 0000 	mov.w	r0, #0
 8007958:	f380 8811 	msr	BASEPRI, r0
 800795c:	bc09      	pop	{r0, r3}
 800795e:	6819      	ldr	r1, [r3, #0]
 8007960:	6808      	ldr	r0, [r1, #0]
 8007962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007966:	f01e 0f10 	tst.w	lr, #16
 800796a:	bf08      	it	eq
 800796c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007970:	f380 8809 	msr	PSP, r0
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w

08007980 <pxCurrentTCBConst>:
 8007980:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop

08007988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
        __asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	607b      	str	r3, [r7, #4]
    }
 80079a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80079a2:	f7fe fb99 	bl	80060d8 <xTaskIncrementTick>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <SysTick_Handler+0x40>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	2300      	movs	r3, #0
 80079b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	f383 8811 	msr	BASEPRI, r3
    }
 80079be:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <vPortSetupTimerInterrupt+0x34>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079d6:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <vPortSetupTimerInterrupt+0x38>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <vPortSetupTimerInterrupt+0x3c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0a      	ldr	r2, [pc, #40]	; (8007a0c <vPortSetupTimerInterrupt+0x40>)
 80079e2:	fba2 2303 	umull	r2, r3, r2, r3
 80079e6:	099b      	lsrs	r3, r3, #6
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <vPortSetupTimerInterrupt+0x44>)
 80079ea:	3b01      	subs	r3, #1
 80079ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <vPortSetupTimerInterrupt+0x34>)
 80079f0:	2207      	movs	r2, #7
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	e000e010 	.word	0xe000e010
 8007a04:	e000e018 	.word	0xe000e018
 8007a08:	20000010 	.word	0x20000010
 8007a0c:	10624dd3 	.word	0x10624dd3
 8007a10:	e000e014 	.word	0xe000e014

08007a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a24 <vPortEnableVFP+0x10>
 8007a18:	6801      	ldr	r1, [r0, #0]
 8007a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a1e:	6001      	str	r1, [r0, #0]
 8007a20:	4770      	bx	lr
 8007a22:	0000      	.short	0x0000
 8007a24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop

08007a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007a32:	f3ef 8305 	mrs	r3, IPSR
 8007a36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b0f      	cmp	r3, #15
 8007a3c:	d914      	bls.n	8007a68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a3e:	4a17      	ldr	r2, [pc, #92]	; (8007a9c <vPortValidateInterruptPriority+0x70>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <vPortValidateInterruptPriority+0x74>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	7afa      	ldrb	r2, [r7, #11]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d20a      	bcs.n	8007a68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	607b      	str	r3, [r7, #4]
    }
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a68:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <vPortValidateInterruptPriority+0x78>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a70:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <vPortValidateInterruptPriority+0x7c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d90a      	bls.n	8007a8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	603b      	str	r3, [r7, #0]
    }
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <vPortValidateInterruptPriority+0x60>
    }
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	e000e3f0 	.word	0xe000e3f0
 8007aa0:	2000024c 	.word	0x2000024c
 8007aa4:	e000ed0c 	.word	0xe000ed0c
 8007aa8:	20000250 	.word	0x20000250

08007aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007ab8:	f7fe fa54 	bl	8005f64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007abc:	4b65      	ldr	r3, [pc, #404]	; (8007c54 <pvPortMalloc+0x1a8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007ac4:	f000 f934 	bl	8007d30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ac8:	4b63      	ldr	r3, [pc, #396]	; (8007c58 <pvPortMalloc+0x1ac>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 80a7 	bne.w	8007c24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02d      	beq.n	8007b38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007adc:	2208      	movs	r2, #8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d227      	bcs.n	8007b38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007ae8:	2208      	movs	r2, #8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d021      	beq.n	8007b3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f023 0307 	bic.w	r3, r3, #7
 8007b00:	3308      	adds	r3, #8
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d214      	bcs.n	8007b32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	3308      	adds	r3, #8
 8007b10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d010      	beq.n	8007b3e <pvPortMalloc+0x92>
        __asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	617b      	str	r3, [r7, #20]
    }
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b36:	e002      	b.n	8007b3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	607b      	str	r3, [r7, #4]
 8007b3c:	e000      	b.n	8007b40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d06e      	beq.n	8007c24 <pvPortMalloc+0x178>
 8007b46:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <pvPortMalloc+0x1b0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d869      	bhi.n	8007c24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007b50:	4b43      	ldr	r3, [pc, #268]	; (8007c60 <pvPortMalloc+0x1b4>)
 8007b52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007b54:	4b42      	ldr	r3, [pc, #264]	; (8007c60 <pvPortMalloc+0x1b4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b5a:	e004      	b.n	8007b66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d903      	bls.n	8007b78 <pvPortMalloc+0xcc>
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1f1      	bne.n	8007b5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007b78:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <pvPortMalloc+0x1a8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d050      	beq.n	8007c24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2208      	movs	r2, #8
 8007b88:	4413      	add	r3, r2
 8007b8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d91f      	bls.n	8007be4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <pvPortMalloc+0x120>
        __asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	613b      	str	r3, [r7, #16]
    }
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bde:	69b8      	ldr	r0, [r7, #24]
 8007be0:	f000 f908 	bl	8007df4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007be4:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <pvPortMalloc+0x1b0>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <pvPortMalloc+0x1b0>)
 8007bf0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bf2:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <pvPortMalloc+0x1b0>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <pvPortMalloc+0x1b8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d203      	bcs.n	8007c06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <pvPortMalloc+0x1b0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a18      	ldr	r2, [pc, #96]	; (8007c64 <pvPortMalloc+0x1b8>)
 8007c04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <pvPortMalloc+0x1ac>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <pvPortMalloc+0x1bc>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	4a11      	ldr	r2, [pc, #68]	; (8007c68 <pvPortMalloc+0x1bc>)
 8007c22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007c24:	f7fe f9ac 	bl	8005f80 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <pvPortMalloc+0x19c>
        __asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	60fb      	str	r3, [r7, #12]
    }
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <pvPortMalloc+0x19a>
    return pvReturn;
 8007c48:	69fb      	ldr	r3, [r7, #28]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3728      	adds	r7, #40	; 0x28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20012e5c 	.word	0x20012e5c
 8007c58:	20012e70 	.word	0x20012e70
 8007c5c:	20012e60 	.word	0x20012e60
 8007c60:	20012e54 	.word	0x20012e54
 8007c64:	20012e64 	.word	0x20012e64
 8007c68:	20012e68 	.word	0x20012e68

08007c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d04d      	beq.n	8007d1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007c7e:	2308      	movs	r3, #8
 8007c80:	425b      	negs	r3, r3
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4413      	add	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <vPortFree+0xb8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4013      	ands	r3, r2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <vPortFree+0x44>
        __asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	60fb      	str	r3, [r7, #12]
    }
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <vPortFree+0x62>
        __asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60bb      	str	r3, [r7, #8]
    }
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <vPortFree+0xb8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01e      	beq.n	8007d1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d11a      	bne.n	8007d1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <vPortFree+0xb8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	43db      	mvns	r3, r3
 8007cee:	401a      	ands	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007cf4:	f7fe f936 	bl	8005f64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <vPortFree+0xbc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4413      	add	r3, r2
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <vPortFree+0xbc>)
 8007d04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d06:	6938      	ldr	r0, [r7, #16]
 8007d08:	f000 f874 	bl	8007df4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <vPortFree+0xc0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	4a06      	ldr	r2, [pc, #24]	; (8007d2c <vPortFree+0xc0>)
 8007d14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007d16:	f7fe f933 	bl	8005f80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20012e70 	.word	0x20012e70
 8007d28:	20012e60 	.word	0x20012e60
 8007d2c:	20012e6c 	.word	0x20012e6c

08007d30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007d3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007d3c:	4b27      	ldr	r3, [pc, #156]	; (8007ddc <prvHeapInit+0xac>)
 8007d3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3307      	adds	r3, #7
 8007d4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0307 	bic.w	r3, r3, #7
 8007d56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <prvHeapInit+0xac>)
 8007d60:	4413      	add	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d68:	4a1d      	ldr	r2, [pc, #116]	; (8007de0 <prvHeapInit+0xb0>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <prvHeapInit+0xb0>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a15      	ldr	r2, [pc, #84]	; (8007de4 <prvHeapInit+0xb4>)
 8007d90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007d92:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <prvHeapInit+0xb4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2200      	movs	r2, #0
 8007d98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <prvHeapInit+0xb4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007db0:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <prvHeapInit+0xb4>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <prvHeapInit+0xb8>)
 8007dbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4a09      	ldr	r2, [pc, #36]	; (8007dec <prvHeapInit+0xbc>)
 8007dc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <prvHeapInit+0xc0>)
 8007dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dce:	601a      	str	r2, [r3, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	20000254 	.word	0x20000254
 8007de0:	20012e54 	.word	0x20012e54
 8007de4:	20012e5c 	.word	0x20012e5c
 8007de8:	20012e64 	.word	0x20012e64
 8007dec:	20012e60 	.word	0x20012e60
 8007df0:	20012e70 	.word	0x20012e70

08007df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dfc:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <prvInsertBlockIntoFreeList+0xac>)
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e002      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x14>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d8f7      	bhi.n	8007e02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d108      	bne.n	8007e36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	441a      	add	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	441a      	add	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d118      	bne.n	8007e7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b15      	ldr	r3, [pc, #84]	; (8007ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d00d      	beq.n	8007e72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	441a      	add	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	e008      	b.n	8007e84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e72:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e003      	b.n	8007e84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d002      	beq.n	8007e92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20012e54 	.word	0x20012e54
 8007ea4:	20012e5c 	.word	0x20012e5c

08007ea8 <__errno>:
 8007ea8:	4b01      	ldr	r3, [pc, #4]	; (8007eb0 <__errno+0x8>)
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000028 	.word	0x20000028

08007eb4 <__libc_init_array>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4d0d      	ldr	r5, [pc, #52]	; (8007eec <__libc_init_array+0x38>)
 8007eb8:	4c0d      	ldr	r4, [pc, #52]	; (8007ef0 <__libc_init_array+0x3c>)
 8007eba:	1b64      	subs	r4, r4, r5
 8007ebc:	10a4      	asrs	r4, r4, #2
 8007ebe:	2600      	movs	r6, #0
 8007ec0:	42a6      	cmp	r6, r4
 8007ec2:	d109      	bne.n	8007ed8 <__libc_init_array+0x24>
 8007ec4:	4d0b      	ldr	r5, [pc, #44]	; (8007ef4 <__libc_init_array+0x40>)
 8007ec6:	4c0c      	ldr	r4, [pc, #48]	; (8007ef8 <__libc_init_array+0x44>)
 8007ec8:	f001 f948 	bl	800915c <_init>
 8007ecc:	1b64      	subs	r4, r4, r5
 8007ece:	10a4      	asrs	r4, r4, #2
 8007ed0:	2600      	movs	r6, #0
 8007ed2:	42a6      	cmp	r6, r4
 8007ed4:	d105      	bne.n	8007ee2 <__libc_init_array+0x2e>
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007edc:	4798      	blx	r3
 8007ede:	3601      	adds	r6, #1
 8007ee0:	e7ee      	b.n	8007ec0 <__libc_init_array+0xc>
 8007ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee6:	4798      	blx	r3
 8007ee8:	3601      	adds	r6, #1
 8007eea:	e7f2      	b.n	8007ed2 <__libc_init_array+0x1e>
 8007eec:	08009610 	.word	0x08009610
 8007ef0:	08009610 	.word	0x08009610
 8007ef4:	08009610 	.word	0x08009610
 8007ef8:	08009614 	.word	0x08009614

08007efc <memcpy>:
 8007efc:	440a      	add	r2, r1
 8007efe:	4291      	cmp	r1, r2
 8007f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f04:	d100      	bne.n	8007f08 <memcpy+0xc>
 8007f06:	4770      	bx	lr
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f12:	4291      	cmp	r1, r2
 8007f14:	d1f9      	bne.n	8007f0a <memcpy+0xe>
 8007f16:	bd10      	pop	{r4, pc}

08007f18 <memset>:
 8007f18:	4402      	add	r2, r0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d100      	bne.n	8007f22 <memset+0xa>
 8007f20:	4770      	bx	lr
 8007f22:	f803 1b01 	strb.w	r1, [r3], #1
 8007f26:	e7f9      	b.n	8007f1c <memset+0x4>

08007f28 <iprintf>:
 8007f28:	b40f      	push	{r0, r1, r2, r3}
 8007f2a:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <iprintf+0x2c>)
 8007f2c:	b513      	push	{r0, r1, r4, lr}
 8007f2e:	681c      	ldr	r4, [r3, #0]
 8007f30:	b124      	cbz	r4, 8007f3c <iprintf+0x14>
 8007f32:	69a3      	ldr	r3, [r4, #24]
 8007f34:	b913      	cbnz	r3, 8007f3c <iprintf+0x14>
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 f886 	bl	8008048 <__sinit>
 8007f3c:	ab05      	add	r3, sp, #20
 8007f3e:	9a04      	ldr	r2, [sp, #16]
 8007f40:	68a1      	ldr	r1, [r4, #8]
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 faff 	bl	8008548 <_vfiprintf_r>
 8007f4a:	b002      	add	sp, #8
 8007f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f50:	b004      	add	sp, #16
 8007f52:	4770      	bx	lr
 8007f54:	20000028 	.word	0x20000028

08007f58 <siprintf>:
 8007f58:	b40e      	push	{r1, r2, r3}
 8007f5a:	b500      	push	{lr}
 8007f5c:	b09c      	sub	sp, #112	; 0x70
 8007f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f60:	9002      	str	r0, [sp, #8]
 8007f62:	9006      	str	r0, [sp, #24]
 8007f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f68:	4809      	ldr	r0, [pc, #36]	; (8007f90 <siprintf+0x38>)
 8007f6a:	9107      	str	r1, [sp, #28]
 8007f6c:	9104      	str	r1, [sp, #16]
 8007f6e:	4909      	ldr	r1, [pc, #36]	; (8007f94 <siprintf+0x3c>)
 8007f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f74:	9105      	str	r1, [sp, #20]
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	a902      	add	r1, sp, #8
 8007f7c:	f000 f9ba 	bl	80082f4 <_svfiprintf_r>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	b01c      	add	sp, #112	; 0x70
 8007f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f8c:	b003      	add	sp, #12
 8007f8e:	4770      	bx	lr
 8007f90:	20000028 	.word	0x20000028
 8007f94:	ffff0208 	.word	0xffff0208

08007f98 <std>:
 8007f98:	2300      	movs	r3, #0
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa6:	6083      	str	r3, [r0, #8]
 8007fa8:	8181      	strh	r1, [r0, #12]
 8007faa:	6643      	str	r3, [r0, #100]	; 0x64
 8007fac:	81c2      	strh	r2, [r0, #14]
 8007fae:	6183      	str	r3, [r0, #24]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	305c      	adds	r0, #92	; 0x5c
 8007fb6:	f7ff ffaf 	bl	8007f18 <memset>
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <std+0x38>)
 8007fbc:	6263      	str	r3, [r4, #36]	; 0x24
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <std+0x3c>)
 8007fc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <std+0x40>)
 8007fc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <std+0x44>)
 8007fc8:	6224      	str	r4, [r4, #32]
 8007fca:	6323      	str	r3, [r4, #48]	; 0x30
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	bf00      	nop
 8007fd0:	08008af1 	.word	0x08008af1
 8007fd4:	08008b13 	.word	0x08008b13
 8007fd8:	08008b4b 	.word	0x08008b4b
 8007fdc:	08008b6f 	.word	0x08008b6f

08007fe0 <_cleanup_r>:
 8007fe0:	4901      	ldr	r1, [pc, #4]	; (8007fe8 <_cleanup_r+0x8>)
 8007fe2:	f000 b8af 	b.w	8008144 <_fwalk_reent>
 8007fe6:	bf00      	nop
 8007fe8:	08008e49 	.word	0x08008e49

08007fec <__sfmoreglue>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	1e4a      	subs	r2, r1, #1
 8007ff0:	2568      	movs	r5, #104	; 0x68
 8007ff2:	4355      	muls	r5, r2
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ffa:	f000 f8c5 	bl	8008188 <_malloc_r>
 8007ffe:	4604      	mov	r4, r0
 8008000:	b140      	cbz	r0, 8008014 <__sfmoreglue+0x28>
 8008002:	2100      	movs	r1, #0
 8008004:	e9c0 1600 	strd	r1, r6, [r0]
 8008008:	300c      	adds	r0, #12
 800800a:	60a0      	str	r0, [r4, #8]
 800800c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008010:	f7ff ff82 	bl	8007f18 <memset>
 8008014:	4620      	mov	r0, r4
 8008016:	bd70      	pop	{r4, r5, r6, pc}

08008018 <__sfp_lock_acquire>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__sfp_lock_acquire+0x8>)
 800801a:	f000 b8b3 	b.w	8008184 <__retarget_lock_acquire_recursive>
 800801e:	bf00      	nop
 8008020:	20012fa8 	.word	0x20012fa8

08008024 <__sfp_lock_release>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__sfp_lock_release+0x8>)
 8008026:	f000 b8ae 	b.w	8008186 <__retarget_lock_release_recursive>
 800802a:	bf00      	nop
 800802c:	20012fa8 	.word	0x20012fa8

08008030 <__sinit_lock_acquire>:
 8008030:	4801      	ldr	r0, [pc, #4]	; (8008038 <__sinit_lock_acquire+0x8>)
 8008032:	f000 b8a7 	b.w	8008184 <__retarget_lock_acquire_recursive>
 8008036:	bf00      	nop
 8008038:	20012fa3 	.word	0x20012fa3

0800803c <__sinit_lock_release>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__sinit_lock_release+0x8>)
 800803e:	f000 b8a2 	b.w	8008186 <__retarget_lock_release_recursive>
 8008042:	bf00      	nop
 8008044:	20012fa3 	.word	0x20012fa3

08008048 <__sinit>:
 8008048:	b510      	push	{r4, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	f7ff fff0 	bl	8008030 <__sinit_lock_acquire>
 8008050:	69a3      	ldr	r3, [r4, #24]
 8008052:	b11b      	cbz	r3, 800805c <__sinit+0x14>
 8008054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008058:	f7ff bff0 	b.w	800803c <__sinit_lock_release>
 800805c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008060:	6523      	str	r3, [r4, #80]	; 0x50
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <__sinit+0x68>)
 8008064:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <__sinit+0x6c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	62a2      	str	r2, [r4, #40]	; 0x28
 800806a:	42a3      	cmp	r3, r4
 800806c:	bf04      	itt	eq
 800806e:	2301      	moveq	r3, #1
 8008070:	61a3      	streq	r3, [r4, #24]
 8008072:	4620      	mov	r0, r4
 8008074:	f000 f820 	bl	80080b8 <__sfp>
 8008078:	6060      	str	r0, [r4, #4]
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f81c 	bl	80080b8 <__sfp>
 8008080:	60a0      	str	r0, [r4, #8]
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f818 	bl	80080b8 <__sfp>
 8008088:	2200      	movs	r2, #0
 800808a:	60e0      	str	r0, [r4, #12]
 800808c:	2104      	movs	r1, #4
 800808e:	6860      	ldr	r0, [r4, #4]
 8008090:	f7ff ff82 	bl	8007f98 <std>
 8008094:	68a0      	ldr	r0, [r4, #8]
 8008096:	2201      	movs	r2, #1
 8008098:	2109      	movs	r1, #9
 800809a:	f7ff ff7d 	bl	8007f98 <std>
 800809e:	68e0      	ldr	r0, [r4, #12]
 80080a0:	2202      	movs	r2, #2
 80080a2:	2112      	movs	r1, #18
 80080a4:	f7ff ff78 	bl	8007f98 <std>
 80080a8:	2301      	movs	r3, #1
 80080aa:	61a3      	str	r3, [r4, #24]
 80080ac:	e7d2      	b.n	8008054 <__sinit+0xc>
 80080ae:	bf00      	nop
 80080b0:	08009570 	.word	0x08009570
 80080b4:	08007fe1 	.word	0x08007fe1

080080b8 <__sfp>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	4607      	mov	r7, r0
 80080bc:	f7ff ffac 	bl	8008018 <__sfp_lock_acquire>
 80080c0:	4b1e      	ldr	r3, [pc, #120]	; (800813c <__sfp+0x84>)
 80080c2:	681e      	ldr	r6, [r3, #0]
 80080c4:	69b3      	ldr	r3, [r6, #24]
 80080c6:	b913      	cbnz	r3, 80080ce <__sfp+0x16>
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff ffbd 	bl	8008048 <__sinit>
 80080ce:	3648      	adds	r6, #72	; 0x48
 80080d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	d503      	bpl.n	80080e0 <__sfp+0x28>
 80080d8:	6833      	ldr	r3, [r6, #0]
 80080da:	b30b      	cbz	r3, 8008120 <__sfp+0x68>
 80080dc:	6836      	ldr	r6, [r6, #0]
 80080de:	e7f7      	b.n	80080d0 <__sfp+0x18>
 80080e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080e4:	b9d5      	cbnz	r5, 800811c <__sfp+0x64>
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <__sfp+0x88>)
 80080e8:	60e3      	str	r3, [r4, #12]
 80080ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080ee:	6665      	str	r5, [r4, #100]	; 0x64
 80080f0:	f000 f847 	bl	8008182 <__retarget_lock_init_recursive>
 80080f4:	f7ff ff96 	bl	8008024 <__sfp_lock_release>
 80080f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008100:	6025      	str	r5, [r4, #0]
 8008102:	61a5      	str	r5, [r4, #24]
 8008104:	2208      	movs	r2, #8
 8008106:	4629      	mov	r1, r5
 8008108:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800810c:	f7ff ff04 	bl	8007f18 <memset>
 8008110:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008114:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008118:	4620      	mov	r0, r4
 800811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811c:	3468      	adds	r4, #104	; 0x68
 800811e:	e7d9      	b.n	80080d4 <__sfp+0x1c>
 8008120:	2104      	movs	r1, #4
 8008122:	4638      	mov	r0, r7
 8008124:	f7ff ff62 	bl	8007fec <__sfmoreglue>
 8008128:	4604      	mov	r4, r0
 800812a:	6030      	str	r0, [r6, #0]
 800812c:	2800      	cmp	r0, #0
 800812e:	d1d5      	bne.n	80080dc <__sfp+0x24>
 8008130:	f7ff ff78 	bl	8008024 <__sfp_lock_release>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	e7ee      	b.n	8008118 <__sfp+0x60>
 800813a:	bf00      	nop
 800813c:	08009570 	.word	0x08009570
 8008140:	ffff0001 	.word	0xffff0001

08008144 <_fwalk_reent>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	4606      	mov	r6, r0
 800814a:	4688      	mov	r8, r1
 800814c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008150:	2700      	movs	r7, #0
 8008152:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008156:	f1b9 0901 	subs.w	r9, r9, #1
 800815a:	d505      	bpl.n	8008168 <_fwalk_reent+0x24>
 800815c:	6824      	ldr	r4, [r4, #0]
 800815e:	2c00      	cmp	r4, #0
 8008160:	d1f7      	bne.n	8008152 <_fwalk_reent+0xe>
 8008162:	4638      	mov	r0, r7
 8008164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008168:	89ab      	ldrh	r3, [r5, #12]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d907      	bls.n	800817e <_fwalk_reent+0x3a>
 800816e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008172:	3301      	adds	r3, #1
 8008174:	d003      	beq.n	800817e <_fwalk_reent+0x3a>
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	47c0      	blx	r8
 800817c:	4307      	orrs	r7, r0
 800817e:	3568      	adds	r5, #104	; 0x68
 8008180:	e7e9      	b.n	8008156 <_fwalk_reent+0x12>

08008182 <__retarget_lock_init_recursive>:
 8008182:	4770      	bx	lr

08008184 <__retarget_lock_acquire_recursive>:
 8008184:	4770      	bx	lr

08008186 <__retarget_lock_release_recursive>:
 8008186:	4770      	bx	lr

08008188 <_malloc_r>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	1ccd      	adds	r5, r1, #3
 800818c:	f025 0503 	bic.w	r5, r5, #3
 8008190:	3508      	adds	r5, #8
 8008192:	2d0c      	cmp	r5, #12
 8008194:	bf38      	it	cc
 8008196:	250c      	movcc	r5, #12
 8008198:	2d00      	cmp	r5, #0
 800819a:	4606      	mov	r6, r0
 800819c:	db01      	blt.n	80081a2 <_malloc_r+0x1a>
 800819e:	42a9      	cmp	r1, r5
 80081a0:	d903      	bls.n	80081aa <_malloc_r+0x22>
 80081a2:	230c      	movs	r3, #12
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	2000      	movs	r0, #0
 80081a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081aa:	f000 ff19 	bl	8008fe0 <__malloc_lock>
 80081ae:	4921      	ldr	r1, [pc, #132]	; (8008234 <_malloc_r+0xac>)
 80081b0:	680a      	ldr	r2, [r1, #0]
 80081b2:	4614      	mov	r4, r2
 80081b4:	b99c      	cbnz	r4, 80081de <_malloc_r+0x56>
 80081b6:	4f20      	ldr	r7, [pc, #128]	; (8008238 <_malloc_r+0xb0>)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	b923      	cbnz	r3, 80081c6 <_malloc_r+0x3e>
 80081bc:	4621      	mov	r1, r4
 80081be:	4630      	mov	r0, r6
 80081c0:	f000 fc86 	bl	8008ad0 <_sbrk_r>
 80081c4:	6038      	str	r0, [r7, #0]
 80081c6:	4629      	mov	r1, r5
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 fc81 	bl	8008ad0 <_sbrk_r>
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	d123      	bne.n	800821a <_malloc_r+0x92>
 80081d2:	230c      	movs	r3, #12
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 ff08 	bl	8008fec <__malloc_unlock>
 80081dc:	e7e3      	b.n	80081a6 <_malloc_r+0x1e>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	1b5b      	subs	r3, r3, r5
 80081e2:	d417      	bmi.n	8008214 <_malloc_r+0x8c>
 80081e4:	2b0b      	cmp	r3, #11
 80081e6:	d903      	bls.n	80081f0 <_malloc_r+0x68>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	441c      	add	r4, r3
 80081ec:	6025      	str	r5, [r4, #0]
 80081ee:	e004      	b.n	80081fa <_malloc_r+0x72>
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	42a2      	cmp	r2, r4
 80081f4:	bf0c      	ite	eq
 80081f6:	600b      	streq	r3, [r1, #0]
 80081f8:	6053      	strne	r3, [r2, #4]
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 fef6 	bl	8008fec <__malloc_unlock>
 8008200:	f104 000b 	add.w	r0, r4, #11
 8008204:	1d23      	adds	r3, r4, #4
 8008206:	f020 0007 	bic.w	r0, r0, #7
 800820a:	1ac2      	subs	r2, r0, r3
 800820c:	d0cc      	beq.n	80081a8 <_malloc_r+0x20>
 800820e:	1a1b      	subs	r3, r3, r0
 8008210:	50a3      	str	r3, [r4, r2]
 8008212:	e7c9      	b.n	80081a8 <_malloc_r+0x20>
 8008214:	4622      	mov	r2, r4
 8008216:	6864      	ldr	r4, [r4, #4]
 8008218:	e7cc      	b.n	80081b4 <_malloc_r+0x2c>
 800821a:	1cc4      	adds	r4, r0, #3
 800821c:	f024 0403 	bic.w	r4, r4, #3
 8008220:	42a0      	cmp	r0, r4
 8008222:	d0e3      	beq.n	80081ec <_malloc_r+0x64>
 8008224:	1a21      	subs	r1, r4, r0
 8008226:	4630      	mov	r0, r6
 8008228:	f000 fc52 	bl	8008ad0 <_sbrk_r>
 800822c:	3001      	adds	r0, #1
 800822e:	d1dd      	bne.n	80081ec <_malloc_r+0x64>
 8008230:	e7cf      	b.n	80081d2 <_malloc_r+0x4a>
 8008232:	bf00      	nop
 8008234:	20012e74 	.word	0x20012e74
 8008238:	20012e78 	.word	0x20012e78

0800823c <__ssputs_r>:
 800823c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008240:	688e      	ldr	r6, [r1, #8]
 8008242:	429e      	cmp	r6, r3
 8008244:	4682      	mov	sl, r0
 8008246:	460c      	mov	r4, r1
 8008248:	4690      	mov	r8, r2
 800824a:	461f      	mov	r7, r3
 800824c:	d838      	bhi.n	80082c0 <__ssputs_r+0x84>
 800824e:	898a      	ldrh	r2, [r1, #12]
 8008250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008254:	d032      	beq.n	80082bc <__ssputs_r+0x80>
 8008256:	6825      	ldr	r5, [r4, #0]
 8008258:	6909      	ldr	r1, [r1, #16]
 800825a:	eba5 0901 	sub.w	r9, r5, r1
 800825e:	6965      	ldr	r5, [r4, #20]
 8008260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008268:	3301      	adds	r3, #1
 800826a:	444b      	add	r3, r9
 800826c:	106d      	asrs	r5, r5, #1
 800826e:	429d      	cmp	r5, r3
 8008270:	bf38      	it	cc
 8008272:	461d      	movcc	r5, r3
 8008274:	0553      	lsls	r3, r2, #21
 8008276:	d531      	bpl.n	80082dc <__ssputs_r+0xa0>
 8008278:	4629      	mov	r1, r5
 800827a:	f7ff ff85 	bl	8008188 <_malloc_r>
 800827e:	4606      	mov	r6, r0
 8008280:	b950      	cbnz	r0, 8008298 <__ssputs_r+0x5c>
 8008282:	230c      	movs	r3, #12
 8008284:	f8ca 3000 	str.w	r3, [sl]
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008298:	6921      	ldr	r1, [r4, #16]
 800829a:	464a      	mov	r2, r9
 800829c:	f7ff fe2e 	bl	8007efc <memcpy>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	6126      	str	r6, [r4, #16]
 80082ae:	6165      	str	r5, [r4, #20]
 80082b0:	444e      	add	r6, r9
 80082b2:	eba5 0509 	sub.w	r5, r5, r9
 80082b6:	6026      	str	r6, [r4, #0]
 80082b8:	60a5      	str	r5, [r4, #8]
 80082ba:	463e      	mov	r6, r7
 80082bc:	42be      	cmp	r6, r7
 80082be:	d900      	bls.n	80082c2 <__ssputs_r+0x86>
 80082c0:	463e      	mov	r6, r7
 80082c2:	4632      	mov	r2, r6
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	4641      	mov	r1, r8
 80082c8:	f000 fe70 	bl	8008fac <memmove>
 80082cc:	68a3      	ldr	r3, [r4, #8]
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	1b9b      	subs	r3, r3, r6
 80082d2:	4432      	add	r2, r6
 80082d4:	60a3      	str	r3, [r4, #8]
 80082d6:	6022      	str	r2, [r4, #0]
 80082d8:	2000      	movs	r0, #0
 80082da:	e7db      	b.n	8008294 <__ssputs_r+0x58>
 80082dc:	462a      	mov	r2, r5
 80082de:	f000 fedb 	bl	8009098 <_realloc_r>
 80082e2:	4606      	mov	r6, r0
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1e1      	bne.n	80082ac <__ssputs_r+0x70>
 80082e8:	6921      	ldr	r1, [r4, #16]
 80082ea:	4650      	mov	r0, sl
 80082ec:	f000 fe84 	bl	8008ff8 <_free_r>
 80082f0:	e7c7      	b.n	8008282 <__ssputs_r+0x46>
	...

080082f4 <_svfiprintf_r>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	4698      	mov	r8, r3
 80082fa:	898b      	ldrh	r3, [r1, #12]
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	b09d      	sub	sp, #116	; 0x74
 8008300:	4607      	mov	r7, r0
 8008302:	460d      	mov	r5, r1
 8008304:	4614      	mov	r4, r2
 8008306:	d50e      	bpl.n	8008326 <_svfiprintf_r+0x32>
 8008308:	690b      	ldr	r3, [r1, #16]
 800830a:	b963      	cbnz	r3, 8008326 <_svfiprintf_r+0x32>
 800830c:	2140      	movs	r1, #64	; 0x40
 800830e:	f7ff ff3b 	bl	8008188 <_malloc_r>
 8008312:	6028      	str	r0, [r5, #0]
 8008314:	6128      	str	r0, [r5, #16]
 8008316:	b920      	cbnz	r0, 8008322 <_svfiprintf_r+0x2e>
 8008318:	230c      	movs	r3, #12
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	e0d1      	b.n	80084c6 <_svfiprintf_r+0x1d2>
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	616b      	str	r3, [r5, #20]
 8008326:	2300      	movs	r3, #0
 8008328:	9309      	str	r3, [sp, #36]	; 0x24
 800832a:	2320      	movs	r3, #32
 800832c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008330:	f8cd 800c 	str.w	r8, [sp, #12]
 8008334:	2330      	movs	r3, #48	; 0x30
 8008336:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084e0 <_svfiprintf_r+0x1ec>
 800833a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833e:	f04f 0901 	mov.w	r9, #1
 8008342:	4623      	mov	r3, r4
 8008344:	469a      	mov	sl, r3
 8008346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800834a:	b10a      	cbz	r2, 8008350 <_svfiprintf_r+0x5c>
 800834c:	2a25      	cmp	r2, #37	; 0x25
 800834e:	d1f9      	bne.n	8008344 <_svfiprintf_r+0x50>
 8008350:	ebba 0b04 	subs.w	fp, sl, r4
 8008354:	d00b      	beq.n	800836e <_svfiprintf_r+0x7a>
 8008356:	465b      	mov	r3, fp
 8008358:	4622      	mov	r2, r4
 800835a:	4629      	mov	r1, r5
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff ff6d 	bl	800823c <__ssputs_r>
 8008362:	3001      	adds	r0, #1
 8008364:	f000 80aa 	beq.w	80084bc <_svfiprintf_r+0x1c8>
 8008368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800836a:	445a      	add	r2, fp
 800836c:	9209      	str	r2, [sp, #36]	; 0x24
 800836e:	f89a 3000 	ldrb.w	r3, [sl]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80a2 	beq.w	80084bc <_svfiprintf_r+0x1c8>
 8008378:	2300      	movs	r3, #0
 800837a:	f04f 32ff 	mov.w	r2, #4294967295
 800837e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008382:	f10a 0a01 	add.w	sl, sl, #1
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800838e:	931a      	str	r3, [sp, #104]	; 0x68
 8008390:	4654      	mov	r4, sl
 8008392:	2205      	movs	r2, #5
 8008394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008398:	4851      	ldr	r0, [pc, #324]	; (80084e0 <_svfiprintf_r+0x1ec>)
 800839a:	f7f7 ff41 	bl	8000220 <memchr>
 800839e:	9a04      	ldr	r2, [sp, #16]
 80083a0:	b9d8      	cbnz	r0, 80083da <_svfiprintf_r+0xe6>
 80083a2:	06d0      	lsls	r0, r2, #27
 80083a4:	bf44      	itt	mi
 80083a6:	2320      	movmi	r3, #32
 80083a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ac:	0711      	lsls	r1, r2, #28
 80083ae:	bf44      	itt	mi
 80083b0:	232b      	movmi	r3, #43	; 0x2b
 80083b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ba:	2b2a      	cmp	r3, #42	; 0x2a
 80083bc:	d015      	beq.n	80083ea <_svfiprintf_r+0xf6>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	4654      	mov	r4, sl
 80083c2:	2000      	movs	r0, #0
 80083c4:	f04f 0c0a 	mov.w	ip, #10
 80083c8:	4621      	mov	r1, r4
 80083ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ce:	3b30      	subs	r3, #48	; 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d94e      	bls.n	8008472 <_svfiprintf_r+0x17e>
 80083d4:	b1b0      	cbz	r0, 8008404 <_svfiprintf_r+0x110>
 80083d6:	9207      	str	r2, [sp, #28]
 80083d8:	e014      	b.n	8008404 <_svfiprintf_r+0x110>
 80083da:	eba0 0308 	sub.w	r3, r0, r8
 80083de:	fa09 f303 	lsl.w	r3, r9, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	46a2      	mov	sl, r4
 80083e8:	e7d2      	b.n	8008390 <_svfiprintf_r+0x9c>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	1d19      	adds	r1, r3, #4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	9103      	str	r1, [sp, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfbb      	ittet	lt
 80083f6:	425b      	neglt	r3, r3
 80083f8:	f042 0202 	orrlt.w	r2, r2, #2
 80083fc:	9307      	strge	r3, [sp, #28]
 80083fe:	9307      	strlt	r3, [sp, #28]
 8008400:	bfb8      	it	lt
 8008402:	9204      	strlt	r2, [sp, #16]
 8008404:	7823      	ldrb	r3, [r4, #0]
 8008406:	2b2e      	cmp	r3, #46	; 0x2e
 8008408:	d10c      	bne.n	8008424 <_svfiprintf_r+0x130>
 800840a:	7863      	ldrb	r3, [r4, #1]
 800840c:	2b2a      	cmp	r3, #42	; 0x2a
 800840e:	d135      	bne.n	800847c <_svfiprintf_r+0x188>
 8008410:	9b03      	ldr	r3, [sp, #12]
 8008412:	1d1a      	adds	r2, r3, #4
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	9203      	str	r2, [sp, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bfb8      	it	lt
 800841c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008420:	3402      	adds	r4, #2
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084f0 <_svfiprintf_r+0x1fc>
 8008428:	7821      	ldrb	r1, [r4, #0]
 800842a:	2203      	movs	r2, #3
 800842c:	4650      	mov	r0, sl
 800842e:	f7f7 fef7 	bl	8000220 <memchr>
 8008432:	b140      	cbz	r0, 8008446 <_svfiprintf_r+0x152>
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	eba0 000a 	sub.w	r0, r0, sl
 800843a:	fa03 f000 	lsl.w	r0, r3, r0
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	4303      	orrs	r3, r0
 8008442:	3401      	adds	r4, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844a:	4826      	ldr	r0, [pc, #152]	; (80084e4 <_svfiprintf_r+0x1f0>)
 800844c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008450:	2206      	movs	r2, #6
 8008452:	f7f7 fee5 	bl	8000220 <memchr>
 8008456:	2800      	cmp	r0, #0
 8008458:	d038      	beq.n	80084cc <_svfiprintf_r+0x1d8>
 800845a:	4b23      	ldr	r3, [pc, #140]	; (80084e8 <_svfiprintf_r+0x1f4>)
 800845c:	bb1b      	cbnz	r3, 80084a6 <_svfiprintf_r+0x1b2>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	3307      	adds	r3, #7
 8008462:	f023 0307 	bic.w	r3, r3, #7
 8008466:	3308      	adds	r3, #8
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	4433      	add	r3, r6
 800846e:	9309      	str	r3, [sp, #36]	; 0x24
 8008470:	e767      	b.n	8008342 <_svfiprintf_r+0x4e>
 8008472:	fb0c 3202 	mla	r2, ip, r2, r3
 8008476:	460c      	mov	r4, r1
 8008478:	2001      	movs	r0, #1
 800847a:	e7a5      	b.n	80083c8 <_svfiprintf_r+0xd4>
 800847c:	2300      	movs	r3, #0
 800847e:	3401      	adds	r4, #1
 8008480:	9305      	str	r3, [sp, #20]
 8008482:	4619      	mov	r1, r3
 8008484:	f04f 0c0a 	mov.w	ip, #10
 8008488:	4620      	mov	r0, r4
 800848a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800848e:	3a30      	subs	r2, #48	; 0x30
 8008490:	2a09      	cmp	r2, #9
 8008492:	d903      	bls.n	800849c <_svfiprintf_r+0x1a8>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0c5      	beq.n	8008424 <_svfiprintf_r+0x130>
 8008498:	9105      	str	r1, [sp, #20]
 800849a:	e7c3      	b.n	8008424 <_svfiprintf_r+0x130>
 800849c:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a0:	4604      	mov	r4, r0
 80084a2:	2301      	movs	r3, #1
 80084a4:	e7f0      	b.n	8008488 <_svfiprintf_r+0x194>
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	462a      	mov	r2, r5
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <_svfiprintf_r+0x1f8>)
 80084ae:	a904      	add	r1, sp, #16
 80084b0:	4638      	mov	r0, r7
 80084b2:	f3af 8000 	nop.w
 80084b6:	1c42      	adds	r2, r0, #1
 80084b8:	4606      	mov	r6, r0
 80084ba:	d1d6      	bne.n	800846a <_svfiprintf_r+0x176>
 80084bc:	89ab      	ldrh	r3, [r5, #12]
 80084be:	065b      	lsls	r3, r3, #25
 80084c0:	f53f af2c 	bmi.w	800831c <_svfiprintf_r+0x28>
 80084c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084c6:	b01d      	add	sp, #116	; 0x74
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	ab03      	add	r3, sp, #12
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	462a      	mov	r2, r5
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <_svfiprintf_r+0x1f8>)
 80084d4:	a904      	add	r1, sp, #16
 80084d6:	4638      	mov	r0, r7
 80084d8:	f000 f9d4 	bl	8008884 <_printf_i>
 80084dc:	e7eb      	b.n	80084b6 <_svfiprintf_r+0x1c2>
 80084de:	bf00      	nop
 80084e0:	080095d4 	.word	0x080095d4
 80084e4:	080095de 	.word	0x080095de
 80084e8:	00000000 	.word	0x00000000
 80084ec:	0800823d 	.word	0x0800823d
 80084f0:	080095da 	.word	0x080095da

080084f4 <__sfputc_r>:
 80084f4:	6893      	ldr	r3, [r2, #8]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	b410      	push	{r4}
 80084fc:	6093      	str	r3, [r2, #8]
 80084fe:	da08      	bge.n	8008512 <__sfputc_r+0x1e>
 8008500:	6994      	ldr	r4, [r2, #24]
 8008502:	42a3      	cmp	r3, r4
 8008504:	db01      	blt.n	800850a <__sfputc_r+0x16>
 8008506:	290a      	cmp	r1, #10
 8008508:	d103      	bne.n	8008512 <__sfputc_r+0x1e>
 800850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850e:	f000 bb33 	b.w	8008b78 <__swbuf_r>
 8008512:	6813      	ldr	r3, [r2, #0]
 8008514:	1c58      	adds	r0, r3, #1
 8008516:	6010      	str	r0, [r2, #0]
 8008518:	7019      	strb	r1, [r3, #0]
 800851a:	4608      	mov	r0, r1
 800851c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008520:	4770      	bx	lr

08008522 <__sfputs_r>:
 8008522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	4614      	mov	r4, r2
 800852a:	18d5      	adds	r5, r2, r3
 800852c:	42ac      	cmp	r4, r5
 800852e:	d101      	bne.n	8008534 <__sfputs_r+0x12>
 8008530:	2000      	movs	r0, #0
 8008532:	e007      	b.n	8008544 <__sfputs_r+0x22>
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	463a      	mov	r2, r7
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ffda 	bl	80084f4 <__sfputc_r>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d1f3      	bne.n	800852c <__sfputs_r+0xa>
 8008544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008548 <_vfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460d      	mov	r5, r1
 800854e:	b09d      	sub	sp, #116	; 0x74
 8008550:	4614      	mov	r4, r2
 8008552:	4698      	mov	r8, r3
 8008554:	4606      	mov	r6, r0
 8008556:	b118      	cbz	r0, 8008560 <_vfiprintf_r+0x18>
 8008558:	6983      	ldr	r3, [r0, #24]
 800855a:	b90b      	cbnz	r3, 8008560 <_vfiprintf_r+0x18>
 800855c:	f7ff fd74 	bl	8008048 <__sinit>
 8008560:	4b89      	ldr	r3, [pc, #548]	; (8008788 <_vfiprintf_r+0x240>)
 8008562:	429d      	cmp	r5, r3
 8008564:	d11b      	bne.n	800859e <_vfiprintf_r+0x56>
 8008566:	6875      	ldr	r5, [r6, #4]
 8008568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800856a:	07d9      	lsls	r1, r3, #31
 800856c:	d405      	bmi.n	800857a <_vfiprintf_r+0x32>
 800856e:	89ab      	ldrh	r3, [r5, #12]
 8008570:	059a      	lsls	r2, r3, #22
 8008572:	d402      	bmi.n	800857a <_vfiprintf_r+0x32>
 8008574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008576:	f7ff fe05 	bl	8008184 <__retarget_lock_acquire_recursive>
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	071b      	lsls	r3, r3, #28
 800857e:	d501      	bpl.n	8008584 <_vfiprintf_r+0x3c>
 8008580:	692b      	ldr	r3, [r5, #16]
 8008582:	b9eb      	cbnz	r3, 80085c0 <_vfiprintf_r+0x78>
 8008584:	4629      	mov	r1, r5
 8008586:	4630      	mov	r0, r6
 8008588:	f000 fb5a 	bl	8008c40 <__swsetup_r>
 800858c:	b1c0      	cbz	r0, 80085c0 <_vfiprintf_r+0x78>
 800858e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008590:	07dc      	lsls	r4, r3, #31
 8008592:	d50e      	bpl.n	80085b2 <_vfiprintf_r+0x6a>
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	b01d      	add	sp, #116	; 0x74
 800859a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859e:	4b7b      	ldr	r3, [pc, #492]	; (800878c <_vfiprintf_r+0x244>)
 80085a0:	429d      	cmp	r5, r3
 80085a2:	d101      	bne.n	80085a8 <_vfiprintf_r+0x60>
 80085a4:	68b5      	ldr	r5, [r6, #8]
 80085a6:	e7df      	b.n	8008568 <_vfiprintf_r+0x20>
 80085a8:	4b79      	ldr	r3, [pc, #484]	; (8008790 <_vfiprintf_r+0x248>)
 80085aa:	429d      	cmp	r5, r3
 80085ac:	bf08      	it	eq
 80085ae:	68f5      	ldreq	r5, [r6, #12]
 80085b0:	e7da      	b.n	8008568 <_vfiprintf_r+0x20>
 80085b2:	89ab      	ldrh	r3, [r5, #12]
 80085b4:	0598      	lsls	r0, r3, #22
 80085b6:	d4ed      	bmi.n	8008594 <_vfiprintf_r+0x4c>
 80085b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ba:	f7ff fde4 	bl	8008186 <__retarget_lock_release_recursive>
 80085be:	e7e9      	b.n	8008594 <_vfiprintf_r+0x4c>
 80085c0:	2300      	movs	r3, #0
 80085c2:	9309      	str	r3, [sp, #36]	; 0x24
 80085c4:	2320      	movs	r3, #32
 80085c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ce:	2330      	movs	r3, #48	; 0x30
 80085d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008794 <_vfiprintf_r+0x24c>
 80085d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d8:	f04f 0901 	mov.w	r9, #1
 80085dc:	4623      	mov	r3, r4
 80085de:	469a      	mov	sl, r3
 80085e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e4:	b10a      	cbz	r2, 80085ea <_vfiprintf_r+0xa2>
 80085e6:	2a25      	cmp	r2, #37	; 0x25
 80085e8:	d1f9      	bne.n	80085de <_vfiprintf_r+0x96>
 80085ea:	ebba 0b04 	subs.w	fp, sl, r4
 80085ee:	d00b      	beq.n	8008608 <_vfiprintf_r+0xc0>
 80085f0:	465b      	mov	r3, fp
 80085f2:	4622      	mov	r2, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ff93 	bl	8008522 <__sfputs_r>
 80085fc:	3001      	adds	r0, #1
 80085fe:	f000 80aa 	beq.w	8008756 <_vfiprintf_r+0x20e>
 8008602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008604:	445a      	add	r2, fp
 8008606:	9209      	str	r2, [sp, #36]	; 0x24
 8008608:	f89a 3000 	ldrb.w	r3, [sl]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80a2 	beq.w	8008756 <_vfiprintf_r+0x20e>
 8008612:	2300      	movs	r3, #0
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861c:	f10a 0a01 	add.w	sl, sl, #1
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	9307      	str	r3, [sp, #28]
 8008624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008628:	931a      	str	r3, [sp, #104]	; 0x68
 800862a:	4654      	mov	r4, sl
 800862c:	2205      	movs	r2, #5
 800862e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008632:	4858      	ldr	r0, [pc, #352]	; (8008794 <_vfiprintf_r+0x24c>)
 8008634:	f7f7 fdf4 	bl	8000220 <memchr>
 8008638:	9a04      	ldr	r2, [sp, #16]
 800863a:	b9d8      	cbnz	r0, 8008674 <_vfiprintf_r+0x12c>
 800863c:	06d1      	lsls	r1, r2, #27
 800863e:	bf44      	itt	mi
 8008640:	2320      	movmi	r3, #32
 8008642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008646:	0713      	lsls	r3, r2, #28
 8008648:	bf44      	itt	mi
 800864a:	232b      	movmi	r3, #43	; 0x2b
 800864c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008650:	f89a 3000 	ldrb.w	r3, [sl]
 8008654:	2b2a      	cmp	r3, #42	; 0x2a
 8008656:	d015      	beq.n	8008684 <_vfiprintf_r+0x13c>
 8008658:	9a07      	ldr	r2, [sp, #28]
 800865a:	4654      	mov	r4, sl
 800865c:	2000      	movs	r0, #0
 800865e:	f04f 0c0a 	mov.w	ip, #10
 8008662:	4621      	mov	r1, r4
 8008664:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008668:	3b30      	subs	r3, #48	; 0x30
 800866a:	2b09      	cmp	r3, #9
 800866c:	d94e      	bls.n	800870c <_vfiprintf_r+0x1c4>
 800866e:	b1b0      	cbz	r0, 800869e <_vfiprintf_r+0x156>
 8008670:	9207      	str	r2, [sp, #28]
 8008672:	e014      	b.n	800869e <_vfiprintf_r+0x156>
 8008674:	eba0 0308 	sub.w	r3, r0, r8
 8008678:	fa09 f303 	lsl.w	r3, r9, r3
 800867c:	4313      	orrs	r3, r2
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	46a2      	mov	sl, r4
 8008682:	e7d2      	b.n	800862a <_vfiprintf_r+0xe2>
 8008684:	9b03      	ldr	r3, [sp, #12]
 8008686:	1d19      	adds	r1, r3, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	9103      	str	r1, [sp, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	bfbb      	ittet	lt
 8008690:	425b      	neglt	r3, r3
 8008692:	f042 0202 	orrlt.w	r2, r2, #2
 8008696:	9307      	strge	r3, [sp, #28]
 8008698:	9307      	strlt	r3, [sp, #28]
 800869a:	bfb8      	it	lt
 800869c:	9204      	strlt	r2, [sp, #16]
 800869e:	7823      	ldrb	r3, [r4, #0]
 80086a0:	2b2e      	cmp	r3, #46	; 0x2e
 80086a2:	d10c      	bne.n	80086be <_vfiprintf_r+0x176>
 80086a4:	7863      	ldrb	r3, [r4, #1]
 80086a6:	2b2a      	cmp	r3, #42	; 0x2a
 80086a8:	d135      	bne.n	8008716 <_vfiprintf_r+0x1ce>
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	1d1a      	adds	r2, r3, #4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	9203      	str	r2, [sp, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfb8      	it	lt
 80086b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086ba:	3402      	adds	r4, #2
 80086bc:	9305      	str	r3, [sp, #20]
 80086be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087a4 <_vfiprintf_r+0x25c>
 80086c2:	7821      	ldrb	r1, [r4, #0]
 80086c4:	2203      	movs	r2, #3
 80086c6:	4650      	mov	r0, sl
 80086c8:	f7f7 fdaa 	bl	8000220 <memchr>
 80086cc:	b140      	cbz	r0, 80086e0 <_vfiprintf_r+0x198>
 80086ce:	2340      	movs	r3, #64	; 0x40
 80086d0:	eba0 000a 	sub.w	r0, r0, sl
 80086d4:	fa03 f000 	lsl.w	r0, r3, r0
 80086d8:	9b04      	ldr	r3, [sp, #16]
 80086da:	4303      	orrs	r3, r0
 80086dc:	3401      	adds	r4, #1
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e4:	482c      	ldr	r0, [pc, #176]	; (8008798 <_vfiprintf_r+0x250>)
 80086e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ea:	2206      	movs	r2, #6
 80086ec:	f7f7 fd98 	bl	8000220 <memchr>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d03f      	beq.n	8008774 <_vfiprintf_r+0x22c>
 80086f4:	4b29      	ldr	r3, [pc, #164]	; (800879c <_vfiprintf_r+0x254>)
 80086f6:	bb1b      	cbnz	r3, 8008740 <_vfiprintf_r+0x1f8>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	3307      	adds	r3, #7
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	3308      	adds	r3, #8
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	443b      	add	r3, r7
 8008708:	9309      	str	r3, [sp, #36]	; 0x24
 800870a:	e767      	b.n	80085dc <_vfiprintf_r+0x94>
 800870c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008710:	460c      	mov	r4, r1
 8008712:	2001      	movs	r0, #1
 8008714:	e7a5      	b.n	8008662 <_vfiprintf_r+0x11a>
 8008716:	2300      	movs	r3, #0
 8008718:	3401      	adds	r4, #1
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	4619      	mov	r1, r3
 800871e:	f04f 0c0a 	mov.w	ip, #10
 8008722:	4620      	mov	r0, r4
 8008724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008728:	3a30      	subs	r2, #48	; 0x30
 800872a:	2a09      	cmp	r2, #9
 800872c:	d903      	bls.n	8008736 <_vfiprintf_r+0x1ee>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0c5      	beq.n	80086be <_vfiprintf_r+0x176>
 8008732:	9105      	str	r1, [sp, #20]
 8008734:	e7c3      	b.n	80086be <_vfiprintf_r+0x176>
 8008736:	fb0c 2101 	mla	r1, ip, r1, r2
 800873a:	4604      	mov	r4, r0
 800873c:	2301      	movs	r3, #1
 800873e:	e7f0      	b.n	8008722 <_vfiprintf_r+0x1da>
 8008740:	ab03      	add	r3, sp, #12
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	462a      	mov	r2, r5
 8008746:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <_vfiprintf_r+0x258>)
 8008748:	a904      	add	r1, sp, #16
 800874a:	4630      	mov	r0, r6
 800874c:	f3af 8000 	nop.w
 8008750:	4607      	mov	r7, r0
 8008752:	1c78      	adds	r0, r7, #1
 8008754:	d1d6      	bne.n	8008704 <_vfiprintf_r+0x1bc>
 8008756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008758:	07d9      	lsls	r1, r3, #31
 800875a:	d405      	bmi.n	8008768 <_vfiprintf_r+0x220>
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	059a      	lsls	r2, r3, #22
 8008760:	d402      	bmi.n	8008768 <_vfiprintf_r+0x220>
 8008762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008764:	f7ff fd0f 	bl	8008186 <__retarget_lock_release_recursive>
 8008768:	89ab      	ldrh	r3, [r5, #12]
 800876a:	065b      	lsls	r3, r3, #25
 800876c:	f53f af12 	bmi.w	8008594 <_vfiprintf_r+0x4c>
 8008770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008772:	e711      	b.n	8008598 <_vfiprintf_r+0x50>
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <_vfiprintf_r+0x258>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4630      	mov	r0, r6
 8008780:	f000 f880 	bl	8008884 <_printf_i>
 8008784:	e7e4      	b.n	8008750 <_vfiprintf_r+0x208>
 8008786:	bf00      	nop
 8008788:	08009594 	.word	0x08009594
 800878c:	080095b4 	.word	0x080095b4
 8008790:	08009574 	.word	0x08009574
 8008794:	080095d4 	.word	0x080095d4
 8008798:	080095de 	.word	0x080095de
 800879c:	00000000 	.word	0x00000000
 80087a0:	08008523 	.word	0x08008523
 80087a4:	080095da 	.word	0x080095da

080087a8 <_printf_common>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	4616      	mov	r6, r2
 80087ae:	4699      	mov	r9, r3
 80087b0:	688a      	ldr	r2, [r1, #8]
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bfb8      	it	lt
 80087bc:	4613      	movlt	r3, r2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c4:	4607      	mov	r7, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b10a      	cbz	r2, 80087ce <_printf_common+0x26>
 80087ca:	3301      	adds	r3, #1
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	6833      	ldrmi	r3, [r6, #0]
 80087d6:	3302      	addmi	r3, #2
 80087d8:	6033      	strmi	r3, [r6, #0]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d106      	bne.n	80087f0 <_printf_common+0x48>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc26      	bgt.n	800883e <_printf_common+0x96>
 80087f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f4:	1e13      	subs	r3, r2, #0
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	0692      	lsls	r2, r2, #26
 80087fe:	d42b      	bmi.n	8008858 <_printf_common+0xb0>
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d01e      	beq.n	800884c <_printf_common+0xa4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	68e5      	ldr	r5, [r4, #12]
 8008812:	6832      	ldr	r2, [r6, #0]
 8008814:	f003 0306 	and.w	r3, r3, #6
 8008818:	2b04      	cmp	r3, #4
 800881a:	bf08      	it	eq
 800881c:	1aad      	subeq	r5, r5, r2
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	bf0c      	ite	eq
 8008824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008828:	2500      	movne	r5, #0
 800882a:	4293      	cmp	r3, r2
 800882c:	bfc4      	itt	gt
 800882e:	1a9b      	subgt	r3, r3, r2
 8008830:	18ed      	addgt	r5, r5, r3
 8008832:	2600      	movs	r6, #0
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xc8>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xa8>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xac>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c6      	b.n	80087e6 <_printf_common+0x3e>
 8008858:	18e1      	adds	r1, r4, r3
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	2030      	movs	r0, #48	; 0x30
 800885e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008862:	4422      	add	r2, r4
 8008864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886c:	3302      	adds	r3, #2
 800886e:	e7c7      	b.n	8008800 <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa4>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x8e>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	460c      	mov	r4, r1
 800888a:	4691      	mov	r9, r2
 800888c:	7e27      	ldrb	r7, [r4, #24]
 800888e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008890:	2f78      	cmp	r7, #120	; 0x78
 8008892:	4680      	mov	r8, r0
 8008894:	469a      	mov	sl, r3
 8008896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d8 	beq.w	8008a56 <_printf_i+0x1d2>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80a3 	beq.w	80089f2 <_printf_i+0x16e>
 80088ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a001      	add	r0, pc, #4	; (adr r0, 80088c4 <_printf_i+0x40>)
 80088c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a3d 	.word	0x08008a3d
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008a1f 	.word	0x08008a1f
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a5f 	.word	0x08008a5f
 8008908:	080088ad 	.word	0x080088ad
 800890c:	08008961 	.word	0x08008961
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	08008a27 	.word	0x08008a27
 800891c:	680b      	ldr	r3, [r1, #0]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	600a      	str	r2, [r1, #0]
 8008924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e0a3      	b.n	8008a78 <_printf_i+0x1f4>
 8008930:	6825      	ldr	r5, [r4, #0]
 8008932:	6808      	ldr	r0, [r1, #0]
 8008934:	062e      	lsls	r6, r5, #24
 8008936:	f100 0304 	add.w	r3, r0, #4
 800893a:	d50a      	bpl.n	8008952 <_printf_i+0xce>
 800893c:	6805      	ldr	r5, [r0, #0]
 800893e:	600b      	str	r3, [r1, #0]
 8008940:	2d00      	cmp	r5, #0
 8008942:	da03      	bge.n	800894c <_printf_i+0xc8>
 8008944:	232d      	movs	r3, #45	; 0x2d
 8008946:	426d      	negs	r5, r5
 8008948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894c:	485e      	ldr	r0, [pc, #376]	; (8008ac8 <_printf_i+0x244>)
 800894e:	230a      	movs	r3, #10
 8008950:	e019      	b.n	8008986 <_printf_i+0x102>
 8008952:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008956:	6805      	ldr	r5, [r0, #0]
 8008958:	600b      	str	r3, [r1, #0]
 800895a:	bf18      	it	ne
 800895c:	b22d      	sxthne	r5, r5
 800895e:	e7ef      	b.n	8008940 <_printf_i+0xbc>
 8008960:	680b      	ldr	r3, [r1, #0]
 8008962:	6825      	ldr	r5, [r4, #0]
 8008964:	1d18      	adds	r0, r3, #4
 8008966:	6008      	str	r0, [r1, #0]
 8008968:	0628      	lsls	r0, r5, #24
 800896a:	d501      	bpl.n	8008970 <_printf_i+0xec>
 800896c:	681d      	ldr	r5, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0xf2>
 8008970:	0669      	lsls	r1, r5, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0xe8>
 8008974:	881d      	ldrh	r5, [r3, #0]
 8008976:	4854      	ldr	r0, [pc, #336]	; (8008ac8 <_printf_i+0x244>)
 8008978:	2f6f      	cmp	r7, #111	; 0x6f
 800897a:	bf0c      	ite	eq
 800897c:	2308      	moveq	r3, #8
 800897e:	230a      	movne	r3, #10
 8008980:	2100      	movs	r1, #0
 8008982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008986:	6866      	ldr	r6, [r4, #4]
 8008988:	60a6      	str	r6, [r4, #8]
 800898a:	2e00      	cmp	r6, #0
 800898c:	bfa2      	ittt	ge
 800898e:	6821      	ldrge	r1, [r4, #0]
 8008990:	f021 0104 	bicge.w	r1, r1, #4
 8008994:	6021      	strge	r1, [r4, #0]
 8008996:	b90d      	cbnz	r5, 800899c <_printf_i+0x118>
 8008998:	2e00      	cmp	r6, #0
 800899a:	d04d      	beq.n	8008a38 <_printf_i+0x1b4>
 800899c:	4616      	mov	r6, r2
 800899e:	fbb5 f1f3 	udiv	r1, r5, r3
 80089a2:	fb03 5711 	mls	r7, r3, r1, r5
 80089a6:	5dc7      	ldrb	r7, [r0, r7]
 80089a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089ac:	462f      	mov	r7, r5
 80089ae:	42bb      	cmp	r3, r7
 80089b0:	460d      	mov	r5, r1
 80089b2:	d9f4      	bls.n	800899e <_printf_i+0x11a>
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d10b      	bne.n	80089d0 <_printf_i+0x14c>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07df      	lsls	r7, r3, #31
 80089bc:	d508      	bpl.n	80089d0 <_printf_i+0x14c>
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	6861      	ldr	r1, [r4, #4]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	bfde      	ittt	le
 80089c6:	2330      	movle	r3, #48	; 0x30
 80089c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089d0:	1b92      	subs	r2, r2, r6
 80089d2:	6122      	str	r2, [r4, #16]
 80089d4:	f8cd a000 	str.w	sl, [sp]
 80089d8:	464b      	mov	r3, r9
 80089da:	aa03      	add	r2, sp, #12
 80089dc:	4621      	mov	r1, r4
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fee2 	bl	80087a8 <_printf_common>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d14c      	bne.n	8008a82 <_printf_i+0x1fe>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b004      	add	sp, #16
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	4835      	ldr	r0, [pc, #212]	; (8008ac8 <_printf_i+0x244>)
 80089f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	680e      	ldr	r6, [r1, #0]
 80089fc:	061f      	lsls	r7, r3, #24
 80089fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a02:	600e      	str	r6, [r1, #0]
 8008a04:	d514      	bpl.n	8008a30 <_printf_i+0x1ac>
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	bf44      	itt	mi
 8008a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a0e:	6023      	strmi	r3, [r4, #0]
 8008a10:	b91d      	cbnz	r5, 8008a1a <_printf_i+0x196>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f023 0320 	bic.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2310      	movs	r3, #16
 8008a1c:	e7b0      	b.n	8008980 <_printf_i+0xfc>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f043 0320 	orr.w	r3, r3, #32
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	2378      	movs	r3, #120	; 0x78
 8008a28:	4828      	ldr	r0, [pc, #160]	; (8008acc <_printf_i+0x248>)
 8008a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a2e:	e7e3      	b.n	80089f8 <_printf_i+0x174>
 8008a30:	065e      	lsls	r6, r3, #25
 8008a32:	bf48      	it	mi
 8008a34:	b2ad      	uxthmi	r5, r5
 8008a36:	e7e6      	b.n	8008a06 <_printf_i+0x182>
 8008a38:	4616      	mov	r6, r2
 8008a3a:	e7bb      	b.n	80089b4 <_printf_i+0x130>
 8008a3c:	680b      	ldr	r3, [r1, #0]
 8008a3e:	6826      	ldr	r6, [r4, #0]
 8008a40:	6960      	ldr	r0, [r4, #20]
 8008a42:	1d1d      	adds	r5, r3, #4
 8008a44:	600d      	str	r5, [r1, #0]
 8008a46:	0635      	lsls	r5, r6, #24
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0x1cc>
 8008a4c:	6018      	str	r0, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0x1d2>
 8008a50:	0671      	lsls	r1, r6, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0x1c8>
 8008a54:	8018      	strh	r0, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	4616      	mov	r6, r2
 8008a5c:	e7ba      	b.n	80089d4 <_printf_i+0x150>
 8008a5e:	680b      	ldr	r3, [r1, #0]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	600a      	str	r2, [r1, #0]
 8008a64:	681e      	ldr	r6, [r3, #0]
 8008a66:	6862      	ldr	r2, [r4, #4]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7f7 fbd8 	bl	8000220 <memchr>
 8008a70:	b108      	cbz	r0, 8008a76 <_printf_i+0x1f2>
 8008a72:	1b80      	subs	r0, r0, r6
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a80:	e7a8      	b.n	80089d4 <_printf_i+0x150>
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d0ab      	beq.n	80089e8 <_printf_i+0x164>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	d413      	bmi.n	8008abe <_printf_i+0x23a>
 8008a96:	68e0      	ldr	r0, [r4, #12]
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	4298      	cmp	r0, r3
 8008a9c:	bfb8      	it	lt
 8008a9e:	4618      	movlt	r0, r3
 8008aa0:	e7a4      	b.n	80089ec <_printf_i+0x168>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	47d0      	blx	sl
 8008aac:	3001      	adds	r0, #1
 8008aae:	d09b      	beq.n	80089e8 <_printf_i+0x164>
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	9903      	ldr	r1, [sp, #12]
 8008ab6:	1a5b      	subs	r3, r3, r1
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	dcf2      	bgt.n	8008aa2 <_printf_i+0x21e>
 8008abc:	e7eb      	b.n	8008a96 <_printf_i+0x212>
 8008abe:	2500      	movs	r5, #0
 8008ac0:	f104 0619 	add.w	r6, r4, #25
 8008ac4:	e7f5      	b.n	8008ab2 <_printf_i+0x22e>
 8008ac6:	bf00      	nop
 8008ac8:	080095e5 	.word	0x080095e5
 8008acc:	080095f6 	.word	0x080095f6

08008ad0 <_sbrk_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d06      	ldr	r5, [pc, #24]	; (8008aec <_sbrk_r+0x1c>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	f7f8 fe36 	bl	800174c <_sbrk>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_sbrk_r+0x1a>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_sbrk_r+0x1a>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	20012fac 	.word	0x20012fac

08008af0 <__sread>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	460c      	mov	r4, r1
 8008af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af8:	f000 faf4 	bl	80090e4 <_read_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	bfab      	itete	ge
 8008b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b02:	89a3      	ldrhlt	r3, [r4, #12]
 8008b04:	181b      	addge	r3, r3, r0
 8008b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b0a:	bfac      	ite	ge
 8008b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b0e:	81a3      	strhlt	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__swrite>:
 8008b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b16:	461f      	mov	r7, r3
 8008b18:	898b      	ldrh	r3, [r1, #12]
 8008b1a:	05db      	lsls	r3, r3, #23
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4616      	mov	r6, r2
 8008b22:	d505      	bpl.n	8008b30 <__swrite+0x1e>
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f000 f9c8 	bl	8008ec0 <_lseek_r>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	f000 b869 	b.w	8008c1c <_write_r>

08008b4a <__sseek>:
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 f9b5 	bl	8008ec0 <_lseek_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	bf15      	itete	ne
 8008b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b66:	81a3      	strheq	r3, [r4, #12]
 8008b68:	bf18      	it	ne
 8008b6a:	81a3      	strhne	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__sclose>:
 8008b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b72:	f000 b8d3 	b.w	8008d1c <_close_r>
	...

08008b78 <__swbuf_r>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	460e      	mov	r6, r1
 8008b7c:	4614      	mov	r4, r2
 8008b7e:	4605      	mov	r5, r0
 8008b80:	b118      	cbz	r0, 8008b8a <__swbuf_r+0x12>
 8008b82:	6983      	ldr	r3, [r0, #24]
 8008b84:	b90b      	cbnz	r3, 8008b8a <__swbuf_r+0x12>
 8008b86:	f7ff fa5f 	bl	8008048 <__sinit>
 8008b8a:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <__swbuf_r+0x98>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	d12b      	bne.n	8008be8 <__swbuf_r+0x70>
 8008b90:	686c      	ldr	r4, [r5, #4]
 8008b92:	69a3      	ldr	r3, [r4, #24]
 8008b94:	60a3      	str	r3, [r4, #8]
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	071a      	lsls	r2, r3, #28
 8008b9a:	d52f      	bpl.n	8008bfc <__swbuf_r+0x84>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	b36b      	cbz	r3, 8008bfc <__swbuf_r+0x84>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	6820      	ldr	r0, [r4, #0]
 8008ba4:	1ac0      	subs	r0, r0, r3
 8008ba6:	6963      	ldr	r3, [r4, #20]
 8008ba8:	b2f6      	uxtb	r6, r6
 8008baa:	4283      	cmp	r3, r0
 8008bac:	4637      	mov	r7, r6
 8008bae:	dc04      	bgt.n	8008bba <__swbuf_r+0x42>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f948 	bl	8008e48 <_fflush_r>
 8008bb8:	bb30      	cbnz	r0, 8008c08 <__swbuf_r+0x90>
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	60a3      	str	r3, [r4, #8]
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	6022      	str	r2, [r4, #0]
 8008bc6:	701e      	strb	r6, [r3, #0]
 8008bc8:	6963      	ldr	r3, [r4, #20]
 8008bca:	3001      	adds	r0, #1
 8008bcc:	4283      	cmp	r3, r0
 8008bce:	d004      	beq.n	8008bda <__swbuf_r+0x62>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	07db      	lsls	r3, r3, #31
 8008bd4:	d506      	bpl.n	8008be4 <__swbuf_r+0x6c>
 8008bd6:	2e0a      	cmp	r6, #10
 8008bd8:	d104      	bne.n	8008be4 <__swbuf_r+0x6c>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 f933 	bl	8008e48 <_fflush_r>
 8008be2:	b988      	cbnz	r0, 8008c08 <__swbuf_r+0x90>
 8008be4:	4638      	mov	r0, r7
 8008be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <__swbuf_r+0x9c>)
 8008bea:	429c      	cmp	r4, r3
 8008bec:	d101      	bne.n	8008bf2 <__swbuf_r+0x7a>
 8008bee:	68ac      	ldr	r4, [r5, #8]
 8008bf0:	e7cf      	b.n	8008b92 <__swbuf_r+0x1a>
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <__swbuf_r+0xa0>)
 8008bf4:	429c      	cmp	r4, r3
 8008bf6:	bf08      	it	eq
 8008bf8:	68ec      	ldreq	r4, [r5, #12]
 8008bfa:	e7ca      	b.n	8008b92 <__swbuf_r+0x1a>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f000 f81e 	bl	8008c40 <__swsetup_r>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d0cb      	beq.n	8008ba0 <__swbuf_r+0x28>
 8008c08:	f04f 37ff 	mov.w	r7, #4294967295
 8008c0c:	e7ea      	b.n	8008be4 <__swbuf_r+0x6c>
 8008c0e:	bf00      	nop
 8008c10:	08009594 	.word	0x08009594
 8008c14:	080095b4 	.word	0x080095b4
 8008c18:	08009574 	.word	0x08009574

08008c1c <_write_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	; (8008c3c <_write_r+0x20>)
 8008c20:	4604      	mov	r4, r0
 8008c22:	4608      	mov	r0, r1
 8008c24:	4611      	mov	r1, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	602a      	str	r2, [r5, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7f8 fd3d 	bl	80016aa <_write>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_write_r+0x1e>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_write_r+0x1e>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20012fac 	.word	0x20012fac

08008c40 <__swsetup_r>:
 8008c40:	4b32      	ldr	r3, [pc, #200]	; (8008d0c <__swsetup_r+0xcc>)
 8008c42:	b570      	push	{r4, r5, r6, lr}
 8008c44:	681d      	ldr	r5, [r3, #0]
 8008c46:	4606      	mov	r6, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	b125      	cbz	r5, 8008c56 <__swsetup_r+0x16>
 8008c4c:	69ab      	ldr	r3, [r5, #24]
 8008c4e:	b913      	cbnz	r3, 8008c56 <__swsetup_r+0x16>
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff f9f9 	bl	8008048 <__sinit>
 8008c56:	4b2e      	ldr	r3, [pc, #184]	; (8008d10 <__swsetup_r+0xd0>)
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	d10f      	bne.n	8008c7c <__swsetup_r+0x3c>
 8008c5c:	686c      	ldr	r4, [r5, #4]
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c64:	0719      	lsls	r1, r3, #28
 8008c66:	d42c      	bmi.n	8008cc2 <__swsetup_r+0x82>
 8008c68:	06dd      	lsls	r5, r3, #27
 8008c6a:	d411      	bmi.n	8008c90 <__swsetup_r+0x50>
 8008c6c:	2309      	movs	r3, #9
 8008c6e:	6033      	str	r3, [r6, #0]
 8008c70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7a:	e03e      	b.n	8008cfa <__swsetup_r+0xba>
 8008c7c:	4b25      	ldr	r3, [pc, #148]	; (8008d14 <__swsetup_r+0xd4>)
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d101      	bne.n	8008c86 <__swsetup_r+0x46>
 8008c82:	68ac      	ldr	r4, [r5, #8]
 8008c84:	e7eb      	b.n	8008c5e <__swsetup_r+0x1e>
 8008c86:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <__swsetup_r+0xd8>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	bf08      	it	eq
 8008c8c:	68ec      	ldreq	r4, [r5, #12]
 8008c8e:	e7e6      	b.n	8008c5e <__swsetup_r+0x1e>
 8008c90:	0758      	lsls	r0, r3, #29
 8008c92:	d512      	bpl.n	8008cba <__swsetup_r+0x7a>
 8008c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c96:	b141      	cbz	r1, 8008caa <__swsetup_r+0x6a>
 8008c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	d002      	beq.n	8008ca6 <__swsetup_r+0x66>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f000 f9a9 	bl	8008ff8 <_free_r>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6363      	str	r3, [r4, #52]	; 0x34
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	6063      	str	r3, [r4, #4]
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f043 0308 	orr.w	r3, r3, #8
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	b94b      	cbnz	r3, 8008cda <__swsetup_r+0x9a>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd0:	d003      	beq.n	8008cda <__swsetup_r+0x9a>
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f000 f929 	bl	8008f2c <__smakebuf_r>
 8008cda:	89a0      	ldrh	r0, [r4, #12]
 8008cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ce0:	f010 0301 	ands.w	r3, r0, #1
 8008ce4:	d00a      	beq.n	8008cfc <__swsetup_r+0xbc>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60a3      	str	r3, [r4, #8]
 8008cea:	6963      	ldr	r3, [r4, #20]
 8008cec:	425b      	negs	r3, r3
 8008cee:	61a3      	str	r3, [r4, #24]
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	b943      	cbnz	r3, 8008d06 <__swsetup_r+0xc6>
 8008cf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cf8:	d1ba      	bne.n	8008c70 <__swsetup_r+0x30>
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	0781      	lsls	r1, r0, #30
 8008cfe:	bf58      	it	pl
 8008d00:	6963      	ldrpl	r3, [r4, #20]
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	e7f4      	b.n	8008cf0 <__swsetup_r+0xb0>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e7f7      	b.n	8008cfa <__swsetup_r+0xba>
 8008d0a:	bf00      	nop
 8008d0c:	20000028 	.word	0x20000028
 8008d10:	08009594 	.word	0x08009594
 8008d14:	080095b4 	.word	0x080095b4
 8008d18:	08009574 	.word	0x08009574

08008d1c <_close_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d06      	ldr	r5, [pc, #24]	; (8008d38 <_close_r+0x1c>)
 8008d20:	2300      	movs	r3, #0
 8008d22:	4604      	mov	r4, r0
 8008d24:	4608      	mov	r0, r1
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	f7f8 fcdb 	bl	80016e2 <_close>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_close_r+0x1a>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_close_r+0x1a>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	20012fac 	.word	0x20012fac

08008d3c <__sflush_r>:
 8008d3c:	898a      	ldrh	r2, [r1, #12]
 8008d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	4605      	mov	r5, r0
 8008d44:	0710      	lsls	r0, r2, #28
 8008d46:	460c      	mov	r4, r1
 8008d48:	d458      	bmi.n	8008dfc <__sflush_r+0xc0>
 8008d4a:	684b      	ldr	r3, [r1, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dc05      	bgt.n	8008d5c <__sflush_r+0x20>
 8008d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dc02      	bgt.n	8008d5c <__sflush_r+0x20>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d0f9      	beq.n	8008d56 <__sflush_r+0x1a>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d68:	682f      	ldr	r7, [r5, #0]
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	d032      	beq.n	8008dd4 <__sflush_r+0x98>
 8008d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	075a      	lsls	r2, r3, #29
 8008d74:	d505      	bpl.n	8008d82 <__sflush_r+0x46>
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	1ac0      	subs	r0, r0, r3
 8008d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d7c:	b10b      	cbz	r3, 8008d82 <__sflush_r+0x46>
 8008d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d80:	1ac0      	subs	r0, r0, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	4602      	mov	r2, r0
 8008d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d88:	6a21      	ldr	r1, [r4, #32]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	47b0      	blx	r6
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	d106      	bne.n	8008da2 <__sflush_r+0x66>
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	291d      	cmp	r1, #29
 8008d98:	d82c      	bhi.n	8008df4 <__sflush_r+0xb8>
 8008d9a:	4a2a      	ldr	r2, [pc, #168]	; (8008e44 <__sflush_r+0x108>)
 8008d9c:	40ca      	lsrs	r2, r1
 8008d9e:	07d6      	lsls	r6, r2, #31
 8008da0:	d528      	bpl.n	8008df4 <__sflush_r+0xb8>
 8008da2:	2200      	movs	r2, #0
 8008da4:	6062      	str	r2, [r4, #4]
 8008da6:	04d9      	lsls	r1, r3, #19
 8008da8:	6922      	ldr	r2, [r4, #16]
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	d504      	bpl.n	8008db8 <__sflush_r+0x7c>
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	d101      	bne.n	8008db6 <__sflush_r+0x7a>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	b903      	cbnz	r3, 8008db8 <__sflush_r+0x7c>
 8008db6:	6560      	str	r0, [r4, #84]	; 0x54
 8008db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d0ca      	beq.n	8008d56 <__sflush_r+0x1a>
 8008dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d002      	beq.n	8008dce <__sflush_r+0x92>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 f915 	bl	8008ff8 <_free_r>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8008dd2:	e7c1      	b.n	8008d58 <__sflush_r+0x1c>
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b0      	blx	r6
 8008ddc:	1c41      	adds	r1, r0, #1
 8008dde:	d1c7      	bne.n	8008d70 <__sflush_r+0x34>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0c4      	beq.n	8008d70 <__sflush_r+0x34>
 8008de6:	2b1d      	cmp	r3, #29
 8008de8:	d001      	beq.n	8008dee <__sflush_r+0xb2>
 8008dea:	2b16      	cmp	r3, #22
 8008dec:	d101      	bne.n	8008df2 <__sflush_r+0xb6>
 8008dee:	602f      	str	r7, [r5, #0]
 8008df0:	e7b1      	b.n	8008d56 <__sflush_r+0x1a>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	e7ad      	b.n	8008d58 <__sflush_r+0x1c>
 8008dfc:	690f      	ldr	r7, [r1, #16]
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	d0a9      	beq.n	8008d56 <__sflush_r+0x1a>
 8008e02:	0793      	lsls	r3, r2, #30
 8008e04:	680e      	ldr	r6, [r1, #0]
 8008e06:	bf08      	it	eq
 8008e08:	694b      	ldreq	r3, [r1, #20]
 8008e0a:	600f      	str	r7, [r1, #0]
 8008e0c:	bf18      	it	ne
 8008e0e:	2300      	movne	r3, #0
 8008e10:	eba6 0807 	sub.w	r8, r6, r7
 8008e14:	608b      	str	r3, [r1, #8]
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	dd9c      	ble.n	8008d56 <__sflush_r+0x1a>
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e20:	4643      	mov	r3, r8
 8008e22:	463a      	mov	r2, r7
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b0      	blx	r6
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dc06      	bgt.n	8008e3a <__sflush_r+0xfe>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	e78e      	b.n	8008d58 <__sflush_r+0x1c>
 8008e3a:	4407      	add	r7, r0
 8008e3c:	eba8 0800 	sub.w	r8, r8, r0
 8008e40:	e7e9      	b.n	8008e16 <__sflush_r+0xda>
 8008e42:	bf00      	nop
 8008e44:	20400001 	.word	0x20400001

08008e48 <_fflush_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	690b      	ldr	r3, [r1, #16]
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b913      	cbnz	r3, 8008e58 <_fflush_r+0x10>
 8008e52:	2500      	movs	r5, #0
 8008e54:	4628      	mov	r0, r5
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	b118      	cbz	r0, 8008e62 <_fflush_r+0x1a>
 8008e5a:	6983      	ldr	r3, [r0, #24]
 8008e5c:	b90b      	cbnz	r3, 8008e62 <_fflush_r+0x1a>
 8008e5e:	f7ff f8f3 	bl	8008048 <__sinit>
 8008e62:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <_fflush_r+0x6c>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d11b      	bne.n	8008ea0 <_fflush_r+0x58>
 8008e68:	686c      	ldr	r4, [r5, #4]
 8008e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0ef      	beq.n	8008e52 <_fflush_r+0xa>
 8008e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e74:	07d0      	lsls	r0, r2, #31
 8008e76:	d404      	bmi.n	8008e82 <_fflush_r+0x3a>
 8008e78:	0599      	lsls	r1, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_fflush_r+0x3a>
 8008e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7e:	f7ff f981 	bl	8008184 <__retarget_lock_acquire_recursive>
 8008e82:	4628      	mov	r0, r5
 8008e84:	4621      	mov	r1, r4
 8008e86:	f7ff ff59 	bl	8008d3c <__sflush_r>
 8008e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8c:	07da      	lsls	r2, r3, #31
 8008e8e:	4605      	mov	r5, r0
 8008e90:	d4e0      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d4dd      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f7ff f974 	bl	8008186 <__retarget_lock_release_recursive>
 8008e9e:	e7d9      	b.n	8008e54 <_fflush_r+0xc>
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <_fflush_r+0x70>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d101      	bne.n	8008eaa <_fflush_r+0x62>
 8008ea6:	68ac      	ldr	r4, [r5, #8]
 8008ea8:	e7df      	b.n	8008e6a <_fflush_r+0x22>
 8008eaa:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <_fflush_r+0x74>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	bf08      	it	eq
 8008eb0:	68ec      	ldreq	r4, [r5, #12]
 8008eb2:	e7da      	b.n	8008e6a <_fflush_r+0x22>
 8008eb4:	08009594 	.word	0x08009594
 8008eb8:	080095b4 	.word	0x080095b4
 8008ebc:	08009574 	.word	0x08009574

08008ec0 <_lseek_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	; (8008ee0 <_lseek_r+0x20>)
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2200      	movs	r2, #0
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7f8 fc2e 	bl	8001730 <_lseek>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_lseek_r+0x1e>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_lseek_r+0x1e>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	20012fac 	.word	0x20012fac

08008ee4 <__swhatbuf_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	460e      	mov	r6, r1
 8008ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eec:	2900      	cmp	r1, #0
 8008eee:	b096      	sub	sp, #88	; 0x58
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	461d      	mov	r5, r3
 8008ef4:	da07      	bge.n	8008f06 <__swhatbuf_r+0x22>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	89b3      	ldrh	r3, [r6, #12]
 8008efc:	061a      	lsls	r2, r3, #24
 8008efe:	d410      	bmi.n	8008f22 <__swhatbuf_r+0x3e>
 8008f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f04:	e00e      	b.n	8008f24 <__swhatbuf_r+0x40>
 8008f06:	466a      	mov	r2, sp
 8008f08:	f000 f8fe 	bl	8009108 <_fstat_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	dbf2      	blt.n	8008ef6 <__swhatbuf_r+0x12>
 8008f10:	9a01      	ldr	r2, [sp, #4]
 8008f12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f1a:	425a      	negs	r2, r3
 8008f1c:	415a      	adcs	r2, r3
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	e7ee      	b.n	8008f00 <__swhatbuf_r+0x1c>
 8008f22:	2340      	movs	r3, #64	; 0x40
 8008f24:	2000      	movs	r0, #0
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	b016      	add	sp, #88	; 0x58
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}

08008f2c <__smakebuf_r>:
 8008f2c:	898b      	ldrh	r3, [r1, #12]
 8008f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f30:	079d      	lsls	r5, r3, #30
 8008f32:	4606      	mov	r6, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	d507      	bpl.n	8008f48 <__smakebuf_r+0x1c>
 8008f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	6123      	str	r3, [r4, #16]
 8008f40:	2301      	movs	r3, #1
 8008f42:	6163      	str	r3, [r4, #20]
 8008f44:	b002      	add	sp, #8
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	ab01      	add	r3, sp, #4
 8008f4a:	466a      	mov	r2, sp
 8008f4c:	f7ff ffca 	bl	8008ee4 <__swhatbuf_r>
 8008f50:	9900      	ldr	r1, [sp, #0]
 8008f52:	4605      	mov	r5, r0
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7ff f917 	bl	8008188 <_malloc_r>
 8008f5a:	b948      	cbnz	r0, 8008f70 <__smakebuf_r+0x44>
 8008f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f60:	059a      	lsls	r2, r3, #22
 8008f62:	d4ef      	bmi.n	8008f44 <__smakebuf_r+0x18>
 8008f64:	f023 0303 	bic.w	r3, r3, #3
 8008f68:	f043 0302 	orr.w	r3, r3, #2
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	e7e3      	b.n	8008f38 <__smakebuf_r+0xc>
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <__smakebuf_r+0x7c>)
 8008f72:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	6020      	str	r0, [r4, #0]
 8008f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	9b00      	ldr	r3, [sp, #0]
 8008f80:	6163      	str	r3, [r4, #20]
 8008f82:	9b01      	ldr	r3, [sp, #4]
 8008f84:	6120      	str	r0, [r4, #16]
 8008f86:	b15b      	cbz	r3, 8008fa0 <__smakebuf_r+0x74>
 8008f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f000 f8cd 	bl	800912c <_isatty_r>
 8008f92:	b128      	cbz	r0, 8008fa0 <__smakebuf_r+0x74>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f023 0303 	bic.w	r3, r3, #3
 8008f9a:	f043 0301 	orr.w	r3, r3, #1
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	89a0      	ldrh	r0, [r4, #12]
 8008fa2:	4305      	orrs	r5, r0
 8008fa4:	81a5      	strh	r5, [r4, #12]
 8008fa6:	e7cd      	b.n	8008f44 <__smakebuf_r+0x18>
 8008fa8:	08007fe1 	.word	0x08007fe1

08008fac <memmove>:
 8008fac:	4288      	cmp	r0, r1
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	eb01 0402 	add.w	r4, r1, r2
 8008fb4:	d902      	bls.n	8008fbc <memmove+0x10>
 8008fb6:	4284      	cmp	r4, r0
 8008fb8:	4623      	mov	r3, r4
 8008fba:	d807      	bhi.n	8008fcc <memmove+0x20>
 8008fbc:	1e43      	subs	r3, r0, #1
 8008fbe:	42a1      	cmp	r1, r4
 8008fc0:	d008      	beq.n	8008fd4 <memmove+0x28>
 8008fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fca:	e7f8      	b.n	8008fbe <memmove+0x12>
 8008fcc:	4402      	add	r2, r0
 8008fce:	4601      	mov	r1, r0
 8008fd0:	428a      	cmp	r2, r1
 8008fd2:	d100      	bne.n	8008fd6 <memmove+0x2a>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fde:	e7f7      	b.n	8008fd0 <memmove+0x24>

08008fe0 <__malloc_lock>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	; (8008fe8 <__malloc_lock+0x8>)
 8008fe2:	f7ff b8cf 	b.w	8008184 <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20012fa4 	.word	0x20012fa4

08008fec <__malloc_unlock>:
 8008fec:	4801      	ldr	r0, [pc, #4]	; (8008ff4 <__malloc_unlock+0x8>)
 8008fee:	f7ff b8ca 	b.w	8008186 <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	20012fa4 	.word	0x20012fa4

08008ff8 <_free_r>:
 8008ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	d048      	beq.n	8009090 <_free_r+0x98>
 8008ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009002:	9001      	str	r0, [sp, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f1a1 0404 	sub.w	r4, r1, #4
 800900a:	bfb8      	it	lt
 800900c:	18e4      	addlt	r4, r4, r3
 800900e:	f7ff ffe7 	bl	8008fe0 <__malloc_lock>
 8009012:	4a20      	ldr	r2, [pc, #128]	; (8009094 <_free_r+0x9c>)
 8009014:	9801      	ldr	r0, [sp, #4]
 8009016:	6813      	ldr	r3, [r2, #0]
 8009018:	4615      	mov	r5, r2
 800901a:	b933      	cbnz	r3, 800902a <_free_r+0x32>
 800901c:	6063      	str	r3, [r4, #4]
 800901e:	6014      	str	r4, [r2, #0]
 8009020:	b003      	add	sp, #12
 8009022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009026:	f7ff bfe1 	b.w	8008fec <__malloc_unlock>
 800902a:	42a3      	cmp	r3, r4
 800902c:	d90b      	bls.n	8009046 <_free_r+0x4e>
 800902e:	6821      	ldr	r1, [r4, #0]
 8009030:	1862      	adds	r2, r4, r1
 8009032:	4293      	cmp	r3, r2
 8009034:	bf04      	itt	eq
 8009036:	681a      	ldreq	r2, [r3, #0]
 8009038:	685b      	ldreq	r3, [r3, #4]
 800903a:	6063      	str	r3, [r4, #4]
 800903c:	bf04      	itt	eq
 800903e:	1852      	addeq	r2, r2, r1
 8009040:	6022      	streq	r2, [r4, #0]
 8009042:	602c      	str	r4, [r5, #0]
 8009044:	e7ec      	b.n	8009020 <_free_r+0x28>
 8009046:	461a      	mov	r2, r3
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	b10b      	cbz	r3, 8009050 <_free_r+0x58>
 800904c:	42a3      	cmp	r3, r4
 800904e:	d9fa      	bls.n	8009046 <_free_r+0x4e>
 8009050:	6811      	ldr	r1, [r2, #0]
 8009052:	1855      	adds	r5, r2, r1
 8009054:	42a5      	cmp	r5, r4
 8009056:	d10b      	bne.n	8009070 <_free_r+0x78>
 8009058:	6824      	ldr	r4, [r4, #0]
 800905a:	4421      	add	r1, r4
 800905c:	1854      	adds	r4, r2, r1
 800905e:	42a3      	cmp	r3, r4
 8009060:	6011      	str	r1, [r2, #0]
 8009062:	d1dd      	bne.n	8009020 <_free_r+0x28>
 8009064:	681c      	ldr	r4, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	6053      	str	r3, [r2, #4]
 800906a:	4421      	add	r1, r4
 800906c:	6011      	str	r1, [r2, #0]
 800906e:	e7d7      	b.n	8009020 <_free_r+0x28>
 8009070:	d902      	bls.n	8009078 <_free_r+0x80>
 8009072:	230c      	movs	r3, #12
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	e7d3      	b.n	8009020 <_free_r+0x28>
 8009078:	6825      	ldr	r5, [r4, #0]
 800907a:	1961      	adds	r1, r4, r5
 800907c:	428b      	cmp	r3, r1
 800907e:	bf04      	itt	eq
 8009080:	6819      	ldreq	r1, [r3, #0]
 8009082:	685b      	ldreq	r3, [r3, #4]
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	bf04      	itt	eq
 8009088:	1949      	addeq	r1, r1, r5
 800908a:	6021      	streq	r1, [r4, #0]
 800908c:	6054      	str	r4, [r2, #4]
 800908e:	e7c7      	b.n	8009020 <_free_r+0x28>
 8009090:	b003      	add	sp, #12
 8009092:	bd30      	pop	{r4, r5, pc}
 8009094:	20012e74 	.word	0x20012e74

08009098 <_realloc_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	4607      	mov	r7, r0
 800909c:	4614      	mov	r4, r2
 800909e:	460e      	mov	r6, r1
 80090a0:	b921      	cbnz	r1, 80090ac <_realloc_r+0x14>
 80090a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090a6:	4611      	mov	r1, r2
 80090a8:	f7ff b86e 	b.w	8008188 <_malloc_r>
 80090ac:	b922      	cbnz	r2, 80090b8 <_realloc_r+0x20>
 80090ae:	f7ff ffa3 	bl	8008ff8 <_free_r>
 80090b2:	4625      	mov	r5, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b8:	f000 f848 	bl	800914c <_malloc_usable_size_r>
 80090bc:	42a0      	cmp	r0, r4
 80090be:	d20f      	bcs.n	80090e0 <_realloc_r+0x48>
 80090c0:	4621      	mov	r1, r4
 80090c2:	4638      	mov	r0, r7
 80090c4:	f7ff f860 	bl	8008188 <_malloc_r>
 80090c8:	4605      	mov	r5, r0
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0f2      	beq.n	80090b4 <_realloc_r+0x1c>
 80090ce:	4631      	mov	r1, r6
 80090d0:	4622      	mov	r2, r4
 80090d2:	f7fe ff13 	bl	8007efc <memcpy>
 80090d6:	4631      	mov	r1, r6
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ff8d 	bl	8008ff8 <_free_r>
 80090de:	e7e9      	b.n	80090b4 <_realloc_r+0x1c>
 80090e0:	4635      	mov	r5, r6
 80090e2:	e7e7      	b.n	80090b4 <_realloc_r+0x1c>

080090e4 <_read_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d07      	ldr	r5, [pc, #28]	; (8009104 <_read_r+0x20>)
 80090e8:	4604      	mov	r4, r0
 80090ea:	4608      	mov	r0, r1
 80090ec:	4611      	mov	r1, r2
 80090ee:	2200      	movs	r2, #0
 80090f0:	602a      	str	r2, [r5, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f7f8 fabc 	bl	8001670 <_read>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_read_r+0x1e>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_read_r+0x1e>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20012fac 	.word	0x20012fac

08009108 <_fstat_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d07      	ldr	r5, [pc, #28]	; (8009128 <_fstat_r+0x20>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	4611      	mov	r1, r2
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	f7f8 faf0 	bl	80016fa <_fstat>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	d102      	bne.n	8009124 <_fstat_r+0x1c>
 800911e:	682b      	ldr	r3, [r5, #0]
 8009120:	b103      	cbz	r3, 8009124 <_fstat_r+0x1c>
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	bd38      	pop	{r3, r4, r5, pc}
 8009126:	bf00      	nop
 8009128:	20012fac 	.word	0x20012fac

0800912c <_isatty_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_isatty_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f8 faef 	bl	800171a <_isatty>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_isatty_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_isatty_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20012fac 	.word	0x20012fac

0800914c <_malloc_usable_size_r>:
 800914c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009150:	1f18      	subs	r0, r3, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfbc      	itt	lt
 8009156:	580b      	ldrlt	r3, [r1, r0]
 8009158:	18c0      	addlt	r0, r0, r3
 800915a:	4770      	bx	lr

0800915c <_init>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr

08009168 <_fini>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr
