
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007400  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007750  08007750  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007758  08007758  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014498  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001847d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f7  00000000  00000000  000384c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002569b  00000000  00000000  0003da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149d2  00000000  00000000  000630bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e64b5  00000000  00000000  00077a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015df42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f38  00000000  00000000  0015df98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007598 	.word	0x08007598

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08007598 	.word	0x08007598

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20014404 	.word	0x20014404

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96e 	b.w	8000578 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468c      	mov	ip, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8083 	bne.w	80003ca <__udivmoddi4+0x116>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d947      	bls.n	800035a <__udivmoddi4+0xa6>
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	b142      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	f1c2 0020 	rsb	r0, r2, #32
 80002d4:	fa24 f000 	lsr.w	r0, r4, r0
 80002d8:	4091      	lsls	r1, r2
 80002da:	4097      	lsls	r7, r2
 80002dc:	ea40 0c01 	orr.w	ip, r0, r1
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fbbc f6f8 	udiv	r6, ip, r8
 80002ec:	fa1f fe87 	uxth.w	lr, r7
 80002f0:	fb08 c116 	mls	r1, r8, r6, ip
 80002f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f8:	fb06 f10e 	mul.w	r1, r6, lr
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x60>
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 8119 	bcs.w	800053c <__udivmoddi4+0x288>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 8116 	bls.w	800053c <__udivmoddi4+0x288>
 8000310:	3e02      	subs	r6, #2
 8000312:	443b      	add	r3, r7
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	45a6      	cmp	lr, r4
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x8c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	f080 8105 	bcs.w	8000540 <__udivmoddi4+0x28c>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f240 8102 	bls.w	8000540 <__udivmoddi4+0x28c>
 800033c:	3802      	subs	r0, #2
 800033e:	443c      	add	r4, r7
 8000340:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa0>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xaa>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	2a00      	cmp	r2, #0
 8000364:	d150      	bne.n	8000408 <__udivmoddi4+0x154>
 8000366:	1bcb      	subs	r3, r1, r7
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	2601      	movs	r6, #1
 8000372:	fbb3 fcfe 	udiv	ip, r3, lr
 8000376:	0c21      	lsrs	r1, r4, #16
 8000378:	fb0e 331c 	mls	r3, lr, ip, r3
 800037c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000380:	fb08 f30c 	mul.w	r3, r8, ip
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xe4>
 8000388:	1879      	adds	r1, r7, r1
 800038a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0xe2>
 8000390:	428b      	cmp	r3, r1
 8000392:	f200 80e9 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 8000396:	4684      	mov	ip, r0
 8000398:	1ac9      	subs	r1, r1, r3
 800039a:	b2a3      	uxth	r3, r4
 800039c:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a8:	fb08 f800 	mul.w	r8, r8, r0
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x10c>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x10a>
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	f200 80d9 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 80003be:	4618      	mov	r0, r3
 80003c0:	eba4 0408 	sub.w	r4, r4, r8
 80003c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c8:	e7bf      	b.n	800034a <__udivmoddi4+0x96>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x12e>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80b1 	beq.w	8000536 <__udivmoddi4+0x282>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x1cc>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0x140>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80b8 	bhi.w	8000564 <__udivmoddi4+0x2b0>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0103 	sbc.w	r1, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	468c      	mov	ip, r1
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0a8      	beq.n	8000354 <__udivmoddi4+0xa0>
 8000402:	e9c5 4c00 	strd	r4, ip, [r5]
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f603 	lsr.w	r6, r0, r3
 8000410:	4097      	lsls	r7, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800041a:	40d9      	lsrs	r1, r3
 800041c:	4330      	orrs	r0, r6
 800041e:	0c03      	lsrs	r3, r0, #16
 8000420:	fbb1 f6fe 	udiv	r6, r1, lr
 8000424:	fa1f f887 	uxth.w	r8, r7
 8000428:	fb0e 1116 	mls	r1, lr, r6, r1
 800042c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000430:	fb06 f108 	mul.w	r1, r6, r8
 8000434:	4299      	cmp	r1, r3
 8000436:	fa04 f402 	lsl.w	r4, r4, r2
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x19c>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000442:	f080 808d 	bcs.w	8000560 <__udivmoddi4+0x2ac>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 808a 	bls.w	8000560 <__udivmoddi4+0x2ac>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b281      	uxth	r1, r0
 8000454:	fbb3 f0fe 	udiv	r0, r3, lr
 8000458:	fb0e 3310 	mls	r3, lr, r0, r3
 800045c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000460:	fb00 f308 	mul.w	r3, r0, r8
 8000464:	428b      	cmp	r3, r1
 8000466:	d907      	bls.n	8000478 <__udivmoddi4+0x1c4>
 8000468:	1879      	adds	r1, r7, r1
 800046a:	f100 3cff 	add.w	ip, r0, #4294967295
 800046e:	d273      	bcs.n	8000558 <__udivmoddi4+0x2a4>
 8000470:	428b      	cmp	r3, r1
 8000472:	d971      	bls.n	8000558 <__udivmoddi4+0x2a4>
 8000474:	3802      	subs	r0, #2
 8000476:	4439      	add	r1, r7
 8000478:	1acb      	subs	r3, r1, r3
 800047a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047e:	e778      	b.n	8000372 <__udivmoddi4+0xbe>
 8000480:	f1c6 0c20 	rsb	ip, r6, #32
 8000484:	fa03 f406 	lsl.w	r4, r3, r6
 8000488:	fa22 f30c 	lsr.w	r3, r2, ip
 800048c:	431c      	orrs	r4, r3
 800048e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800049a:	fa21 f10c 	lsr.w	r1, r1, ip
 800049e:	431f      	orrs	r7, r3
 80004a0:	0c3b      	lsrs	r3, r7, #16
 80004a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a6:	fa1f f884 	uxth.w	r8, r4
 80004aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004b2:	fb09 fa08 	mul.w	sl, r9, r8
 80004b6:	458a      	cmp	sl, r1
 80004b8:	fa02 f206 	lsl.w	r2, r2, r6
 80004bc:	fa00 f306 	lsl.w	r3, r0, r6
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x220>
 80004c2:	1861      	adds	r1, r4, r1
 80004c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c8:	d248      	bcs.n	800055c <__udivmoddi4+0x2a8>
 80004ca:	458a      	cmp	sl, r1
 80004cc:	d946      	bls.n	800055c <__udivmoddi4+0x2a8>
 80004ce:	f1a9 0902 	sub.w	r9, r9, #2
 80004d2:	4421      	add	r1, r4
 80004d4:	eba1 010a 	sub.w	r1, r1, sl
 80004d8:	b2bf      	uxth	r7, r7
 80004da:	fbb1 f0fe 	udiv	r0, r1, lr
 80004de:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e6:	fb00 f808 	mul.w	r8, r0, r8
 80004ea:	45b8      	cmp	r8, r7
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x24a>
 80004ee:	19e7      	adds	r7, r4, r7
 80004f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f4:	d22e      	bcs.n	8000554 <__udivmoddi4+0x2a0>
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d92c      	bls.n	8000554 <__udivmoddi4+0x2a0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4427      	add	r7, r4
 80004fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000502:	eba7 0708 	sub.w	r7, r7, r8
 8000506:	fba0 8902 	umull	r8, r9, r0, r2
 800050a:	454f      	cmp	r7, r9
 800050c:	46c6      	mov	lr, r8
 800050e:	4649      	mov	r1, r9
 8000510:	d31a      	bcc.n	8000548 <__udivmoddi4+0x294>
 8000512:	d017      	beq.n	8000544 <__udivmoddi4+0x290>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x27a>
 8000516:	ebb3 020e 	subs.w	r2, r3, lr
 800051a:	eb67 0701 	sbc.w	r7, r7, r1
 800051e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000522:	40f2      	lsrs	r2, r6
 8000524:	ea4c 0202 	orr.w	r2, ip, r2
 8000528:	40f7      	lsrs	r7, r6
 800052a:	e9c5 2700 	strd	r2, r7, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e70b      	b.n	8000354 <__udivmoddi4+0xa0>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e9      	b.n	8000314 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fd      	b.n	8000340 <__udivmoddi4+0x8c>
 8000544:	4543      	cmp	r3, r8
 8000546:	d2e5      	bcs.n	8000514 <__udivmoddi4+0x260>
 8000548:	ebb8 0e02 	subs.w	lr, r8, r2
 800054c:	eb69 0104 	sbc.w	r1, r9, r4
 8000550:	3801      	subs	r0, #1
 8000552:	e7df      	b.n	8000514 <__udivmoddi4+0x260>
 8000554:	4608      	mov	r0, r1
 8000556:	e7d2      	b.n	80004fe <__udivmoddi4+0x24a>
 8000558:	4660      	mov	r0, ip
 800055a:	e78d      	b.n	8000478 <__udivmoddi4+0x1c4>
 800055c:	4681      	mov	r9, r0
 800055e:	e7b9      	b.n	80004d4 <__udivmoddi4+0x220>
 8000560:	4666      	mov	r6, ip
 8000562:	e775      	b.n	8000450 <__udivmoddi4+0x19c>
 8000564:	4630      	mov	r0, r6
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14a>
 8000568:	f1ac 0c02 	sub.w	ip, ip, #2
 800056c:	4439      	add	r1, r7
 800056e:	e713      	b.n	8000398 <__udivmoddi4+0xe4>
 8000570:	3802      	subs	r0, #2
 8000572:	443c      	add	r4, r7
 8000574:	e724      	b.n	80003c0 <__udivmoddi4+0x10c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fce1 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f875 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8df 	bl	800074c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //CYCLCNT enable
   DWT_CTRL |= ( 1 << 0);
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <main+0xcc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <main+0xcc>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]

   SEGGER_SYSVIEW_Conf();
 800059a:	f004 fe53 	bl	8005244 <SEGGER_SYSVIEW_Conf>
   SEGGER_SYSVIEW_Start();
 800059e:	f006 f9d3 	bl	8006948 <SEGGER_SYSVIEW_Start>

   status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <main+0xd0>)
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2303      	movs	r3, #3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	22c8      	movs	r2, #200	; 0xc8
 80005ae:	4928      	ldr	r1, [pc, #160]	; (8000650 <main+0xd4>)
 80005b0:	4828      	ldr	r0, [pc, #160]	; (8000654 <main+0xd8>)
 80005b2:	f002 fd33 	bl	800301c <xTaskCreate>
 80005b6:	60f8      	str	r0, [r7, #12]

   configASSERT(status == pdPASS);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d00a      	beq.n	80005d4 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d0:	bf00      	nop
 80005d2:	e7fe      	b.n	80005d2 <main+0x56>

   next_task_handle = ledg_task_handle;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <main+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <main+0xdc>)
 80005da:	6013      	str	r3, [r2, #0]

   status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0xe0>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	22c8      	movs	r2, #200	; 0xc8
 80005e8:	491d      	ldr	r1, [pc, #116]	; (8000660 <main+0xe4>)
 80005ea:	481e      	ldr	r0, [pc, #120]	; (8000664 <main+0xe8>)
 80005ec:	f002 fd16 	bl	800301c <xTaskCreate>
 80005f0:	60f8      	str	r0, [r7, #12]

   configASSERT(status == pdPASS);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00a      	beq.n	800060e <main+0x92>
        __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	607b      	str	r3, [r7, #4]
    }
 800060a:	bf00      	nop
 800060c:	e7fe      	b.n	800060c <main+0x90>

   status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <main+0xec>)
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2304      	movs	r3, #4
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	22c8      	movs	r2, #200	; 0xc8
 800061a:	4914      	ldr	r1, [pc, #80]	; (800066c <main+0xf0>)
 800061c:	4814      	ldr	r0, [pc, #80]	; (8000670 <main+0xf4>)
 800061e:	f002 fcfd 	bl	800301c <xTaskCreate>
 8000622:	60f8      	str	r0, [r7, #12]

   configASSERT(status == pdPASS);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d00a      	beq.n	8000640 <main+0xc4>
        __asm volatile
 800062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062e:	f383 8811 	msr	BASEPRI, r3
 8000632:	f3bf 8f6f 	isb	sy
 8000636:	f3bf 8f4f 	dsb	sy
 800063a:	603b      	str	r3, [r7, #0]
    }
 800063c:	bf00      	nop
 800063e:	e7fe      	b.n	800063e <main+0xc2>



   //start the freeRTOS scheduler
   vTaskStartScheduler();
 8000640:	f002 ff32 	bl	80034a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0xc8>
 8000646:	bf00      	nop
 8000648:	e0001000 	.word	0xe0001000
 800064c:	2001436c 	.word	0x2001436c
 8000650:	080075b0 	.word	0x080075b0
 8000654:	08000c25 	.word	0x08000c25
 8000658:	20000030 	.word	0x20000030
 800065c:	20014374 	.word	0x20014374
 8000660:	080075c0 	.word	0x080075c0
 8000664:	08000c95 	.word	0x08000c95
 8000668:	20014370 	.word	0x20014370
 800066c:	080075d0 	.word	0x080075d0
 8000670:	08000d0d 	.word	0x08000d0d

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 ff80 	bl	8007588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <SystemClock_Config+0xd0>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd4>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006ec:	2332      	movs	r3, #50	; 0x32
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 ff3f 	bl	8001580 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000708:	f000 fb3a 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000718:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f9a0 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000736:	f000 fb23 	bl	8000d80 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
 8000766:	4bb2      	ldr	r3, [pc, #712]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4ab1      	ldr	r2, [pc, #708]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4baf      	ldr	r3, [pc, #700]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	4bab      	ldr	r3, [pc, #684]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4aaa      	ldr	r2, [pc, #680]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4ba8      	ldr	r3, [pc, #672]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4ba4      	ldr	r3, [pc, #656]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4aa3      	ldr	r2, [pc, #652]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4ba1      	ldr	r3, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b9d      	ldr	r3, [pc, #628]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a9c      	ldr	r2, [pc, #624]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b9a      	ldr	r3, [pc, #616]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b96      	ldr	r3, [pc, #600]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a95      	ldr	r2, [pc, #596]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b93      	ldr	r3, [pc, #588]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b8f      	ldr	r3, [pc, #572]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a8e      	ldr	r2, [pc, #568]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b8c      	ldr	r3, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b88      	ldr	r3, [pc, #544]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a87      	ldr	r2, [pc, #540]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b85      	ldr	r3, [pc, #532]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b81      	ldr	r3, [pc, #516]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a80      	ldr	r2, [pc, #512]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b7e      	ldr	r3, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2116      	movs	r1, #22
 8000846:	487b      	ldr	r0, [pc, #492]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000848:	f000 fe66 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4879      	ldr	r0, [pc, #484]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000852:	f000 fe61 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800085c:	4877      	ldr	r0, [pc, #476]	; (8000a3c <MX_GPIO_Init+0x2f0>)
 800085e:	f000 fe5b 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000868:	4875      	ldr	r0, [pc, #468]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 800086a:	f000 fe55 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800086e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000880:	230c      	movs	r3, #12
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	486e      	ldr	r0, [pc, #440]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 800088c:	f000 fc80 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000890:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80008a2:	2305      	movs	r3, #5
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	4865      	ldr	r0, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 80008ae:	f000 fc6f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008c4:	230e      	movs	r3, #14
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	485d      	ldr	r0, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 80008d0:	f000 fc5e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e4:	230c      	movs	r3, #12
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4851      	ldr	r0, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 80008f0:	f000 fc4e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008f4:	2316      	movs	r3, #22
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	484a      	ldr	r0, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 800090c:	f000 fc40 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000910:	f248 0307 	movw	r3, #32775	; 0x8007
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000916:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4844      	ldr	r0, [pc, #272]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000928:	f000 fc32 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800092c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800093e:	230e      	movs	r3, #14
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	483b      	ldr	r0, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 800094a:	f000 fc21 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4834      	ldr	r0, [pc, #208]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000966:	f000 fc13 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	482d      	ldr	r0, [pc, #180]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000980:	f000 fc06 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000984:	2303      	movs	r3, #3
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000994:	2309      	movs	r3, #9
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	482a      	ldr	r0, [pc, #168]	; (8000a48 <MX_GPIO_Init+0x2fc>)
 80009a0:	f000 fbf6 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4824      	ldr	r0, [pc, #144]	; (8000a48 <MX_GPIO_Init+0x2fc>)
 80009b8:	f000 fbea 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ce:	230c      	movs	r3, #12
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 80009da:	f000 fbd9 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f0:	230c      	movs	r3, #12
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x300>)
 80009fc:	f000 fbc8 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a12:	230e      	movs	r3, #14
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_GPIO_Init+0x2fc>)
 8000a1e:	f000 fbb7 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a22:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a2c:	e010      	b.n	8000a50 <MX_GPIO_Init+0x304>
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40021400 	.word	0x40021400
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	486b      	ldr	r0, [pc, #428]	; (8000c10 <MX_GPIO_Init+0x4c4>)
 8000a64:	f000 fb94 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4864      	ldr	r0, [pc, #400]	; (8000c10 <MX_GPIO_Init+0x4c4>)
 8000a7e:	f000 fb87 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a94:	230c      	movs	r3, #12
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	485d      	ldr	r0, [pc, #372]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000aa0:	f000 fb76 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4856      	ldr	r0, [pc, #344]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000aba:	f000 fb69 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000abe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	484f      	ldr	r0, [pc, #316]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000ad8:	f000 fb5a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000adc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aee:	230e      	movs	r3, #14
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4847      	ldr	r0, [pc, #284]	; (8000c18 <MX_GPIO_Init+0x4cc>)
 8000afa:	f000 fb49 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000afe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b10:	230e      	movs	r3, #14
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4840      	ldr	r0, [pc, #256]	; (8000c1c <MX_GPIO_Init+0x4d0>)
 8000b1c:	f000 fb38 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b26:	2312      	movs	r3, #18
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b32:	2304      	movs	r3, #4
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4837      	ldr	r0, [pc, #220]	; (8000c1c <MX_GPIO_Init+0x4d0>)
 8000b3e:	f000 fb27 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b54:	2304      	movs	r3, #4
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4830      	ldr	r0, [pc, #192]	; (8000c20 <MX_GPIO_Init+0x4d4>)
 8000b60:	f000 fb16 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b76:	2307      	movs	r3, #7
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <MX_GPIO_Init+0x4d4>)
 8000b82:	f000 fb05 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b86:	2348      	movs	r3, #72	; 0x48
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b96:	230e      	movs	r3, #14
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481c      	ldr	r0, [pc, #112]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000ba2:	f000 faf5 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ba6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4815      	ldr	r0, [pc, #84]	; (8000c18 <MX_GPIO_Init+0x4cc>)
 8000bc4:	f000 fae4 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bc8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x4cc>)
 8000be2:	f000 fad5 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <MX_GPIO_Init+0x4c4>)
 8000c02:	f000 fac5 	bl	8001190 <HAL_GPIO_Init>

}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	; 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020c00 	.word	0x40020c00
 8000c18:	40021800 	.word	0x40021800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000

08000c24 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000c2c:	4814      	ldr	r0, [pc, #80]	; (8000c80 <led_green_handler+0x5c>)
 8000c2e:	f006 fbfb 	bl	8007428 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, LED_GREEN_PIN);
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4813      	ldr	r0, [pc, #76]	; (8000c84 <led_green_handler+0x60>)
 8000c38:	f000 fc87 	bl	800154a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2300      	movs	r3, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f003 f915 	bl	8003e78 <xTaskGenericNotifyWait>
 8000c4e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d1ea      	bne.n	8000c2c <led_green_handler+0x8>
			vTaskSuspendAll();
 8000c56:	f002 fc89 	bl	800356c <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <led_green_handler+0x64>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <led_green_handler+0x68>)
 8000c60:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000c62:	f002 fc91 	bl	8003588 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOG, LED_GREEN_PIN,GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <led_green_handler+0x60>)
 8000c6e:	f000 fc53 	bl	8001518 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <led_green_handler+0x6c>)
 8000c74:	f006 fbd8 	bl	8007428 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f002 fb33 	bl	80032e4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000c7e:	e7d5      	b.n	8000c2c <led_green_handler+0x8>
 8000c80:	080075dc 	.word	0x080075dc
 8000c84:	40021800 	.word	0x40021800
 8000c88:	20014374 	.word	0x20014374
 8000c8c:	20000030 	.word	0x20000030
 8000c90:	080075f0 	.word	0x080075f0

08000c94 <led_red_handler>:
}



static void led_red_handler(void* parameters)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000c9c:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <led_red_handler+0x64>)
 8000c9e:	f006 fbc3 	bl	8007428 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, LED_RED_PIN);
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	4815      	ldr	r0, [pc, #84]	; (8000cfc <led_red_handler+0x68>)
 8000ca8:	f000 fc4f 	bl	800154a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000cac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f003 f8dd 	bl	8003e78 <xTaskGenericNotifyWait>
 8000cbe:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d1ea      	bne.n	8000c9c <led_red_handler+0x8>
			vTaskSuspendAll();
 8000cc6:	f002 fc51 	bl	800356c <vTaskSuspendAll>
			next_task_handle = NULL;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <led_red_handler+0x6c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000cd0:	f002 fc5a 	bl	8003588 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOG, LED_RED_PIN,GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <led_red_handler+0x68>)
 8000cdc:	f000 fc1c 	bl	8001518 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <led_red_handler+0x70>)
 8000ce2:	f006 fba1 	bl	8007428 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <led_red_handler+0x74>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fafa 	bl	80032e4 <vTaskDelete>
			vTaskDelete(NULL);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f002 faf7 	bl	80032e4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000cf6:	e7d1      	b.n	8000c9c <led_red_handler+0x8>
 8000cf8:	08007608 	.word	0x08007608
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	20000030 	.word	0x20000030
 8000d04:	0800761c 	.word	0x0800761c
 8000d08:	20014370 	.word	0x20014370

08000d0c <button_handler>:

}


static void button_handler(void* parameters)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <button_handler+0x48>)
 8000d20:	f000 fbe2 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00b      	beq.n	8000d46 <button_handler+0x3a>
		{
			if(! prev_read)
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d108      	bne.n	8000d46 <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <button_handler+0x4c>)
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	f003 f921 	bl	8003f88 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f002 fb74 	bl	8003438 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d50:	e7e4      	b.n	8000d1c <button_handler+0x10>
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000
 8000d58:	20000030 	.word	0x20000030

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 f90d 	bl	8000f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
   vInitPrioGroupValue();
 8000dca:	f003 fe85 	bl	8004ad8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2036      	movs	r0, #54	; 0x36
 8000df2:	f000 f9a3 	bl	800113c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df6:	2036      	movs	r0, #54	; 0x36
 8000df8:	f000 f9bc 	bl	8001174 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_InitTick+0xa4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_InitTick+0xa4>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0xa4>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e18:	f107 0210 	add.w	r2, r7, #16
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f80c 	bl	8001e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e28:	f000 fff6 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_InitTick+0xa8>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_InitTick+0xac>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_InitTick+0xb0>)
 8000e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_InitTick+0xac>)
 8000e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_InitTick+0xac>)
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_InitTick+0xac>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_InitTick+0xac>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_InitTick+0xac>)
 8000e62:	f001 f81f 	bl	8001ea4 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d104      	bne.n	8000e76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_InitTick+0xac>)
 8000e6e:	f001 f873 	bl	8001f58 <HAL_TIM_Base_Start_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	20014378 	.word	0x20014378
 8000e8c:	40001000 	.word	0x40001000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM6_DAC_IRQHandler+0x10>)
 8000ec2:	f001 f8b9 	bl	8002038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20014378 	.word	0x20014378

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff ffd7 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f006 faf1 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fb29 	bl	800057c <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f38:	08007760 	.word	0x08007760
  ldr r2, =_sbss
 8000f3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f40:	200144ac 	.word	0x200144ac

08000f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f8d8 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff30 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff ff06 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	200143c0 	.word	0x200143c0

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200143c0 	.word	0x200143c0

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e177      	b.n	800149c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8166 	bne.w	8001496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c0 	beq.w	8001496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x338>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x33c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_GPIO_Init+0x340>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x344>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x348>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x34c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x21a>
 80013a6:	2309      	movs	r3, #9
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013aa:	230a      	movs	r3, #10
 80013ac:	e010      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x328>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x354>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae84 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001534:	e003      	b.n	800153e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	041a      	lsls	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43d9      	mvns	r1, r3
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	400b      	ands	r3, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e264      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d075      	beq.n	800168a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159e:	4ba3      	ldr	r3, [pc, #652]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d00c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015aa:	4ba0      	ldr	r3, [pc, #640]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d112      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4b9d      	ldr	r3, [pc, #628]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b99      	ldr	r3, [pc, #612]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d05b      	beq.n	8001688 <HAL_RCC_OscConfig+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d157      	bne.n	8001688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e23f      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x74>
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a90      	ldr	r2, [pc, #576]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e01d      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x98>
 80015fe:	4b8b      	ldr	r3, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a8a      	ldr	r2, [pc, #552]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a87      	ldr	r2, [pc, #540]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 8001618:	4b84      	ldr	r3, [pc, #528]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a83      	ldr	r2, [pc, #524]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a80      	ldr	r2, [pc, #512]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fcbc 	bl	8000fb4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fcb8 	bl	8000fb4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e204      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0xc0>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fca8 	bl	8000fb4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fca4 	bl	8000fb4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1f0      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	4b6c      	ldr	r3, [pc, #432]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0xe8>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d063      	beq.n	800175e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a2:	4b62      	ldr	r3, [pc, #392]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d11c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b5f      	ldr	r3, [pc, #380]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d116      	bne.n	80016e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x152>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e1c4      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b56      	ldr	r3, [pc, #344]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4952      	ldr	r1, [pc, #328]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	e03a      	b.n	800175e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCC_OscConfig+0x2b0>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fc5d 	bl	8000fb4 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fc59 	bl	8000fb4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1a5      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4940      	ldr	r1, [pc, #256]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_OscConfig+0x2b0>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fc3c 	bl	8000fb4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff fc38 	bl	8000fb4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e184      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d030      	beq.n	80017cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x2b4>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fc1c 	bl	8000fb4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fc18 	bl	8000fb4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e164      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x200>
 800179e:	e015      	b.n	80017cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x2b4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fc05 	bl	8000fb4 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fc01 	bl	8000fb4 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e14d      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a0 	beq.w	800191a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x2b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d121      	bne.n	800185a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_RCC_OscConfig+0x2b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_RCC_OscConfig+0x2b8>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001822:	f7ff fbc7 	bl	8000fb4 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	e011      	b.n	800184e <HAL_RCC_OscConfig+0x2ce>
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	42470000 	.word	0x42470000
 8001834:	42470e80 	.word	0x42470e80
 8001838:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183c:	f7ff fbba 	bl	8000fb4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e106      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <HAL_RCC_OscConfig+0x4e4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x2f0>
 8001862:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a80      	ldr	r2, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x32a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x312>
 8001878:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x32a>
 8001892:	4b75      	ldr	r3, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a74      	ldr	r2, [pc, #464]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb7f 	bl	8000fb4 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fb7b 	bl	8000fb4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0c5      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x33a>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fb69 	bl	8000fb4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fb65 	bl	8000fb4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0af      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 809b 	beq.w	8001a5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d05c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d141      	bne.n	80019bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fb39 	bl	8000fb4 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff fb35 	bl	8000fb4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e081      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001958:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	019b      	lsls	r3, r3, #6
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	041b      	lsls	r3, r3, #16
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	061b      	lsls	r3, r3, #24
 8001988:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb0e 	bl	8000fb4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fb0a 	bl	8000fb4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e056      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x41c>
 80019ba:	e04e      	b.n	8001a5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff faf7 	bl	8000fb4 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff faf3 	bl	8000fb4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e03f      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x44a>
 80019e8:	e037      	b.n	8001a5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e032      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_RCC_OscConfig+0x4e8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d028      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d121      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d11a      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d111      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40007000 	.word	0x40007000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	42470060 	.word	0x42470060

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0cc      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d90c      	bls.n	8001aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b8      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d020      	beq.n	8001afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	494d      	ldr	r1, [pc, #308]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d044      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e07f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e067      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4934      	ldr	r1, [pc, #208]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7ff fa28 	bl	8000fb4 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7ff fa24 	bl	8000fb4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d20c      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e032      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4916      	ldr	r1, [pc, #88]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f821 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8e0 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08007714 	.word	0x08007714
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c54:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d00d      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	f200 80bd 	bhi.w	8001de0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6e:	e0b7      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c72:	60bb      	str	r3, [r7, #8]
       break;
 8001c74:	e0b7      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c76:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c78:	60bb      	str	r3, [r7, #8]
      break;
 8001c7a:	e0b4      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c86:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d04d      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	ea02 0800 	and.w	r8, r2, r0
 8001caa:	ea03 0901 	and.w	r9, r3, r1
 8001cae:	4640      	mov	r0, r8
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	014b      	lsls	r3, r1, #5
 8001cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc0:	0142      	lsls	r2, r0, #5
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	ebb0 0008 	subs.w	r0, r0, r8
 8001cca:	eb61 0109 	sbc.w	r1, r1, r9
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	018b      	lsls	r3, r1, #6
 8001cd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cdc:	0182      	lsls	r2, r0, #6
 8001cde:	1a12      	subs	r2, r2, r0
 8001ce0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	00d9      	lsls	r1, r3, #3
 8001cee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cf2:	00d0      	lsls	r0, r2, #3
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	eb12 0208 	adds.w	r2, r2, r8
 8001cfc:	eb43 0309 	adc.w	r3, r3, r9
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	0259      	lsls	r1, r3, #9
 8001d0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d0e:	0250      	lsls	r0, r2, #9
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	f7fe fab0 	bl	8000284 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e04a      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	461a      	mov	r2, r3
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d3e:	f04f 0100 	mov.w	r1, #0
 8001d42:	ea02 0400 	and.w	r4, r2, r0
 8001d46:	ea03 0501 	and.w	r5, r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	014b      	lsls	r3, r1, #5
 8001d58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d5c:	0142      	lsls	r2, r0, #5
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	1b00      	subs	r0, r0, r4
 8001d64:	eb61 0105 	sbc.w	r1, r1, r5
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	018b      	lsls	r3, r1, #6
 8001d72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d76:	0182      	lsls	r2, r0, #6
 8001d78:	1a12      	subs	r2, r2, r0
 8001d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7e:	f04f 0000 	mov.w	r0, #0
 8001d82:	f04f 0100 	mov.w	r1, #0
 8001d86:	00d9      	lsls	r1, r3, #3
 8001d88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d8c:	00d0      	lsls	r0, r2, #3
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	1912      	adds	r2, r2, r4
 8001d94:	eb45 0303 	adc.w	r3, r5, r3
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	0299      	lsls	r1, r3, #10
 8001da2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001da6:	0290      	lsls	r0, r2, #10
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	f7fe fa64 	bl	8000284 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	60bb      	str	r3, [r7, #8]
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001de2:	60bb      	str	r3, [r7, #8]
      break;
 8001de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de6:	68bb      	ldr	r3, [r7, #8]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08007724 	.word	0x08007724

08001e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RCC_GetClockConfig+0x60>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e041      	b.n	8001f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f839 	bl	8001f42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 f9d8 	bl	8002298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e04e      	b.n	800200e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_TIM_Base_Start_IT+0xc4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d01d      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d018      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00e      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x80>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d111      	bne.n	8001ffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d010      	beq.n	800200c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffa:	e007      	b.n	800200c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800
 8002028:	40000c00 	.word	0x40000c00
 800202c:	40010400 	.word	0x40010400
 8002030:	40014000 	.word	0x40014000
 8002034:	40001800 	.word	0x40001800

08002038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0202 	mvn.w	r2, #2
 8002064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8ee 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8e0 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8f1 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0204 	mvn.w	r2, #4
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8c4 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8b6 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8c7 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0208 	mvn.w	r2, #8
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f89a 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f88c 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f89d 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b10      	cmp	r3, #16
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0210 	mvn.w	r2, #16
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2208      	movs	r2, #8
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f870 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f862 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f873 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0201 	mvn.w	r2, #1
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fdd0 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b80      	cmp	r3, #128	; 0x80
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f902 	bl	80023ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f838 	bl	8002284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b20      	cmp	r3, #32
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b20      	cmp	r3, #32
 800222e:	d107      	bne.n	8002240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0220 	mvn.w	r2, #32
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f8cc 	bl	80023d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a40      	ldr	r2, [pc, #256]	; (80023ac <TIM_Base_SetConfig+0x114>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d00f      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3d      	ldr	r2, [pc, #244]	; (80023b0 <TIM_Base_SetConfig+0x118>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00b      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3c      	ldr	r2, [pc, #240]	; (80023b4 <TIM_Base_SetConfig+0x11c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a3b      	ldr	r2, [pc, #236]	; (80023b8 <TIM_Base_SetConfig+0x120>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <TIM_Base_SetConfig+0x124>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <TIM_Base_SetConfig+0x114>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d02b      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d027      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <TIM_Base_SetConfig+0x118>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d023      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2b      	ldr	r2, [pc, #172]	; (80023b4 <TIM_Base_SetConfig+0x11c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <TIM_Base_SetConfig+0x120>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01b      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a29      	ldr	r2, [pc, #164]	; (80023bc <TIM_Base_SetConfig+0x124>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d017      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <TIM_Base_SetConfig+0x128>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <TIM_Base_SetConfig+0x12c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00f      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <TIM_Base_SetConfig+0x130>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a25      	ldr	r2, [pc, #148]	; (80023cc <TIM_Base_SetConfig+0x134>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a24      	ldr	r2, [pc, #144]	; (80023d0 <TIM_Base_SetConfig+0x138>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <TIM_Base_SetConfig+0x13c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <TIM_Base_SetConfig+0x114>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0xf8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <TIM_Base_SetConfig+0x124>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	615a      	str	r2, [r3, #20]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40010400 	.word	0x40010400
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800
 80023cc:	40001800 	.word	0x40001800
 80023d0:	40001c00 	.word	0x40001c00
 80023d4:	40002000 	.word	0x40002000

080023d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f103 0208 	add.w	r2, r3, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0208 	add.w	r2, r3, #8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 0208 	add.w	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d103      	bne.n	80024c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e00c      	b.n	80024dc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3308      	adds	r3, #8
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e002      	b.n	80024d0 <vListInsert+0x2e>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d2f6      	bcs.n	80024ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6892      	ldr	r2, [r2, #8]
 800252a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6852      	ldr	r2, [r2, #4]
 8002534:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d103      	bne.n	8002548 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <xQueueGenericReset+0x2a>
        __asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	60bb      	str	r3, [r7, #8]
    }
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002592:	f002 fb1f 	bl	8004bd4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	441a      	add	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	3b01      	subs	r3, #1
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	441a      	add	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	22ff      	movs	r2, #255	; 0xff
 80025d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	22ff      	movs	r2, #255	; 0xff
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d114      	bne.n	8002612 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01a      	beq.n	8002626 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3310      	adds	r3, #16
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fa01 	bl	80039fc <xTaskRemoveFromEventList>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <xQueueGenericReset+0xcc>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	e009      	b.n	8002626 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3310      	adds	r3, #16
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fef2 	bl	8002400 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3324      	adds	r3, #36	; 0x24
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff feed 	bl	8002400 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002626:	f002 fb05 	bl	8004c34 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	e000ed04 	.word	0xe000ed04

08002638 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xQueueGenericCreate+0x2a>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	61bb      	str	r3, [r7, #24]
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <xQueueGenericCreate+0x48>
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d101      	bne.n	8002684 <xQueueGenericCreate+0x4c>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <xQueueGenericCreate+0x4e>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <xQueueGenericCreate+0x68>
        __asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	617b      	str	r3, [r7, #20]
    }
 800269c:	bf00      	nop
 800269e:	e7fe      	b.n	800269e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026a6:	d90a      	bls.n	80026be <xQueueGenericCreate+0x86>
        __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	613b      	str	r3, [r7, #16]
    }
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3350      	adds	r3, #80	; 0x50
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fbb2 	bl	8004e2c <pvPortMalloc>
 80026c8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3350      	adds	r3, #80	; 0x50
 80026d8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026da:	79fa      	ldrb	r2, [r7, #7]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f805 	bl	80026f6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026ec:	6a3b      	ldr	r3, [r7, #32]
    }
 80026ee:	4618      	mov	r0, r3
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e002      	b.n	8002718 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002724:	2101      	movs	r1, #1
 8002726:	69b8      	ldr	r0, [r7, #24]
 8002728:	f7ff ff1e 	bl	8002568 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	2073      	movs	r0, #115	; 0x73
 800273c:	f003 fffc 	bl	8006738 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b090      	sub	sp, #64	; 0x40
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002756:	2300      	movs	r3, #0
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <xQueueGenericSend+0x32>
        __asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002776:	bf00      	nop
 8002778:	e7fe      	b.n	8002778 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <xQueueGenericSend+0x40>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <xQueueGenericSend+0x44>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <xQueueGenericSend+0x46>
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <xQueueGenericSend+0x60>
        __asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027a4:	bf00      	nop
 80027a6:	e7fe      	b.n	80027a6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d103      	bne.n	80027b6 <xQueueGenericSend+0x6e>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <xQueueGenericSend+0x72>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <xQueueGenericSend+0x74>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueGenericSend+0x8e>
        __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	623b      	str	r3, [r7, #32]
    }
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027d6:	f001 fab1 	bl	8003d3c <xTaskGetSchedulerState>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <xQueueGenericSend+0x9e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <xQueueGenericSend+0xa2>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <xQueueGenericSend+0xa4>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericSend+0xbe>
        __asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	61fb      	str	r3, [r7, #28]
    }
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002806:	f002 f9e5 	bl	8004bd4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <xQueueGenericSend+0xd4>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d136      	bne.n	800288a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	4618      	mov	r0, r3
 8002820:	f004 fd16 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	460b      	mov	r3, r1
 800282e:	4601      	mov	r1, r0
 8002830:	205a      	movs	r0, #90	; 0x5a
 8002832:	f003 fff7 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283c:	f000 fa78 	bl	8002d30 <prvCopyDataToQueue>
 8002840:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	3324      	adds	r3, #36	; 0x24
 800284e:	4618      	mov	r0, r3
 8002850:	f001 f8d4 	bl	80039fc <xTaskRemoveFromEventList>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d013      	beq.n	8002882 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800285a:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <xQueueGenericSend+0x248>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	e00a      	b.n	8002882 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <xQueueGenericSend+0x248>)
 8002874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002882:	f002 f9d7 	bl	8004c34 <vPortExitCritical>
                return pdPASS;
 8002886:	2301      	movs	r3, #1
 8002888:	e07d      	b.n	8002986 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d110      	bne.n	80028b2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002890:	f002 f9d0 	bl	8004c34 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fcda 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	4601      	mov	r1, r0
 80028a8:	205a      	movs	r0, #90	; 0x5a
 80028aa:	f003 ffbb 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e069      	b.n	8002986 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 f903 	bl	8003ac8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028c6:	f002 f9b5 	bl	8004c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028ca:	f000 fe4f 	bl	800356c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028ce:	f002 f981 	bl	8004bd4 <vPortEnterCritical>
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d103      	bne.n	80028e8 <xQueueGenericSend+0x1a0>
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d103      	bne.n	80028fe <xQueueGenericSend+0x1b6>
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028fe:	f002 f999 	bl	8004c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002902:	1d3a      	adds	r2, r7, #4
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f001 f8f2 	bl	8003af4 <xTaskCheckForTimeOut>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d124      	bne.n	8002960 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002918:	f000 fb02 	bl	8002f20 <prvIsQueueFull>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	3310      	adds	r3, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f001 f814 	bl	8003958 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002932:	f000 fa8d 	bl	8002e50 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002936:	f000 fe27 	bl	8003588 <xTaskResumeAll>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f af62 	bne.w	8002806 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <xQueueGenericSend+0x248>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	e758      	b.n	8002806 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002956:	f000 fa7b 	bl	8002e50 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800295a:	f000 fe15 	bl	8003588 <xTaskResumeAll>
 800295e:	e752      	b.n	8002806 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002962:	f000 fa75 	bl	8002e50 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002966:	f000 fe0f 	bl	8003588 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	4618      	mov	r0, r3
 800296e:	f004 fc6f 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	460b      	mov	r3, r1
 800297c:	4601      	mov	r1, r0
 800297e:	205a      	movs	r0, #90	; 0x5a
 8002980:	f003 ff50 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002984:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002986:	4618      	mov	r0, r3
 8002988:	3738      	adds	r7, #56	; 0x38
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000ed04 	.word	0xe000ed04

08002994 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b090      	sub	sp, #64	; 0x40
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <xQueueGenericSendFromISR+0x3c>
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <xQueueGenericSendFromISR+0x40>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <xQueueGenericSendFromISR+0x42>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d103      	bne.n	80029fe <xQueueGenericSendFromISR+0x6a>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <xQueueGenericSendFromISR+0x6e>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <xQueueGenericSendFromISR+0x70>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	623b      	str	r3, [r7, #32]
    }
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a1e:	f002 f9c5 	bl	8004dac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a22:	f3ef 8211 	mrs	r2, BASEPRI
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	61fa      	str	r2, [r7, #28]
 8002a38:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <xQueueGenericSendFromISR+0xbc>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d148      	bne.n	8002ae2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fbf4 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002a68:	4601      	mov	r1, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2060      	movs	r0, #96	; 0x60
 8002a70:	f003 fe08 	bl	8006684 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a7a:	f000 f959 	bl	8002d30 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d112      	bne.n	8002aae <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d025      	beq.n	8002adc <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	3324      	adds	r3, #36	; 0x24
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 ffb1 	bl	80039fc <xTaskRemoveFromEventList>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01d      	beq.n	8002adc <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01a      	beq.n	8002adc <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e016      	b.n	8002adc <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002aae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab4:	d10a      	bne.n	8002acc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	617b      	str	r3, [r7, #20]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	b25a      	sxtb	r2, r3
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002adc:	2301      	movs	r3, #1
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ae0:	e00b      	b.n	8002afa <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 fbb3 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002aea:	4601      	mov	r1, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	2060      	movs	r0, #96	; 0x60
 8002af2:	f003 fdc7 	bl	8006684 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b04:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3740      	adds	r7, #64	; 0x40
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b08f      	sub	sp, #60	; 0x3c
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <xQueueReceive+0x30>
        __asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	623b      	str	r3, [r7, #32]
    }
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <xQueueReceive+0x3e>
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xQueueReceive+0x42>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <xQueueReceive+0x44>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueReceive+0x5e>
        __asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61fb      	str	r3, [r7, #28]
    }
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b6e:	f001 f8e5 	bl	8003d3c <xTaskGetSchedulerState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <xQueueReceive+0x6e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <xQueueReceive+0x72>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueReceive+0x74>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueReceive+0x8e>
        __asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61bb      	str	r3, [r7, #24]
    }
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b9e:	f002 f819 	bl	8004bd4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02f      	beq.n	8002c0e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb2:	f000 f927 	bl	8002e04 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fb49 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f004 fb45 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	9100      	str	r1, [sp, #0]
 8002bce:	4621      	mov	r1, r4
 8002bd0:	205c      	movs	r0, #92	; 0x5c
 8002bd2:	f003 fe27 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00f      	beq.n	8002c06 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	3310      	adds	r3, #16
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 ff06 	bl	80039fc <xTaskRemoveFromEventList>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <xQueueReceive+0x21c>)
 8002bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c06:	f002 f815 	bl	8004c34 <vPortExitCritical>
                return pdPASS;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e08a      	b.n	8002d24 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d113      	bne.n	8002c3c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c14:	f002 f80e 	bl	8004c34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 fb18 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002c20:	4604      	mov	r4, r0
 8002c22:	2000      	movs	r0, #0
 8002c24:	f004 fb14 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	9100      	str	r1, [sp, #0]
 8002c30:	4621      	mov	r1, r4
 8002c32:	205c      	movs	r0, #92	; 0x5c
 8002c34:	f003 fdf6 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e073      	b.n	8002d24 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 ff3e 	bl	8003ac8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c50:	f001 fff0 	bl	8004c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c54:	f000 fc8a 	bl	800356c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c58:	f001 ffbc 	bl	8004bd4 <vPortEnterCritical>
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d103      	bne.n	8002c72 <xQueueReceive+0x162>
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d103      	bne.n	8002c88 <xQueueReceive+0x178>
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c88:	f001 ffd4 	bl	8004c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c8c:	1d3a      	adds	r2, r7, #4
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 ff2d 	bl	8003af4 <xTaskCheckForTimeOut>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d124      	bne.n	8002cea <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca2:	f000 f927 	bl	8002ef4 <prvIsQueueEmpty>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d018      	beq.n	8002cde <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fe4f 	bl	8003958 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cbc:	f000 f8c8 	bl	8002e50 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cc0:	f000 fc62 	bl	8003588 <xTaskResumeAll>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f47f af69 	bne.w	8002b9e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <xQueueReceive+0x21c>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	e75f      	b.n	8002b9e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce0:	f000 f8b6 	bl	8002e50 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ce4:	f000 fc50 	bl	8003588 <xTaskResumeAll>
 8002ce8:	e759      	b.n	8002b9e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cec:	f000 f8b0 	bl	8002e50 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cf0:	f000 fc4a 	bl	8003588 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf6:	f000 f8fd 	bl	8002ef4 <prvIsQueueEmpty>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f43f af4e 	beq.w	8002b9e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 faa3 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f004 fa9f 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2101      	movs	r1, #1
 8002d18:	9100      	str	r1, [sp, #0]
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	205c      	movs	r0, #92	; 0x5c
 8002d1e:	f003 fd81 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3734      	adds	r7, #52	; 0x34
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d14d      	bne.n	8002df2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f80c 	bl	8003d78 <xTaskPriorityDisinherit>
 8002d60:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e043      	b.n	8002df2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d119      	bne.n	8002da4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6858      	ldr	r0, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	f004 fbf6 	bl	800756c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	441a      	add	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d32b      	bcc.n	8002df2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	e026      	b.n	8002df2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68d8      	ldr	r0, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	461a      	mov	r2, r3
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	f004 fbdc 	bl	800756c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	425b      	negs	r3, r3
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d207      	bcs.n	8002de0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	425b      	negs	r3, r3
 8002dda:	441a      	add	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d105      	bne.n	8002df2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002dfa:	697b      	ldr	r3, [r7, #20]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d018      	beq.n	8002e48 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	441a      	add	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d303      	bcc.n	8002e38 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68d9      	ldr	r1, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	461a      	mov	r2, r3
 8002e42:	6838      	ldr	r0, [r7, #0]
 8002e44:	f004 fb92 	bl	800756c <memcpy>
    }
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e58:	f001 febc 	bl	8004bd4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e62:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e64:	e011      	b.n	8002e8a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d012      	beq.n	8002e94 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3324      	adds	r3, #36	; 0x24
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fdc2 	bl	80039fc <xTaskRemoveFromEventList>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e7e:	f000 fe9f 	bl	8003bc0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dce9      	bgt.n	8002e66 <prvUnlockQueue+0x16>
 8002e92:	e000      	b.n	8002e96 <prvUnlockQueue+0x46>
                        break;
 8002e94:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	22ff      	movs	r2, #255	; 0xff
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e9e:	f001 fec9 	bl	8004c34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ea2:	f001 fe97 	bl	8004bd4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eae:	e011      	b.n	8002ed4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3310      	adds	r3, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fd9d 	bl	80039fc <xTaskRemoveFromEventList>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ec8:	f000 fe7a 	bl	8003bc0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ecc:	7bbb      	ldrb	r3, [r7, #14]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	dce9      	bgt.n	8002eb0 <prvUnlockQueue+0x60>
 8002edc:	e000      	b.n	8002ee0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ede:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	22ff      	movs	r2, #255	; 0xff
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ee8:	f001 fea4 	bl	8004c34 <vPortExitCritical>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002efc:	f001 fe6a 	bl	8004bd4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e001      	b.n	8002f12 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f12:	f001 fe8f 	bl	8004c34 <vPortExitCritical>

    return xReturn;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f28:	f001 fe54 	bl	8004bd4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d102      	bne.n	8002f3e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e001      	b.n	8002f42 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f42:	f001 fe77 	bl	8004c34 <vPortExitCritical>

    return xReturn;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e01e      	b.n	8002f9e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <vQueueAddToRegistry+0x60>)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d115      	bne.n	8002f98 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f6c:	4910      	ldr	r1, [pc, #64]	; (8002fb0 <vQueueAddToRegistry+0x60>)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f76:	4a0e      	ldr	r2, [pc, #56]	; (8002fb0 <vQueueAddToRegistry+0x60>)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 f963 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2071      	movs	r0, #113	; 0x71
 8002f92:	f003 fb77 	bl	8006684 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f96:	e006      	b.n	8002fa6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b07      	cmp	r3, #7
 8002fa2:	d9dd      	bls.n	8002f60 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200143c4 	.word	0x200143c4

08002fb4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fc4:	f001 fe06 	bl	8004bd4 <vPortEnterCritical>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d103      	bne.n	8002fde <vQueueWaitForMessageRestricted+0x2a>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe4:	b25b      	sxtb	r3, r3
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d103      	bne.n	8002ff4 <vQueueWaitForMessageRestricted+0x40>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff4:	f001 fe1e 	bl	8004c34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fcc9 	bl	80039a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff1e 	bl	8002e50 <prvUnlockQueue>
    }
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fefb 	bl	8004e2c <pvPortMalloc>
 8003036:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800303e:	2058      	movs	r0, #88	; 0x58
 8003040:	f001 fef4 	bl	8004e2c <pvPortMalloc>
 8003044:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
 8003052:	e005      	b.n	8003060 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003054:	6978      	ldr	r0, [r7, #20]
 8003056:	f001 ffc9 	bl	8004fec <vPortFree>
 800305a:	e001      	b.n	8003060 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d013      	beq.n	800308e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	2300      	movs	r3, #0
 800306a:	9303      	str	r3, [sp, #12]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f80e 	bl	800309e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003082:	69f8      	ldr	r0, [r7, #28]
 8003084:	f000 f8a2 	bl	80031cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003088:	2301      	movs	r3, #1
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e002      	b.n	8003094 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003094:	69bb      	ldr	r3, [r7, #24]
    }
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b088      	sub	sp, #32
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	461a      	mov	r2, r3
 80030b6:	21a5      	movs	r1, #165	; 0xa5
 80030b8:	f004 fa66 	bl	8007588 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030c6:	3b01      	subs	r3, #1
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f023 0307 	bic.w	r3, r3, #7
 80030d4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	617b      	str	r3, [r7, #20]
    }
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01f      	beq.n	800313c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e012      	b.n	8003128 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	7819      	ldrb	r1, [r3, #0]
 800310a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	3334      	adds	r3, #52	; 0x34
 8003112:	460a      	mov	r2, r1
 8003114:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b09      	cmp	r3, #9
 800312c:	d9e9      	bls.n	8003102 <prvInitialiseNewTask+0x64>
 800312e:	e000      	b.n	8003132 <prvInitialiseNewTask+0x94>
            {
                break;
 8003130:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800313a:	e003      	b.n	8003144 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	2b04      	cmp	r3, #4
 8003148:	d901      	bls.n	800314e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800314a:	2304      	movs	r3, #4
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003158:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	3304      	adds	r3, #4
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff f96b 	bl	8002440 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	3318      	adds	r3, #24
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f966 	bl	8002440 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003178:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	f1c3 0205 	rsb	r2, r3, #5
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	3350      	adds	r3, #80	; 0x50
 800318e:	2204      	movs	r2, #4
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f004 f9f8 	bl	8007588 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	3354      	adds	r3, #84	; 0x54
 800319c:	2201      	movs	r2, #1
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f004 f9f1 	bl	8007588 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	69b8      	ldr	r0, [r7, #24]
 80031ac:	f001 fb68 	bl	8004880 <pxPortInitialiseStack>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031c2:	bf00      	nop
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031d4:	f001 fcfe 	bl	8004bd4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031d8:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <prvAddNewTaskToReadyList+0xfc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a3a      	ldr	r2, [pc, #232]	; (80032c8 <prvAddNewTaskToReadyList+0xfc>)
 80031e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <prvAddNewTaskToReadyList+0x100>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031ea:	4a38      	ldr	r2, [pc, #224]	; (80032cc <prvAddNewTaskToReadyList+0x100>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031f0:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <prvAddNewTaskToReadyList+0xfc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d110      	bne.n	800321a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031f8:	f000 fd06 	bl	8003c08 <prvInitialiseTaskLists>
 80031fc:	e00d      	b.n	800321a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <prvAddNewTaskToReadyList+0x104>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <prvAddNewTaskToReadyList+0x100>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	429a      	cmp	r2, r3
 8003212:	d802      	bhi.n	800321a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <prvAddNewTaskToReadyList+0x100>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800321a:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <prvAddNewTaskToReadyList+0x108>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <prvAddNewTaskToReadyList+0x108>)
 8003222:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <prvAddNewTaskToReadyList+0x108>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <prvAddNewTaskToReadyList+0x94>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fee5 	bl	8007004 <SEGGER_SYSVIEW_OnTaskCreate>
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	461d      	mov	r5, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461c      	mov	r4, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	1ae3      	subs	r3, r4, r3
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	462b      	mov	r3, r5
 800325c:	f002 f88c 	bl	8005378 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 ff52 	bl	800710c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <prvAddNewTaskToReadyList+0x10c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4313      	orrs	r3, r2
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <prvAddNewTaskToReadyList+0x10c>)
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <prvAddNewTaskToReadyList+0x110>)
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f7ff f8e2 	bl	800245a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003296:	f001 fccd 	bl	8004c34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <prvAddNewTaskToReadyList+0x104>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <prvAddNewTaskToReadyList+0x100>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d207      	bcs.n	80032c0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <prvAddNewTaskToReadyList+0x114>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bdb0      	pop	{r4, r5, r7, pc}
 80032c8:	2000010c 	.word	0x2000010c
 80032cc:	20000034 	.word	0x20000034
 80032d0:	20000118 	.word	0x20000118
 80032d4:	20000128 	.word	0x20000128
 80032d8:	20000114 	.word	0x20000114
 80032dc:	20000038 	.word	0x20000038
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80032ec:	f001 fc72 	bl	8004bd4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <vTaskDelete+0x18>
 80032f6:	4b46      	ldr	r3, [pc, #280]	; (8003410 <vTaskDelete+0x12c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e000      	b.n	80032fe <vTaskDelete+0x1a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3304      	adds	r3, #4
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f905 	bl	8002514 <uxListRemove>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d115      	bne.n	800333c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	493f      	ldr	r1, [pc, #252]	; (8003414 <vTaskDelete+0x130>)
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <vTaskDelete+0x58>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	2201      	movs	r2, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43da      	mvns	r2, r3
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <vTaskDelete+0x134>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4013      	ands	r3, r2
 8003338:	4a37      	ldr	r2, [pc, #220]	; (8003418 <vTaskDelete+0x134>)
 800333a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3318      	adds	r3, #24
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f8e3 	bl	8002514 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <vTaskDelete+0x138>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <vTaskDelete+0x138>)
 8003356:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <vTaskDelete+0x12c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	429a      	cmp	r2, r3
 8003360:	d118      	bne.n	8003394 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	482d      	ldr	r0, [pc, #180]	; (8003420 <vTaskDelete+0x13c>)
 800336a:	f7ff f876 	bl	800245a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <vTaskDelete+0x140>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <vTaskDelete+0x140>)
 8003376:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 ff68 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 8003380:	4603      	mov	r3, r0
 8003382:	4619      	mov	r1, r3
 8003384:	2022      	movs	r0, #34	; 0x22
 8003386:	f003 f941 	bl	800660c <SEGGER_SYSVIEW_RecordU32>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4618      	mov	r0, r3
 800338e:	f002 f85b 	bl	8005448 <SYSVIEW_DeleteTask>
 8003392:	e016      	b.n	80033c2 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <vTaskDelete+0x144>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3b01      	subs	r3, #1
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <vTaskDelete+0x144>)
 800339c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f003 ff55 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4619      	mov	r1, r3
 80033aa:	2022      	movs	r0, #34	; 0x22
 80033ac:	f003 f92e 	bl	800660c <SEGGER_SYSVIEW_RecordU32>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f002 f848 	bl	8005448 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fc93 	bl	8003ce4 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80033be:	f000 fca1 	bl	8003d04 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80033c2:	f001 fc37 	bl	8004c34 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <vTaskDelete+0x148>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01b      	beq.n	8003406 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <vTaskDelete+0x12c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d116      	bne.n	8003406 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80033d8:	4b15      	ldr	r3, [pc, #84]	; (8003430 <vTaskDelete+0x14c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <vTaskDelete+0x112>
        __asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	60bb      	str	r3, [r7, #8]
    }
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <vTaskDelete+0x150>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000034 	.word	0x20000034
 8003414:	20000038 	.word	0x20000038
 8003418:	20000114 	.word	0x20000114
 800341c:	20000128 	.word	0x20000128
 8003420:	200000e0 	.word	0x200000e0
 8003424:	200000f4 	.word	0x200000f4
 8003428:	2000010c 	.word	0x2000010c
 800342c:	20000118 	.word	0x20000118
 8003430:	20000134 	.word	0x20000134
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01b      	beq.n	8003482 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <vTaskDelay+0x68>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <vTaskDelay+0x30>
        __asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60bb      	str	r3, [r7, #8]
    }
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003468:	f000 f880 	bl	800356c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	2023      	movs	r0, #35	; 0x23
 8003470:	f003 f8cc 	bl	800660c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003474:	2100      	movs	r1, #0
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fe78 	bl	800416c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800347c:	f000 f884 	bl	8003588 <xTaskResumeAll>
 8003480:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <vTaskDelay+0x6c>)
 800348a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000134 	.word	0x20000134
 80034a4:	e000ed04 	.word	0xe000ed04

080034a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <vTaskStartScheduler+0xa4>)
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	2300      	movs	r3, #0
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	2282      	movs	r2, #130	; 0x82
 80034ba:	4925      	ldr	r1, [pc, #148]	; (8003550 <vTaskStartScheduler+0xa8>)
 80034bc:	4825      	ldr	r0, [pc, #148]	; (8003554 <vTaskStartScheduler+0xac>)
 80034be:	f7ff fdad 	bl	800301c <xTaskCreate>
 80034c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80034ca:	f000 fec7 	bl	800425c <xTimerCreateTimerTask>
 80034ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d124      	bne.n	8003520 <vTaskStartScheduler+0x78>
        __asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	60bb      	str	r3, [r7, #8]
    }
 80034e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <vTaskStartScheduler+0xb0>)
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <vTaskStartScheduler+0xb4>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <vTaskStartScheduler+0xb8>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <vTaskStartScheduler+0xbc>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <vTaskStartScheduler+0xa4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d102      	bne.n	8003510 <vTaskStartScheduler+0x68>
 800350a:	f003 fd5f 	bl	8006fcc <SEGGER_SYSVIEW_OnIdle>
 800350e:	e004      	b.n	800351a <vTaskStartScheduler+0x72>
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <vTaskStartScheduler+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f003 fdb7 	bl	8007088 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800351a:	f001 fa3b 	bl	8004994 <xPortStartScheduler>
 800351e:	e00e      	b.n	800353e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d10a      	bne.n	800353e <vTaskStartScheduler+0x96>
        __asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	607b      	str	r3, [r7, #4]
    }
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <vTaskStartScheduler+0xc0>)
 8003540:	681b      	ldr	r3, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000130 	.word	0x20000130
 8003550:	08007630 	.word	0x08007630
 8003554:	08003bd9 	.word	0x08003bd9
 8003558:	2000012c 	.word	0x2000012c
 800355c:	20000118 	.word	0x20000118
 8003560:	20000110 	.word	0x20000110
 8003564:	20000034 	.word	0x20000034
 8003568:	2000000c 	.word	0x2000000c

0800356c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <vTaskSuspendAll+0x18>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <vTaskSuspendAll+0x18>)
 8003578:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20000134 	.word	0x20000134

08003588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003596:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <xTaskResumeAll+0x11c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	603b      	str	r3, [r7, #0]
    }
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035b4:	f001 fb0e 	bl	8004bd4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <xTaskResumeAll+0x11c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <xTaskResumeAll+0x11c>)
 80035c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <xTaskResumeAll+0x11c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d165      	bne.n	8003696 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <xTaskResumeAll+0x120>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d061      	beq.n	8003696 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d2:	e032      	b.n	800363a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <xTaskResumeAll+0x124>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3318      	adds	r3, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe ff97 	bl	8002514 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe ff92 	bl	8002514 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fd8a 	bl	800710c <SEGGER_SYSVIEW_OnTaskStartReady>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <xTaskResumeAll+0x128>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <xTaskResumeAll+0x128>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <xTaskResumeAll+0x12c>)
 8003618:	441a      	add	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7fe ff1a 	bl	800245a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <xTaskResumeAll+0x130>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <xTaskResumeAll+0x134>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800363a:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <xTaskResumeAll+0x124>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1c8      	bne.n	80035d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003648:	f000 fb5c 	bl	8003d04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800364c:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <xTaskResumeAll+0x138>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003658:	f000 f858 	bl	800370c <xTaskIncrementTick>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <xTaskResumeAll+0x134>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f1      	bne.n	8003658 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <xTaskResumeAll+0x138>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <xTaskResumeAll+0x134>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <xTaskResumeAll+0x13c>)
 8003688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003696:	f001 facd 	bl	8004c34 <vPortExitCritical>

    return xAlreadyYielded;
 800369a:	68bb      	ldr	r3, [r7, #8]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000134 	.word	0x20000134
 80036a8:	2000010c 	.word	0x2000010c
 80036ac:	200000cc 	.word	0x200000cc
 80036b0:	20000114 	.word	0x20000114
 80036b4:	20000038 	.word	0x20000038
 80036b8:	20000034 	.word	0x20000034
 80036bc:	20000120 	.word	0x20000120
 80036c0:	2000011c 	.word	0x2000011c
 80036c4:	e000ed04 	.word	0xe000ed04

080036c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <xTaskGetTickCount+0x1c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036d4:	687b      	ldr	r3, [r7, #4]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000110 	.word	0x20000110

080036e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ee:	f001 fb5d 	bl	8004dac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <xTaskGetTickCountFromISR+0x20>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036fc:	683b      	ldr	r3, [r7, #0]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000110 	.word	0x20000110

0800370c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003716:	4b50      	ldr	r3, [pc, #320]	; (8003858 <xTaskIncrementTick+0x14c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8092 	bne.w	8003844 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003720:	4b4e      	ldr	r3, [pc, #312]	; (800385c <xTaskIncrementTick+0x150>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003728:	4a4c      	ldr	r2, [pc, #304]	; (800385c <xTaskIncrementTick+0x150>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d120      	bne.n	8003776 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <xTaskIncrementTick+0x154>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <xTaskIncrementTick+0x48>
        __asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	603b      	str	r3, [r7, #0]
    }
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <xTaskIncrementTick+0x46>
 8003754:	4b42      	ldr	r3, [pc, #264]	; (8003860 <xTaskIncrementTick+0x154>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	4b42      	ldr	r3, [pc, #264]	; (8003864 <xTaskIncrementTick+0x158>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <xTaskIncrementTick+0x154>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4a40      	ldr	r2, [pc, #256]	; (8003864 <xTaskIncrementTick+0x158>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <xTaskIncrementTick+0x15c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	4a3e      	ldr	r2, [pc, #248]	; (8003868 <xTaskIncrementTick+0x15c>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	f000 fac7 	bl	8003d04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <xTaskIncrementTick+0x160>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d34c      	bcc.n	800381a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003780:	4b37      	ldr	r3, [pc, #220]	; (8003860 <xTaskIncrementTick+0x154>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <xTaskIncrementTick+0x160>)
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	601a      	str	r2, [r3, #0]
                    break;
 8003792:	e042      	b.n	800381a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <xTaskIncrementTick+0x154>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d203      	bcs.n	80037b4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037ac:	4a2f      	ldr	r2, [pc, #188]	; (800386c <xTaskIncrementTick+0x160>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037b2:	e032      	b.n	800381a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe feab 	bl	8002514 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3318      	adds	r3, #24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fea2 	bl	8002514 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fc9a 	bl	800710c <SEGGER_SYSVIEW_OnTaskStartReady>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	409a      	lsls	r2, r3
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <xTaskIncrementTick+0x164>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	4a22      	ldr	r2, [pc, #136]	; (8003870 <xTaskIncrementTick+0x164>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <xTaskIncrementTick+0x168>)
 80037f8:	441a      	add	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f7fe fe2a 	bl	800245a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <xTaskIncrementTick+0x16c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d3b5      	bcc.n	8003780 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003818:	e7b2      	b.n	8003780 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <xTaskIncrementTick+0x16c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4914      	ldr	r1, [pc, #80]	; (8003874 <xTaskIncrementTick+0x168>)
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d901      	bls.n	8003836 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <xTaskIncrementTick+0x170>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800383e:	2301      	movs	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e004      	b.n	800384e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <xTaskIncrementTick+0x174>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <xTaskIncrementTick+0x174>)
 800384c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000134 	.word	0x20000134
 800385c:	20000110 	.word	0x20000110
 8003860:	200000c4 	.word	0x200000c4
 8003864:	200000c8 	.word	0x200000c8
 8003868:	20000124 	.word	0x20000124
 800386c:	2000012c 	.word	0x2000012c
 8003870:	20000114 	.word	0x20000114
 8003874:	20000038 	.word	0x20000038
 8003878:	20000034 	.word	0x20000034
 800387c:	20000120 	.word	0x20000120
 8003880:	2000011c 	.word	0x2000011c

08003884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <vTaskSwitchContext+0xbc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <vTaskSwitchContext+0xc0>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003898:	e04d      	b.n	8003936 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <vTaskSwitchContext+0xc0>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <vTaskSwitchContext+0xc4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	fab3 f383 	clz	r3, r3
 80038ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	f1c3 031f 	rsb	r3, r3, #31
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <vTaskSwitchContext+0xc8>)
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	607b      	str	r3, [r7, #4]
    }
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <vTaskSwitchContext+0x5a>
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <vTaskSwitchContext+0xc8>)
 80038ec:	4413      	add	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3308      	adds	r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d104      	bne.n	8003910 <vTaskSwitchContext+0x8c>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <vTaskSwitchContext+0xcc>)
 8003918:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <vTaskSwitchContext+0xcc>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <vTaskSwitchContext+0xd0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d102      	bne.n	800392c <vTaskSwitchContext+0xa8>
 8003926:	f003 fb51 	bl	8006fcc <SEGGER_SYSVIEW_OnIdle>
}
 800392a:	e004      	b.n	8003936 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <vTaskSwitchContext+0xcc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f003 fba9 	bl	8007088 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000134 	.word	0x20000134
 8003944:	20000120 	.word	0x20000120
 8003948:	20000114 	.word	0x20000114
 800394c:	20000038 	.word	0x20000038
 8003950:	20000034 	.word	0x20000034
 8003954:	20000130 	.word	0x20000130

08003958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60fb      	str	r3, [r7, #12]
    }
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <vTaskPlaceOnEventList+0x44>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3318      	adds	r3, #24
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fe fd8b 	bl	80024a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800398c:	2101      	movs	r1, #1
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	f000 fbec 	bl	800416c <prvAddCurrentTaskToDelayedList>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000034 	.word	0x20000034

080039a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	617b      	str	r3, [r7, #20]
    }
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <vTaskPlaceOnEventListRestricted+0x58>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3318      	adds	r3, #24
 80039ce:	4619      	mov	r1, r3
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7fe fd42 	bl	800245a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
 80039e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039e2:	2024      	movs	r0, #36	; 0x24
 80039e4:	f002 fdf4 	bl	80065d0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68b8      	ldr	r0, [r7, #8]
 80039ec:	f000 fbbe 	bl	800416c <prvAddCurrentTaskToDelayedList>
    }
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000034 	.word	0x20000034

080039fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60fb      	str	r3, [r7, #12]
    }
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fd71 	bl	8002514 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <xTaskRemoveFromEventList+0xb4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d120      	bne.n	8003a7c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fd68 	bl	8002514 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fb60 	bl	800710c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	2201      	movs	r2, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <xTaskRemoveFromEventList+0xb8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <xTaskRemoveFromEventList+0xb8>)
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <xTaskRemoveFromEventList+0xbc>)
 8003a6c:	441a      	add	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7fe fcf0 	bl	800245a <vListInsertEnd>
 8003a7a:	e005      	b.n	8003a88 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	3318      	adds	r3, #24
 8003a80:	4619      	mov	r1, r3
 8003a82:	480e      	ldr	r0, [pc, #56]	; (8003abc <xTaskRemoveFromEventList+0xc0>)
 8003a84:	f7fe fce9 	bl	800245a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <xTaskRemoveFromEventList+0xc4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d905      	bls.n	8003aa2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <xTaskRemoveFromEventList+0xc8>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e001      	b.n	8003aa6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003aa6:	697b      	ldr	r3, [r7, #20]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000134 	.word	0x20000134
 8003ab4:	20000114 	.word	0x20000114
 8003ab8:	20000038 	.word	0x20000038
 8003abc:	200000cc 	.word	0x200000cc
 8003ac0:	20000034 	.word	0x20000034
 8003ac4:	20000120 	.word	0x20000120

08003ac8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <vTaskInternalSetTimeOutState+0x24>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <vTaskInternalSetTimeOutState+0x28>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000124 	.word	0x20000124
 8003af0:	20000110 	.word	0x20000110

08003af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
    }
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	60fb      	str	r3, [r7, #12]
    }
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b36:	f001 f84d 	bl	8004bd4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <xTaskCheckForTimeOut+0xc4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d102      	bne.n	8003b5a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	e026      	b.n	8003ba8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <xTaskCheckForTimeOut+0xc8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d00a      	beq.n	8003b7c <xTaskCheckForTimeOut+0x88>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d305      	bcc.n	8003b7c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e015      	b.n	8003ba8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d20b      	bcs.n	8003b9e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1ad2      	subs	r2, r2, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff98 	bl	8003ac8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e004      	b.n	8003ba8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ba8:	f001 f844 	bl	8004c34 <vPortExitCritical>

    return xReturn;
 8003bac:	69fb      	ldr	r3, [r7, #28]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000110 	.word	0x20000110
 8003bbc:	20000124 	.word	0x20000124

08003bc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <vTaskMissedYield+0x14>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	20000120 	.word	0x20000120

08003bd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003be0:	f000 f852 	bl	8003c88 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <prvIdleTask+0x28>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d9f9      	bls.n	8003be0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <prvIdleTask+0x2c>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bfc:	e7f0      	b.n	8003be0 <prvIdleTask+0x8>
 8003bfe:	bf00      	nop
 8003c00:	20000038 	.word	0x20000038
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	e00c      	b.n	8003c2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <prvInitialiseTaskLists+0x60>)
 8003c20:	4413      	add	r3, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fbec 	bl	8002400 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d9ef      	bls.n	8003c14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c34:	480d      	ldr	r0, [pc, #52]	; (8003c6c <prvInitialiseTaskLists+0x64>)
 8003c36:	f7fe fbe3 	bl	8002400 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c3a:	480d      	ldr	r0, [pc, #52]	; (8003c70 <prvInitialiseTaskLists+0x68>)
 8003c3c:	f7fe fbe0 	bl	8002400 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c40:	480c      	ldr	r0, [pc, #48]	; (8003c74 <prvInitialiseTaskLists+0x6c>)
 8003c42:	f7fe fbdd 	bl	8002400 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c46:	480c      	ldr	r0, [pc, #48]	; (8003c78 <prvInitialiseTaskLists+0x70>)
 8003c48:	f7fe fbda 	bl	8002400 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c4c:	480b      	ldr	r0, [pc, #44]	; (8003c7c <prvInitialiseTaskLists+0x74>)
 8003c4e:	f7fe fbd7 	bl	8002400 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvInitialiseTaskLists+0x78>)
 8003c54:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <prvInitialiseTaskLists+0x64>)
 8003c56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <prvInitialiseTaskLists+0x7c>)
 8003c5a:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <prvInitialiseTaskLists+0x68>)
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000038 	.word	0x20000038
 8003c6c:	2000009c 	.word	0x2000009c
 8003c70:	200000b0 	.word	0x200000b0
 8003c74:	200000cc 	.word	0x200000cc
 8003c78:	200000e0 	.word	0x200000e0
 8003c7c:	200000f8 	.word	0x200000f8
 8003c80:	200000c4 	.word	0x200000c4
 8003c84:	200000c8 	.word	0x200000c8

08003c88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c8e:	e019      	b.n	8003cc4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c90:	f000 ffa0 	bl	8004bd4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <prvCheckTasksWaitingTermination+0x50>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fc37 	bl	8002514 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <prvCheckTasksWaitingTermination+0x54>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <prvCheckTasksWaitingTermination+0x54>)
 8003cae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <prvCheckTasksWaitingTermination+0x58>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <prvCheckTasksWaitingTermination+0x58>)
 8003cb8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003cba:	f000 ffbb 	bl	8004c34 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f810 	bl	8003ce4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <prvCheckTasksWaitingTermination+0x58>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e1      	bne.n	8003c90 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200000e0 	.word	0x200000e0
 8003cdc:	2000010c 	.word	0x2000010c
 8003ce0:	200000f4 	.word	0x200000f4

08003ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f97b 	bl	8004fec <vPortFree>
                vPortFree( pxTCB );
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 f978 	bl	8004fec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvResetNextTaskUnblockTime+0x30>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <prvResetNextTaskUnblockTime+0x34>)
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d1a:	e005      	b.n	8003d28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <prvResetNextTaskUnblockTime+0x30>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <prvResetNextTaskUnblockTime+0x34>)
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	200000c4 	.word	0x200000c4
 8003d38:	2000012c 	.word	0x2000012c

08003d3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <xTaskGetSchedulerState+0x34>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	e008      	b.n	8003d62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <xTaskGetSchedulerState+0x38>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	e001      	b.n	8003d62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d62:	687b      	ldr	r3, [r7, #4]
    }
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000118 	.word	0x20000118
 8003d74:	20000134 	.word	0x20000134

08003d78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d068      	beq.n	8003e60 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <xTaskPriorityDisinherit+0xf4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d00a      	beq.n	8003dae <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
    }
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
    }
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd0:	1e5a      	subs	r2, r3, #1
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d03e      	beq.n	8003e60 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13a      	bne.n	8003e60 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fb90 	bl	8002514 <uxListRemove>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	2201      	movs	r2, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43da      	mvns	r2, r3
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <xTaskPriorityDisinherit+0xf8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <xTaskPriorityDisinherit+0xf8>)
 8003e0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4619      	mov	r1, r3
 8003e14:	204a      	movs	r0, #74	; 0x4a
 8003e16:	f002 fbf9 	bl	800660c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f1c3 0205 	rsb	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	2201      	movs	r2, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <xTaskPriorityDisinherit+0xf8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <xTaskPriorityDisinherit+0xf8>)
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <xTaskPriorityDisinherit+0xfc>)
 8003e4e:	441a      	add	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7fe faff 	bl	800245a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e60:	697b      	ldr	r3, [r7, #20]
    }
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000034 	.word	0x20000034
 8003e70:	20000114 	.word	0x20000114
 8003e74:	20000038 	.word	0x20000038

08003e78 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	613b      	str	r3, [r7, #16]
    }
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003ea2:	f000 fe97 	bl	8004bd4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	3354      	adds	r3, #84	; 0x54
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d022      	beq.n	8003efe <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	3214      	adds	r2, #20
 8003ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	43d2      	mvns	r2, r2
 8003ec8:	4011      	ands	r1, r2
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	3214      	adds	r2, #20
 8003ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	3354      	adds	r3, #84	; 0x54
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	6a38      	ldr	r0, [r7, #32]
 8003eea:	f000 f93f 	bl	800416c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <xTaskGenericNotifyWait+0x10c>)
 8003ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003efe:	f000 fe99 	bl	8004c34 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003f02:	f000 fe67 	bl	8004bd4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	2040      	movs	r0, #64	; 0x40
 8003f14:	f002 fc86 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003f1e:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	3214      	adds	r2, #20
 8003f26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	3354      	adds	r3, #84	; 0x54
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d002      	beq.n	8003f46 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e00e      	b.n	8003f64 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	3214      	adds	r2, #20
 8003f4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	43d2      	mvns	r2, r2
 8003f56:	4011      	ands	r1, r2
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	3214      	adds	r2, #20
 8003f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <xTaskGenericNotifyWait+0x108>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3354      	adds	r3, #84	; 0x54
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003f72:	f000 fe5f 	bl	8004c34 <vPortExitCritical>

        return xReturn;
 8003f76:	697b      	ldr	r3, [r7, #20]
    }
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000034 	.word	0x20000034
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08e      	sub	sp, #56	; 0x38
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003f96:	2301      	movs	r3, #1
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	623b      	str	r3, [r7, #32]
    }
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	61fb      	str	r3, [r7, #28]
    }
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003fd6:	f000 fdfd 	bl	8004bd4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	3214      	adds	r2, #20
 8003fe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3354      	adds	r3, #84	; 0x54
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4413      	add	r3, r2
 8004002:	3354      	adds	r3, #84	; 0x54
 8004004:	2202      	movs	r2, #2
 8004006:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	2b04      	cmp	r3, #4
 800400c:	d83b      	bhi.n	8004086 <xTaskGenericNotify+0xfe>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <xTaskGenericNotify+0x8c>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	080040a5 	.word	0x080040a5
 8004018:	08004029 	.word	0x08004029
 800401c:	08004045 	.word	0x08004045
 8004020:	0800405d 	.word	0x0800405d
 8004024:	0800406b 	.word	0x0800406b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	3214      	adds	r2, #20
 800402e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	ea42 0103 	orr.w	r1, r2, r3
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	3214      	adds	r2, #20
 800403e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004042:	e032      	b.n	80040aa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	3214      	adds	r2, #20
 800404a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	3214      	adds	r2, #20
 8004056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800405a:	e026      	b.n	80040aa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	3214      	adds	r2, #20
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004068:	e01f      	b.n	80040aa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800406a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406e:	2b02      	cmp	r3, #2
 8004070:	d006      	beq.n	8004080 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	3214      	adds	r2, #20
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800407e:	e014      	b.n	80040aa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004080:	2300      	movs	r3, #0
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004084:	e011      	b.n	80040aa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <xTaskGenericNotify+0x1d0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <xTaskGenericNotify+0x120>
        __asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	61bb      	str	r3, [r7, #24]
    }
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <xTaskGenericNotify+0x11a>
                    break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <xTaskGenericNotify+0x122>

                    break;
 80040a8:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 f8cf 	bl	8007250 <SEGGER_SYSVIEW_ShrinkId>
 80040b2:	4601      	mov	r1, r0
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	203e      	movs	r0, #62	; 0x3e
 80040c0:	f002 fbb0 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80040c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d13d      	bne.n	8004148 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fa1f 	bl	8002514 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	4618      	mov	r0, r3
 80040da:	f003 f817 	bl	800710c <SEGGER_SYSVIEW_OnTaskStartReady>
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	2201      	movs	r2, #1
 80040e4:	409a      	lsls	r2, r3
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <xTaskGenericNotify+0x1d4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <xTaskGenericNotify+0x1d4>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <xTaskGenericNotify+0x1d8>)
 80040fe:	441a      	add	r2, r3
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7fe f9a7 	bl	800245a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <xTaskGenericNotify+0x1a2>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	617b      	str	r3, [r7, #20]
    }
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <xTaskGenericNotify+0x1dc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	429a      	cmp	r2, r3
 8004136:	d907      	bls.n	8004148 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <xTaskGenericNotify+0x1e0>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004148:	f000 fd74 	bl	8004c34 <vPortExitCritical>

        return xReturn;
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800414e:	4618      	mov	r0, r3
 8004150:	3730      	adds	r7, #48	; 0x30
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000110 	.word	0x20000110
 800415c:	20000114 	.word	0x20000114
 8004160:	20000038 	.word	0x20000038
 8004164:	20000034 	.word	0x20000034
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004176:	4b32      	ldr	r3, [pc, #200]	; (8004240 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800417c:	4b31      	ldr	r3, [pc, #196]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f9c6 	bl	8002514 <uxListRemove>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800418e:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	2201      	movs	r2, #1
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <prvAddCurrentTaskToDelayedList+0xdc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4013      	ands	r3, r2
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <prvAddCurrentTaskToDelayedList+0xdc>)
 80041a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d110      	bne.n	80041d0 <prvAddCurrentTaskToDelayedList+0x64>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80041b4:	4b23      	ldr	r3, [pc, #140]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	211b      	movs	r1, #27
 80041ba:	4618      	mov	r0, r3
 80041bc:	f002 ffe8 	bl	8007190 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c0:	4b20      	ldr	r3, [pc, #128]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4820      	ldr	r0, [pc, #128]	; (800424c <prvAddCurrentTaskToDelayedList+0xe0>)
 80041ca:	f7fe f946 	bl	800245a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041ce:	e032      	b.n	8004236 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d20f      	bcs.n	8004208 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2104      	movs	r1, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f002 ffce 	bl	8007190 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f4:	4b16      	ldr	r3, [pc, #88]	; (8004250 <prvAddCurrentTaskToDelayedList+0xe4>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fe f94e 	bl	80024a2 <vListInsert>
}
 8004206:	e016      	b.n	8004236 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2104      	movs	r1, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f002 ffbe 	bl	8007190 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <prvAddCurrentTaskToDelayedList+0xd8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe f93e 	bl	80024a2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <prvAddCurrentTaskToDelayedList+0xec>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d202      	bcs.n	8004236 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004230:	4a09      	ldr	r2, [pc, #36]	; (8004258 <prvAddCurrentTaskToDelayedList+0xec>)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6013      	str	r3, [r2, #0]
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000110 	.word	0x20000110
 8004244:	20000034 	.word	0x20000034
 8004248:	20000114 	.word	0x20000114
 800424c:	200000f8 	.word	0x200000f8
 8004250:	200000c8 	.word	0x200000c8
 8004254:	200000c4 	.word	0x200000c4
 8004258:	2000012c 	.word	0x2000012c

0800425c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004266:	f000 fad5 	bl	8004814 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800426a:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <xTimerCreateTimerTask+0x54>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <xTimerCreateTimerTask+0x58>)
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2302      	movs	r3, #2
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004280:	490d      	ldr	r1, [pc, #52]	; (80042b8 <xTimerCreateTimerTask+0x5c>)
 8004282:	480e      	ldr	r0, [pc, #56]	; (80042bc <xTimerCreateTimerTask+0x60>)
 8004284:	f7fe feca 	bl	800301c <xTaskCreate>
 8004288:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	603b      	str	r3, [r7, #0]
    }
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80042a6:	687b      	ldr	r3, [r7, #4]
    }
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000168 	.word	0x20000168
 80042b4:	2000016c 	.word	0x2000016c
 80042b8:	08007638 	.word	0x08007638
 80042bc:	080043f5 	.word	0x080043f5

080042c0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xTimerGenericCommand+0x2e>
        __asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	623b      	str	r3, [r7, #32]
    }
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <xTimerGenericCommand+0x98>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d02a      	beq.n	800434c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b05      	cmp	r3, #5
 8004306:	dc18      	bgt.n	800433a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004308:	f7ff fd18 	bl	8003d3c <xTaskGetSchedulerState>
 800430c:	4603      	mov	r3, r0
 800430e:	2b02      	cmp	r3, #2
 8004310:	d109      	bne.n	8004326 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <xTimerGenericCommand+0x98>)
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f107 0114 	add.w	r1, r7, #20
 800431a:	2300      	movs	r3, #0
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	f7fe fa13 	bl	8002748 <xQueueGenericSend>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24
 8004324:	e012      	b.n	800434c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <xTimerGenericCommand+0x98>)
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	f107 0114 	add.w	r1, r7, #20
 800432e:	2300      	movs	r3, #0
 8004330:	2200      	movs	r2, #0
 8004332:	f7fe fa09 	bl	8002748 <xQueueGenericSend>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24
 8004338:	e008      	b.n	800434c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <xTimerGenericCommand+0x98>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	f107 0114 	add.w	r1, r7, #20
 8004342:	2300      	movs	r3, #0
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	f7fe fb25 	bl	8002994 <xQueueGenericSendFromISR>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800434e:	4618      	mov	r0, r3
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000168 	.word	0x20000168

0800435c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <prvProcessExpiredTimer+0x94>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe f8cd 	bl	8002514 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d022      	beq.n	80043ce <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	18d1      	adds	r1, r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	6978      	ldr	r0, [r7, #20]
 8004396:	f000 f8d1 	bl	800453c <prvInsertTimerInActiveList>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01f      	beq.n	80043e0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043a0:	2300      	movs	r3, #0
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	2100      	movs	r1, #0
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f7ff ff88 	bl	80042c0 <xTimerGenericCommand>
 80043b0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d113      	bne.n	80043e0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60fb      	str	r3, [r7, #12]
    }
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	6978      	ldr	r0, [r7, #20]
 80043e6:	4798      	blx	r3
    }
 80043e8:	bf00      	nop
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000160 	.word	0x20000160

080043f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f857 	bl	80044b4 <prvGetNextExpireTime>
 8004406:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4619      	mov	r1, r3
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f803 	bl	8004418 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004412:	f000 f8d5 	bl	80045c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004416:	e7f1      	b.n	80043fc <prvTimerTask+0x8>

08004418 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004422:	f7ff f8a3 	bl	800356c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004426:	f107 0308 	add.w	r3, r7, #8
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f866 	bl	80044fc <prvSampleTimeNow>
 8004430:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d130      	bne.n	800449a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <prvProcessTimerOrBlockTask+0x3c>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	429a      	cmp	r2, r3
 8004444:	d806      	bhi.n	8004454 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004446:	f7ff f89f 	bl	8003588 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800444a:	68f9      	ldr	r1, [r7, #12]
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff85 	bl	800435c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004452:	e024      	b.n	800449e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <prvProcessTimerOrBlockTask+0x90>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <prvProcessTimerOrBlockTask+0x50>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <prvProcessTimerOrBlockTask+0x52>
 8004468:	2300      	movs	r3, #0
 800446a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <prvProcessTimerOrBlockTask+0x94>)
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	f7fe fd9b 	bl	8002fb4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800447e:	f7ff f883 	bl	8003588 <xTaskResumeAll>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <prvProcessTimerOrBlockTask+0x98>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
    }
 8004498:	e001      	b.n	800449e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800449a:	f7ff f875 	bl	8003588 <xTaskResumeAll>
    }
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000164 	.word	0x20000164
 80044ac:	20000168 	.word	0x20000168
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <prvGetNextExpireTime+0x44>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <prvGetNextExpireTime+0x16>
 80044c6:	2201      	movs	r2, #1
 80044c8:	e000      	b.n	80044cc <prvGetNextExpireTime+0x18>
 80044ca:	2200      	movs	r2, #0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <prvGetNextExpireTime+0x44>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e001      	b.n	80044e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044e8:	68fb      	ldr	r3, [r7, #12]
    }
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000160 	.word	0x20000160

080044fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004504:	f7ff f8e0 	bl	80036c8 <xTaskGetTickCount>
 8004508:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <prvSampleTimeNow+0x3c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	429a      	cmp	r2, r3
 8004512:	d205      	bcs.n	8004520 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004514:	f000 f91a 	bl	800474c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e002      	b.n	8004526 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <prvSampleTimeNow+0x3c>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800452c:	68fb      	ldr	r3, [r7, #12]
    }
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000170 	.word	0x20000170

0800453c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d812      	bhi.n	8004588 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	429a      	cmp	r2, r3
 800456e:	d302      	bcc.n	8004576 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e01b      	b.n	80045ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <prvInsertTimerInActiveList+0x7c>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f7fd ff8e 	bl	80024a2 <vListInsert>
 8004586:	e012      	b.n	80045ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d206      	bcs.n	800459e <prvInsertTimerInActiveList+0x62>
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e007      	b.n	80045ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <prvInsertTimerInActiveList+0x80>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3304      	adds	r3, #4
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f7fd ff7a 	bl	80024a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80045ae:	697b      	ldr	r3, [r7, #20]
    }
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000164 	.word	0x20000164
 80045bc:	20000160 	.word	0x20000160

080045c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045c6:	e0ae      	b.n	8004726 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f2c0 80aa 	blt.w	8004724 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd ff97 	bl	8002514 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff87 	bl	80044fc <prvSampleTimeNow>
 80045ee:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	f200 8097 	bhi.w	8004726 <prvProcessReceivedCommands+0x166>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <prvProcessReceivedCommands+0x40>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004629 	.word	0x08004629
 8004604:	08004629 	.word	0x08004629
 8004608:	08004629 	.word	0x08004629
 800460c:	0800469d 	.word	0x0800469d
 8004610:	080046b1 	.word	0x080046b1
 8004614:	080046fb 	.word	0x080046fb
 8004618:	08004629 	.word	0x08004629
 800461c:	08004629 	.word	0x08004629
 8004620:	0800469d 	.word	0x0800469d
 8004624:	080046b1 	.word	0x080046b1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	18d1      	adds	r1, r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004648:	f7ff ff78 	bl	800453c <prvInsertTimerInActiveList>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d069      	beq.n	8004726 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004658:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d05e      	beq.n	8004726 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	441a      	add	r2, r3
 8004670:	2300      	movs	r3, #0
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	2100      	movs	r1, #0
 8004678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800467a:	f7ff fe21 	bl	80042c0 <xTimerGenericCommand>
 800467e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d14f      	bne.n	8004726 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61bb      	str	r3, [r7, #24]
    }
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80046ae:	e03a      	b.n	8004726 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	617b      	str	r3, [r7, #20]
    }
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	18d1      	adds	r1, r2, r3
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046f4:	f7ff ff22 	bl	800453c <prvInsertTimerInActiveList>
                        break;
 80046f8:	e015      	b.n	8004726 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d103      	bne.n	8004710 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470a:	f000 fc6f 	bl	8004fec <vPortFree>
 800470e:	e00a      	b.n	8004726 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004722:	e000      	b.n	8004726 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004724:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <prvProcessReceivedCommands+0x188>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f107 0108 	add.w	r1, r7, #8
 800472e:	2200      	movs	r2, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe f9ed 	bl	8002b10 <xQueueReceive>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	f47f af45 	bne.w	80045c8 <prvProcessReceivedCommands+0x8>
        }
    }
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	3728      	adds	r7, #40	; 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000168 	.word	0x20000168

0800474c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004752:	e048      	b.n	80047e6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004754:	4b2d      	ldr	r3, [pc, #180]	; (800480c <prvSwitchTimerLists+0xc0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475e:	4b2b      	ldr	r3, [pc, #172]	; (800480c <prvSwitchTimerLists+0xc0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3304      	adds	r3, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fed1 	bl	8002514 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d02e      	beq.n	80047e6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90e      	bls.n	80047b8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047a6:	4b19      	ldr	r3, [pc, #100]	; (800480c <prvSwitchTimerLists+0xc0>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fd fe76 	bl	80024a2 <vListInsert>
 80047b6:	e016      	b.n	80047e6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047b8:	2300      	movs	r3, #0
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	2300      	movs	r3, #0
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	2100      	movs	r1, #0
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff fd7c 	bl	80042c0 <xTimerGenericCommand>
 80047c8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	603b      	str	r3, [r7, #0]
    }
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <prvSwitchTimerLists+0xc0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1b1      	bne.n	8004754 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <prvSwitchTimerLists+0xc0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <prvSwitchTimerLists+0xc4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a04      	ldr	r2, [pc, #16]	; (800480c <prvSwitchTimerLists+0xc0>)
 80047fc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <prvSwitchTimerLists+0xc4>)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6013      	str	r3, [r2, #0]
    }
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000160 	.word	0x20000160
 8004810:	20000164 	.word	0x20000164

08004814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004818:	f000 f9dc 	bl	8004bd4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <prvCheckForValidListAndQueue+0x54>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d11d      	bne.n	8004860 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004824:	4811      	ldr	r0, [pc, #68]	; (800486c <prvCheckForValidListAndQueue+0x58>)
 8004826:	f7fd fdeb 	bl	8002400 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800482a:	4811      	ldr	r0, [pc, #68]	; (8004870 <prvCheckForValidListAndQueue+0x5c>)
 800482c:	f7fd fde8 	bl	8002400 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <prvCheckForValidListAndQueue+0x60>)
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <prvCheckForValidListAndQueue+0x58>)
 8004834:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <prvCheckForValidListAndQueue+0x64>)
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <prvCheckForValidListAndQueue+0x5c>)
 800483a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800483c:	2200      	movs	r2, #0
 800483e:	210c      	movs	r1, #12
 8004840:	200a      	movs	r0, #10
 8004842:	f7fd fef9 	bl	8002638 <xQueueGenericCreate>
 8004846:	4603      	mov	r3, r0
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <prvCheckForValidListAndQueue+0x54>)
 800484a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <prvCheckForValidListAndQueue+0x54>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <prvCheckForValidListAndQueue+0x54>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4908      	ldr	r1, [pc, #32]	; (800487c <prvCheckForValidListAndQueue+0x68>)
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe fb78 	bl	8002f50 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004860:	f000 f9e8 	bl	8004c34 <vPortExitCritical>
    }
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000168 	.word	0x20000168
 800486c:	20000138 	.word	0x20000138
 8004870:	2000014c 	.word	0x2000014c
 8004874:	20000160 	.word	0x20000160
 8004878:	20000164 	.word	0x20000164
 800487c:	08007640 	.word	0x08007640

08004880 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b04      	subs	r3, #4
 8004890:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004898:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3b04      	subs	r3, #4
 800489e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 0201 	bic.w	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80048b0:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <pxPortInitialiseStack+0x64>)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b14      	subs	r3, #20
 80048ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b04      	subs	r3, #4
 80048c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f06f 0202 	mvn.w	r2, #2
 80048ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3b20      	subs	r3, #32
 80048d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	080048e9 	.word	0x080048e9

080048e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <prvTaskExitError+0x54>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d00a      	beq.n	8004912 <prvTaskExitError+0x2a>
        __asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	60fb      	str	r3, [r7, #12]
    }
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <prvTaskExitError+0x28>
        __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
    }
 8004924:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004926:	bf00      	nop
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0fc      	beq.n	8004928 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20000010 	.word	0x20000010

08004940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <pxCurrentTCBConst2>)
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	6808      	ldr	r0, [r1, #0]
 8004946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	f380 8809 	msr	PSP, r0
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f380 8811 	msr	BASEPRI, r0
 800495a:	4770      	bx	lr
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst2>:
 8004960:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <prvPortStartFirstTask+0x24>)
 800496a:	6800      	ldr	r0, [r0, #0]
 800496c:	6800      	ldr	r0, [r0, #0]
 800496e:	f380 8808 	msr	MSP, r0
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8814 	msr	CONTROL, r0
 800497a:	b662      	cpsie	i
 800497c:	b661      	cpsie	f
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	df00      	svc	0
 8004988:	bf00      	nop
 800498a:	0000      	.short	0x0000
 800498c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop

08004994 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800499a:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <xPortStartScheduler+0x120>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <xPortStartScheduler+0x124>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10a      	bne.n	80049ba <xPortStartScheduler+0x26>
        __asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	613b      	str	r3, [r7, #16]
    }
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <xPortStartScheduler+0x120>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <xPortStartScheduler+0x128>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10a      	bne.n	80049da <xPortStartScheduler+0x46>
        __asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
    }
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049da:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <xPortStartScheduler+0x12c>)
 80049dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <xPortStartScheduler+0x130>)
 8004a00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a02:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a08:	e009      	b.n	8004a1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d0ef      	beq.n	8004a0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a2a:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1c3 0307 	rsb	r3, r3, #7
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d00a      	beq.n	8004a4c <xPortStartScheduler+0xb8>
        __asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60bb      	str	r3, [r7, #8]
    }
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <xPortStartScheduler+0x138>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <xPortStartScheduler+0x138>)
 8004a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <xPortStartScheduler+0x138>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a14      	ldr	r2, [pc, #80]	; (8004acc <xPortStartScheduler+0x138>)
 8004a7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a82:	f000 f963 	bl	8004d4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <xPortStartScheduler+0x13c>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a8c:	f000 f982 	bl	8004d94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <xPortStartScheduler+0x140>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <xPortStartScheduler+0x140>)
 8004a96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a9c:	f7ff ff64 	bl	8004968 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004aa0:	f7fe fef0 	bl	8003884 <vTaskSwitchContext>
    prvTaskExitError();
 8004aa4:	f7ff ff20 	bl	80048e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	e000ed00 	.word	0xe000ed00
 8004ab8:	410fc271 	.word	0x410fc271
 8004abc:	410fc270 	.word	0x410fc270
 8004ac0:	e000e400 	.word	0xe000e400
 8004ac4:	20000174 	.word	0x20000174
 8004ac8:	20000178 	.word	0x20000178
 8004acc:	e000ed20 	.word	0xe000ed20
 8004ad0:	20000010 	.word	0x20000010
 8004ad4:	e000ef34 	.word	0xe000ef34

08004ad8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <vInitPrioGroupValue+0xe4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a37      	ldr	r2, [pc, #220]	; (8004bc0 <vInitPrioGroupValue+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10a      	bne.n	8004afe <vInitPrioGroupValue+0x26>
        __asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	613b      	str	r3, [r7, #16]
    }
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004afe:	4b2f      	ldr	r3, [pc, #188]	; (8004bbc <vInitPrioGroupValue+0xe4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a30      	ldr	r2, [pc, #192]	; (8004bc4 <vInitPrioGroupValue+0xec>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10a      	bne.n	8004b1e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <vInitPrioGroupValue+0xf0>)
 8004b20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <vInitPrioGroupValue+0xf4>)
 8004b44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b48:	2207      	movs	r2, #7
 8004b4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b4c:	e009      	b.n	8004b62 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b80      	cmp	r3, #128	; 0x80
 8004b6c:	d0ef      	beq.n	8004b4e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1c3 0307 	rsb	r3, r3, #7
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00a      	beq.n	8004b90 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60bb      	str	r3, [r7, #8]
    }
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b98:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ba2:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <vInitPrioGroupValue+0xf8>)
 8004ba4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	e000ed00 	.word	0xe000ed00
 8004bc0:	410fc271 	.word	0x410fc271
 8004bc4:	410fc270 	.word	0x410fc270
 8004bc8:	e000e400 	.word	0xe000e400
 8004bcc:	20000174 	.word	0x20000174
 8004bd0:	20000178 	.word	0x20000178

08004bd4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
        __asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
    }
 8004bec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <vPortEnterCritical+0x58>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <vPortEnterCritical+0x58>)
 8004bf6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <vPortEnterCritical+0x58>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10f      	bne.n	8004c20 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <vPortEnterCritical+0x5c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	603b      	str	r3, [r7, #0]
    }
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <vPortEnterCritical+0x4a>
    }
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000010 	.word	0x20000010
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <vPortExitCritical+0x50>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <vPortExitCritical+0x24>
        __asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	607b      	str	r3, [r7, #4]
    }
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <vPortExitCritical+0x50>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <vPortExitCritical+0x50>)
 8004c60:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <vPortExitCritical+0x50>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <vPortExitCritical+0x42>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f383 8811 	msr	BASEPRI, r3
    }
 8004c74:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000010 	.word	0x20000010
	...

08004c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c90:	f3ef 8009 	mrs	r0, PSP
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <pxCurrentTCBConst>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	f01e 0f10 	tst.w	lr, #16
 8004ca0:	bf08      	it	eq
 8004ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004caa:	6010      	str	r0, [r2, #0]
 8004cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cb4:	f380 8811 	msr	BASEPRI, r0
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f7fe fde0 	bl	8003884 <vTaskSwitchContext>
 8004cc4:	f04f 0000 	mov.w	r0, #0
 8004cc8:	f380 8811 	msr	BASEPRI, r0
 8004ccc:	bc09      	pop	{r0, r3}
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6808      	ldr	r0, [r1, #0]
 8004cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd6:	f01e 0f10 	tst.w	lr, #16
 8004cda:	bf08      	it	eq
 8004cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ce0:	f380 8809 	msr	PSP, r0
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst>:
 8004cf0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
    }
 8004d10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d12:	f002 f8e1 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d16:	f7fe fcf9 	bl	800370c <xTaskIncrementTick>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d006      	beq.n	8004d2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d20:	f002 f938 	bl	8006f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <SysTick_Handler+0x50>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e001      	b.n	8004d32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d2e:	f002 f915 	bl	8006f5c <SEGGER_SYSVIEW_RecordExitISR>
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f383 8811 	msr	BASEPRI, r3
    }
 8004d3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <vPortSetupTimerInterrupt+0x38>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <vPortSetupTimerInterrupt+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <vPortSetupTimerInterrupt+0x44>)
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	e000e018 	.word	0xe000e018
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	10624dd3 	.word	0x10624dd3
 8004d90:	e000e014 	.word	0xe000e014

08004d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004da4 <vPortEnableVFP+0x10>
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d9e:	6001      	str	r1, [r0, #0]
 8004da0:	4770      	bx	lr
 8004da2:	0000      	.short	0x0000
 8004da4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop

08004dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004db2:	f3ef 8305 	mrs	r3, IPSR
 8004db6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d914      	bls.n	8004de8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <vPortValidateInterruptPriority+0x70>)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <vPortValidateInterruptPriority+0x74>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	7afa      	ldrb	r2, [r7, #11]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d20a      	bcs.n	8004de8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	607b      	str	r3, [r7, #4]
    }
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <vPortValidateInterruptPriority+0x78>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <vPortValidateInterruptPriority+0x7c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d90a      	bls.n	8004e0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	603b      	str	r3, [r7, #0]
    }
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <vPortValidateInterruptPriority+0x60>
    }
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000e3f0 	.word	0xe000e3f0
 8004e20:	20000174 	.word	0x20000174
 8004e24:	e000ed0c 	.word	0xe000ed0c
 8004e28:	20000178 	.word	0x20000178

08004e2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e38:	f7fe fb98 	bl	800356c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <pvPortMalloc+0x1a8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e44:	f000 f934 	bl	80050b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e48:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <pvPortMalloc+0x1ac>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 80a7 	bne.w	8004fa4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02d      	beq.n	8004eb8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d227      	bcs.n	8004eb8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e68:	2208      	movs	r2, #8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d021      	beq.n	8004ebe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	3308      	adds	r3, #8
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d214      	bcs.n	8004eb2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	3308      	adds	r3, #8
 8004e90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <pvPortMalloc+0x92>
        __asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	617b      	str	r3, [r7, #20]
    }
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eb6:	e002      	b.n	8004ebe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	e000      	b.n	8004ec0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ebe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d06e      	beq.n	8004fa4 <pvPortMalloc+0x178>
 8004ec6:	4b45      	ldr	r3, [pc, #276]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d869      	bhi.n	8004fa4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <pvPortMalloc+0x1b4>)
 8004ed2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <pvPortMalloc+0x1b4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eda:	e004      	b.n	8004ee6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d903      	bls.n	8004ef8 <pvPortMalloc+0xcc>
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f1      	bne.n	8004edc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ef8:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <pvPortMalloc+0x1a8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d050      	beq.n	8004fa4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2208      	movs	r2, #8
 8004f08:	4413      	add	r3, r2
 8004f0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d91f      	bls.n	8004f64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <pvPortMalloc+0x120>
        __asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	613b      	str	r3, [r7, #16]
    }
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f5e:	69b8      	ldr	r0, [r7, #24]
 8004f60:	f000 f908 	bl	8005174 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f64:	4b1d      	ldr	r3, [pc, #116]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <pvPortMalloc+0x1b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d203      	bcs.n	8004f86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f7e:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <pvPortMalloc+0x1b8>)
 8004f84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <pvPortMalloc+0x1ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <pvPortMalloc+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <pvPortMalloc+0x1bc>)
 8004fa2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fa4:	f7fe faf0 	bl	8003588 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <pvPortMalloc+0x19c>
        __asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60fb      	str	r3, [r7, #12]
    }
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3728      	adds	r7, #40	; 0x28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20012d84 	.word	0x20012d84
 8004fd8:	20012d98 	.word	0x20012d98
 8004fdc:	20012d88 	.word	0x20012d88
 8004fe0:	20012d7c 	.word	0x20012d7c
 8004fe4:	20012d8c 	.word	0x20012d8c
 8004fe8:	20012d90 	.word	0x20012d90

08004fec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04d      	beq.n	800509a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ffe:	2308      	movs	r3, #8
 8005000:	425b      	negs	r3, r3
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <vPortFree+0xb8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4013      	ands	r3, r2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <vPortFree+0x44>
        __asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	60fb      	str	r3, [r7, #12]
    }
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <vPortFree+0x62>
        __asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60bb      	str	r3, [r7, #8]
    }
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <vPortFree+0xb8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01e      	beq.n	800509a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d11a      	bne.n	800509a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <vPortFree+0xb8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	43db      	mvns	r3, r3
 800506e:	401a      	ands	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005074:	f7fe fa7a 	bl	800356c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortFree+0xbc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4413      	add	r3, r2
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <vPortFree+0xbc>)
 8005084:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005086:	6938      	ldr	r0, [r7, #16]
 8005088:	f000 f874 	bl	8005174 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800508c:	4b07      	ldr	r3, [pc, #28]	; (80050ac <vPortFree+0xc0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a06      	ldr	r2, [pc, #24]	; (80050ac <vPortFree+0xc0>)
 8005094:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005096:	f7fe fa77 	bl	8003588 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20012d98 	.word	0x20012d98
 80050a8:	20012d88 	.word	0x20012d88
 80050ac:	20012d94 	.word	0x20012d94

080050b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <prvHeapInit+0xac>)
 80050be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3307      	adds	r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	4a1f      	ldr	r2, [pc, #124]	; (800515c <prvHeapInit+0xac>)
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <prvHeapInit+0xb0>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050ee:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <prvHeapInit+0xb0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80050fc:	2208      	movs	r2, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <prvHeapInit+0xb4>)
 8005110:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <prvHeapInit+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <prvHeapInit+0xb4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <prvHeapInit+0xb4>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <prvHeapInit+0xb8>)
 800513e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a09      	ldr	r2, [pc, #36]	; (800516c <prvHeapInit+0xbc>)
 8005146:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <prvHeapInit+0xc0>)
 800514a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	2000017c 	.word	0x2000017c
 8005160:	20012d7c 	.word	0x20012d7c
 8005164:	20012d84 	.word	0x20012d84
 8005168:	20012d8c 	.word	0x20012d8c
 800516c:	20012d88 	.word	0x20012d88
 8005170:	20012d98 	.word	0x20012d98

08005174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800517c:	4b28      	ldr	r3, [pc, #160]	; (8005220 <prvInsertBlockIntoFreeList+0xac>)
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e002      	b.n	8005188 <prvInsertBlockIntoFreeList+0x14>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d8f7      	bhi.n	8005182 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d108      	bne.n	80051b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d118      	bne.n	80051fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <prvInsertBlockIntoFreeList+0xb0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d00d      	beq.n	80051f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e008      	b.n	8005204 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <prvInsertBlockIntoFreeList+0xb0>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e003      	b.n	8005204 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d002      	beq.n	8005212 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20012d7c 	.word	0x20012d7c
 8005224:	20012d84 	.word	0x20012d84

08005228 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800522c:	4803      	ldr	r0, [pc, #12]	; (800523c <_cbSendSystemDesc+0x14>)
 800522e:	f001 fdfd 	bl	8006e2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005232:	4803      	ldr	r0, [pc, #12]	; (8005240 <_cbSendSystemDesc+0x18>)
 8005234:	f001 fdfa 	bl	8006e2c <SEGGER_SYSVIEW_SendSysDesc>
}
 8005238:	bf00      	nop
 800523a:	bd80      	pop	{r7, pc}
 800523c:	08007648 	.word	0x08007648
 8005240:	0800768c 	.word	0x0800768c

08005244 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <SEGGER_SYSVIEW_Conf+0x20>)
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <SEGGER_SYSVIEW_Conf+0x20>)
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <SEGGER_SYSVIEW_Conf+0x24>)
 8005252:	4a06      	ldr	r2, [pc, #24]	; (800526c <SEGGER_SYSVIEW_Conf+0x28>)
 8005254:	f001 f966 	bl	8006524 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005258:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800525c:	f001 f9a8 	bl	80065b0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005260:	bf00      	nop
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000000 	.word	0x20000000
 8005268:	08005229 	.word	0x08005229
 800526c:	0800772c 	.word	0x0800772c

08005270 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005272:	b085      	sub	sp, #20
 8005274:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005276:	2300      	movs	r3, #0
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	e033      	b.n	80052e4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800527c:	491e      	ldr	r1, [pc, #120]	; (80052f8 <_cbSendTaskList+0x88>)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	491a      	ldr	r1, [pc, #104]	; (80052f8 <_cbSendTaskList+0x88>)
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3304      	adds	r3, #4
 800529c:	6819      	ldr	r1, [r3, #0]
 800529e:	4c16      	ldr	r4, [pc, #88]	; (80052f8 <_cbSendTaskList+0x88>)
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4423      	add	r3, r4
 80052ac:	3308      	adds	r3, #8
 80052ae:	681c      	ldr	r4, [r3, #0]
 80052b0:	4d11      	ldr	r5, [pc, #68]	; (80052f8 <_cbSendTaskList+0x88>)
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	442b      	add	r3, r5
 80052be:	330c      	adds	r3, #12
 80052c0:	681d      	ldr	r5, [r3, #0]
 80052c2:	4e0d      	ldr	r6, [pc, #52]	; (80052f8 <_cbSendTaskList+0x88>)
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4433      	add	r3, r6
 80052d0:	3310      	adds	r3, #16
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	462b      	mov	r3, r5
 80052d8:	4622      	mov	r2, r4
 80052da:	f000 f971 	bl	80055c0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3301      	adds	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <_cbSendTaskList+0x8c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3c6      	bcc.n	800527c <_cbSendTaskList+0xc>
  }
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f8:	20012d9c 	.word	0x20012d9c
 80052fc:	20012e3c 	.word	0x20012e3c

08005300 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005306:	f7fe f9ef 	bl	80036e8 <xTaskGetTickCountFromISR>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	f04f 0400 	mov.w	r4, #0
 8005322:	f04f 0500 	mov.w	r5, #0
 8005326:	015d      	lsls	r5, r3, #5
 8005328:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800532c:	0154      	lsls	r4, r2, #5
 800532e:	4622      	mov	r2, r4
 8005330:	462b      	mov	r3, r5
 8005332:	1a12      	subs	r2, r2, r0
 8005334:	eb63 0301 	sbc.w	r3, r3, r1
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	f04f 0500 	mov.w	r5, #0
 8005340:	009d      	lsls	r5, r3, #2
 8005342:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8005346:	0094      	lsls	r4, r2, #2
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	1812      	adds	r2, r2, r0
 800534e:	eb41 0303 	adc.w	r3, r1, r3
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f04f 0100 	mov.w	r1, #0
 800535a:	00d9      	lsls	r1, r3, #3
 800535c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005360:	00d0      	lsls	r0, r2, #3
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800536a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bdb0      	pop	{r4, r5, r7, pc}

08005378 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005386:	2205      	movs	r2, #5
 8005388:	492b      	ldr	r1, [pc, #172]	; (8005438 <SYSVIEW_AddTask+0xc0>)
 800538a:	68b8      	ldr	r0, [r7, #8]
 800538c:	f002 f8e0 	bl	8007550 <memcmp>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d04b      	beq.n	800542e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <SYSVIEW_AddTask+0xc4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b07      	cmp	r3, #7
 800539c:	d903      	bls.n	80053a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800539e:	4828      	ldr	r0, [pc, #160]	; (8005440 <SYSVIEW_AddTask+0xc8>)
 80053a0:	f002 f856 	bl	8007450 <SEGGER_SYSVIEW_Warn>
    return;
 80053a4:	e044      	b.n	8005430 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80053a6:	4b25      	ldr	r3, [pc, #148]	; (800543c <SYSVIEW_AddTask+0xc4>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4926      	ldr	r1, [pc, #152]	; (8005444 <SYSVIEW_AddTask+0xcc>)
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80053ba:	4b20      	ldr	r3, [pc, #128]	; (800543c <SYSVIEW_AddTask+0xc4>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4921      	ldr	r1, [pc, #132]	; (8005444 <SYSVIEW_AddTask+0xcc>)
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3304      	adds	r3, #4
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <SYSVIEW_AddTask+0xc4>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	491b      	ldr	r1, [pc, #108]	; (8005444 <SYSVIEW_AddTask+0xcc>)
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3308      	adds	r3, #8
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053e6:	4b15      	ldr	r3, [pc, #84]	; (800543c <SYSVIEW_AddTask+0xc4>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4916      	ldr	r1, [pc, #88]	; (8005444 <SYSVIEW_AddTask+0xcc>)
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	330c      	adds	r3, #12
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <SYSVIEW_AddTask+0xc4>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4910      	ldr	r1, [pc, #64]	; (8005444 <SYSVIEW_AddTask+0xcc>)
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3310      	adds	r3, #16
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <SYSVIEW_AddTask+0xc4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a08      	ldr	r2, [pc, #32]	; (800543c <SYSVIEW_AddTask+0xc4>)
 800541a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f8ca 	bl	80055c0 <SYSVIEW_SendTaskInfo>
 800542c:	e000      	b.n	8005430 <SYSVIEW_AddTask+0xb8>
    return;
 800542e:	bf00      	nop

}
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	0800769c 	.word	0x0800769c
 800543c:	20012e3c 	.word	0x20012e3c
 8005440:	080076a4 	.word	0x080076a4
 8005444:	20012d9c 	.word	0x20012d9c

08005448 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005450:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80ab 	beq.w	80055b0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e00d      	b.n	800547c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005460:	4956      	ldr	r1, [pc, #344]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d008      	beq.n	8005488 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	4b4e      	ldr	r3, [pc, #312]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d3ec      	bcc.n	8005460 <SYSVIEW_DeleteTask+0x18>
 8005486:	e000      	b.n	800548a <SYSVIEW_DeleteTask+0x42>
      break;
 8005488:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800548a:	4b4b      	ldr	r3, [pc, #300]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3b01      	subs	r3, #1
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	429a      	cmp	r2, r3
 8005494:	d111      	bne.n	80054ba <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4a46      	ldr	r2, [pc, #280]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 80054a2:	4413      	add	r3, r2
 80054a4:	2214      	movs	r2, #20
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 f86d 	bl	8007588 <memset>
    _NumTasks--;
 80054ae:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	4a40      	ldr	r2, [pc, #256]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e07b      	b.n	80055b2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d276      	bcs.n	80055b2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80054c4:	4b3c      	ldr	r3, [pc, #240]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	493c      	ldr	r1, [pc, #240]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	6819      	ldr	r1, [r3, #0]
 80054d8:	4838      	ldr	r0, [pc, #224]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4403      	add	r3, r0
 80054e6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80054e8:	4b33      	ldr	r3, [pc, #204]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1e5a      	subs	r2, r3, #1
 80054ee:	4933      	ldr	r1, [pc, #204]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	3304      	adds	r3, #4
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	482f      	ldr	r0, [pc, #188]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4403      	add	r3, r0
 800550c:	3304      	adds	r3, #4
 800550e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005510:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	1e5a      	subs	r2, r3, #1
 8005516:	4929      	ldr	r1, [pc, #164]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	3308      	adds	r3, #8
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	4825      	ldr	r0, [pc, #148]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4403      	add	r3, r0
 8005534:	3308      	adds	r3, #8
 8005536:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	491f      	ldr	r1, [pc, #124]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	330c      	adds	r3, #12
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	481b      	ldr	r0, [pc, #108]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4403      	add	r3, r0
 800555c:	330c      	adds	r3, #12
 800555e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005560:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	4915      	ldr	r1, [pc, #84]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3310      	adds	r3, #16
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	4811      	ldr	r0, [pc, #68]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4403      	add	r3, r0
 8005584:	3310      	adds	r3, #16
 8005586:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <SYSVIEW_DeleteTask+0x174>)
 8005598:	4413      	add	r3, r2
 800559a:	2214      	movs	r2, #20
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fff2 	bl	8007588 <memset>
    _NumTasks--;
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <SYSVIEW_DeleteTask+0x170>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e000      	b.n	80055b2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80055b0:	bf00      	nop
  }
}
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20012e3c 	.word	0x20012e3c
 80055bc:	20012d9c 	.word	0x20012d9c

080055c0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80055ce:	f107 0314 	add.w	r3, r7, #20
 80055d2:	2214      	movs	r2, #20
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 ffd6 	bl	8007588 <memset>
  TaskInfo.TaskID     = TaskID;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 fb21 	bl	8006c3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80055fa:	bf00      	nop
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <_DoInit+0x98>)
 800560c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2203      	movs	r2, #3
 8005612:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2203      	movs	r2, #3
 8005618:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <_DoInit+0x9c>)
 800561e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <_DoInit+0xa0>)
 8005624:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800562c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <_DoInit+0x9c>)
 8005644:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <_DoInit+0xa4>)
 800564a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2210      	movs	r2, #16
 8005650:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3307      	adds	r3, #7
 8005668:	4a10      	ldr	r2, [pc, #64]	; (80056ac <_DoInit+0xa8>)
 800566a:	6810      	ldr	r0, [r2, #0]
 800566c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800566e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <_DoInit+0xac>)
 8005676:	6810      	ldr	r0, [r2, #0]
 8005678:	6018      	str	r0, [r3, #0]
 800567a:	8891      	ldrh	r1, [r2, #4]
 800567c:	7992      	ldrb	r2, [r2, #6]
 800567e:	8099      	strh	r1, [r3, #4]
 8005680:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005682:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800568c:	f3bf 8f5f 	dmb	sy
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20014404 	.word	0x20014404
 80056a0:	080076f4 	.word	0x080076f4
 80056a4:	20012e40 	.word	0x20012e40
 80056a8:	20013240 	.word	0x20013240
 80056ac:	08007700 	.word	0x08007700
 80056b0:	08007704 	.word	0x08007704

080056b4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	; 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80056c0:	4b3e      	ldr	r3, [pc, #248]	; (80057bc <SEGGER_RTT_ReadNoLock+0x108>)
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <SEGGER_RTT_ReadNoLock+0x1e>
 80056ce:	f7ff ff99 	bl	8005604 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4613      	mov	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	3360      	adds	r3, #96	; 0x60
 80056de:	4a37      	ldr	r2, [pc, #220]	; (80057bc <SEGGER_RTT_ReadNoLock+0x108>)
 80056e0:	4413      	add	r3, r2
 80056e2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d92b      	bls.n	8005758 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4293      	cmp	r3, r2
 8005710:	bf28      	it	cs
 8005712:	4613      	movcs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	4413      	add	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	6939      	ldr	r1, [r7, #16]
 8005724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005726:	f001 ff21 	bl	800756c <memcpy>
    NumBytesRead += NumBytesRem;
 800572a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005750:	429a      	cmp	r2, r3
 8005752:	d101      	bne.n	8005758 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005754:	2300      	movs	r3, #0
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4293      	cmp	r3, r2
 8005766:	bf28      	it	cs
 8005768:	4613      	movcs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d019      	beq.n	80057a6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	4413      	add	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	6939      	ldr	r1, [r7, #16]
 8005780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005782:	f001 fef3 	bl	800756c <memcpy>
    NumBytesRead += NumBytesRem;
 8005786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800578e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800579e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3730      	adds	r7, #48	; 0x30
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20014404 	.word	0x20014404

080057c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80057dc:	f7ff ff12 	bl	8005604 <_DoInit>
  SEGGER_RTT_LOCK();
 80057e0:	f3ef 8311 	mrs	r3, BASEPRI
 80057e4:	f04f 0120 	mov.w	r1, #32
 80057e8:	f381 8811 	msr	BASEPRI, r1
 80057ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057ee:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80057f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	4613      	mov	r3, r2
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	440b      	add	r3, r1
 8005806:	3304      	adds	r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3301      	adds	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	429a      	cmp	r2, r3
 800581c:	dbeb      	blt.n	80057f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800581e:	e000      	b.n	8005822 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005820:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	429a      	cmp	r2, r3
 800582a:	da3f      	bge.n	80058ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800582c:	6939      	ldr	r1, [r7, #16]
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	4613      	mov	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4413      	add	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	440b      	add	r3, r1
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005840:	6939      	ldr	r1, [r7, #16]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	3304      	adds	r3, #4
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	440b      	add	r3, r1
 8005864:	3320      	adds	r3, #32
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800586a:	6939      	ldr	r1, [r7, #16]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	4613      	mov	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	440b      	add	r3, r1
 8005878:	3328      	adds	r3, #40	; 0x28
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800587e:	6939      	ldr	r1, [r7, #16]
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	3324      	adds	r3, #36	; 0x24
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005892:	6939      	ldr	r1, [r7, #16]
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	4613      	mov	r3, r2
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	440b      	add	r3, r1
 80058a0:	332c      	adds	r3, #44	; 0x2c
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058a6:	f3bf 8f5f 	dmb	sy
 80058aa:	e002      	b.n	80058b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80058b8:	69fb      	ldr	r3, [r7, #28]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20014404 	.word	0x20014404

080058c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80058d6:	4b33      	ldr	r3, [pc, #204]	; (80059a4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80058e4:	f7ff fe8e 	bl	8005604 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058e8:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80058ea:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	461a      	mov	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d24d      	bcs.n	8005994 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80058f8:	f3ef 8311 	mrs	r3, BASEPRI
 80058fc:	f04f 0120 	mov.w	r1, #32
 8005900:	f381 8811 	msr	BASEPRI, r1
 8005904:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d031      	beq.n	8005970 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	440b      	add	r3, r1
 800591a:	3360      	adds	r3, #96	; 0x60
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005920:	6979      	ldr	r1, [r7, #20]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	440b      	add	r3, r1
 800592e:	3364      	adds	r3, #100	; 0x64
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	440b      	add	r3, r1
 8005942:	3368      	adds	r3, #104	; 0x68
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	440b      	add	r3, r1
 8005956:	3370      	adds	r3, #112	; 0x70
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	4413      	add	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	440b      	add	r3, r1
 800596a:	336c      	adds	r3, #108	; 0x6c
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	440b      	add	r3, r1
 800597e:	3374      	adds	r3, #116	; 0x74
 8005980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005982:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005984:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e002      	b.n	800599a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800599a:	69fb      	ldr	r3, [r7, #28]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20014404 	.word	0x20014404

080059a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80059b8:	e002      	b.n	80059c0 <_EncodeStr+0x18>
    Len++;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3301      	adds	r3, #1
 80059be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f6      	bne.n	80059ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d901      	bls.n	80059d8 <_EncodeStr+0x30>
    Len = Limit;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2bfe      	cmp	r3, #254	; 0xfe
 80059dc:	d806      	bhi.n	80059ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	60fa      	str	r2, [r7, #12]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e011      	b.n	8005a10 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	60fa      	str	r2, [r7, #12]
 80059f2:	22ff      	movs	r2, #255	; 0xff
 80059f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	60fa      	str	r2, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	0a19      	lsrs	r1, r3, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	60fa      	str	r2, [r7, #12]
 8005a0c:	b2ca      	uxtb	r2, r1
 8005a0e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005a14:	e00a      	b.n	8005a2c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	1c53      	adds	r3, r2, #1
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	60f9      	str	r1, [r7, #12]
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]
    n++;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d3f0      	bcc.n	8005a16 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a62:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <_HandleIncomingPacket+0xe0>)
 8005a64:	7e1b      	ldrb	r3, [r3, #24]
 8005a66:	4618      	mov	r0, r3
 8005a68:	1cfb      	adds	r3, r7, #3
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f7ff fe21 	bl	80056b4 <SEGGER_RTT_ReadNoLock>
 8005a72:	4603      	mov	r3, r0
 8005a74:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dd54      	ble.n	8005b26 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d032      	beq.n	8005ae8 <_HandleIncomingPacket+0x8c>
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	dc42      	bgt.n	8005b0c <_HandleIncomingPacket+0xb0>
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	dc16      	bgt.n	8005ab8 <_HandleIncomingPacket+0x5c>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dd3e      	ble.n	8005b0c <_HandleIncomingPacket+0xb0>
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d83b      	bhi.n	8005b0c <_HandleIncomingPacket+0xb0>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <_HandleIncomingPacket+0x40>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005abf 	.word	0x08005abf
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acb 	.word	0x08005acb
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad7 	.word	0x08005ad7
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005ae3 	.word	0x08005ae3
 8005ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aba:	d036      	beq.n	8005b2a <_HandleIncomingPacket+0xce>
 8005abc:	e026      	b.n	8005b0c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005abe:	f000 ff43 	bl	8006948 <SEGGER_SYSVIEW_Start>
      break;
 8005ac2:	e037      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ac4:	f000 fffa 	bl	8006abc <SEGGER_SYSVIEW_Stop>
      break;
 8005ac8:	e034      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005aca:	f001 f9d3 	bl	8006e74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005ace:	e031      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ad0:	f001 f998 	bl	8006e04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ad4:	e02e      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ad6:	f001 f817 	bl	8006b08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005ada:	e02b      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005adc:	f001 fc66 	bl	80073ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005ae0:	e028      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005ae2:	f001 fc45 	bl	8007370 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ae6:	e025      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <_HandleIncomingPacket+0xe0>)
 8005aea:	7e1b      	ldrb	r3, [r3, #24]
 8005aec:	4618      	mov	r0, r3
 8005aee:	1cfb      	adds	r3, r7, #3
 8005af0:	2201      	movs	r2, #1
 8005af2:	4619      	mov	r1, r3
 8005af4:	f7ff fdde 	bl	80056b4 <SEGGER_RTT_ReadNoLock>
 8005af8:	4603      	mov	r3, r0
 8005afa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	dd15      	ble.n	8005b2e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fbb3 	bl	8007270 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005b0a:	e010      	b.n	8005b2e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	da0e      	bge.n	8005b32 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <_HandleIncomingPacket+0xe0>)
 8005b16:	7e1b      	ldrb	r3, [r3, #24]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	1cfb      	adds	r3, r7, #3
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f7ff fdc8 	bl	80056b4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005b24:	e005      	b.n	8005b32 <_HandleIncomingPacket+0xd6>
    }
  }
 8005b26:	bf00      	nop
 8005b28:	e004      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <_HandleIncomingPacket+0xd8>
      break;
 8005b32:	bf00      	nop
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20014258 	.word	0x20014258

08005b40 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b46:	2301      	movs	r3, #1
 8005b48:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b54:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	e00b      	b.n	8005b74 <_TrySendOverflowPacket+0x34>
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	09db      	lsrs	r3, r3, #7
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b7f      	cmp	r3, #127	; 0x7f
 8005b78:	d8f0      	bhi.n	8005b5c <_TrySendOverflowPacket+0x1c>
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b8a:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <_TrySendOverflowPacket+0xe0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b90:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	e00b      	b.n	8005bbc <_TrySendOverflowPacket+0x7c>
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1c59      	adds	r1, r3, #1
 8005bac:	6279      	str	r1, [r7, #36]	; 0x24
 8005bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	09db      	lsrs	r3, r3, #7
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc0:	d8f0      	bhi.n	8005ba4 <_TrySendOverflowPacket+0x64>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	627a      	str	r2, [r7, #36]	; 0x24
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7fa fb04 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005be8:	4603      	mov	r3, r0
 8005bea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e004      	b.n	8005c10 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <_TrySendOverflowPacket+0xdc>)
 8005c0e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005c10:	693b      	ldr	r3, [r7, #16]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3730      	adds	r7, #48	; 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20014258 	.word	0x20014258
 8005c20:	e0001004 	.word	0xe0001004

08005c24 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	; 0x28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005c30:	4b6c      	ldr	r3, [pc, #432]	; (8005de4 <_SendPacket+0x1c0>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d010      	beq.n	8005c5a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c38:	4b6a      	ldr	r3, [pc, #424]	; (8005de4 <_SendPacket+0x1c0>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80a3 	beq.w	8005d88 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c42:	4b68      	ldr	r3, [pc, #416]	; (8005de4 <_SendPacket+0x1c0>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d109      	bne.n	8005c5e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c4a:	f7ff ff79 	bl	8005b40 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c4e:	4b65      	ldr	r3, [pc, #404]	; (8005de4 <_SendPacket+0x1c0>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	f040 809a 	bne.w	8005d8c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005c58:	e001      	b.n	8005c5e <_SendPacket+0x3a>
    goto Send;
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <_SendPacket+0x3c>
Send:
 8005c5e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b1f      	cmp	r3, #31
 8005c64:	d809      	bhi.n	8005c7a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c66:	4b5f      	ldr	r3, [pc, #380]	; (8005de4 <_SendPacket+0x1c0>)
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 808b 	bne.w	8005d90 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b17      	cmp	r3, #23
 8005c7e:	d807      	bhi.n	8005c90 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e03d      	b.n	8005d0c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9c:	d912      	bls.n	8005cc4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	09da      	lsrs	r2, r3, #7
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	3a01      	subs	r2, #1
 8005cb6:	60fa      	str	r2, [r7, #12]
 8005cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e006      	b.n	8005cd2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d912      	bls.n	8005cfe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	09da      	lsrs	r2, r3, #7
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	60fa      	str	r2, [r7, #12]
 8005cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e006      	b.n	8005d0c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <_SendPacket+0x1c4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d12:	4b34      	ldr	r3, [pc, #208]	; (8005de4 <_SendPacket+0x1c0>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	623b      	str	r3, [r7, #32]
 8005d24:	e00b      	b.n	8005d3e <_SendPacket+0x11a>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	09db      	lsrs	r3, r3, #7
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	2b7f      	cmp	r3, #127	; 0x7f
 8005d42:	d8f0      	bhi.n	8005d26 <_SendPacket+0x102>
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	627a      	str	r2, [r7, #36]	; 0x24
 8005d4a:	6a3a      	ldr	r2, [r7, #32]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005d54:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <_SendPacket+0x1c0>)
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f7fa fa44 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d72:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <_SendPacket+0x1c0>)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	60d3      	str	r3, [r2, #12]
 8005d78:	e00b      	b.n	8005d92 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <_SendPacket+0x1c0>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <_SendPacket+0x1c0>)
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e004      	b.n	8005d92 <_SendPacket+0x16e>
    goto SendDone;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <_SendPacket+0x16e>
      goto SendDone;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <_SendPacket+0x16e>
      goto SendDone;
 8005d90:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <_SendPacket+0x1c0>)
 8005d94:	7e1b      	ldrb	r3, [r3, #24]
 8005d96:	4619      	mov	r1, r3
 8005d98:	4a14      	ldr	r2, [pc, #80]	; (8005dec <_SendPacket+0x1c8>)
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	440b      	add	r3, r1
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	336c      	adds	r3, #108	; 0x6c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <_SendPacket+0x1c0>)
 8005daa:	7e1b      	ldrb	r3, [r3, #24]
 8005dac:	4618      	mov	r0, r3
 8005dae:	490f      	ldr	r1, [pc, #60]	; (8005dec <_SendPacket+0x1c8>)
 8005db0:	4603      	mov	r3, r0
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4403      	add	r3, r0
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	440b      	add	r3, r1
 8005dba:	3370      	adds	r3, #112	; 0x70
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d00b      	beq.n	8005dda <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005dc2:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <_SendPacket+0x1c0>)
 8005dc4:	789b      	ldrb	r3, [r3, #2]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d107      	bne.n	8005dda <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <_SendPacket+0x1c0>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005dd0:	f7ff fe44 	bl	8005a5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <_SendPacket+0x1c0>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005dda:	bf00      	nop
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20014258 	.word	0x20014258
 8005de8:	e0001004 	.word	0xe0001004
 8005dec:	20014404 	.word	0x20014404

08005df0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	3301      	adds	r3, #1
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d80a      	bhi.n	8005e20 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	1c59      	adds	r1, r3, #1
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6051      	str	r1, [r2, #4]
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d15a      	bne.n	8005ede <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	e00b      	b.n	8005e62 <_StoreChar+0x72>
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	6279      	str	r1, [r7, #36]	; 0x24
 8005e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	09db      	lsrs	r3, r3, #7
 8005e60:	623b      	str	r3, [r7, #32]
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2b7f      	cmp	r3, #127	; 0x7f
 8005e66:	d8f0      	bhi.n	8005e4a <_StoreChar+0x5a>
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e00b      	b.n	8005e9a <_StoreChar+0xaa>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	61f9      	str	r1, [r7, #28]
 8005e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	09db      	lsrs	r3, r3, #7
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9e:	d8f0      	bhi.n	8005e82 <_StoreChar+0x92>
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	61fa      	str	r2, [r7, #28]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	221a      	movs	r2, #26
 8005eb6:	6939      	ldr	r1, [r7, #16]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff feb3 	bl	8005c24 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fdbd 	bl	8005a42 <_PreparePacket>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	611a      	str	r2, [r3, #16]
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3728      	adds	r7, #40	; 0x28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005efa:	2301      	movs	r3, #1
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005efe:	2301      	movs	r3, #1
 8005f00:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f02:	e007      	b.n	8005f14 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005f04:	6a3a      	ldr	r2, [r7, #32]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	623b      	str	r3, [r7, #32]
    Width++;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	3301      	adds	r3, #1
 8005f12:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d2f3      	bcs.n	8005f04 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d901      	bls.n	8005f28 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11f      	bne.n	8005f72 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01c      	beq.n	8005f72 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <_PrintUnsigned+0x66>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <_PrintUnsigned+0x66>
        c = '0';
 8005f48:	2330      	movs	r3, #48	; 0x30
 8005f4a:	76fb      	strb	r3, [r7, #27]
 8005f4c:	e001      	b.n	8005f52 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005f4e:	2320      	movs	r3, #32
 8005f50:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f52:	e007      	b.n	8005f64 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	3b01      	subs	r3, #1
 8005f58:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005f5a:	7efb      	ldrb	r3, [r7, #27]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff ff46 	bl	8005df0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <_PrintUnsigned+0x8a>
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3f0      	bcc.n	8005f54 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d903      	bls.n	8005f80 <_PrintUnsigned+0x98>
      NumDigits--;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	e009      	b.n	8005f94 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d200      	bcs.n	8005f94 <_PrintUnsigned+0xac>
        break;
 8005f92:	e005      	b.n	8005fa0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	fb02 f303 	mul.w	r3, r2, r3
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f9e:	e7e8      	b.n	8005f72 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005fb8:	4a15      	ldr	r2, [pc, #84]	; (8006010 <_PrintUnsigned+0x128>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff ff14 	bl	8005df0 <_StoreChar>
    Digit /= Base;
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e3      	bne.n	8005fa0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d011      	beq.n	8006006 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00e      	beq.n	8006006 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fe8:	e006      	b.n	8005ff8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	3b01      	subs	r3, #1
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fefc 	bl	8005df0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <_PrintUnsigned+0x11e>
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	429a      	cmp	r2, r3
 8006004:	d3f1      	bcc.n	8005fea <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006006:	bf00      	nop
 8006008:	3728      	adds	r7, #40	; 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	08007740 	.word	0x08007740

08006014 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	bfb8      	it	lt
 8006028:	425b      	neglt	r3, r3
 800602a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800602c:	2301      	movs	r3, #1
 800602e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006030:	e007      	b.n	8006042 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	fb92 f3f3 	sdiv	r3, r2, r3
 800603a:	613b      	str	r3, [r7, #16]
    Width++;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	3301      	adds	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	429a      	cmp	r2, r3
 8006048:	daf3      	bge.n	8006032 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	429a      	cmp	r2, r3
 8006050:	d901      	bls.n	8006056 <_PrintInt+0x42>
    Width = NumDigits;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <_PrintInt+0x5e>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	db04      	blt.n	800606c <_PrintInt+0x58>
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <_PrintInt+0x5e>
    FieldWidth--;
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	3b01      	subs	r3, #1
 8006070:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <_PrintInt+0x6e>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <_PrintInt+0x9c>
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d111      	bne.n	80060b0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006092:	e006      	b.n	80060a2 <_PrintInt+0x8e>
        FieldWidth--;
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	3b01      	subs	r3, #1
 8006098:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800609a:	2120      	movs	r1, #32
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fea7 	bl	8005df0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <_PrintInt+0x9c>
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3f1      	bcc.n	8006094 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da07      	bge.n	80060c6 <_PrintInt+0xb2>
    v = -v;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	425b      	negs	r3, r3
 80060ba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80060bc:	212d      	movs	r1, #45	; 0x2d
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fe96 	bl	8005df0 <_StoreChar>
 80060c4:	e008      	b.n	80060d8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80060d0:	212b      	movs	r1, #43	; 0x2b
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff fe8c 	bl	8005df0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d019      	beq.n	8006116 <_PrintInt+0x102>
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d114      	bne.n	8006116 <_PrintInt+0x102>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d111      	bne.n	8006116 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060f8:	e006      	b.n	8006108 <_PrintInt+0xf4>
        FieldWidth--;
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006100:	2130      	movs	r1, #48	; 0x30
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff fe74 	bl	8005df0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <_PrintInt+0x102>
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	429a      	cmp	r2, r3
 8006114:	d3f1      	bcc.n	80060fa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff fedf 	bl	8005ee8 <_PrintUnsigned>
}
 800612a:	bf00      	nop
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b098      	sub	sp, #96	; 0x60
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006140:	f3ef 8311 	mrs	r3, BASEPRI
 8006144:	f04f 0120 	mov.w	r1, #32
 8006148:	f381 8811 	msr	BASEPRI, r1
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
 800614e:	48b7      	ldr	r0, [pc, #732]	; (800642c <_VPrintTarget+0x2f8>)
 8006150:	f7ff fc77 	bl	8005a42 <_PreparePacket>
 8006154:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006156:	4bb5      	ldr	r3, [pc, #724]	; (800642c <_VPrintTarget+0x2f8>)
 8006158:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800617a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8183 	beq.w	800648a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006188:	2b25      	cmp	r3, #37	; 0x25
 800618a:	f040 8170 	bne.w	800646e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800618e:	2300      	movs	r3, #0
 8006190:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006192:	2301      	movs	r3, #1
 8006194:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800619e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061a2:	3b23      	subs	r3, #35	; 0x23
 80061a4:	2b0d      	cmp	r3, #13
 80061a6:	d83f      	bhi.n	8006228 <_VPrintTarget+0xf4>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <_VPrintTarget+0x7c>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006229 	.word	0x08006229
 80061b8:	08006229 	.word	0x08006229
 80061bc:	08006229 	.word	0x08006229
 80061c0:	08006229 	.word	0x08006229
 80061c4:	08006229 	.word	0x08006229
 80061c8:	08006229 	.word	0x08006229
 80061cc:	08006229 	.word	0x08006229
 80061d0:	08006209 	.word	0x08006209
 80061d4:	08006229 	.word	0x08006229
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	08006229 	.word	0x08006229
 80061e0:	08006229 	.word	0x08006229
 80061e4:	080061f9 	.word	0x080061f9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e01a      	b.n	800622e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80061f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fa:	f043 0302 	orr.w	r3, r3, #2
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e012      	b.n	800622e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620a:	f043 0304 	orr.w	r3, r3, #4
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e00a      	b.n	800622e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621a:	f043 0308 	orr.w	r3, r3, #8
 800621e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e002      	b.n	800622e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006228:	2300      	movs	r3, #0
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	bf00      	nop
        }
      } while (v);
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1b0      	bne.n	8006196 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006234:	2300      	movs	r3, #0
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006244:	2b2f      	cmp	r3, #47	; 0x2f
 8006246:	d912      	bls.n	800626e <_VPrintTarget+0x13a>
 8006248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800624c:	2b39      	cmp	r3, #57	; 0x39
 800624e:	d80e      	bhi.n	800626e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	461a      	mov	r2, r3
 8006262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006266:	4413      	add	r3, r2
 8006268:	3b30      	subs	r3, #48	; 0x30
 800626a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800626c:	e7e4      	b.n	8006238 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800626e:	2300      	movs	r3, #0
 8006270:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800627a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800627e:	2b2e      	cmp	r3, #46	; 0x2e
 8006280:	d11d      	bne.n	80062be <_VPrintTarget+0x18a>
        sFormat++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006294:	2b2f      	cmp	r3, #47	; 0x2f
 8006296:	d912      	bls.n	80062be <_VPrintTarget+0x18a>
 8006298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800629c:	2b39      	cmp	r3, #57	; 0x39
 800629e:	d80e      	bhi.n	80062be <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80062a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	461a      	mov	r2, r3
 80062b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062b6:	4413      	add	r3, r2
 80062b8:	3b30      	subs	r3, #48	; 0x30
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80062bc:	e7e4      	b.n	8006288 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80062c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ca:	2b6c      	cmp	r3, #108	; 0x6c
 80062cc:	d003      	beq.n	80062d6 <_VPrintTarget+0x1a2>
 80062ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062d2:	2b68      	cmp	r3, #104	; 0x68
 80062d4:	d107      	bne.n	80062e6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80062e4:	e7ef      	b.n	80062c6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80062e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ea:	2b25      	cmp	r3, #37	; 0x25
 80062ec:	f000 80b3 	beq.w	8006456 <_VPrintTarget+0x322>
 80062f0:	2b25      	cmp	r3, #37	; 0x25
 80062f2:	f2c0 80b7 	blt.w	8006464 <_VPrintTarget+0x330>
 80062f6:	2b78      	cmp	r3, #120	; 0x78
 80062f8:	f300 80b4 	bgt.w	8006464 <_VPrintTarget+0x330>
 80062fc:	2b58      	cmp	r3, #88	; 0x58
 80062fe:	f2c0 80b1 	blt.w	8006464 <_VPrintTarget+0x330>
 8006302:	3b58      	subs	r3, #88	; 0x58
 8006304:	2b20      	cmp	r3, #32
 8006306:	f200 80ad 	bhi.w	8006464 <_VPrintTarget+0x330>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <_VPrintTarget+0x1dc>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006407 	.word	0x08006407
 8006314:	08006465 	.word	0x08006465
 8006318:	08006465 	.word	0x08006465
 800631c:	08006465 	.word	0x08006465
 8006320:	08006465 	.word	0x08006465
 8006324:	08006465 	.word	0x08006465
 8006328:	08006465 	.word	0x08006465
 800632c:	08006465 	.word	0x08006465
 8006330:	08006465 	.word	0x08006465
 8006334:	08006465 	.word	0x08006465
 8006338:	08006465 	.word	0x08006465
 800633c:	08006395 	.word	0x08006395
 8006340:	080063bb 	.word	0x080063bb
 8006344:	08006465 	.word	0x08006465
 8006348:	08006465 	.word	0x08006465
 800634c:	08006465 	.word	0x08006465
 8006350:	08006465 	.word	0x08006465
 8006354:	08006465 	.word	0x08006465
 8006358:	08006465 	.word	0x08006465
 800635c:	08006465 	.word	0x08006465
 8006360:	08006465 	.word	0x08006465
 8006364:	08006465 	.word	0x08006465
 8006368:	08006465 	.word	0x08006465
 800636c:	08006465 	.word	0x08006465
 8006370:	08006431 	.word	0x08006431
 8006374:	08006465 	.word	0x08006465
 8006378:	08006465 	.word	0x08006465
 800637c:	08006465 	.word	0x08006465
 8006380:	08006465 	.word	0x08006465
 8006384:	080063e1 	.word	0x080063e1
 8006388:	08006465 	.word	0x08006465
 800638c:	08006465 	.word	0x08006465
 8006390:	08006407 	.word	0x08006407
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	1d19      	adds	r1, r3, #4
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6011      	str	r1, [r2, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80063a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80063a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fd1c 	bl	8005df0 <_StoreChar>
        break;
 80063b8:	e055      	b.n	8006466 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	1d19      	adds	r1, r3, #4
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6011      	str	r1, [r2, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80063c8:	f107 0014 	add.w	r0, r7, #20
 80063cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d6:	220a      	movs	r2, #10
 80063d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063da:	f7ff fe1b 	bl	8006014 <_PrintInt>
        break;
 80063de:	e042      	b.n	8006466 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	1d19      	adds	r1, r3, #4
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80063ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063f0:	f107 0014 	add.w	r0, r7, #20
 80063f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fe:	220a      	movs	r2, #10
 8006400:	f7ff fd72 	bl	8005ee8 <_PrintUnsigned>
        break;
 8006404:	e02f      	b.n	8006466 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	1d19      	adds	r1, r3, #4
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6011      	str	r1, [r2, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006414:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006416:	f107 0014 	add.w	r0, r7, #20
 800641a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	2210      	movs	r2, #16
 8006426:	f7ff fd5f 	bl	8005ee8 <_PrintUnsigned>
        break;
 800642a:	e01c      	b.n	8006466 <_VPrintTarget+0x332>
 800642c:	20014288 	.word	0x20014288
      case 'p':
        v = va_arg(*pParamList, int);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	1d19      	adds	r1, r3, #4
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6011      	str	r1, [r2, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800643e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006440:	f107 0014 	add.w	r0, r7, #20
 8006444:	2300      	movs	r3, #0
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	2308      	movs	r3, #8
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	2308      	movs	r3, #8
 800644e:	2210      	movs	r2, #16
 8006450:	f7ff fd4a 	bl	8005ee8 <_PrintUnsigned>
        break;
 8006454:	e007      	b.n	8006466 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006456:	f107 0314 	add.w	r3, r7, #20
 800645a:	2125      	movs	r1, #37	; 0x25
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fcc7 	bl	8005df0 <_StoreChar>
        break;
 8006462:	e000      	b.n	8006466 <_VPrintTarget+0x332>
      default:
        break;
 8006464:	bf00      	nop
      }
      sFormat++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e007      	b.n	800647e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800646e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006472:	f107 0314 	add.w	r3, r7, #20
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fcb9 	bl	8005df0 <_StoreChar>
    }
  } while (*sFormat);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f47f ae72 	bne.w	800616c <_VPrintTarget+0x38>
 8006488:	e000      	b.n	800648c <_VPrintTarget+0x358>
      break;
 800648a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d041      	beq.n	8006516 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	643b      	str	r3, [r7, #64]	; 0x40
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a2:	e00b      	b.n	80064bc <_VPrintTarget+0x388>
 80064a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	6439      	str	r1, [r7, #64]	; 0x40
 80064ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064be:	2b7f      	cmp	r3, #127	; 0x7f
 80064c0:	d8f0      	bhi.n	80064a4 <_VPrintTarget+0x370>
 80064c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	643a      	str	r2, [r7, #64]	; 0x40
 80064c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d6:	2300      	movs	r3, #0
 80064d8:	637b      	str	r3, [r7, #52]	; 0x34
 80064da:	e00b      	b.n	80064f4 <_VPrintTarget+0x3c0>
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	1c59      	adds	r1, r3, #1
 80064e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	09db      	lsrs	r3, r3, #7
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	2b7f      	cmp	r3, #127	; 0x7f
 80064f8:	d8f0      	bhi.n	80064dc <_VPrintTarget+0x3a8>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8006500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	69b9      	ldr	r1, [r7, #24]
 800650e:	221a      	movs	r2, #26
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fb87 	bl	8005c24 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800651c:	bf00      	nop
 800651e:	3758      	adds	r7, #88	; 0x58
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006532:	2300      	movs	r3, #0
 8006534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006538:	4918      	ldr	r1, [pc, #96]	; (800659c <SEGGER_SYSVIEW_Init+0x78>)
 800653a:	4819      	ldr	r0, [pc, #100]	; (80065a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800653c:	f7ff f940 	bl	80057c0 <SEGGER_RTT_AllocUpBuffer>
 8006540:	4603      	mov	r3, r0
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006546:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006548:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 800654a:	785a      	ldrb	r2, [r3, #1]
 800654c:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 800654e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006552:	7e1b      	ldrb	r3, [r3, #24]
 8006554:	4618      	mov	r0, r3
 8006556:	2300      	movs	r3, #0
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2308      	movs	r3, #8
 800655c:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <SEGGER_SYSVIEW_Init+0x84>)
 800655e:	4910      	ldr	r1, [pc, #64]	; (80065a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006560:	f7ff f9b2 	bl	80058c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006564:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006566:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800656a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800656c:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <SEGGER_SYSVIEW_Init+0x88>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0c      	ldr	r2, [pc, #48]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006572:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006574:	4a0b      	ldr	r2, [pc, #44]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006580:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006586:	4a07      	ldr	r2, [pc, #28]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <SEGGER_SYSVIEW_Init+0x80>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20013250 	.word	0x20013250
 80065a0:	0800770c 	.word	0x0800770c
 80065a4:	20014258 	.word	0x20014258
 80065a8:	20014250 	.word	0x20014250
 80065ac:	e0001004 	.word	0xe0001004

080065b0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80065b8:	4a04      	ldr	r2, [pc, #16]	; (80065cc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6113      	str	r3, [r2, #16]
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20014258 	.word	0x20014258

080065d0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065d8:	f3ef 8311 	mrs	r3, BASEPRI
 80065dc:	f04f 0120 	mov.w	r1, #32
 80065e0:	f381 8811 	msr	BASEPRI, r1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	4808      	ldr	r0, [pc, #32]	; (8006608 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80065e8:	f7ff fa2b 	bl	8005a42 <_PreparePacket>
 80065ec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	68b8      	ldr	r0, [r7, #8]
 80065f4:	f7ff fb16 	bl	8005c24 <_SendPacket>
  RECORD_END();
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20014288 	.word	0x20014288

0800660c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006616:	f3ef 8311 	mrs	r3, BASEPRI
 800661a:	f04f 0120 	mov.w	r1, #32
 800661e:	f381 8811 	msr	BASEPRI, r1
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	4816      	ldr	r0, [pc, #88]	; (8006680 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006626:	f7ff fa0c 	bl	8005a42 <_PreparePacket>
 800662a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e00b      	b.n	8006652 <SEGGER_SYSVIEW_RecordU32+0x46>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	b2da      	uxtb	r2, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	1c59      	adds	r1, r3, #1
 8006642:	61f9      	str	r1, [r7, #28]
 8006644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	09db      	lsrs	r3, r3, #7
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b7f      	cmp	r3, #127	; 0x7f
 8006656:	d8f0      	bhi.n	800663a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	61fa      	str	r2, [r7, #28]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	6938      	ldr	r0, [r7, #16]
 800666e:	f7ff fad9 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f383 8811 	msr	BASEPRI, r3
}
 8006678:	bf00      	nop
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20014288 	.word	0x20014288

08006684 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b08c      	sub	sp, #48	; 0x30
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006690:	f3ef 8311 	mrs	r3, BASEPRI
 8006694:	f04f 0120 	mov.w	r1, #32
 8006698:	f381 8811 	msr	BASEPRI, r1
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	4825      	ldr	r0, [pc, #148]	; (8006734 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80066a0:	f7ff f9cf 	bl	8005a42 <_PreparePacket>
 80066a4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b2:	e00b      	b.n	80066cc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	09db      	lsrs	r3, r3, #7
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2b7f      	cmp	r3, #127	; 0x7f
 80066d0:	d8f0      	bhi.n	80066b4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	623b      	str	r3, [r7, #32]
 80066ea:	e00b      	b.n	8006704 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	6279      	str	r1, [r7, #36]	; 0x24
 80066f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	09db      	lsrs	r3, r3, #7
 8006702:	623b      	str	r3, [r7, #32]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2b7f      	cmp	r3, #127	; 0x7f
 8006708:	d8f0      	bhi.n	80066ec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	627a      	str	r2, [r7, #36]	; 0x24
 8006710:	6a3a      	ldr	r2, [r7, #32]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	69b8      	ldr	r0, [r7, #24]
 8006720:	f7ff fa80 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f383 8811 	msr	BASEPRI, r3
}
 800672a:	bf00      	nop
 800672c:	3730      	adds	r7, #48	; 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20014288 	.word	0x20014288

08006738 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	; 0x38
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006746:	f3ef 8311 	mrs	r3, BASEPRI
 800674a:	f04f 0120 	mov.w	r1, #32
 800674e:	f381 8811 	msr	BASEPRI, r1
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	4832      	ldr	r0, [pc, #200]	; (8006820 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006756:	f7ff f974 	bl	8005a42 <_PreparePacket>
 800675a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	633b      	str	r3, [r7, #48]	; 0x30
 8006768:	e00b      	b.n	8006782 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	1c59      	adds	r1, r3, #1
 8006772:	6379      	str	r1, [r7, #52]	; 0x34
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	633b      	str	r3, [r7, #48]	; 0x30
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2b7f      	cmp	r3, #127	; 0x7f
 8006786:	d8f0      	bhi.n	800676a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	637a      	str	r2, [r7, #52]	; 0x34
 800678e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	623b      	str	r3, [r7, #32]
 80067d8:	e00b      	b.n	80067f2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	6279      	str	r1, [r7, #36]	; 0x24
 80067e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	09db      	lsrs	r3, r3, #7
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b7f      	cmp	r3, #127	; 0x7f
 80067f6:	d8f0      	bhi.n	80067da <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	627a      	str	r2, [r7, #36]	; 0x24
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6979      	ldr	r1, [r7, #20]
 800680c:	69b8      	ldr	r0, [r7, #24]
 800680e:	f7ff fa09 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f383 8811 	msr	BASEPRI, r3
}
 8006818:	bf00      	nop
 800681a:	3738      	adds	r7, #56	; 0x38
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20014288 	.word	0x20014288

08006824 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b090      	sub	sp, #64	; 0x40
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006832:	f3ef 8311 	mrs	r3, BASEPRI
 8006836:	f04f 0120 	mov.w	r1, #32
 800683a:	f381 8811 	msr	BASEPRI, r1
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	4840      	ldr	r0, [pc, #256]	; (8006944 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006842:	f7ff f8fe 	bl	8005a42 <_PreparePacket>
 8006846:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	63bb      	str	r3, [r7, #56]	; 0x38
 8006854:	e00b      	b.n	800686e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	b2da      	uxtb	r2, r3
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	1c59      	adds	r1, r3, #1
 800685e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	2b7f      	cmp	r3, #127	; 0x7f
 8006872:	d8f0      	bhi.n	8006856 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800687a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
 800688c:	e00b      	b.n	80068a6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	b2da      	uxtb	r2, r3
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	6379      	str	r1, [r7, #52]	; 0x34
 8006898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	09db      	lsrs	r3, r3, #7
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2b7f      	cmp	r3, #127	; 0x7f
 80068aa:	d8f0      	bhi.n	800688e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	637a      	str	r2, [r7, #52]	; 0x34
 80068b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c4:	e00b      	b.n	80068de <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	1c59      	adds	r1, r3, #1
 80068ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	09db      	lsrs	r3, r3, #7
 80068dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	2b7f      	cmp	r3, #127	; 0x7f
 80068e2:	d8f0      	bhi.n	80068c6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
 80068f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	e00b      	b.n	8006916 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	6279      	str	r1, [r7, #36]	; 0x24
 8006908:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	2b7f      	cmp	r3, #127	; 0x7f
 800691a:	d8f0      	bhi.n	80068fe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	627a      	str	r2, [r7, #36]	; 0x24
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	69b8      	ldr	r0, [r7, #24]
 8006932:	f7ff f977 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f383 8811 	msr	BASEPRI, r3
}
 800693c:	bf00      	nop
 800693e:	3740      	adds	r7, #64	; 0x40
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20014288 	.word	0x20014288

08006948 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	; 0x30
 800694c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800694e:	4b58      	ldr	r3, [pc, #352]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006954:	f3ef 8311 	mrs	r3, BASEPRI
 8006958:	f04f 0120 	mov.w	r1, #32
 800695c:	f381 8811 	msr	BASEPRI, r1
 8006960:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006962:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	220a      	movs	r2, #10
 8006968:	4952      	ldr	r1, [pc, #328]	; (8006ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 800696a:	4618      	mov	r0, r3
 800696c:	f7f9 fc40 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006976:	200a      	movs	r0, #10
 8006978:	f7ff fe2a 	bl	80065d0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	484b      	ldr	r0, [pc, #300]	; (8006ab8 <SEGGER_SYSVIEW_Start+0x170>)
 800698c:	f7ff f859 	bl	8005a42 <_PreparePacket>
 8006990:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800699a:	4b45      	ldr	r3, [pc, #276]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a0:	e00b      	b.n	80069ba <SEGGER_SYSVIEW_Start+0x72>
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	1c59      	adds	r1, r3, #1
 80069aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	09db      	lsrs	r3, r3, #7
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	2b7f      	cmp	r3, #127	; 0x7f
 80069be:	d8f0      	bhi.n	80069a2 <SEGGER_SYSVIEW_Start+0x5a>
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	4b36      	ldr	r3, [pc, #216]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_Start+0xac>
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6279      	str	r1, [r7, #36]	; 0x24
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_Start+0x94>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006a00:	6a3a      	ldr	r2, [r7, #32]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_Start+0xe6>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	61f9      	str	r1, [r7, #28]
 8006a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b7f      	cmp	r3, #127	; 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_Start+0xce>
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	61fa      	str	r2, [r7, #28]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	e00b      	b.n	8006a66 <SEGGER_SYSVIEW_Start+0x11e>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	6179      	str	r1, [r7, #20]
 8006a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	09db      	lsrs	r3, r3, #7
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6a:	d8f0      	bhi.n	8006a4e <SEGGER_SYSVIEW_Start+0x106>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	617a      	str	r2, [r7, #20]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a7c:	2218      	movs	r2, #24
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff f8cf 	bl	8005c24 <_SendPacket>
      RECORD_END();
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a8c:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a9a:	f000 f9eb 	bl	8006e74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a9e:	f000 f9b1 	bl	8006e04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006aa2:	f000 fc83 	bl	80073ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006aa6:	bf00      	nop
 8006aa8:	3730      	adds	r7, #48	; 0x30
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20014258 	.word	0x20014258
 8006ab4:	08007734 	.word	0x08007734
 8006ab8:	20014288 	.word	0x20014288

08006abc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac6:	f04f 0120 	mov.w	r1, #32
 8006aca:	f381 8811 	msr	BASEPRI, r1
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	480b      	ldr	r0, [pc, #44]	; (8006b00 <SEGGER_SYSVIEW_Stop+0x44>)
 8006ad2:	f7fe ffb6 	bl	8005a42 <_PreparePacket>
 8006ad6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ae0:	220b      	movs	r2, #11
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6838      	ldr	r0, [r7, #0]
 8006ae6:	f7ff f89d 	bl	8005c24 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f383 8811 	msr	BASEPRI, r3
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20014288 	.word	0x20014288
 8006b04:	20014258 	.word	0x20014258

08006b08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	; 0x30
 8006b0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b12:	f04f 0120 	mov.w	r1, #32
 8006b16:	f381 8811 	msr	BASEPRI, r1
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	4845      	ldr	r0, [pc, #276]	; (8006c34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b1e:	f7fe ff90 	bl	8005a42 <_PreparePacket>
 8006b22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2c:	4b42      	ldr	r3, [pc, #264]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b32:	e00b      	b.n	8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	09db      	lsrs	r3, r3, #7
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b50:	d8f0      	bhi.n	8006b34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
 8006b66:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	e00b      	b.n	8006b86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	6279      	str	r1, [r7, #36]	; 0x24
 8006b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	09db      	lsrs	r3, r3, #7
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8a:	d8f0      	bhi.n	8006b6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	627a      	str	r2, [r7, #36]	; 0x24
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e00b      	b.n	8006bc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	61f9      	str	r1, [r7, #28]
 8006bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	09db      	lsrs	r3, r3, #7
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc4:	d8f0      	bhi.n	8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	61fa      	str	r2, [r7, #28]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	e00b      	b.n	8006bf8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	6179      	str	r1, [r7, #20]
 8006bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	09db      	lsrs	r3, r3, #7
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfc:	d8f0      	bhi.n	8006be0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	617a      	str	r2, [r7, #20]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c0e:	2218      	movs	r2, #24
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68b8      	ldr	r0, [r7, #8]
 8006c14:	f7ff f806 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	4798      	blx	r3
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3730      	adds	r7, #48	; 0x30
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20014288 	.word	0x20014288
 8006c38:	20014258 	.word	0x20014258

08006c3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b092      	sub	sp, #72	; 0x48
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006c44:	f3ef 8311 	mrs	r3, BASEPRI
 8006c48:	f04f 0120 	mov.w	r1, #32
 8006c4c:	f381 8811 	msr	BASEPRI, r1
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	486a      	ldr	r0, [pc, #424]	; (8006dfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006c54:	f7fe fef5 	bl	8005a42 <_PreparePacket>
 8006c58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	647b      	str	r3, [r7, #68]	; 0x44
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b66      	ldr	r3, [pc, #408]	; (8006e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c6e:	e00b      	b.n	8006c88 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c76:	1c59      	adds	r1, r3, #1
 8006c78:	6479      	str	r1, [r7, #68]	; 0x44
 8006c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c84:	09db      	lsrs	r3, r3, #7
 8006c86:	643b      	str	r3, [r7, #64]	; 0x40
 8006c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8c:	d8f0      	bhi.n	8006c70 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	647a      	str	r2, [r7, #68]	; 0x44
 8006c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ca8:	e00b      	b.n	8006cc2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	09db      	lsrs	r3, r3, #7
 8006cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc6:	d8f0      	bhi.n	8006caa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7fe fe61 	bl	80059a8 <_EncodeStr>
 8006ce6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006ce8:	2209      	movs	r2, #9
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	6938      	ldr	r0, [r7, #16]
 8006cee:	f7fe ff99 	bl	8005c24 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b40      	ldr	r3, [pc, #256]	; (8006e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	633b      	str	r3, [r7, #48]	; 0x30
 8006d06:	e00b      	b.n	8006d20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	1c59      	adds	r1, r3, #1
 8006d10:	6379      	str	r1, [r7, #52]	; 0x34
 8006d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	09db      	lsrs	r3, r3, #7
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2b7f      	cmp	r3, #127	; 0x7f
 8006d24:	d8f0      	bhi.n	8006d08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	637a      	str	r2, [r7, #52]	; 0x34
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d40:	e00b      	b.n	8006d5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	1c59      	adds	r1, r3, #1
 8006d4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	09db      	lsrs	r3, r3, #7
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5e:	d8f0      	bhi.n	8006d42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	623b      	str	r3, [r7, #32]
 8006d7a:	e00b      	b.n	8006d94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	1c59      	adds	r1, r3, #1
 8006d84:	6279      	str	r1, [r7, #36]	; 0x24
 8006d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	09db      	lsrs	r3, r3, #7
 8006d92:	623b      	str	r3, [r7, #32]
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	2b7f      	cmp	r3, #127	; 0x7f
 8006d98:	d8f0      	bhi.n	8006d7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8006da0:	6a3a      	ldr	r2, [r7, #32]
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e00b      	b.n	8006dcc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	61f9      	str	r1, [r7, #28]
 8006dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	09db      	lsrs	r3, r3, #7
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd0:	d8f0      	bhi.n	8006db4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	61fa      	str	r2, [r7, #28]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006de2:	2215      	movs	r2, #21
 8006de4:	68f9      	ldr	r1, [r7, #12]
 8006de6:	6938      	ldr	r0, [r7, #16]
 8006de8:	f7fe ff1c 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f383 8811 	msr	BASEPRI, r3
}
 8006df2:	bf00      	nop
 8006df4:	3748      	adds	r7, #72	; 0x48
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20014288 	.word	0x20014288
 8006e00:	20014258 	.word	0x20014258

08006e04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e1a:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4798      	blx	r3
  }
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20014258 	.word	0x20014258

08006e2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e34:	f3ef 8311 	mrs	r3, BASEPRI
 8006e38:	f04f 0120 	mov.w	r1, #32
 8006e3c:	f381 8811 	msr	BASEPRI, r1
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	480b      	ldr	r0, [pc, #44]	; (8006e70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006e44:	f7fe fdfd 	bl	8005a42 <_PreparePacket>
 8006e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	6938      	ldr	r0, [r7, #16]
 8006e50:	f7fe fdaa 	bl	80059a8 <_EncodeStr>
 8006e54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006e56:	220e      	movs	r2, #14
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f7fe fee2 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f383 8811 	msr	BASEPRI, r3
}
 8006e66:	bf00      	nop
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20014288 	.word	0x20014288

08006e74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01a      	beq.n	8006eb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e82:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4798      	blx	r3
 8006e94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e98:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	000a      	movs	r2, r1
 8006ea8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006eaa:	4613      	mov	r3, r2
 8006eac:	461a      	mov	r2, r3
 8006eae:	4621      	mov	r1, r4
 8006eb0:	200d      	movs	r0, #13
 8006eb2:	f7ff fbe7 	bl	8006684 <SEGGER_SYSVIEW_RecordU32x2>
 8006eb6:	e006      	b.n	8006ec6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	200c      	movs	r0, #12
 8006ec0:	f7ff fba4 	bl	800660c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd90      	pop	{r4, r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20014258 	.word	0x20014258
 8006ed4:	e0001004 	.word	0xe0001004

08006ed8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ede:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee2:	f04f 0120 	mov.w	r1, #32
 8006ee6:	f381 8811 	msr	BASEPRI, r1
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	4819      	ldr	r0, [pc, #100]	; (8006f54 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006eee:	f7fe fda8 	bl	8005a42 <_PreparePacket>
 8006ef2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ef8:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f00:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	e00b      	b.n	8006f24 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	1c59      	adds	r1, r3, #1
 8006f14:	6179      	str	r1, [r7, #20]
 8006f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	09db      	lsrs	r3, r3, #7
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b7f      	cmp	r3, #127	; 0x7f
 8006f28:	d8f0      	bhi.n	8006f0c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	617a      	str	r2, [r7, #20]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f7fe fe70 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f383 8811 	msr	BASEPRI, r3
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20014288 	.word	0x20014288
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f62:	f3ef 8311 	mrs	r3, BASEPRI
 8006f66:	f04f 0120 	mov.w	r1, #32
 8006f6a:	f381 8811 	msr	BASEPRI, r1
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	4807      	ldr	r0, [pc, #28]	; (8006f90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f72:	f7fe fd66 	bl	8005a42 <_PreparePacket>
 8006f76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006f78:	2203      	movs	r2, #3
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6838      	ldr	r0, [r7, #0]
 8006f7e:	f7fe fe51 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f383 8811 	msr	BASEPRI, r3
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20014288 	.word	0x20014288

08006f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f9e:	f04f 0120 	mov.w	r1, #32
 8006fa2:	f381 8811 	msr	BASEPRI, r1
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	4807      	ldr	r0, [pc, #28]	; (8006fc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006faa:	f7fe fd4a 	bl	8005a42 <_PreparePacket>
 8006fae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006fb0:	2212      	movs	r2, #18
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f7fe fe35 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f383 8811 	msr	BASEPRI, r3
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20014288 	.word	0x20014288

08006fcc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd6:	f04f 0120 	mov.w	r1, #32
 8006fda:	f381 8811 	msr	BASEPRI, r1
 8006fde:	607b      	str	r3, [r7, #4]
 8006fe0:	4807      	ldr	r0, [pc, #28]	; (8007000 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006fe2:	f7fe fd2e 	bl	8005a42 <_PreparePacket>
 8006fe6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006fe8:	2211      	movs	r2, #17
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6838      	ldr	r0, [r7, #0]
 8006fee:	f7fe fe19 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f383 8811 	msr	BASEPRI, r3
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20014288 	.word	0x20014288

08007004 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800700c:	f3ef 8311 	mrs	r3, BASEPRI
 8007010:	f04f 0120 	mov.w	r1, #32
 8007014:	f381 8811 	msr	BASEPRI, r1
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	4819      	ldr	r0, [pc, #100]	; (8007080 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800701c:	f7fe fd11 	bl	8005a42 <_PreparePacket>
 8007020:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e00b      	b.n	8007052 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	b2da      	uxtb	r2, r3
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	1c59      	adds	r1, r3, #1
 8007042:	61f9      	str	r1, [r7, #28]
 8007044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	09db      	lsrs	r3, r3, #7
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b7f      	cmp	r3, #127	; 0x7f
 8007056:	d8f0      	bhi.n	800703a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007068:	2208      	movs	r2, #8
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	6938      	ldr	r0, [r7, #16]
 800706e:	f7fe fdd9 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f383 8811 	msr	BASEPRI, r3
}
 8007078:	bf00      	nop
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20014288 	.word	0x20014288
 8007084:	20014258 	.word	0x20014258

08007088 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007090:	f3ef 8311 	mrs	r3, BASEPRI
 8007094:	f04f 0120 	mov.w	r1, #32
 8007098:	f381 8811 	msr	BASEPRI, r1
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	4819      	ldr	r0, [pc, #100]	; (8007104 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80070a0:	f7fe fccf 	bl	8005a42 <_PreparePacket>
 80070a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070aa:	4b17      	ldr	r3, [pc, #92]	; (8007108 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e00b      	b.n	80070d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	1c59      	adds	r1, r3, #1
 80070c6:	61f9      	str	r1, [r7, #28]
 80070c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	09db      	lsrs	r3, r3, #7
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b7f      	cmp	r3, #127	; 0x7f
 80070da:	d8f0      	bhi.n	80070be <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	61fa      	str	r2, [r7, #28]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80070ec:	2204      	movs	r2, #4
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	6938      	ldr	r0, [r7, #16]
 80070f2:	f7fe fd97 	bl	8005c24 <_SendPacket>
  RECORD_END();
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f383 8811 	msr	BASEPRI, r3
}
 80070fc:	bf00      	nop
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20014288 	.word	0x20014288
 8007108:	20014258 	.word	0x20014258

0800710c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007114:	f3ef 8311 	mrs	r3, BASEPRI
 8007118:	f04f 0120 	mov.w	r1, #32
 800711c:	f381 8811 	msr	BASEPRI, r1
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	4819      	ldr	r0, [pc, #100]	; (8007188 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007124:	f7fe fc8d 	bl	8005a42 <_PreparePacket>
 8007128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	e00b      	b.n	800715a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	61f9      	str	r1, [r7, #28]
 800714c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	09db      	lsrs	r3, r3, #7
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b7f      	cmp	r3, #127	; 0x7f
 800715e:	d8f0      	bhi.n	8007142 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	61fa      	str	r2, [r7, #28]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007170:	2206      	movs	r2, #6
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	6938      	ldr	r0, [r7, #16]
 8007176:	f7fe fd55 	bl	8005c24 <_SendPacket>
  RECORD_END();
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f383 8811 	msr	BASEPRI, r3
}
 8007180:	bf00      	nop
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20014288 	.word	0x20014288
 800718c:	20014258 	.word	0x20014258

08007190 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800719a:	f3ef 8311 	mrs	r3, BASEPRI
 800719e:	f04f 0120 	mov.w	r1, #32
 80071a2:	f381 8811 	msr	BASEPRI, r1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	4827      	ldr	r0, [pc, #156]	; (8007248 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80071aa:	f7fe fc4a 	bl	8005a42 <_PreparePacket>
 80071ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071b4:	4b25      	ldr	r3, [pc, #148]	; (800724c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	e00b      	b.n	80071e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1c59      	adds	r1, r3, #1
 80071d0:	6279      	str	r1, [r7, #36]	; 0x24
 80071d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	09db      	lsrs	r3, r3, #7
 80071de:	623b      	str	r3, [r7, #32]
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	2b7f      	cmp	r3, #127	; 0x7f
 80071e4:	d8f0      	bhi.n	80071c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	627a      	str	r2, [r7, #36]	; 0x24
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	e00b      	b.n	8007218 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	1c59      	adds	r1, r3, #1
 8007208:	61f9      	str	r1, [r7, #28]
 800720a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	09db      	lsrs	r3, r3, #7
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b7f      	cmp	r3, #127	; 0x7f
 800721c:	d8f0      	bhi.n	8007200 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	61fa      	str	r2, [r7, #28]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800722e:	2207      	movs	r2, #7
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	6938      	ldr	r0, [r7, #16]
 8007234:	f7fe fcf6 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
 8007240:	3728      	adds	r7, #40	; 0x28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20014288 	.word	0x20014288
 800724c:	20014258 	.word	0x20014258

08007250 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	1ad3      	subs	r3, r2, r3
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	20014258 	.word	0x20014258

08007270 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b08c      	sub	sp, #48	; 0x30
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800727a:	4b3b      	ldr	r3, [pc, #236]	; (8007368 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d06d      	beq.n	800735e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007282:	4b39      	ldr	r3, [pc, #228]	; (8007368 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007288:	2300      	movs	r3, #0
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
 800728c:	e008      	b.n	80072a0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	3301      	adds	r3, #1
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d3f2      	bcc.n	800728e <SEGGER_SYSVIEW_SendModule+0x1e>
 80072a8:	e000      	b.n	80072ac <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80072aa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d055      	beq.n	800735e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072b2:	f3ef 8311 	mrs	r3, BASEPRI
 80072b6:	f04f 0120 	mov.w	r1, #32
 80072ba:	f381 8811 	msr	BASEPRI, r1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	482a      	ldr	r0, [pc, #168]	; (800736c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80072c2:	f7fe fbbe 	bl	8005a42 <_PreparePacket>
 80072c6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	e00b      	b.n	80072ee <SEGGER_SYSVIEW_SendModule+0x7e>
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1c59      	adds	r1, r3, #1
 80072de:	6279      	str	r1, [r7, #36]	; 0x24
 80072e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	09db      	lsrs	r3, r3, #7
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2b7f      	cmp	r3, #127	; 0x7f
 80072f2:	d8f0      	bhi.n	80072d6 <SEGGER_SYSVIEW_SendModule+0x66>
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	627a      	str	r2, [r7, #36]	; 0x24
 80072fa:	6a3a      	ldr	r2, [r7, #32]
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e00b      	b.n	8007328 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	61f9      	str	r1, [r7, #28]
 800731a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	09db      	lsrs	r3, r3, #7
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b7f      	cmp	r3, #127	; 0x7f
 800732c:	d8f0      	bhi.n	8007310 <SEGGER_SYSVIEW_SendModule+0xa0>
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	61fa      	str	r2, [r7, #28]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2280      	movs	r2, #128	; 0x80
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7fe fb2e 	bl	80059a8 <_EncodeStr>
 800734c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800734e:	2216      	movs	r2, #22
 8007350:	68f9      	ldr	r1, [r7, #12]
 8007352:	6938      	ldr	r0, [r7, #16]
 8007354:	f7fe fc66 	bl	8005c24 <_SendPacket>
      RECORD_END();
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800735e:	bf00      	nop
 8007360:	3730      	adds	r7, #48	; 0x30
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20014280 	.word	0x20014280
 800736c:	20014288 	.word	0x20014288

08007370 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00f      	beq.n	800739e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f2      	bne.n	8007384 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20014280 	.word	0x20014280

080073ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80073b2:	f3ef 8311 	mrs	r3, BASEPRI
 80073b6:	f04f 0120 	mov.w	r1, #32
 80073ba:	f381 8811 	msr	BASEPRI, r1
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	4817      	ldr	r0, [pc, #92]	; (8007420 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80073c2:	f7fe fb3e 	bl	8005a42 <_PreparePacket>
 80073c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	4b14      	ldr	r3, [pc, #80]	; (8007424 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	e00b      	b.n	80073f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1c59      	adds	r1, r3, #1
 80073e0:	6179      	str	r1, [r7, #20]
 80073e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	09db      	lsrs	r3, r3, #7
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b7f      	cmp	r3, #127	; 0x7f
 80073f4:	d8f0      	bhi.n	80073d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	617a      	str	r2, [r7, #20]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007406:	221b      	movs	r2, #27
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	68b8      	ldr	r0, [r7, #8]
 800740c:	f7fe fc0a 	bl	8005c24 <_SendPacket>
  RECORD_END();
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f383 8811 	msr	BASEPRI, r3
}
 8007416:	bf00      	nop
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20014288 	.word	0x20014288
 8007424:	20014284 	.word	0x20014284

08007428 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007428:	b40f      	push	{r0, r1, r2, r3}
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007430:	f107 0314 	add.w	r3, r7, #20
 8007434:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007436:	1d3b      	adds	r3, r7, #4
 8007438:	461a      	mov	r2, r3
 800743a:	2100      	movs	r1, #0
 800743c:	6938      	ldr	r0, [r7, #16]
 800743e:	f7fe fe79 	bl	8006134 <_VPrintTarget>
  va_end(ParamList);
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800744c:	b004      	add	sp, #16
 800744e:	4770      	bx	lr

08007450 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007458:	f3ef 8311 	mrs	r3, BASEPRI
 800745c:	f04f 0120 	mov.w	r1, #32
 8007460:	f381 8811 	msr	BASEPRI, r1
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	4827      	ldr	r0, [pc, #156]	; (8007504 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007468:	f7fe faeb 	bl	8005a42 <_PreparePacket>
 800746c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	6938      	ldr	r0, [r7, #16]
 8007474:	f7fe fa98 	bl	80059a8 <_EncodeStr>
 8007478:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
 800747e:	2301      	movs	r3, #1
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	e00b      	b.n	800749c <SEGGER_SYSVIEW_Warn+0x4c>
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	1c59      	adds	r1, r3, #1
 800748c:	6279      	str	r1, [r7, #36]	; 0x24
 800748e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	09db      	lsrs	r3, r3, #7
 800749a:	623b      	str	r3, [r7, #32]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	2b7f      	cmp	r3, #127	; 0x7f
 80074a0:	d8f0      	bhi.n	8007484 <SEGGER_SYSVIEW_Warn+0x34>
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	627a      	str	r2, [r7, #36]	; 0x24
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e00b      	b.n	80074d4 <SEGGER_SYSVIEW_Warn+0x84>
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	61f9      	str	r1, [r7, #28]
 80074c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	09db      	lsrs	r3, r3, #7
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b7f      	cmp	r3, #127	; 0x7f
 80074d8:	d8f0      	bhi.n	80074bc <SEGGER_SYSVIEW_Warn+0x6c>
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	61fa      	str	r2, [r7, #28]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80074ea:	221a      	movs	r2, #26
 80074ec:	68f9      	ldr	r1, [r7, #12]
 80074ee:	6938      	ldr	r0, [r7, #16]
 80074f0:	f7fe fb98 	bl	8005c24 <_SendPacket>
  RECORD_END();
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f383 8811 	msr	BASEPRI, r3
}
 80074fa:	bf00      	nop
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20014288 	.word	0x20014288

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	; (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	; (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	; (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	; (800754c <__libc_init_array+0x44>)
 800751c:	f000 f83c 	bl	8007598 <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	08007758 	.word	0x08007758
 8007544:	08007758 	.word	0x08007758
 8007548:	08007758 	.word	0x08007758
 800754c:	0800775c 	.word	0x0800775c

08007550 <memcmp>:
 8007550:	b530      	push	{r4, r5, lr}
 8007552:	3901      	subs	r1, #1
 8007554:	2400      	movs	r4, #0
 8007556:	42a2      	cmp	r2, r4
 8007558:	d101      	bne.n	800755e <memcmp+0xe>
 800755a:	2000      	movs	r0, #0
 800755c:	e005      	b.n	800756a <memcmp+0x1a>
 800755e:	5d03      	ldrb	r3, [r0, r4]
 8007560:	3401      	adds	r4, #1
 8007562:	5d0d      	ldrb	r5, [r1, r4]
 8007564:	42ab      	cmp	r3, r5
 8007566:	d0f6      	beq.n	8007556 <memcmp+0x6>
 8007568:	1b58      	subs	r0, r3, r5
 800756a:	bd30      	pop	{r4, r5, pc}

0800756c <memcpy>:
 800756c:	440a      	add	r2, r1
 800756e:	4291      	cmp	r1, r2
 8007570:	f100 33ff 	add.w	r3, r0, #4294967295
 8007574:	d100      	bne.n	8007578 <memcpy+0xc>
 8007576:	4770      	bx	lr
 8007578:	b510      	push	{r4, lr}
 800757a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007582:	4291      	cmp	r1, r2
 8007584:	d1f9      	bne.n	800757a <memcpy+0xe>
 8007586:	bd10      	pop	{r4, pc}

08007588 <memset>:
 8007588:	4402      	add	r2, r0
 800758a:	4603      	mov	r3, r0
 800758c:	4293      	cmp	r3, r2
 800758e:	d100      	bne.n	8007592 <memset+0xa>
 8007590:	4770      	bx	lr
 8007592:	f803 1b01 	strb.w	r1, [r3], #1
 8007596:	e7f9      	b.n	800758c <memset+0x4>

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
