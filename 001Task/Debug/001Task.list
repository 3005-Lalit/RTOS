
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000761c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007970  08007970  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000144ac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014524  20014524  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a7db  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003601  00000000  00000000  0003a883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  0003f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a25  00000000  00000000  00040450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016091  00000000  00000000  00066e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7998  00000000  00000000  0007cf06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016489e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055bc  00000000  00000000  001648f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077b4 	.word	0x080077b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080077b4 	.word	0x080077b4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2001446c 	.word	0x2001446c
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b96e 	b.w	8000624 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468c      	mov	ip, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8083 	bne.w	8000476 <__udivmoddi4+0x116>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d947      	bls.n	8000406 <__udivmoddi4+0xa6>
 8000376:	fab2 f282 	clz	r2, r2
 800037a:	b142      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037c:	f1c2 0020 	rsb	r0, r2, #32
 8000380:	fa24 f000 	lsr.w	r0, r4, r0
 8000384:	4091      	lsls	r1, r2
 8000386:	4097      	lsls	r7, r2
 8000388:	ea40 0c01 	orr.w	ip, r0, r1
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbbc f6f8 	udiv	r6, ip, r8
 8000398:	fa1f fe87 	uxth.w	lr, r7
 800039c:	fb08 c116 	mls	r1, r8, r6, ip
 80003a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a4:	fb06 f10e 	mul.w	r1, r6, lr
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b2:	f080 8119 	bcs.w	80005e8 <__udivmoddi4+0x288>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8116 	bls.w	80005e8 <__udivmoddi4+0x288>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8105 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f240 8102 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003e8:	3802      	subs	r0, #2
 80003ea:	443c      	add	r4, r7
 80003ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	2600      	movs	r6, #0
 80003f6:	b11d      	cbz	r5, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000400:	4631      	mov	r1, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	b902      	cbnz	r2, 800040a <__udivmoddi4+0xaa>
 8000408:	deff      	udf	#255	; 0xff
 800040a:	fab2 f282 	clz	r2, r2
 800040e:	2a00      	cmp	r2, #0
 8000410:	d150      	bne.n	80004b4 <__udivmoddi4+0x154>
 8000412:	1bcb      	subs	r3, r1, r7
 8000414:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000418:	fa1f f887 	uxth.w	r8, r7
 800041c:	2601      	movs	r6, #1
 800041e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000422:	0c21      	lsrs	r1, r4, #16
 8000424:	fb0e 331c 	mls	r3, lr, ip, r3
 8000428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042c:	fb08 f30c 	mul.w	r3, r8, ip
 8000430:	428b      	cmp	r3, r1
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000434:	1879      	adds	r1, r7, r1
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0xe2>
 800043c:	428b      	cmp	r3, r1
 800043e:	f200 80e9 	bhi.w	8000614 <__udivmoddi4+0x2b4>
 8000442:	4684      	mov	ip, r0
 8000444:	1ac9      	subs	r1, r1, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000450:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x10c>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x10a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80d9 	bhi.w	800061c <__udivmoddi4+0x2bc>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e7bf      	b.n	80003f6 <__udivmoddi4+0x96>
 8000476:	428b      	cmp	r3, r1
 8000478:	d909      	bls.n	800048e <__udivmoddi4+0x12e>
 800047a:	2d00      	cmp	r5, #0
 800047c:	f000 80b1 	beq.w	80005e2 <__udivmoddi4+0x282>
 8000480:	2600      	movs	r6, #0
 8000482:	e9c5 0100 	strd	r0, r1, [r5]
 8000486:	4630      	mov	r0, r6
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	fab3 f683 	clz	r6, r3
 8000492:	2e00      	cmp	r6, #0
 8000494:	d14a      	bne.n	800052c <__udivmoddi4+0x1cc>
 8000496:	428b      	cmp	r3, r1
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x140>
 800049a:	4282      	cmp	r2, r0
 800049c:	f200 80b8 	bhi.w	8000610 <__udivmoddi4+0x2b0>
 80004a0:	1a84      	subs	r4, r0, r2
 80004a2:	eb61 0103 	sbc.w	r1, r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	468c      	mov	ip, r1
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d0a8      	beq.n	8000400 <__udivmoddi4+0xa0>
 80004ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80004b2:	e7a5      	b.n	8000400 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f603 	lsr.w	r6, r0, r3
 80004bc:	4097      	lsls	r7, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c6:	40d9      	lsrs	r1, r3
 80004c8:	4330      	orrs	r0, r6
 80004ca:	0c03      	lsrs	r3, r0, #16
 80004cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004d0:	fa1f f887 	uxth.w	r8, r7
 80004d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004dc:	fb06 f108 	mul.w	r1, r6, r8
 80004e0:	4299      	cmp	r1, r3
 80004e2:	fa04 f402 	lsl.w	r4, r4, r2
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x19c>
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ee:	f080 808d 	bcs.w	800060c <__udivmoddi4+0x2ac>
 80004f2:	4299      	cmp	r1, r3
 80004f4:	f240 808a 	bls.w	800060c <__udivmoddi4+0x2ac>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	443b      	add	r3, r7
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b281      	uxth	r1, r0
 8000500:	fbb3 f0fe 	udiv	r0, r3, lr
 8000504:	fb0e 3310 	mls	r3, lr, r0, r3
 8000508:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050c:	fb00 f308 	mul.w	r3, r0, r8
 8000510:	428b      	cmp	r3, r1
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x1c4>
 8000514:	1879      	adds	r1, r7, r1
 8000516:	f100 3cff 	add.w	ip, r0, #4294967295
 800051a:	d273      	bcs.n	8000604 <__udivmoddi4+0x2a4>
 800051c:	428b      	cmp	r3, r1
 800051e:	d971      	bls.n	8000604 <__udivmoddi4+0x2a4>
 8000520:	3802      	subs	r0, #2
 8000522:	4439      	add	r1, r7
 8000524:	1acb      	subs	r3, r1, r3
 8000526:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800052a:	e778      	b.n	800041e <__udivmoddi4+0xbe>
 800052c:	f1c6 0c20 	rsb	ip, r6, #32
 8000530:	fa03 f406 	lsl.w	r4, r3, r6
 8000534:	fa22 f30c 	lsr.w	r3, r2, ip
 8000538:	431c      	orrs	r4, r3
 800053a:	fa20 f70c 	lsr.w	r7, r0, ip
 800053e:	fa01 f306 	lsl.w	r3, r1, r6
 8000542:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000546:	fa21 f10c 	lsr.w	r1, r1, ip
 800054a:	431f      	orrs	r7, r3
 800054c:	0c3b      	lsrs	r3, r7, #16
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fa1f f884 	uxth.w	r8, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800055e:	fb09 fa08 	mul.w	sl, r9, r8
 8000562:	458a      	cmp	sl, r1
 8000564:	fa02 f206 	lsl.w	r2, r2, r6
 8000568:	fa00 f306 	lsl.w	r3, r0, r6
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x220>
 800056e:	1861      	adds	r1, r4, r1
 8000570:	f109 30ff 	add.w	r0, r9, #4294967295
 8000574:	d248      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 8000576:	458a      	cmp	sl, r1
 8000578:	d946      	bls.n	8000608 <__udivmoddi4+0x2a8>
 800057a:	f1a9 0902 	sub.w	r9, r9, #2
 800057e:	4421      	add	r1, r4
 8000580:	eba1 010a 	sub.w	r1, r1, sl
 8000584:	b2bf      	uxth	r7, r7
 8000586:	fbb1 f0fe 	udiv	r0, r1, lr
 800058a:	fb0e 1110 	mls	r1, lr, r0, r1
 800058e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000592:	fb00 f808 	mul.w	r8, r0, r8
 8000596:	45b8      	cmp	r8, r7
 8000598:	d907      	bls.n	80005aa <__udivmoddi4+0x24a>
 800059a:	19e7      	adds	r7, r4, r7
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295
 80005a0:	d22e      	bcs.n	8000600 <__udivmoddi4+0x2a0>
 80005a2:	45b8      	cmp	r8, r7
 80005a4:	d92c      	bls.n	8000600 <__udivmoddi4+0x2a0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4427      	add	r7, r4
 80005aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ae:	eba7 0708 	sub.w	r7, r7, r8
 80005b2:	fba0 8902 	umull	r8, r9, r0, r2
 80005b6:	454f      	cmp	r7, r9
 80005b8:	46c6      	mov	lr, r8
 80005ba:	4649      	mov	r1, r9
 80005bc:	d31a      	bcc.n	80005f4 <__udivmoddi4+0x294>
 80005be:	d017      	beq.n	80005f0 <__udivmoddi4+0x290>
 80005c0:	b15d      	cbz	r5, 80005da <__udivmoddi4+0x27a>
 80005c2:	ebb3 020e 	subs.w	r2, r3, lr
 80005c6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ce:	40f2      	lsrs	r2, r6
 80005d0:	ea4c 0202 	orr.w	r2, ip, r2
 80005d4:	40f7      	lsrs	r7, r6
 80005d6:	e9c5 2700 	strd	r2, r7, [r5]
 80005da:	2600      	movs	r6, #0
 80005dc:	4631      	mov	r1, r6
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e70b      	b.n	8000400 <__udivmoddi4+0xa0>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0x60>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6fd      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f0:	4543      	cmp	r3, r8
 80005f2:	d2e5      	bcs.n	80005c0 <__udivmoddi4+0x260>
 80005f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f8:	eb69 0104 	sbc.w	r1, r9, r4
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7df      	b.n	80005c0 <__udivmoddi4+0x260>
 8000600:	4608      	mov	r0, r1
 8000602:	e7d2      	b.n	80005aa <__udivmoddi4+0x24a>
 8000604:	4660      	mov	r0, ip
 8000606:	e78d      	b.n	8000524 <__udivmoddi4+0x1c4>
 8000608:	4681      	mov	r9, r0
 800060a:	e7b9      	b.n	8000580 <__udivmoddi4+0x220>
 800060c:	4666      	mov	r6, ip
 800060e:	e775      	b.n	80004fc <__udivmoddi4+0x19c>
 8000610:	4630      	mov	r0, r6
 8000612:	e74a      	b.n	80004aa <__udivmoddi4+0x14a>
 8000614:	f1ac 0c02 	sub.w	ip, ip, #2
 8000618:	4439      	add	r1, r7
 800061a:	e713      	b.n	8000444 <__udivmoddi4+0xe4>
 800061c:	3802      	subs	r0, #2
 800061e:	443c      	add	r4, r7
 8000620:	e724      	b.n	800046c <__udivmoddi4+0x10c>
 8000622:	bf00      	nop

08000624 <__aeabi_idiv0>:
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fc61 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f851 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8bf 	bl	80007b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable CYCCNT counter
  DWT_CTRL |= ( 1 << 0 );
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <main+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <main+0x94>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]

 // SEGGER_UART_init(250000);

  SEGGER_SYSVIEW_Conf();
 8000646:	f004 fb25 	bl	8004c94 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800064a:	f005 fe47 	bl	80062dc <SEGGER_SYSVIEW_Start>

  status = xTaskCreate (task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2302      	movs	r3, #2
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <main+0x98>)
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	4919      	ldr	r1, [pc, #100]	; (80006c4 <main+0x9c>)
 800065e:	481a      	ldr	r0, [pc, #104]	; (80006c8 <main+0xa0>)
 8000660:	f002 fca2 	bl	8002fa8 <xTaskCreate>
 8000664:	6178      	str	r0, [r7, #20]
  configASSERT (status == pdPASS);
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d00a      	beq.n	8000682 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000670:	f383 8811 	msr	BASEPRI, r3
 8000674:	f3bf 8f6f 	isb	sy
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067e:	bf00      	nop
 8000680:	e7fe      	b.n	8000680 <main+0x58>


  status = xTaskCreate (task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <main+0xa4>)
 800068c:	22c8      	movs	r2, #200	; 0xc8
 800068e:	4910      	ldr	r1, [pc, #64]	; (80006d0 <main+0xa8>)
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <main+0xac>)
 8000692:	f002 fc89 	bl	8002fa8 <xTaskCreate>
 8000696:	6178      	str	r0, [r7, #20]
  configASSERT (status == pdPASS);
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d00a      	beq.n	80006b4 <main+0x8c>
        __asm volatile
 800069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	60fb      	str	r3, [r7, #12]
    }
 80006b0:	bf00      	nop
 80006b2:	e7fe      	b.n	80006b2 <main+0x8a>

  //start the scheduler

  vTaskStartScheduler();
 80006b4:	f002 fdce 	bl	8003254 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x90>
 80006ba:	bf00      	nop
 80006bc:	e0001000 	.word	0xe0001000
 80006c0:	080077cc 	.word	0x080077cc
 80006c4:	080077e4 	.word	0x080077e4
 80006c8:	08000c91 	.word	0x08000c91
 80006cc:	080077ec 	.word	0x080077ec
 80006d0:	08007804 	.word	0x08007804
 80006d4:	08000ccd 	.word	0x08000ccd

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fc1a 	bl	8006f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <SystemClock_Config+0xd8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <SystemClock_Config+0xdc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800074c:	23b4      	movs	r3, #180	; 0xb4
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 ff03 	bl	8001568 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 fae0 	bl	8000d2c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f000 feac 	bl	80014c8 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000776:	f000 fad9 	bl	8000d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2105      	movs	r1, #5
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f95d 	bl	8001a58 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007a4:	f000 fac2 	bl	8000d2c <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	; 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
 80007d2:	4bb2      	ldr	r3, [pc, #712]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4ab1      	ldr	r2, [pc, #708]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4baf      	ldr	r3, [pc, #700]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	4bab      	ldr	r3, [pc, #684]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4aaa      	ldr	r2, [pc, #680]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4ba8      	ldr	r3, [pc, #672]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4ba4      	ldr	r3, [pc, #656]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4aa3      	ldr	r2, [pc, #652]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b9d      	ldr	r3, [pc, #628]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a9c      	ldr	r2, [pc, #624]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b9a      	ldr	r3, [pc, #616]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b96      	ldr	r3, [pc, #600]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a95      	ldr	r2, [pc, #596]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b93      	ldr	r3, [pc, #588]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b8f      	ldr	r3, [pc, #572]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a8e      	ldr	r2, [pc, #568]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b88      	ldr	r3, [pc, #544]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a87      	ldr	r2, [pc, #540]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b85      	ldr	r3, [pc, #532]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b81      	ldr	r3, [pc, #516]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a80      	ldr	r2, [pc, #512]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2116      	movs	r1, #22
 80008b2:	487b      	ldr	r0, [pc, #492]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 80008b4:	f000 fdee 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4879      	ldr	r0, [pc, #484]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80008be:	f000 fde9 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008c8:	4877      	ldr	r0, [pc, #476]	; (8000aa8 <MX_GPIO_Init+0x2f0>)
 80008ca:	f000 fde3 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008d4:	4875      	ldr	r0, [pc, #468]	; (8000aac <MX_GPIO_Init+0x2f4>)
 80008d6:	f000 fddd 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ec:	230c      	movs	r3, #12
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	486e      	ldr	r0, [pc, #440]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 80008f8:	f000 fc20 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80008fc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800090e:	2305      	movs	r3, #5
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	4865      	ldr	r0, [pc, #404]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 800091a:	f000 fc0f 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000930:	230e      	movs	r3, #14
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	485d      	ldr	r0, [pc, #372]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 800093c:	f000 fbfe 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000940:	2301      	movs	r3, #1
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000950:	230c      	movs	r3, #12
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4851      	ldr	r0, [pc, #324]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 800095c:	f000 fbee 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000960:	2316      	movs	r3, #22
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 8000978:	f000 fbe0 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800097c:	f248 0307 	movw	r3, #32775	; 0x8007
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4844      	ldr	r0, [pc, #272]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 8000994:	f000 fbd2 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000998:	f641 0358 	movw	r3, #6232	; 0x1858
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009aa:	230e      	movs	r3, #14
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80009b6:	f000 fbc1 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80009d2:	f000 fbb3 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 80009ec:	f000 fba6 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009f0:	2303      	movs	r3, #3
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a00:	2309      	movs	r3, #9
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482a      	ldr	r0, [pc, #168]	; (8000ab4 <MX_GPIO_Init+0x2fc>)
 8000a0c:	f000 fb96 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0x2fc>)
 8000a24:	f000 fb8a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a28:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4819      	ldr	r0, [pc, #100]	; (8000aac <MX_GPIO_Init+0x2f4>)
 8000a46:	f000 fb79 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a4a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_GPIO_Init+0x300>)
 8000a68:	f000 fb68 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a6c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7e:	230e      	movs	r3, #14
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0x2fc>)
 8000a8a:	f000 fb57 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a8e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a98:	e010      	b.n	8000abc <MX_GPIO_Init+0x304>
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	486b      	ldr	r0, [pc, #428]	; (8000c7c <MX_GPIO_Init+0x4c4>)
 8000ad0:	f000 fb34 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4864      	ldr	r0, [pc, #400]	; (8000c7c <MX_GPIO_Init+0x4c4>)
 8000aea:	f000 fb27 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aee:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b00:	230c      	movs	r3, #12
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	485d      	ldr	r0, [pc, #372]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000b0c:	f000 fb16 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4856      	ldr	r0, [pc, #344]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000b26:	f000 fb09 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	484f      	ldr	r0, [pc, #316]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000b44:	f000 fafa 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b48:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5a:	230e      	movs	r3, #14
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4847      	ldr	r0, [pc, #284]	; (8000c84 <MX_GPIO_Init+0x4cc>)
 8000b66:	f000 fae9 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b6a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b7c:	230e      	movs	r3, #14
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4840      	ldr	r0, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x4d0>)
 8000b88:	f000 fad8 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4837      	ldr	r0, [pc, #220]	; (8000c88 <MX_GPIO_Init+0x4d0>)
 8000baa:	f000 fac7 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_GPIO_Init+0x4d4>)
 8000bcc:	f000 fab6 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be2:	2307      	movs	r3, #7
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4827      	ldr	r0, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x4d4>)
 8000bee:	f000 faa5 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bf2:	2348      	movs	r3, #72	; 0x48
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c02:	230e      	movs	r3, #14
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481c      	ldr	r0, [pc, #112]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000c0e:	f000 fa95 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c24:	2309      	movs	r3, #9
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x4cc>)
 8000c30:	f000 fa84 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_GPIO_Init+0x4cc>)
 8000c4e:	f000 fa75 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c52:	2360      	movs	r3, #96	; 0x60
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c62:	230c      	movs	r3, #12
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MX_GPIO_Init+0x4c4>)
 8000c6e:	f000 fa65 	bl	800113c <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	; 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	40021800 	.word	0x40021800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <task1_handler>:

/* USER CODE BEGIN 4 */

void task1_handler (void* parameters)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09c      	sub	sp, #112	; 0x70
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	char msg[100];
    while(1)
	{
		//printf("%s\r\n",(char*)parameters);
    	snprintf (msg,100,"%s\r\n",(char*)parameters);
 8000c98:	f107 000c 	add.w	r0, r7, #12
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <task1_handler+0x34>)
 8000ca0:	2164      	movs	r1, #100	; 0x64
 8000ca2:	f006 f945 	bl	8006f30 <sniprintf>
    	SEGGER_SYSVIEW_PrintfTarget(msg);  // to print msg in systemview target windows
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 f888 	bl	8006dc0 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();			//use to give control to other task
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <task1_handler+0x38>)
 8000cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	f3bf 8f4f 	dsb	sy
 8000cbc:	f3bf 8f6f 	isb	sy
    	snprintf (msg,100,"%s\r\n",(char*)parameters);
 8000cc0:	e7ea      	b.n	8000c98 <task1_handler+0x8>
 8000cc2:	bf00      	nop
 8000cc4:	0800780c 	.word	0x0800780c
 8000cc8:	e000ed04 	.word	0xe000ed04

08000ccc <task2_handler>:
            exit then have the task call vTaskDelete( NULL ) to ensure
            its exit is clean. */
            vTaskDelete( NULL );
}
void task2_handler (void* parameters)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09c      	sub	sp, #112	; 0x70
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	char msg[100];
    while(1)
	{
		//printf("%s\r\n",(char*)parameters);
    	snprintf (msg,100,"%s\r\n",(char*)parameters);
 8000cd4:	f107 000c 	add.w	r0, r7, #12
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <task2_handler+0x34>)
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	f006 f927 	bl	8006f30 <sniprintf>
    	SEGGER_SYSVIEW_PrintfTarget(msg);  // to print msg in systemview target windows
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 f86a 	bl	8006dc0 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();			//use to give control to other task
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <task2_handler+0x38>)
 8000cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	f3bf 8f4f 	dsb	sy
 8000cf8:	f3bf 8f6f 	isb	sy
    	snprintf (msg,100,"%s\r\n",(char*)parameters);
 8000cfc:	e7ea      	b.n	8000cd4 <task2_handler+0x8>
 8000cfe:	bf00      	nop
 8000d00:	0800780c 	.word	0x0800780c
 8000d04:	e000ed04 	.word	0xe000ed04

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 f90d 	bl	8000f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40000c00 	.word	0x40000c00

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d76:	f003 fbd7 	bl	8004528 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 f9a3 	bl	80010e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000da2:	2032      	movs	r0, #50	; 0x32
 8000da4:	f000 f9bc 	bl	8001120 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_InitTick+0xa4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_InitTick+0xa4>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_InitTick+0xa4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc4:	f107 0210 	add.w	r2, r7, #16
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 f82a 	bl	8001e28 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dd4:	f001 f814 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <HAL_InitTick+0xa8>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	0c9b      	lsrs	r3, r3, #18
 8000de8:	3b01      	subs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_InitTick+0xac>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <HAL_InitTick+0xb0>)
 8000df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_InitTick+0xac>)
 8000df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_InitTick+0xac>)
 8000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfe:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_InitTick+0xac>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_InitTick+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <HAL_InitTick+0xac>)
 8000e0e:	f001 f83d 	bl	8001e8c <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d104      	bne.n	8000e22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_InitTick+0xac>)
 8000e1a:	f001 f891 	bl	8001f40 <HAL_TIM_Base_Start_IT>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3730      	adds	r7, #48	; 0x30
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	431bde83 	.word	0x431bde83
 8000e34:	200143e0 	.word	0x200143e0
 8000e38:	40000c00 	.word	0x40000c00

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM5_IRQHandler+0x10>)
 8000e6e:	f001 f8d7 	bl	8002020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200143e0 	.word	0x200143e0

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f005 ffe7 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fba9 	bl	8000628 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ed8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ee4:	08007978 	.word	0x08007978
  ldr r2, =_sbss
 8000ee8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000eec:	20014524 	.word	0x20014524

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f8d8 	bl	80010d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff30 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff ff06 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20014428 	.word	0x20014428

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20014428 	.word	0x20014428

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff4c 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fa:	f7ff ff61 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 80010fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff ffb1 	bl	800106c <NVIC_EncodePriority>
 800110a:	4602      	mov	r2, r0
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff80 	bl	8001018 <__NVIC_SetPriority>
}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff54 	bl	8000fdc <__NVIC_EnableIRQ>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e177      	b.n	8001448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8166 	bne.w	8001442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80c0 	beq.w	8001442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b63      	ldr	r3, [pc, #396]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a61      	ldr	r2, [pc, #388]	; (8001464 <HAL_GPIO_Init+0x328>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d037      	beq.n	800137a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a57      	ldr	r2, [pc, #348]	; (800146c <HAL_GPIO_Init+0x330>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a55      	ldr	r2, [pc, #340]	; (8001474 <HAL_GPIO_Init+0x338>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_GPIO_Init+0x33c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a53      	ldr	r2, [pc, #332]	; (800147c <HAL_GPIO_Init+0x340>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x22a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_GPIO_Init+0x344>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	; (8001484 <HAL_GPIO_Init+0x348>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_GPIO_Init+0x34c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	; (800148c <HAL_GPIO_Init+0x350>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x21a>
 8001352:	2309      	movs	r3, #9
 8001354:	e012      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001356:	230a      	movs	r3, #10
 8001358:	e010      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135a:	2308      	movs	r3, #8
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135e:	2307      	movs	r3, #7
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x240>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x328>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_GPIO_Init+0x354>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013be:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_GPIO_Init+0x354>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae84 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40022000 	.word	0x40022000
 800148c:	40022400 	.word	0x40022400
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_PWREx_EnableOverDrive+0x90>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_PWREx_EnableOverDrive+0x90>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_PWREx_EnableOverDrive+0x90>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_PWREx_EnableOverDrive+0x94>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff fd34 	bl	8000f60 <HAL_GetTick>
 80014f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014fa:	e009      	b.n	8001510 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014fc:	f7ff fd30 	bl	8000f60 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800150a:	d901      	bls.n	8001510 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e01f      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_PWREx_EnableOverDrive+0x98>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d1ee      	bne.n	80014fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff fd1c 	bl	8000f60 <HAL_GetTick>
 8001528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152a:	e009      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800152c:	f7ff fd18 	bl	8000f60 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800153a:	d901      	bls.n	8001540 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e007      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_PWREx_EnableOverDrive+0x98>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800154c:	d1ee      	bne.n	800152c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	420e0040 	.word	0x420e0040
 8001560:	40007000 	.word	0x40007000
 8001564:	420e0044 	.word	0x420e0044

08001568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e264      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d075      	beq.n	8001672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001586:	4ba3      	ldr	r3, [pc, #652]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b04      	cmp	r3, #4
 8001590:	d00c      	beq.n	80015ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	4b9d      	ldr	r3, [pc, #628]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4b99      	ldr	r3, [pc, #612]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d05b      	beq.n	8001670 <HAL_RCC_OscConfig+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d157      	bne.n	8001670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e23f      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x74>
 80015ce:	4b91      	ldr	r3, [pc, #580]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a90      	ldr	r2, [pc, #576]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a87      	ldr	r2, [pc, #540]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a83      	ldr	r2, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a80      	ldr	r2, [pc, #512]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc9e 	bl	8000f60 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fc9a 	bl	8000f60 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e204      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xc0>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fc8a 	bl	8000f60 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fc86 	bl	8000f60 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1f0      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0xe8>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1c4      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4952      	ldr	r1, [pc, #328]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e03a      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fc3f 	bl	8000f60 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc3b 	bl	8000f60 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1a5      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4940      	ldr	r1, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fc1e 	bl	8000f60 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fc1a 	bl	8000f60 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e184      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d030      	beq.n	80017b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fbfe 	bl	8000f60 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fbfa 	bl	8000f60 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e164      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x200>
 8001786:	e015      	b.n	80017b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fbe7 	bl	8000f60 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fbe3 	bl	8000f60 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e14d      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a0 	beq.w	8001902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d121      	bne.n	8001842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fba9 	bl	8000f60 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e011      	b.n	8001836 <HAL_RCC_OscConfig+0x2ce>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
 8001820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff fb9c 	bl	8000f60 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e106      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <HAL_RCC_OscConfig+0x4e4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x2f0>
 800184a:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x32a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x312>
 8001860:	4b7b      	ldr	r3, [pc, #492]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a7a      	ldr	r2, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	4b78      	ldr	r3, [pc, #480]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a77      	ldr	r2, [pc, #476]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x32a>
 800187a:	4b75      	ldr	r3, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a74      	ldr	r2, [pc, #464]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	4b72      	ldr	r3, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a71      	ldr	r2, [pc, #452]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fb61 	bl	8000f60 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fb5d 	bl	8000f60 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0c5      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x33a>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fb4b 	bl	8000f60 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fb47 	bl	8000f60 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0af      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 809b 	beq.w	8001a42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d05c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d141      	bne.n	80019a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb1b 	bl	8000f60 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fb17 	bl	8000f60 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e081      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	019b      	lsls	r3, r3, #6
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	061b      	lsls	r3, r3, #24
 8001970:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff faf0 	bl	8000f60 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff faec 	bl	8000f60 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e056      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x41c>
 80019a2:	e04e      	b.n	8001a42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fad9 	bl	8000f60 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fad5 	bl	8000f60 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e03f      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x44a>
 80019d0:	e037      	b.n	8001a42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e032      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d028      	beq.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d121      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d11a      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d111      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470060 	.word	0x42470060

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0cc      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d90c      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d044      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d119      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e067      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4934      	ldr	r1, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff fa0a 	bl	8000f60 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff fa06 	bl	8000f60 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e04f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d20c      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f8c2 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	080078f8 	.word	0x080078f8
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	f200 80bd 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c56:	e0b7      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c5a:	60bb      	str	r3, [r7, #8]
       break;
 8001c5c:	e0b7      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c60:	60bb      	str	r3, [r7, #8]
      break;
 8001c62:	e0b4      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c64:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d04d      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	461a      	mov	r2, r3
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	ea02 0800 	and.w	r8, r2, r0
 8001c92:	ea03 0901 	and.w	r9, r3, r1
 8001c96:	4640      	mov	r0, r8
 8001c98:	4649      	mov	r1, r9
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	014b      	lsls	r3, r1, #5
 8001ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ca8:	0142      	lsls	r2, r0, #5
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	ebb0 0008 	subs.w	r0, r0, r8
 8001cb2:	eb61 0109 	sbc.w	r1, r1, r9
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	018b      	lsls	r3, r1, #6
 8001cc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cc4:	0182      	lsls	r2, r0, #6
 8001cc6:	1a12      	subs	r2, r2, r0
 8001cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	00d9      	lsls	r1, r3, #3
 8001cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cda:	00d0      	lsls	r0, r2, #3
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	eb12 0208 	adds.w	r2, r2, r8
 8001ce4:	eb43 0309 	adc.w	r3, r3, r9
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	0259      	lsls	r1, r3, #9
 8001cf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cf6:	0250      	lsls	r0, r2, #9
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f7fe fb12 	bl	8000330 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e04a      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	ea02 0400 	and.w	r4, r2, r0
 8001d2e:	ea03 0501 	and.w	r5, r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	014b      	lsls	r3, r1, #5
 8001d40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d44:	0142      	lsls	r2, r0, #5
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	1b00      	subs	r0, r0, r4
 8001d4c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	018b      	lsls	r3, r1, #6
 8001d5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d5e:	0182      	lsls	r2, r0, #6
 8001d60:	1a12      	subs	r2, r2, r0
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	00d9      	lsls	r1, r3, #3
 8001d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d74:	00d0      	lsls	r0, r2, #3
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	1912      	adds	r2, r2, r4
 8001d7c:	eb45 0303 	adc.w	r3, r5, r3
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	0299      	lsls	r1, r3, #10
 8001d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d8e:	0290      	lsls	r0, r2, #10
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f7fe fac6 	bl	8000330 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	60bb      	str	r3, [r7, #8]
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dca:	60bb      	str	r3, [r7, #8]
      break;
 8001dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dce:	68bb      	ldr	r3, [r7, #8]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08007908 	.word	0x08007908

08001e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	220f      	movs	r2, #15
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_RCC_GetClockConfig+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	601a      	str	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e041      	b.n	8001f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f839 	bl	8001f2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 f9d8 	bl	8002280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d001      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04e      	b.n	8001ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d022      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d01d      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d018      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_TIM_Base_Start_IT+0xcc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00e      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d009      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d111      	bne.n	8001fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d010      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe2:	e007      	b.n	8001ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40010000 	.word	0x40010000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40010400 	.word	0x40010400
 8002018:	40014000 	.word	0x40014000
 800201c:	40001800 	.word	0x40001800

08002020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b02      	cmp	r3, #2
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0202 	mvn.w	r2, #2
 800204c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8ee 	bl	8002244 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8e0 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8f1 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b04      	cmp	r3, #4
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0204 	mvn.w	r2, #4
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8c4 	bl	8002244 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8b6 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8c7 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0208 	mvn.w	r2, #8
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f89a 	bl	8002244 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f88c 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f89d 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b10      	cmp	r3, #16
 8002130:	d122      	bne.n	8002178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b10      	cmp	r3, #16
 800213e:	d11b      	bne.n	8002178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0210 	mvn.w	r2, #16
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2208      	movs	r2, #8
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f870 	bl	8002244 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f862 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f873 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0201 	mvn.w	r2, #1
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fdb2 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	2b80      	cmp	r3, #128	; 0x80
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d107      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f902 	bl	80023d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d107      	bne.n	80021fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f838 	bl	800226c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b20      	cmp	r3, #32
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b20      	cmp	r3, #32
 8002216:	d107      	bne.n	8002228 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0220 	mvn.w	r2, #32
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8cc 	bl	80023c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a40      	ldr	r2, [pc, #256]	; (8002394 <TIM_Base_SetConfig+0x114>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d00f      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <TIM_Base_SetConfig+0x118>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00b      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3c      	ldr	r2, [pc, #240]	; (800239c <TIM_Base_SetConfig+0x11c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <TIM_Base_SetConfig+0x120>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3a      	ldr	r2, [pc, #232]	; (80023a4 <TIM_Base_SetConfig+0x124>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d108      	bne.n	80022d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2f      	ldr	r2, [pc, #188]	; (8002394 <TIM_Base_SetConfig+0x114>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d027      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <TIM_Base_SetConfig+0x118>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d023      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2b      	ldr	r2, [pc, #172]	; (800239c <TIM_Base_SetConfig+0x11c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <TIM_Base_SetConfig+0x120>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01b      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <TIM_Base_SetConfig+0x124>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d017      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <TIM_Base_SetConfig+0x128>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <TIM_Base_SetConfig+0x12c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00f      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <TIM_Base_SetConfig+0x130>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00b      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <TIM_Base_SetConfig+0x134>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <TIM_Base_SetConfig+0x138>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <TIM_Base_SetConfig+0x13c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <TIM_Base_SetConfig+0x114>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d003      	beq.n	8002378 <TIM_Base_SetConfig+0xf8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <TIM_Base_SetConfig+0x124>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d103      	bne.n	8002380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	615a      	str	r2, [r3, #20]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800
 80023a0:	40000c00 	.word	0x40000c00
 80023a4:	40010400 	.word	0x40010400
 80023a8:	40014000 	.word	0x40014000
 80023ac:	40014400 	.word	0x40014400
 80023b0:	40014800 	.word	0x40014800
 80023b4:	40001800 	.word	0x40001800
 80023b8:	40001c00 	.word	0x40001c00
 80023bc:	40002000 	.word	0x40002000

080023c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f103 0208 	add.w	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 0208 	add.w	r2, r3, #8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0208 	add.w	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d103      	bne.n	80024aa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e00c      	b.n	80024c4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3308      	adds	r3, #8
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e002      	b.n	80024b8 <vListInsert+0x2e>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d2f6      	bcs.n	80024b2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6892      	ldr	r2, [r2, #8]
 8002512:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6852      	ldr	r2, [r2, #4]
 800251c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d103      	bne.n	8002530 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <xQueueGenericReset+0x2a>
        __asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	60bb      	str	r3, [r7, #8]
    }
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800257a:	f002 f853 	bl	8004624 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	441a      	add	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	3b01      	subs	r3, #1
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	441a      	add	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	22ff      	movs	r2, #255	; 0xff
 80025be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	22ff      	movs	r2, #255	; 0xff
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00f      	beq.n	80025f8 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3310      	adds	r3, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f8b3 	bl	8003748 <xTaskRemoveFromEventList>
 80025e2:	e009      	b.n	80025f8 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3310      	adds	r3, #16
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fefd 	bl	80023e8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3324      	adds	r3, #36	; 0x24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fef8 	bl	80023e8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025f8:	f002 f844 	bl	8004684 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002606:	b580      	push	{r7, lr}
 8002608:	b08c      	sub	sp, #48	; 0x30
 800260a:	af02      	add	r7, sp, #8
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <xQueueGenericCreate+0x2a>
        __asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	61bb      	str	r3, [r7, #24]
    }
 800262c:	bf00      	nop
 800262e:	e7fe      	b.n	800262e <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <xQueueGenericCreate+0x48>
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	429a      	cmp	r2, r3
 800264c:	d101      	bne.n	8002652 <xQueueGenericCreate+0x4c>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <xQueueGenericCreate+0x4e>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericCreate+0x68>
        __asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	617b      	str	r3, [r7, #20]
    }
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002674:	d90a      	bls.n	800268c <xQueueGenericCreate+0x86>
        __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	613b      	str	r3, [r7, #16]
    }
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3350      	adds	r3, #80	; 0x50
 8002690:	4618      	mov	r0, r3
 8002692:	f002 f8f3 	bl	800487c <pvPortMalloc>
 8002696:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3350      	adds	r3, #80	; 0x50
 80026a6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f805 	bl	80026c4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026ba:	6a3b      	ldr	r3, [r7, #32]
    }
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e002      	b.n	80026e6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026f2:	2101      	movs	r1, #1
 80026f4:	69b8      	ldr	r0, [r7, #24]
 80026f6:	f7ff ff2b 	bl	8002550 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	68f9      	ldr	r1, [r7, #12]
 8002708:	2073      	movs	r0, #115	; 0x73
 800270a:	f003 fcdf 	bl	80060cc <SEGGER_SYSVIEW_RecordU32x3>
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b090      	sub	sp, #64	; 0x40
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002726:	2300      	movs	r3, #0
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <xQueueGenericSend+0x32>
        __asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <xQueueGenericSend+0x40>
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <xQueueGenericSend+0x44>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <xQueueGenericSend+0x46>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <xQueueGenericSend+0x60>
        __asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d103      	bne.n	8002786 <xQueueGenericSend+0x6e>
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <xQueueGenericSend+0x72>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <xQueueGenericSend+0x74>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <xQueueGenericSend+0x8e>
        __asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	623b      	str	r3, [r7, #32]
    }
 80027a2:	bf00      	nop
 80027a4:	e7fe      	b.n	80027a4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a6:	f001 f969 	bl	8003a7c <xTaskGetSchedulerState>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <xQueueGenericSend+0x9e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <xQueueGenericSend+0xa2>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <xQueueGenericSend+0xa4>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueGenericSend+0xbe>
        __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61fb      	str	r3, [r7, #28]
    }
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027d6:	f001 ff25 	bl	8004624 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <xQueueGenericSend+0xd4>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11f      	bne.n	800282c <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 f9fa 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	460b      	mov	r3, r1
 80027fe:	4601      	mov	r1, r0
 8002800:	205a      	movs	r0, #90	; 0x5a
 8002802:	f003 fcd9 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280c:	f000 fa56 	bl	8002cbc <prvCopyDataToQueue>
 8002810:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	3324      	adds	r3, #36	; 0x24
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff92 	bl	8003748 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002824:	f001 ff2e 	bl	8004684 <vPortExitCritical>
                return pdPASS;
 8002828:	2301      	movs	r3, #1
 800282a:	e07d      	b.n	8002928 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d110      	bne.n	8002854 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002832:	f001 ff27 	bl	8004684 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f9d5 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	460b      	mov	r3, r1
 8002848:	4601      	mov	r1, r0
 800284a:	205a      	movs	r0, #90	; 0x5a
 800284c:	f003 fcb4 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002850:	2300      	movs	r3, #0
 8002852:	e069      	b.n	8002928 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4618      	mov	r0, r3
 8002860:	f000 ffd8 	bl	8003814 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002864:	2301      	movs	r3, #1
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002868:	f001 ff0c 	bl	8004684 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800286c:	f000 fd54 	bl	8003318 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002870:	f001 fed8 	bl	8004624 <vPortEnterCritical>
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d103      	bne.n	800288a <xQueueGenericSend+0x172>
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002890:	b25b      	sxtb	r3, r3
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d103      	bne.n	80028a0 <xQueueGenericSend+0x188>
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a0:	f001 fef0 	bl	8004684 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028a4:	1d3a      	adds	r2, r7, #4
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 ffc7 	bl	8003840 <xTaskCheckForTimeOut>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d124      	bne.n	8002902 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ba:	f000 faf7 	bl	8002eac <prvIsQueueFull>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	3310      	adds	r3, #16
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fee9 	bl	80036a4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80028d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d4:	f000 fa82 	bl	8002ddc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80028d8:	f000 fd2c 	bl	8003334 <xTaskResumeAll>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f47f af79 	bne.w	80027d6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <xQueueGenericSend+0x218>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e76f      	b.n	80027d6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80028f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028f8:	f000 fa70 	bl	8002ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028fc:	f000 fd1a 	bl	8003334 <xTaskResumeAll>
 8002900:	e769      	b.n	80027d6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002904:	f000 fa6a 	bl	8002ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002908:	f000 fd14 	bl	8003334 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	4618      	mov	r0, r3
 8002910:	f004 f96a 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	460b      	mov	r3, r1
 800291e:	4601      	mov	r1, r0
 8002920:	205a      	movs	r0, #90	; 0x5a
 8002922:	f003 fc49 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002926:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002928:	4618      	mov	r0, r3
 800292a:	3738      	adds	r7, #56	; 0x38
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	e000ed04 	.word	0xe000ed04

08002934 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	; 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <xQueueGenericSendFromISR+0x3c>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <xQueueGenericSendFromISR+0x40>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <xQueueGenericSendFromISR+0x42>
 8002974:	2300      	movs	r3, #0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800298c:	bf00      	nop
 800298e:	e7fe      	b.n	800298e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d103      	bne.n	800299e <xQueueGenericSendFromISR+0x6a>
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <xQueueGenericSendFromISR+0x6e>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <xQueueGenericSendFromISR+0x70>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	623b      	str	r3, [r7, #32]
    }
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029be:	f001 ff1d 	bl	80047fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80029c2:	f3ef 8211 	mrs	r2, BASEPRI
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	61fa      	str	r2, [r7, #28]
 80029d8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80029da:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <xQueueGenericSendFromISR+0xbc>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d148      	bne.n	8002a82 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 f8f0 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2060      	movs	r0, #96	; 0x60
 8002a10:	f003 fb02 	bl	8006018 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a1a:	f000 f94f 	bl	8002cbc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d112      	bne.n	8002a4e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d025      	beq.n	8002a7c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	3324      	adds	r3, #36	; 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fe87 	bl	8003748 <xTaskRemoveFromEventList>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01d      	beq.n	8002a7c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01a      	beq.n	8002a7c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e016      	b.n	8002a7c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a52:	2b7f      	cmp	r3, #127	; 0x7f
 8002a54:	d10a      	bne.n	8002a6c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	617b      	str	r3, [r7, #20]
    }
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	b25a      	sxtb	r2, r3
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002a80:	e00b      	b.n	8002a9a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 f8af 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2060      	movs	r0, #96	; 0x60
 8002a92:	f003 fac1 	bl	8006018 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002aa4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3740      	adds	r7, #64	; 0x40
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b08f      	sub	sp, #60	; 0x3c
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <xQueueReceive+0x30>
        __asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	623b      	str	r3, [r7, #32]
    }
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <xQueueReceive+0x3e>
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <xQueueReceive+0x42>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueReceive+0x44>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <xQueueReceive+0x5e>
        __asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	61fb      	str	r3, [r7, #28]
    }
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b0e:	f000 ffb5 	bl	8003a7c <xTaskGetSchedulerState>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <xQueueReceive+0x6e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <xQueueReceive+0x72>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <xQueueReceive+0x74>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xQueueReceive+0x8e>
        __asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	61bb      	str	r3, [r7, #24]
    }
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b3e:	f001 fd71 	bl	8004624 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b52:	f000 f91d 	bl	8002d90 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 f845 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002b5e:	4604      	mov	r4, r0
 8002b60:	2000      	movs	r0, #0
 8002b62:	f004 f841 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	9100      	str	r1, [sp, #0]
 8002b6e:	4621      	mov	r1, r4
 8002b70:	205c      	movs	r0, #92	; 0x5c
 8002b72:	f003 fb21 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	3310      	adds	r3, #16
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fddc 	bl	8003748 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b90:	f001 fd78 	bl	8004684 <vPortExitCritical>
                return pdPASS;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e08a      	b.n	8002cae <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b9e:	f001 fd71 	bl	8004684 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 f81f 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002baa:	4604      	mov	r4, r0
 8002bac:	2000      	movs	r0, #0
 8002bae:	f004 f81b 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	9100      	str	r1, [sp, #0]
 8002bba:	4621      	mov	r1, r4
 8002bbc:	205c      	movs	r0, #92	; 0x5c
 8002bbe:	f003 fafb 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e073      	b.n	8002cae <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fe1f 	bl	8003814 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bda:	f001 fd53 	bl	8004684 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bde:	f000 fb9b 	bl	8003318 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002be2:	f001 fd1f 	bl	8004624 <vPortEnterCritical>
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d103      	bne.n	8002bfc <xQueueReceive+0x14c>
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <xQueueReceive+0x162>
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c12:	f001 fd37 	bl	8004684 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c16:	1d3a      	adds	r2, r7, #4
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fe0e 	bl	8003840 <xTaskCheckForTimeOut>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d124      	bne.n	8002c74 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c2c:	f000 f928 	bl	8002e80 <prvIsQueueEmpty>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	3324      	adds	r3, #36	; 0x24
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd30 	bl	80036a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c46:	f000 f8c9 	bl	8002ddc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c4a:	f000 fb73 	bl	8003334 <xTaskResumeAll>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af74 	bne.w	8002b3e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <xQueueReceive+0x208>)
 8002c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	e76a      	b.n	8002b3e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6a:	f000 f8b7 	bl	8002ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c6e:	f000 fb61 	bl	8003334 <xTaskResumeAll>
 8002c72:	e764      	b.n	8002b3e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c76:	f000 f8b1 	bl	8002ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c7a:	f000 fb5b 	bl	8003334 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c80:	f000 f8fe 	bl	8002e80 <prvIsQueueEmpty>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f43f af59 	beq.w	8002b3e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 ffaa 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002c94:	4604      	mov	r4, r0
 8002c96:	2000      	movs	r0, #0
 8002c98:	f003 ffa6 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	9100      	str	r1, [sp, #0]
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	205c      	movs	r0, #92	; 0x5c
 8002ca8:	f003 fa86 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002cac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3734      	adds	r7, #52	; 0x34
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d14d      	bne.n	8002d7e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fee6 	bl	8003ab8 <xTaskPriorityDisinherit>
 8002cec:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e043      	b.n	8002d7e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d119      	bne.n	8002d30 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6858      	ldr	r0, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	461a      	mov	r2, r3
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	f004 f8fc 	bl	8006f04 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	441a      	add	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d32b      	bcc.n	8002d7e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	e026      	b.n	8002d7e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68d8      	ldr	r0, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	f004 f8e2 	bl	8006f04 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	425b      	negs	r3, r3
 8002d4a:	441a      	add	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	425b      	negs	r3, r3
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d105      	bne.n	8002d7e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d86:	697b      	ldr	r3, [r7, #20]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d018      	beq.n	8002dd4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	441a      	add	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d303      	bcc.n	8002dc4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68d9      	ldr	r1, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f004 f898 	bl	8006f04 <memcpy>
    }
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002de4:	f001 fc1e 	bl	8004624 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002df0:	e011      	b.n	8002e16 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3324      	adds	r3, #36	; 0x24
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fca2 	bl	8003748 <xTaskRemoveFromEventList>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e0a:	f000 fd7f 	bl	800390c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	dce9      	bgt.n	8002df2 <prvUnlockQueue+0x16>
 8002e1e:	e000      	b.n	8002e22 <prvUnlockQueue+0x46>
                        break;
 8002e20:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e2a:	f001 fc2b 	bl	8004684 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e2e:	f001 fbf9 	bl	8004624 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e38:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e3a:	e011      	b.n	8002e60 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3310      	adds	r3, #16
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fc7d 	bl	8003748 <xTaskRemoveFromEventList>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e54:	f000 fd5a 	bl	800390c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dce9      	bgt.n	8002e3c <prvUnlockQueue+0x60>
 8002e68:	e000      	b.n	8002e6c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e6a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	22ff      	movs	r2, #255	; 0xff
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e74:	f001 fc06 	bl	8004684 <vPortExitCritical>
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e88:	f001 fbcc 	bl	8004624 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e001      	b.n	8002e9e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e9e:	f001 fbf1 	bl	8004684 <vPortExitCritical>

    return xReturn;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002eb4:	f001 fbb6 	bl	8004624 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d102      	bne.n	8002eca <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e001      	b.n	8002ece <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ece:	f001 fbd9 	bl	8004684 <vPortExitCritical>

    return xReturn;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e01e      	b.n	8002f2a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <vQueueAddToRegistry+0x60>)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ef8:	4910      	ldr	r1, [pc, #64]	; (8002f3c <vQueueAddToRegistry+0x60>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <vQueueAddToRegistry+0x60>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fe69 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002f16:	4601      	mov	r1, r0
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2071      	movs	r0, #113	; 0x71
 8002f1e:	f003 f87b 	bl	8006018 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f22:	e006      	b.n	8002f32 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	d9dd      	bls.n	8002eec <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2001442c 	.word	0x2001442c

08002f40 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f50:	f001 fb68 	bl	8004624 <vPortEnterCritical>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d103      	bne.n	8002f6a <vQueueWaitForMessageRestricted+0x2a>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d103      	bne.n	8002f80 <vQueueWaitForMessageRestricted+0x40>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f80:	f001 fb80 	bl	8004684 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3324      	adds	r3, #36	; 0x24
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fba9 	bl	80036ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff1e 	bl	8002ddc <prvUnlockQueue>
    }
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	; 0x30
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 fc5d 	bl	800487c <pvPortMalloc>
 8002fc2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fca:	2058      	movs	r0, #88	; 0x58
 8002fcc:	f001 fc56 	bl	800487c <pvPortMalloc>
 8002fd0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fde:	e005      	b.n	8002fec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f001 fd2b 	bl	8004a3c <vPortFree>
 8002fe6:	e001      	b.n	8002fec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9303      	str	r3, [sp, #12]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f80e 	bl	800302a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800300e:	69f8      	ldr	r0, [r7, #28]
 8003010:	f000 f8a2 	bl	8003158 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003014:	2301      	movs	r3, #1
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	e002      	b.n	8003020 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003020:	69bb      	ldr	r3, [r7, #24]
    }
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	461a      	mov	r2, r3
 8003042:	21a5      	movs	r1, #165	; 0xa5
 8003044:	f003 ff6c 	bl	8006f20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003052:	3b01      	subs	r3, #1
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <prvInitialiseNewTask+0x58>
        __asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	617b      	str	r3, [r7, #20]
    }
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01f      	beq.n	80030c8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	e012      	b.n	80030b4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4413      	add	r3, r2
 8003094:	7819      	ldrb	r1, [r3, #0]
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	3334      	adds	r3, #52	; 0x34
 800309e:	460a      	mov	r2, r1
 80030a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	d9e9      	bls.n	800308e <prvInitialiseNewTask+0x64>
 80030ba:	e000      	b.n	80030be <prvInitialiseNewTask+0x94>
            {
                break;
 80030bc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030c6:	e003      	b.n	80030d0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d901      	bls.n	80030da <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030d6:	2304      	movs	r3, #4
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2200      	movs	r2, #0
 80030ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	3304      	adds	r3, #4
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f999 	bl	8002428 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	3318      	adds	r3, #24
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff f994 	bl	8002428 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003104:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	f1c3 0205 	rsb	r2, r3, #5
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	3350      	adds	r3, #80	; 0x50
 800311a:	2204      	movs	r2, #4
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fefe 	bl	8006f20 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	3354      	adds	r3, #84	; 0x54
 8003128:	2201      	movs	r2, #1
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fef7 	bl	8006f20 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	69b8      	ldr	r0, [r7, #24]
 8003138:	f001 f8c8 	bl	80042cc <pxPortInitialiseStack>
 800313c:	4602      	mov	r2, r0
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800314e:	bf00      	nop
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af02      	add	r7, sp, #8
 800315e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003160:	f001 fa60 	bl	8004624 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003164:	4b35      	ldr	r3, [pc, #212]	; (800323c <prvAddNewTaskToReadyList+0xe4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	4a34      	ldr	r2, [pc, #208]	; (800323c <prvAddNewTaskToReadyList+0xe4>)
 800316c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800316e:	4b34      	ldr	r3, [pc, #208]	; (8003240 <prvAddNewTaskToReadyList+0xe8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003176:	4a32      	ldr	r2, [pc, #200]	; (8003240 <prvAddNewTaskToReadyList+0xe8>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800317c:	4b2f      	ldr	r3, [pc, #188]	; (800323c <prvAddNewTaskToReadyList+0xe4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d110      	bne.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003184:	f000 fbe0 	bl	8003948 <prvInitialiseTaskLists>
 8003188:	e00d      	b.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <prvAddNewTaskToReadyList+0xec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <prvAddNewTaskToReadyList+0xe8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	429a      	cmp	r2, r3
 800319e:	d802      	bhi.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <prvAddNewTaskToReadyList+0xe8>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80031a6:	4b28      	ldr	r3, [pc, #160]	; (8003248 <prvAddNewTaskToReadyList+0xf0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <prvAddNewTaskToReadyList+0xf0>)
 80031ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <prvAddNewTaskToReadyList+0xf0>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <prvAddNewTaskToReadyList+0x94>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fbeb 	bl	800699c <SEGGER_SYSVIEW_OnTaskCreate>
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	461d      	mov	r5, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461c      	mov	r4, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	1ae3      	subs	r3, r4, r3
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	462b      	mov	r3, r5
 80031e8:	f001 fdee 	bl	8004dc8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fc58 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2201      	movs	r2, #1
 80031fa:	409a      	lsls	r2, r3
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <prvAddNewTaskToReadyList+0xf4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <prvAddNewTaskToReadyList+0xf4>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <prvAddNewTaskToReadyList+0xf8>)
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7ff f910 	bl	8002442 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003222:	f001 fa2f 	bl	8004684 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <prvAddNewTaskToReadyList+0xec>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <prvAddNewTaskToReadyList+0xe8>)
 8003230:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	bf00      	nop
 800323c:	2000016c 	.word	0x2000016c
 8003240:	20000094 	.word	0x20000094
 8003244:	20000178 	.word	0x20000178
 8003248:	20000188 	.word	0x20000188
 800324c:	20000174 	.word	0x20000174
 8003250:	20000098 	.word	0x20000098

08003254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800325a:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <vTaskStartScheduler+0xa4>)
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	2282      	movs	r2, #130	; 0x82
 8003266:	4925      	ldr	r1, [pc, #148]	; (80032fc <vTaskStartScheduler+0xa8>)
 8003268:	4825      	ldr	r0, [pc, #148]	; (8003300 <vTaskStartScheduler+0xac>)
 800326a:	f7ff fe9d 	bl	8002fa8 <xTaskCreate>
 800326e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003276:	f000 fd17 	bl	8003ca8 <xTimerCreateTimerTask>
 800327a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d124      	bne.n	80032cc <vTaskStartScheduler+0x78>
        __asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60bb      	str	r3, [r7, #8]
    }
 8003294:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <vTaskStartScheduler+0xb0>)
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <vTaskStartScheduler+0xb4>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <vTaskStartScheduler+0xb8>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <vTaskStartScheduler+0xbc>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <vTaskStartScheduler+0xa4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d102      	bne.n	80032bc <vTaskStartScheduler+0x68>
 80032b6:	f003 fb55 	bl	8006964 <SEGGER_SYSVIEW_OnIdle>
 80032ba:	e004      	b.n	80032c6 <vTaskStartScheduler+0x72>
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <vTaskStartScheduler+0xbc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fbad 	bl	8006a20 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032c6:	f001 f88d 	bl	80043e4 <xPortStartScheduler>
 80032ca:	e00e      	b.n	80032ea <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d10a      	bne.n	80032ea <vTaskStartScheduler+0x96>
        __asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	607b      	str	r3, [r7, #4]
    }
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <vTaskStartScheduler+0xc0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000190 	.word	0x20000190
 80032fc:	08007814 	.word	0x08007814
 8003300:	08003925 	.word	0x08003925
 8003304:	2000018c 	.word	0x2000018c
 8003308:	20000178 	.word	0x20000178
 800330c:	20000170 	.word	0x20000170
 8003310:	20000094 	.word	0x20000094
 8003314:	2000000c 	.word	0x2000000c

08003318 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <vTaskSuspendAll+0x18>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <vTaskSuspendAll+0x18>)
 8003324:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000194 	.word	0x20000194

08003334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <xTaskResumeAll+0x104>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskResumeAll+0x2c>
        __asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	603b      	str	r3, [r7, #0]
    }
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003360:	f001 f960 	bl	8004624 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003364:	4b34      	ldr	r3, [pc, #208]	; (8003438 <xTaskResumeAll+0x104>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a33      	ldr	r2, [pc, #204]	; (8003438 <xTaskResumeAll+0x104>)
 800336c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b32      	ldr	r3, [pc, #200]	; (8003438 <xTaskResumeAll+0x104>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d159      	bne.n	800342a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003376:	4b31      	ldr	r3, [pc, #196]	; (800343c <xTaskResumeAll+0x108>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d055      	beq.n	800342a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337e:	e032      	b.n	80033e6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <xTaskResumeAll+0x10c>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3318      	adds	r3, #24
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff f8b5 	bl	80024fc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f8b0 	bl	80024fc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fb80 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <xTaskResumeAll+0x110>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <xTaskResumeAll+0x110>)
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <xTaskResumeAll+0x114>)
 80033c4:	441a      	add	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f7ff f838 	bl	8002442 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <xTaskResumeAll+0x118>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d302      	bcc.n	80033e6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <xTaskResumeAll+0x11c>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033e6:	4b16      	ldr	r3, [pc, #88]	; (8003440 <xTaskResumeAll+0x10c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1c8      	bne.n	8003380 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033f4:	f000 fb26 	bl	8003a44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <xTaskResumeAll+0x120>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003404:	f000 f84a 	bl	800349c <xTaskIncrementTick>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <xTaskResumeAll+0x11c>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f1      	bne.n	8003404 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <xTaskResumeAll+0x120>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <xTaskResumeAll+0x11c>)
 8003428:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800342a:	f001 f92b 	bl	8004684 <vPortExitCritical>

    return xAlreadyYielded;
 800342e:	687b      	ldr	r3, [r7, #4]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000194 	.word	0x20000194
 800343c:	2000016c 	.word	0x2000016c
 8003440:	2000012c 	.word	0x2000012c
 8003444:	20000174 	.word	0x20000174
 8003448:	20000098 	.word	0x20000098
 800344c:	20000094 	.word	0x20000094
 8003450:	20000180 	.word	0x20000180
 8003454:	2000017c 	.word	0x2000017c

08003458 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <xTaskGetTickCount+0x1c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003464:	687b      	ldr	r3, [r7, #4]
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000170 	.word	0x20000170

08003478 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800347e:	f001 f9bd 	bl	80047fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <xTaskGetTickCountFromISR+0x20>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800348c:	683b      	ldr	r3, [r7, #0]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000170 	.word	0x20000170

0800349c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <xTaskIncrementTick+0x110>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d173      	bne.n	8003596 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034ae:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <xTaskIncrementTick+0x114>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034b6:	4a3e      	ldr	r2, [pc, #248]	; (80035b0 <xTaskIncrementTick+0x114>)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d120      	bne.n	8003504 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80034c2:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <xTaskIncrementTick+0x118>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <xTaskIncrementTick+0x46>
        __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	603b      	str	r3, [r7, #0]
    }
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <xTaskIncrementTick+0x44>
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <xTaskIncrementTick+0x118>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <xTaskIncrementTick+0x11c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <xTaskIncrementTick+0x118>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4a31      	ldr	r2, [pc, #196]	; (80035b8 <xTaskIncrementTick+0x11c>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <xTaskIncrementTick+0x120>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <xTaskIncrementTick+0x120>)
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	f000 faa0 	bl	8003a44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <xTaskIncrementTick+0x124>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	429a      	cmp	r2, r3
 800350c:	d348      	bcc.n	80035a0 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <xTaskIncrementTick+0x118>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003518:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <xTaskIncrementTick+0x124>)
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	601a      	str	r2, [r3, #0]
                    break;
 8003520:	e03e      	b.n	80035a0 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <xTaskIncrementTick+0x118>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d203      	bcs.n	8003542 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <xTaskIncrementTick+0x124>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003540:	e02e      	b.n	80035a0 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe ffd8 	bl	80024fc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3318      	adds	r3, #24
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe ffcf 	bl	80024fc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f003 fa9f 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	2201      	movs	r2, #1
 800356c:	409a      	lsls	r2, r3
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <xTaskIncrementTick+0x128>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <xTaskIncrementTick+0x128>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <xTaskIncrementTick+0x12c>)
 8003586:	441a      	add	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f7fe ff57 	bl	8002442 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003594:	e7bb      	b.n	800350e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <xTaskIncrementTick+0x130>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <xTaskIncrementTick+0x130>)
 800359e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80035a0:	697b      	ldr	r3, [r7, #20]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000194 	.word	0x20000194
 80035b0:	20000170 	.word	0x20000170
 80035b4:	20000124 	.word	0x20000124
 80035b8:	20000128 	.word	0x20000128
 80035bc:	20000184 	.word	0x20000184
 80035c0:	2000018c 	.word	0x2000018c
 80035c4:	20000174 	.word	0x20000174
 80035c8:	20000098 	.word	0x20000098
 80035cc:	2000017c 	.word	0x2000017c

080035d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <vTaskSwitchContext+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <vTaskSwitchContext+0xc0>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80035e4:	e04d      	b.n	8003682 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <vTaskSwitchContext+0xc0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ec:	4b29      	ldr	r3, [pc, #164]	; (8003694 <vTaskSwitchContext+0xc4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	f1c3 031f 	rsb	r3, r3, #31
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	4925      	ldr	r1, [pc, #148]	; (8003698 <vTaskSwitchContext+0xc8>)
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	607b      	str	r3, [r7, #4]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <vTaskSwitchContext+0x5a>
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <vTaskSwitchContext+0xc8>)
 8003638:	4413      	add	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3308      	adds	r3, #8
 800364e:	429a      	cmp	r2, r3
 8003650:	d104      	bne.n	800365c <vTaskSwitchContext+0x8c>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <vTaskSwitchContext+0xcc>)
 8003664:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <vTaskSwitchContext+0xcc>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <vTaskSwitchContext+0xd0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d102      	bne.n	8003678 <vTaskSwitchContext+0xa8>
 8003672:	f003 f977 	bl	8006964 <SEGGER_SYSVIEW_OnIdle>
}
 8003676:	e004      	b.n	8003682 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <vTaskSwitchContext+0xcc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 f9cf 	bl	8006a20 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000194 	.word	0x20000194
 8003690:	20000180 	.word	0x20000180
 8003694:	20000174 	.word	0x20000174
 8003698:	20000098 	.word	0x20000098
 800369c:	20000094 	.word	0x20000094
 80036a0:	20000190 	.word	0x20000190

080036a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	60fb      	str	r3, [r7, #12]
    }
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <vTaskPlaceOnEventList+0x44>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3318      	adds	r3, #24
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe fed9 	bl	800248a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036d8:	2101      	movs	r1, #1
 80036da:	6838      	ldr	r0, [r7, #0]
 80036dc:	f000 fa6c 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000094 	.word	0x20000094

080036ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	617b      	str	r3, [r7, #20]
    }
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <vTaskPlaceOnEventListRestricted+0x58>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3318      	adds	r3, #24
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7fe fe90 	bl	8002442 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003728:	f04f 33ff 	mov.w	r3, #4294967295
 800372c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800372e:	2024      	movs	r0, #36	; 0x24
 8003730:	f002 fc18 	bl	8005f64 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	68b8      	ldr	r0, [r7, #8]
 8003738:	f000 fa3e 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
    }
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000094 	.word	0x20000094

08003748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60fb      	str	r3, [r7, #12]
    }
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3318      	adds	r3, #24
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe febf 	bl	80024fc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <xTaskRemoveFromEventList+0xb4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d120      	bne.n	80037c8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	3304      	adds	r3, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe feb6 	bl	80024fc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f986 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <xTaskRemoveFromEventList+0xb8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <xTaskRemoveFromEventList+0xb8>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4a13      	ldr	r2, [pc, #76]	; (8003804 <xTaskRemoveFromEventList+0xbc>)
 80037b8:	441a      	add	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f7fe fe3e 	bl	8002442 <vListInsertEnd>
 80037c6:	e005      	b.n	80037d4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3318      	adds	r3, #24
 80037cc:	4619      	mov	r1, r3
 80037ce:	480e      	ldr	r0, [pc, #56]	; (8003808 <xTaskRemoveFromEventList+0xc0>)
 80037d0:	f7fe fe37 	bl	8002442 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <xTaskRemoveFromEventList+0xc4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	429a      	cmp	r2, r3
 80037e0:	d905      	bls.n	80037ee <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <xTaskRemoveFromEventList+0xc8>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e001      	b.n	80037f2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80037f2:	697b      	ldr	r3, [r7, #20]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000194 	.word	0x20000194
 8003800:	20000174 	.word	0x20000174
 8003804:	20000098 	.word	0x20000098
 8003808:	2000012c 	.word	0x2000012c
 800380c:	20000094 	.word	0x20000094
 8003810:	20000180 	.word	0x20000180

08003814 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <vTaskInternalSetTimeOutState+0x24>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <vTaskInternalSetTimeOutState+0x28>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	20000184 	.word	0x20000184
 800383c:	20000170 	.word	0x20000170

08003840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	613b      	str	r3, [r7, #16]
    }
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
    }
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003882:	f000 fecf 	bl	8004624 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <xTaskCheckForTimeOut+0xc4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d102      	bne.n	80038a6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e026      	b.n	80038f4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <xTaskCheckForTimeOut+0xc8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d00a      	beq.n	80038c8 <xTaskCheckForTimeOut+0x88>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d305      	bcc.n	80038c8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e015      	b.n	80038f4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d20b      	bcs.n	80038ea <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff98 	bl	8003814 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e004      	b.n	80038f4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038f4:	f000 fec6 	bl	8004684 <vPortExitCritical>

    return xReturn;
 80038f8:	69fb      	ldr	r3, [r7, #28]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000170 	.word	0x20000170
 8003908:	20000184 	.word	0x20000184

0800390c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <vTaskMissedYield+0x14>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	20000180 	.word	0x20000180

08003924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800392c:	f000 f84c 	bl	80039c8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <prvIdleTask+0x20>)
 8003932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003940:	e7f4      	b.n	800392c <prvIdleTask+0x8>
 8003942:	bf00      	nop
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	e00c      	b.n	800396e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <prvInitialiseTaskLists+0x60>)
 8003960:	4413      	add	r3, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fd40 	bl	80023e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3301      	adds	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d9ef      	bls.n	8003954 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003974:	480d      	ldr	r0, [pc, #52]	; (80039ac <prvInitialiseTaskLists+0x64>)
 8003976:	f7fe fd37 	bl	80023e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800397a:	480d      	ldr	r0, [pc, #52]	; (80039b0 <prvInitialiseTaskLists+0x68>)
 800397c:	f7fe fd34 	bl	80023e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <prvInitialiseTaskLists+0x6c>)
 8003982:	f7fe fd31 	bl	80023e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003986:	480c      	ldr	r0, [pc, #48]	; (80039b8 <prvInitialiseTaskLists+0x70>)
 8003988:	f7fe fd2e 	bl	80023e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800398c:	480b      	ldr	r0, [pc, #44]	; (80039bc <prvInitialiseTaskLists+0x74>)
 800398e:	f7fe fd2b 	bl	80023e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <prvInitialiseTaskLists+0x78>)
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <prvInitialiseTaskLists+0x64>)
 8003996:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <prvInitialiseTaskLists+0x7c>)
 800399a:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <prvInitialiseTaskLists+0x68>)
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000098 	.word	0x20000098
 80039ac:	200000fc 	.word	0x200000fc
 80039b0:	20000110 	.word	0x20000110
 80039b4:	2000012c 	.word	0x2000012c
 80039b8:	20000140 	.word	0x20000140
 80039bc:	20000158 	.word	0x20000158
 80039c0:	20000124 	.word	0x20000124
 80039c4:	20000128 	.word	0x20000128

080039c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ce:	e019      	b.n	8003a04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80039d0:	f000 fe28 	bl	8004624 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <prvCheckTasksWaitingTermination+0x50>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fd8b 	bl	80024fc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <prvCheckTasksWaitingTermination+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <prvCheckTasksWaitingTermination+0x54>)
 80039ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <prvCheckTasksWaitingTermination+0x58>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <prvCheckTasksWaitingTermination+0x58>)
 80039f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80039fa:	f000 fe43 	bl	8004684 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f810 	bl	8003a24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <prvCheckTasksWaitingTermination+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e1      	bne.n	80039d0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000140 	.word	0x20000140
 8003a1c:	2000016c 	.word	0x2000016c
 8003a20:	20000154 	.word	0x20000154

08003a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f803 	bl	8004a3c <vPortFree>
                vPortFree( pxTCB );
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f001 f800 	bl	8004a3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <prvResetNextTaskUnblockTime+0x30>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <prvResetNextTaskUnblockTime+0x34>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a5a:	e005      	b.n	8003a68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <prvResetNextTaskUnblockTime+0x30>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <prvResetNextTaskUnblockTime+0x34>)
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000124 	.word	0x20000124
 8003a78:	2000018c 	.word	0x2000018c

08003a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <xTaskGetSchedulerState+0x34>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	e008      	b.n	8003aa2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <xTaskGetSchedulerState+0x38>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	e001      	b.n	8003aa2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003aa2:	687b      	ldr	r3, [r7, #4]
    }
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	20000178 	.word	0x20000178
 8003ab4:	20000194 	.word	0x20000194

08003ab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d068      	beq.n	8003ba0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <xTaskPriorityDisinherit+0xf4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d00a      	beq.n	8003aee <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	60fb      	str	r3, [r7, #12]
    }
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60bb      	str	r3, [r7, #8]
    }
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d03e      	beq.n	8003ba0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d13a      	bne.n	8003ba0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fce4 	bl	80024fc <uxListRemove>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	2201      	movs	r2, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43da      	mvns	r2, r3
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <xTaskPriorityDisinherit+0xf8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <xTaskPriorityDisinherit+0xf8>)
 8003b4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4619      	mov	r1, r3
 8003b54:	204a      	movs	r0, #74	; 0x4a
 8003b56:	f002 fa23 	bl	8005fa0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f1c3 0205 	rsb	r2, r3, #5
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <xTaskPriorityDisinherit+0xf8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <xTaskPriorityDisinherit+0xf8>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <xTaskPriorityDisinherit+0xfc>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe fc53 	bl	8002442 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ba0:	697b      	ldr	r3, [r7, #20]
    }
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000094 	.word	0x20000094
 8003bb0:	20000174 	.word	0x20000174
 8003bb4:	20000098 	.word	0x20000098

08003bb8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003bc2:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fc94 	bl	80024fc <uxListRemove>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2201      	movs	r2, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43da      	mvns	r2, r3
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4013      	ands	r3, r2
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bf0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d110      	bne.n	8003c1c <prvAddCurrentTaskToDelayedList+0x64>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	211b      	movs	r1, #27
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 ff8e 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4820      	ldr	r0, [pc, #128]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003c16:	f7fe fc14 	bl	8002442 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c1a:	e032      	b.n	8003c82 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d20f      	bcs.n	8003c54 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 ff74 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f7fe fc1c 	bl	800248a <vListInsert>
}
 8003c52:	e016      	b.n	8003c82 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2104      	movs	r1, #4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 ff64 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7fe fc0c 	bl	800248a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d202      	bcs.n	8003c82 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c7c:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000170 	.word	0x20000170
 8003c90:	20000094 	.word	0x20000094
 8003c94:	20000174 	.word	0x20000174
 8003c98:	20000158 	.word	0x20000158
 8003c9c:	20000128 	.word	0x20000128
 8003ca0:	20000124 	.word	0x20000124
 8003ca4:	2000018c 	.word	0x2000018c

08003ca8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003cb2:	f000 fad5 	bl	8004260 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <xTimerCreateTimerTask+0x54>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <xTimerCreateTimerTask+0x58>)
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ccc:	490d      	ldr	r1, [pc, #52]	; (8003d04 <xTimerCreateTimerTask+0x5c>)
 8003cce:	480e      	ldr	r0, [pc, #56]	; (8003d08 <xTimerCreateTimerTask+0x60>)
 8003cd0:	f7ff f96a 	bl	8002fa8 <xTaskCreate>
 8003cd4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	603b      	str	r3, [r7, #0]
    }
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cf2:	687b      	ldr	r3, [r7, #4]
    }
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200001c8 	.word	0x200001c8
 8003d00:	200001cc 	.word	0x200001cc
 8003d04:	0800781c 	.word	0x0800781c
 8003d08:	08003e41 	.word	0x08003e41

08003d0c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	623b      	str	r3, [r7, #32]
    }
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <xTimerGenericCommand+0x98>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d02a      	beq.n	8003d98 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	dc18      	bgt.n	8003d86 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d54:	f7ff fe92 	bl	8003a7c <xTaskGetSchedulerState>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d109      	bne.n	8003d72 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <xTimerGenericCommand+0x98>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f107 0114 	add.w	r1, r7, #20
 8003d66:	2300      	movs	r3, #0
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	f7fe fcd5 	bl	8002718 <xQueueGenericSend>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8003d70:	e012      	b.n	8003d98 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <xTimerGenericCommand+0x98>)
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f107 0114 	add.w	r1, r7, #20
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f7fe fccb 	bl	8002718 <xQueueGenericSend>
 8003d82:	6278      	str	r0, [r7, #36]	; 0x24
 8003d84:	e008      	b.n	8003d98 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <xTimerGenericCommand+0x98>)
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f107 0114 	add.w	r1, r7, #20
 8003d8e:	2300      	movs	r3, #0
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	f7fe fdcf 	bl	8002934 <xQueueGenericSendFromISR>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200001c8 	.word	0x200001c8

08003da8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <prvProcessExpiredTimer+0x94>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fb9b 	bl	80024fc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	18d1      	adds	r1, r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6978      	ldr	r0, [r7, #20]
 8003de2:	f000 f8d1 	bl	8003f88 <prvInsertTimerInActiveList>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01f      	beq.n	8003e2c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2300      	movs	r3, #0
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	2100      	movs	r1, #0
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff88 	bl	8003d0c <xTimerGenericCommand>
 8003dfc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d113      	bne.n	8003e2c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
    }
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	6978      	ldr	r0, [r7, #20]
 8003e32:	4798      	blx	r3
    }
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200001c0 	.word	0x200001c0

08003e40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f857 	bl	8003f00 <prvGetNextExpireTime>
 8003e52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f803 	bl	8003e64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e5e:	f000 f8d5 	bl	800400c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e62:	e7f1      	b.n	8003e48 <prvTimerTask+0x8>

08003e64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e6e:	f7ff fa53 	bl	8003318 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f866 	bl	8003f48 <prvSampleTimeNow>
 8003e7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d130      	bne.n	8003ee6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <prvProcessTimerOrBlockTask+0x3c>
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d806      	bhi.n	8003ea0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e92:	f7ff fa4f 	bl	8003334 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff85 	bl	8003da8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e9e:	e024      	b.n	8003eea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <prvProcessTimerOrBlockTask+0x90>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <prvProcessTimerOrBlockTask+0x50>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <prvProcessTimerOrBlockTask+0x52>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvProcessTimerOrBlockTask+0x94>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7ff f83b 	bl	8002f40 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003eca:	f7ff fa33 	bl	8003334 <xTaskResumeAll>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <prvProcessTimerOrBlockTask+0x98>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	f3bf 8f6f 	isb	sy
    }
 8003ee4:	e001      	b.n	8003eea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ee6:	f7ff fa25 	bl	8003334 <xTaskResumeAll>
    }
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200001c4 	.word	0x200001c4
 8003ef8:	200001c8 	.word	0x200001c8
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <prvGetNextExpireTime+0x44>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <prvGetNextExpireTime+0x16>
 8003f12:	2201      	movs	r2, #1
 8003f14:	e000      	b.n	8003f18 <prvGetNextExpireTime+0x18>
 8003f16:	2200      	movs	r2, #0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <prvGetNextExpireTime+0x44>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e001      	b.n	8003f34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f34:	68fb      	ldr	r3, [r7, #12]
    }
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	200001c0 	.word	0x200001c0

08003f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f50:	f7ff fa82 	bl	8003458 <xTaskGetTickCount>
 8003f54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <prvSampleTimeNow+0x3c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d205      	bcs.n	8003f6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f60:	f000 f91a 	bl	8004198 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <prvSampleTimeNow+0x3c>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f78:	68fb      	ldr	r3, [r7, #12]
    }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200001d0 	.word	0x200001d0

08003f88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d812      	bhi.n	8003fd4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e01b      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <prvInsertTimerInActiveList+0x7c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fa5c 	bl	800248a <vListInsert>
 8003fd2:	e012      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d206      	bcs.n	8003fea <prvInsertTimerInActiveList+0x62>
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e007      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <prvInsertTimerInActiveList+0x80>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fa48 	bl	800248a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ffa:	697b      	ldr	r3, [r7, #20]
    }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	200001c4 	.word	0x200001c4
 8004008:	200001c0 	.word	0x200001c0

0800400c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b08c      	sub	sp, #48	; 0x30
 8004010:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004012:	e0ae      	b.n	8004172 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f2c0 80aa 	blt.w	8004170 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fa65 	bl	80024fc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff87 	bl	8003f48 <prvSampleTimeNow>
 800403a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b09      	cmp	r3, #9
 8004040:	f200 8097 	bhi.w	8004172 <prvProcessReceivedCommands+0x166>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <prvProcessReceivedCommands+0x40>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004075 	.word	0x08004075
 8004050:	08004075 	.word	0x08004075
 8004054:	08004075 	.word	0x08004075
 8004058:	080040e9 	.word	0x080040e9
 800405c:	080040fd 	.word	0x080040fd
 8004060:	08004147 	.word	0x08004147
 8004064:	08004075 	.word	0x08004075
 8004068:	08004075 	.word	0x08004075
 800406c:	080040e9 	.word	0x080040e9
 8004070:	080040fd 	.word	0x080040fd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	18d1      	adds	r1, r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004094:	f7ff ff78 	bl	8003f88 <prvInsertTimerInActiveList>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d069      	beq.n	8004172 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040a4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d05e      	beq.n	8004172 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	441a      	add	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2300      	movs	r3, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c6:	f7ff fe21 	bl	8003d0c <xTimerGenericCommand>
 80040ca:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d14f      	bne.n	8004172 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	61bb      	str	r3, [r7, #24]
    }
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80040fa:	e03a      	b.n	8004172 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	617b      	str	r3, [r7, #20]
    }
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	18d1      	adds	r1, r2, r3
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004140:	f7ff ff22 	bl	8003f88 <prvInsertTimerInActiveList>
                        break;
 8004144:	e015      	b.n	8004172 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004156:	f000 fc71 	bl	8004a3c <vPortFree>
 800415a:	e00a      	b.n	8004172 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800416e:	e000      	b.n	8004172 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004170:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <prvProcessReceivedCommands+0x188>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f107 0108 	add.w	r1, r7, #8
 800417a:	2200      	movs	r2, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fc97 	bl	8002ab0 <xQueueReceive>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f af45 	bne.w	8004014 <prvProcessReceivedCommands+0x8>
        }
    }
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200001c8 	.word	0x200001c8

08004198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800419e:	e048      	b.n	8004232 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <prvSwitchTimerLists+0xc0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <prvSwitchTimerLists+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe f99f 	bl	80024fc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02e      	beq.n	8004232 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90e      	bls.n	8004204 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <prvSwitchTimerLists+0xc0>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fe f944 	bl	800248a <vListInsert>
 8004202:	e016      	b.n	8004232 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2300      	movs	r3, #0
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	2100      	movs	r1, #0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fd7c 	bl	8003d0c <xTimerGenericCommand>
 8004214:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	603b      	str	r3, [r7, #0]
    }
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <prvSwitchTimerLists+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1b1      	bne.n	80041a0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <prvSwitchTimerLists+0xc0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <prvSwitchTimerLists+0xc4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <prvSwitchTimerLists+0xc0>)
 8004248:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <prvSwitchTimerLists+0xc4>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6013      	str	r3, [r2, #0]
    }
 8004250:	bf00      	nop
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200001c0 	.word	0x200001c0
 800425c:	200001c4 	.word	0x200001c4

08004260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004264:	f000 f9de 	bl	8004624 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvCheckForValidListAndQueue+0x54>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11d      	bne.n	80042ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004270:	4811      	ldr	r0, [pc, #68]	; (80042b8 <prvCheckForValidListAndQueue+0x58>)
 8004272:	f7fe f8b9 	bl	80023e8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004276:	4811      	ldr	r0, [pc, #68]	; (80042bc <prvCheckForValidListAndQueue+0x5c>)
 8004278:	f7fe f8b6 	bl	80023e8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <prvCheckForValidListAndQueue+0x58>)
 8004280:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <prvCheckForValidListAndQueue+0x5c>)
 8004286:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004288:	2200      	movs	r2, #0
 800428a:	210c      	movs	r1, #12
 800428c:	200a      	movs	r0, #10
 800428e:	f7fe f9ba 	bl	8002606 <xQueueGenericCreate>
 8004292:	4603      	mov	r3, r0
 8004294:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <prvCheckForValidListAndQueue+0x54>)
 8004296:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <prvCheckForValidListAndQueue+0x54>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <prvCheckForValidListAndQueue+0x54>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4908      	ldr	r1, [pc, #32]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fe18 	bl	8002edc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80042ac:	f000 f9ea 	bl	8004684 <vPortExitCritical>
    }
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200001c8 	.word	0x200001c8
 80042b8:	20000198 	.word	0x20000198
 80042bc:	200001ac 	.word	0x200001ac
 80042c0:	200001c0 	.word	0x200001c0
 80042c4:	200001c4 	.word	0x200001c4
 80042c8:	08007824 	.word	0x08007824

080042cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3b04      	subs	r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b04      	subs	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b04      	subs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <pxPortInitialiseStack+0x64>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3b14      	subs	r3, #20
 8004306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3b04      	subs	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f06f 0202 	mvn.w	r2, #2
 800431a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b20      	subs	r3, #32
 8004320:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	08004335 	.word	0x08004335

08004334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <prvTaskExitError+0x54>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d00a      	beq.n	800435e <prvTaskExitError+0x2a>
        __asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
    }
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <prvTaskExitError+0x28>
        __asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	60bb      	str	r3, [r7, #8]
    }
 8004370:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004372:	bf00      	nop
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0fc      	beq.n	8004374 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000010 	.word	0x20000010
 800438c:	00000000 	.word	0x00000000

08004390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <pxCurrentTCBConst2>)
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	6808      	ldr	r0, [r1, #0]
 8004396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439a:	f380 8809 	msr	PSP, r0
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8811 	msr	BASEPRI, r0
 80043aa:	4770      	bx	lr
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst2>:
 80043b0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043b8:	4808      	ldr	r0, [pc, #32]	; (80043dc <prvPortStartFirstTask+0x24>)
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	f380 8808 	msr	MSP, r0
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8814 	msr	CONTROL, r0
 80043ca:	b662      	cpsie	i
 80043cc:	b661      	cpsie	f
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	df00      	svc	0
 80043d8:	bf00      	nop
 80043da:	0000      	.short	0x0000
 80043dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop

080043e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <xPortStartScheduler+0x120>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a46      	ldr	r2, [pc, #280]	; (8004508 <xPortStartScheduler+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10a      	bne.n	800440a <xPortStartScheduler+0x26>
        __asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	613b      	str	r3, [r7, #16]
    }
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <xPortStartScheduler+0x120>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3f      	ldr	r2, [pc, #252]	; (800450c <xPortStartScheduler+0x128>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10a      	bne.n	800442a <xPortStartScheduler+0x46>
        __asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
    }
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <xPortStartScheduler+0x12c>)
 800442c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <xPortStartScheduler+0x130>)
 8004450:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <xPortStartScheduler+0x134>)
 8004454:	2207      	movs	r2, #7
 8004456:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004458:	e009      	b.n	800446e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800445a:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <xPortStartScheduler+0x134>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3b01      	subs	r3, #1
 8004460:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <xPortStartScheduler+0x134>)
 8004462:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d0ef      	beq.n	800445a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800447a:	4b27      	ldr	r3, [pc, #156]	; (8004518 <xPortStartScheduler+0x134>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1c3 0307 	rsb	r3, r3, #7
 8004482:	2b04      	cmp	r3, #4
 8004484:	d00a      	beq.n	800449c <xPortStartScheduler+0xb8>
        __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60bb      	str	r3, [r7, #8]
    }
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <xPortStartScheduler+0x134>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <xPortStartScheduler+0x134>)
 80044a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <xPortStartScheduler+0x134>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <xPortStartScheduler+0x134>)
 80044b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <xPortStartScheduler+0x138>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <xPortStartScheduler+0x138>)
 80044c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <xPortStartScheduler+0x138>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <xPortStartScheduler+0x138>)
 80044cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044d2:	f000 f963 	bl	800479c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <xPortStartScheduler+0x13c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044dc:	f000 f982 	bl	80047e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <xPortStartScheduler+0x140>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <xPortStartScheduler+0x140>)
 80044e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044ec:	f7ff ff64 	bl	80043b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044f0:	f7ff f86e 	bl	80035d0 <vTaskSwitchContext>
    prvTaskExitError();
 80044f4:	f7ff ff1e 	bl	8004334 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	e000ed00 	.word	0xe000ed00
 8004508:	410fc271 	.word	0x410fc271
 800450c:	410fc270 	.word	0x410fc270
 8004510:	e000e400 	.word	0xe000e400
 8004514:	200001d4 	.word	0x200001d4
 8004518:	200001d8 	.word	0x200001d8
 800451c:	e000ed20 	.word	0xe000ed20
 8004520:	20000010 	.word	0x20000010
 8004524:	e000ef34 	.word	0xe000ef34

08004528 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <vInitPrioGroupValue+0xe4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a37      	ldr	r2, [pc, #220]	; (8004610 <vInitPrioGroupValue+0xe8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10a      	bne.n	800454e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	613b      	str	r3, [r7, #16]
    }
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800454e:	4b2f      	ldr	r3, [pc, #188]	; (800460c <vInitPrioGroupValue+0xe4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a30      	ldr	r2, [pc, #192]	; (8004614 <vInitPrioGroupValue+0xec>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d10a      	bne.n	800456e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	60fb      	str	r3, [r7, #12]
    }
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <vInitPrioGroupValue+0xf0>)
 8004570:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	22ff      	movs	r2, #255	; 0xff
 800457e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <vInitPrioGroupValue+0xf4>)
 8004594:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004596:	4b22      	ldr	r3, [pc, #136]	; (8004620 <vInitPrioGroupValue+0xf8>)
 8004598:	2207      	movs	r2, #7
 800459a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800459c:	e009      	b.n	80045b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d0ef      	beq.n	800459e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d00a      	beq.n	80045e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60bb      	str	r3, [r7, #8]
    }
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045f2:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <vInitPrioGroupValue+0xf8>)
 80045f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000ed00 	.word	0xe000ed00
 8004610:	410fc271 	.word	0x410fc271
 8004614:	410fc270 	.word	0x410fc270
 8004618:	e000e400 	.word	0xe000e400
 800461c:	200001d4 	.word	0x200001d4
 8004620:	200001d8 	.word	0x200001d8

08004624 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
        __asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	607b      	str	r3, [r7, #4]
    }
 800463c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <vPortEnterCritical+0x58>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <vPortEnterCritical+0x58>)
 8004646:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <vPortEnterCritical+0x58>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10f      	bne.n	8004670 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <vPortEnterCritical+0x5c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <vPortEnterCritical+0x4c>
        __asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	603b      	str	r3, [r7, #0]
    }
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <vPortEnterCritical+0x4a>
    }
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000010 	.word	0x20000010
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <vPortExitCritical+0x50>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <vPortExitCritical+0x24>
        __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
    }
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <vPortExitCritical+0x50>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <vPortExitCritical+0x50>)
 80046b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <vPortExitCritical+0x50>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <vPortExitCritical+0x42>
 80046ba:	2300      	movs	r3, #0
 80046bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f383 8811 	msr	BASEPRI, r3
    }
 80046c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000010 	.word	0x20000010
	...

080046e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046e0:	f3ef 8009 	mrs	r0, PSP
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <pxCurrentTCBConst>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	f01e 0f10 	tst.w	lr, #16
 80046f0:	bf08      	it	eq
 80046f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004704:	f380 8811 	msr	BASEPRI, r0
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f7fe ff5e 	bl	80035d0 <vTaskSwitchContext>
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f380 8811 	msr	BASEPRI, r0
 800471c:	bc09      	pop	{r0, r3}
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	6808      	ldr	r0, [r1, #0]
 8004722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004726:	f01e 0f10 	tst.w	lr, #16
 800472a:	bf08      	it	eq
 800472c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004730:	f380 8809 	msr	PSP, r0
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	f3af 8000 	nop.w

08004740 <pxCurrentTCBConst>:
 8004740:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
    }
 8004760:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004762:	f002 f885 	bl	8006870 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004766:	f7fe fe99 	bl	800349c <xTaskIncrementTick>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004770:	f002 f8dc 	bl	800692c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <SysTick_Handler+0x50>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e001      	b.n	8004782 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800477e:	f002 f8b9 	bl	80068f4 <SEGGER_SYSVIEW_RecordExitISR>
 8004782:	2300      	movs	r3, #0
 8004784:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f383 8811 	msr	BASEPRI, r3
    }
 800478c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <vPortSetupTimerInterrupt+0x38>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <vPortSetupTimerInterrupt+0x3c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <vPortSetupTimerInterrupt+0x40>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <vPortSetupTimerInterrupt+0x44>)
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e010 	.word	0xe000e010
 80047d4:	e000e018 	.word	0xe000e018
 80047d8:	20000000 	.word	0x20000000
 80047dc:	10624dd3 	.word	0x10624dd3
 80047e0:	e000e014 	.word	0xe000e014

080047e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047f4 <vPortEnableVFP+0x10>
 80047e8:	6801      	ldr	r1, [r0, #0]
 80047ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ee:	6001      	str	r1, [r0, #0]
 80047f0:	4770      	bx	lr
 80047f2:	0000      	.short	0x0000
 80047f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop

080047fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004802:	f3ef 8305 	mrs	r3, IPSR
 8004806:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b0f      	cmp	r3, #15
 800480c:	d914      	bls.n	8004838 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800480e:	4a17      	ldr	r2, [pc, #92]	; (800486c <vPortValidateInterruptPriority+0x70>)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <vPortValidateInterruptPriority+0x74>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	7afa      	ldrb	r2, [r7, #11]
 800481e:	429a      	cmp	r2, r3
 8004820:	d20a      	bcs.n	8004838 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	607b      	str	r3, [r7, #4]
    }
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004838:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <vPortValidateInterruptPriority+0x78>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <vPortValidateInterruptPriority+0x7c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d90a      	bls.n	800485e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	603b      	str	r3, [r7, #0]
    }
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <vPortValidateInterruptPriority+0x60>
    }
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000e3f0 	.word	0xe000e3f0
 8004870:	200001d4 	.word	0x200001d4
 8004874:	e000ed0c 	.word	0xe000ed0c
 8004878:	200001d8 	.word	0x200001d8

0800487c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004888:	f7fe fd46 	bl	8003318 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800488c:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <pvPortMalloc+0x1a8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004894:	f000 f934 	bl	8004b00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004898:	4b63      	ldr	r3, [pc, #396]	; (8004a28 <pvPortMalloc+0x1ac>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 80a7 	bne.w	80049f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02d      	beq.n	8004908 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80048ac:	2208      	movs	r2, #8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d227      	bcs.n	8004908 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80048b8:	2208      	movs	r2, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d021      	beq.n	800490e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f023 0307 	bic.w	r3, r3, #7
 80048d0:	3308      	adds	r3, #8
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d214      	bcs.n	8004902 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	3308      	adds	r3, #8
 80048e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d010      	beq.n	800490e <pvPortMalloc+0x92>
        __asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	617b      	str	r3, [r7, #20]
    }
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004906:	e002      	b.n	800490e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	e000      	b.n	8004910 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800490e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d06e      	beq.n	80049f4 <pvPortMalloc+0x178>
 8004916:	4b45      	ldr	r3, [pc, #276]	; (8004a2c <pvPortMalloc+0x1b0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d869      	bhi.n	80049f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004920:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <pvPortMalloc+0x1b4>)
 8004922:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004924:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <pvPortMalloc+0x1b4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800492a:	e004      	b.n	8004936 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d903      	bls.n	8004948 <pvPortMalloc+0xcc>
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f1      	bne.n	800492c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <pvPortMalloc+0x1a8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	429a      	cmp	r2, r3
 8004950:	d050      	beq.n	80049f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2208      	movs	r2, #8
 8004958:	4413      	add	r3, r2
 800495a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	2308      	movs	r3, #8
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	429a      	cmp	r2, r3
 8004972:	d91f      	bls.n	80049b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <pvPortMalloc+0x120>
        __asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	613b      	str	r3, [r7, #16]
    }
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ae:	69b8      	ldr	r0, [r7, #24]
 80049b0:	f000 f908 	bl	8004bc4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <pvPortMalloc+0x1b0>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <pvPortMalloc+0x1b0>)
 80049c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049c2:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <pvPortMalloc+0x1b0>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <pvPortMalloc+0x1b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d203      	bcs.n	80049d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049ce:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <pvPortMalloc+0x1b0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <pvPortMalloc+0x1b8>)
 80049d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <pvPortMalloc+0x1ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	431a      	orrs	r2, r3
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049ea:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <pvPortMalloc+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <pvPortMalloc+0x1bc>)
 80049f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049f4:	f7fe fc9e 	bl	8003334 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <pvPortMalloc+0x19c>
        __asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	60fb      	str	r3, [r7, #12]
    }
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <pvPortMalloc+0x19a>
    return pvReturn;
 8004a18:	69fb      	ldr	r3, [r7, #28]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20012de4 	.word	0x20012de4
 8004a28:	20012df8 	.word	0x20012df8
 8004a2c:	20012de8 	.word	0x20012de8
 8004a30:	20012ddc 	.word	0x20012ddc
 8004a34:	20012dec 	.word	0x20012dec
 8004a38:	20012df0 	.word	0x20012df0

08004a3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d04d      	beq.n	8004aea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a4e:	2308      	movs	r3, #8
 8004a50:	425b      	negs	r3, r3
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4413      	add	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <vPortFree+0xb8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <vPortFree+0x44>
        __asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	60fb      	str	r3, [r7, #12]
    }
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <vPortFree+0x62>
        __asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60bb      	str	r3, [r7, #8]
    }
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <vPortFree+0xb8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01e      	beq.n	8004aea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11a      	bne.n	8004aea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <vPortFree+0xb8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	401a      	ands	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004ac4:	f7fe fc28 	bl	8003318 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <vPortFree+0xbc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <vPortFree+0xbc>)
 8004ad4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ad6:	6938      	ldr	r0, [r7, #16]
 8004ad8:	f000 f874 	bl	8004bc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <vPortFree+0xc0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a06      	ldr	r2, [pc, #24]	; (8004afc <vPortFree+0xc0>)
 8004ae4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ae6:	f7fe fc25 	bl	8003334 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20012df8 	.word	0x20012df8
 8004af8:	20012de8 	.word	0x20012de8
 8004afc:	20012df4 	.word	0x20012df4

08004b00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <prvHeapInit+0xac>)
 8004b0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3307      	adds	r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <prvHeapInit+0xac>)
 8004b30:	4413      	add	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b38:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <prvHeapInit+0xb0>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <prvHeapInit+0xb0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <prvHeapInit+0xb4>)
 8004b60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <prvHeapInit+0xb4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <prvHeapInit+0xb4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <prvHeapInit+0xb4>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <prvHeapInit+0xb8>)
 8004b8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <prvHeapInit+0xbc>)
 8004b96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <prvHeapInit+0xc0>)
 8004b9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	200001dc 	.word	0x200001dc
 8004bb0:	20012ddc 	.word	0x20012ddc
 8004bb4:	20012de4 	.word	0x20012de4
 8004bb8:	20012dec 	.word	0x20012dec
 8004bbc:	20012de8 	.word	0x20012de8
 8004bc0:	20012df8 	.word	0x20012df8

08004bc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bcc:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <prvInsertBlockIntoFreeList+0xac>)
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e002      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x14>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d8f7      	bhi.n	8004bd2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4413      	add	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d108      	bne.n	8004c06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d118      	bne.n	8004c4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <prvInsertBlockIntoFreeList+0xb0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d00d      	beq.n	8004c42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e008      	b.n	8004c54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <prvInsertBlockIntoFreeList+0xb0>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e003      	b.n	8004c54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d002      	beq.n	8004c62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20012ddc 	.word	0x20012ddc
 8004c74:	20012de4 	.word	0x20012de4

08004c78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c7c:	4803      	ldr	r0, [pc, #12]	; (8004c8c <_cbSendSystemDesc+0x14>)
 8004c7e:	f001 fda1 	bl	80067c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c82:	4803      	ldr	r0, [pc, #12]	; (8004c90 <_cbSendSystemDesc+0x18>)
 8004c84:	f001 fd9e 	bl	80067c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	0800782c 	.word	0x0800782c
 8004c90:	08007870 	.word	0x08007870

08004c94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004ca2:	4a06      	ldr	r2, [pc, #24]	; (8004cbc <SEGGER_SYSVIEW_Conf+0x28>)
 8004ca4:	f001 f908 	bl	8005eb8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ca8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004cac:	f001 f94a 	bl	8005f44 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08007910 	.word	0x08007910

08004cc0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	e033      	b.n	8004d34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ccc:	491e      	ldr	r1, [pc, #120]	; (8004d48 <_cbSendTaskList+0x88>)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	491a      	ldr	r1, [pc, #104]	; (8004d48 <_cbSendTaskList+0x88>)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	3304      	adds	r3, #4
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	4c16      	ldr	r4, [pc, #88]	; (8004d48 <_cbSendTaskList+0x88>)
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4423      	add	r3, r4
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	681c      	ldr	r4, [r3, #0]
 8004d00:	4d11      	ldr	r5, [pc, #68]	; (8004d48 <_cbSendTaskList+0x88>)
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	442b      	add	r3, r5
 8004d0e:	330c      	adds	r3, #12
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	4e0d      	ldr	r6, [pc, #52]	; (8004d48 <_cbSendTaskList+0x88>)
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4433      	add	r3, r6
 8004d20:	3310      	adds	r3, #16
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	462b      	mov	r3, r5
 8004d28:	4622      	mov	r2, r4
 8004d2a:	f000 f8b5 	bl	8004e98 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3301      	adds	r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <_cbSendTaskList+0x8c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d3c6      	bcc.n	8004ccc <_cbSendTaskList+0xc>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d48:	20012dfc 	.word	0x20012dfc
 8004d4c:	20012e9c 	.word	0x20012e9c

08004d50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d56:	f7fe fb8f 	bl	8003478 <xTaskGetTickCountFromISR>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	f04f 0400 	mov.w	r4, #0
 8004d72:	f04f 0500 	mov.w	r5, #0
 8004d76:	015d      	lsls	r5, r3, #5
 8004d78:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004d7c:	0154      	lsls	r4, r2, #5
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	1a12      	subs	r2, r2, r0
 8004d84:	eb63 0301 	sbc.w	r3, r3, r1
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	f04f 0500 	mov.w	r5, #0
 8004d90:	009d      	lsls	r5, r3, #2
 8004d92:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004d96:	0094      	lsls	r4, r2, #2
 8004d98:	4622      	mov	r2, r4
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	1812      	adds	r2, r2, r0
 8004d9e:	eb41 0303 	adc.w	r3, r1, r3
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	00d9      	lsls	r1, r3, #3
 8004dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db0:	00d0      	lsls	r0, r2, #3
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004dba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bdb0      	pop	{r4, r5, r7, pc}

08004dc8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004dd6:	2205      	movs	r2, #5
 8004dd8:	492b      	ldr	r1, [pc, #172]	; (8004e88 <SYSVIEW_AddTask+0xc0>)
 8004dda:	68b8      	ldr	r0, [r7, #8]
 8004ddc:	f002 f884 	bl	8006ee8 <memcmp>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d04b      	beq.n	8004e7e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b07      	cmp	r3, #7
 8004dec:	d903      	bls.n	8004df6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004dee:	4828      	ldr	r0, [pc, #160]	; (8004e90 <SYSVIEW_AddTask+0xc8>)
 8004df0:	f001 fffa 	bl	8006de8 <SEGGER_SYSVIEW_Warn>
    return;
 8004df4:	e044      	b.n	8004e80 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004df6:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4926      	ldr	r1, [pc, #152]	; (8004e94 <SYSVIEW_AddTask+0xcc>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4921      	ldr	r1, [pc, #132]	; (8004e94 <SYSVIEW_AddTask+0xcc>)
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e20:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	491b      	ldr	r1, [pc, #108]	; (8004e94 <SYSVIEW_AddTask+0xcc>)
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3308      	adds	r3, #8
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4916      	ldr	r1, [pc, #88]	; (8004e94 <SYSVIEW_AddTask+0xcc>)
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	330c      	adds	r3, #12
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4910      	ldr	r1, [pc, #64]	; (8004e94 <SYSVIEW_AddTask+0xcc>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3301      	adds	r3, #1
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <SYSVIEW_AddTask+0xc4>)
 8004e6a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f80e 	bl	8004e98 <SYSVIEW_SendTaskInfo>
 8004e7c:	e000      	b.n	8004e80 <SYSVIEW_AddTask+0xb8>
    return;
 8004e7e:	bf00      	nop

}
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08007880 	.word	0x08007880
 8004e8c:	20012e9c 	.word	0x20012e9c
 8004e90:	08007888 	.word	0x08007888
 8004e94:	20012dfc 	.word	0x20012dfc

08004e98 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	2214      	movs	r2, #20
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 f836 	bl	8006f20 <memset>
  TaskInfo.TaskID     = TaskID;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ec8:	f107 0314 	add.w	r3, r7, #20
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 fb81 	bl	80065d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ed2:	bf00      	nop
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <USART2_IRQHandler+0x80>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <USART2_IRQHandler+0x84>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 030b 	and.w	r3, r3, #11
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d108      	bne.n	8004f16 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f04:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <USART2_IRQHandler+0x88>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <USART2_IRQHandler+0x88>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	79fa      	ldrb	r2, [r7, #7]
 8004f12:	4610      	mov	r0, r2
 8004f14:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01a      	beq.n	8004f56 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <USART2_IRQHandler+0x8c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <USART2_IRQHandler+0x8c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	1dfa      	adds	r2, r7, #7
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4798      	blx	r3
 8004f32:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <USART2_IRQHandler+0x90>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <USART2_IRQHandler+0x90>)
 8004f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e006      	b.n	8004f56 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <USART2_IRQHandler+0x80>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f4c:	79fa      	ldrb	r2, [r7, #7]
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <USART2_IRQHandler+0x84>)
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e000      	b.n	8004f56 <USART2_IRQHandler+0x7a>
      return;
 8004f54:	bf00      	nop
    }
  }
}
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40011000 	.word	0x40011000
 8004f60:	40011004 	.word	0x40011004
 8004f64:	20012ea0 	.word	0x20012ea0
 8004f68:	20012ea4 	.word	0x20012ea4
 8004f6c:	4001100c 	.word	0x4001100c

08004f70 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7e:	6013      	str	r3, [r2, #0]
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	4001100c 	.word	0x4001100c

08004f90 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <_DoInit+0x98>)
 8004f98:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	; (800502c <_DoInit+0x9c>)
 8004faa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a20      	ldr	r2, [pc, #128]	; (8005030 <_DoInit+0xa0>)
 8004fb0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a17      	ldr	r2, [pc, #92]	; (800502c <_DoInit+0x9c>)
 8004fd0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a17      	ldr	r2, [pc, #92]	; (8005034 <_DoInit+0xa4>)
 8004fd6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2210      	movs	r2, #16
 8004fdc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3307      	adds	r3, #7
 8004ff4:	4a10      	ldr	r2, [pc, #64]	; (8005038 <_DoInit+0xa8>)
 8004ff6:	6810      	ldr	r0, [r2, #0]
 8004ff8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ffa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a0e      	ldr	r2, [pc, #56]	; (800503c <_DoInit+0xac>)
 8005002:	6810      	ldr	r0, [r2, #0]
 8005004:	6018      	str	r0, [r3, #0]
 8005006:	8891      	ldrh	r1, [r2, #4]
 8005008:	7992      	ldrb	r2, [r2, #6]
 800500a:	8099      	strh	r1, [r3, #4]
 800500c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800500e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005018:	f3bf 8f5f 	dmb	sy
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	2001446c 	.word	0x2001446c
 800502c:	080078d8 	.word	0x080078d8
 8005030:	20012ea8 	.word	0x20012ea8
 8005034:	200132a8 	.word	0x200132a8
 8005038:	080078e4 	.word	0x080078e4
 800503c:	080078e8 	.word	0x080078e8

08005040 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	; 0x30
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800504c:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <SEGGER_RTT_ReadNoLock+0x108>)
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <SEGGER_RTT_ReadNoLock+0x1e>
 800505a:	f7ff ff99 	bl	8004f90 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	3360      	adds	r3, #96	; 0x60
 800506a:	4a37      	ldr	r2, [pc, #220]	; (8005148 <SEGGER_RTT_ReadNoLock+0x108>)
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005080:	2300      	movs	r3, #0
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	429a      	cmp	r2, r3
 800508a:	d92b      	bls.n	80050e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4293      	cmp	r3, r2
 800509c:	bf28      	it	cs
 800509e:	4613      	movcs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	4413      	add	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b2:	f001 ff27 	bl	8006f04 <memcpy>
    NumBytesRead += NumBytesRem;
 80050b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050dc:	429a      	cmp	r2, r3
 80050de:	d101      	bne.n	80050e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bf28      	it	cs
 80050f4:	4613      	movcs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d019      	beq.n	8005132 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	4413      	add	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	6939      	ldr	r1, [r7, #16]
 800510c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510e:	f001 fef9 	bl	8006f04 <memcpy>
    NumBytesRead += NumBytesRem;
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800512a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005140:	4618      	mov	r0, r3
 8005142:	3730      	adds	r7, #48	; 0x30
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2001446c 	.word	0x2001446c

0800514c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800515a:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005168:	f7ff ff12 	bl	8004f90 <_DoInit>
  SEGGER_RTT_LOCK();
 800516c:	f3ef 8311 	mrs	r3, BASEPRI
 8005170:	f04f 0120 	mov.w	r1, #32
 8005174:	f381 8811 	msr	BASEPRI, r1
 8005178:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800517a:	4b35      	ldr	r3, [pc, #212]	; (8005250 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800517c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005182:	6939      	ldr	r1, [r7, #16]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	3304      	adds	r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	dbeb      	blt.n	8005182 <SEGGER_RTT_AllocUpBuffer+0x36>
 80051aa:	e000      	b.n	80051ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80051ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	da3f      	bge.n	8005238 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051b8:	6939      	ldr	r1, [r7, #16]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	4613      	mov	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	440b      	add	r3, r1
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051cc:	6939      	ldr	r1, [r7, #16]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3304      	adds	r3, #4
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051e2:	6939      	ldr	r1, [r7, #16]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	3320      	adds	r3, #32
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051f6:	6939      	ldr	r1, [r7, #16]
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	4613      	mov	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	440b      	add	r3, r1
 8005204:	3328      	adds	r3, #40	; 0x28
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800520a:	6939      	ldr	r1, [r7, #16]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	3324      	adds	r3, #36	; 0x24
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800521e:	6939      	ldr	r1, [r7, #16]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	440b      	add	r3, r1
 800522c:	332c      	adds	r3, #44	; 0x2c
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005232:	f3bf 8f5f 	dmb	sy
 8005236:	e002      	b.n	800523e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005244:	69fb      	ldr	r3, [r7, #28]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2001446c 	.word	0x2001446c

08005254 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005262:	4b33      	ldr	r3, [pc, #204]	; (8005330 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005270:	f7ff fe8e 	bl	8004f90 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005274:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005276:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	461a      	mov	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4293      	cmp	r3, r2
 8005282:	d24d      	bcs.n	8005320 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005284:	f3ef 8311 	mrs	r3, BASEPRI
 8005288:	f04f 0120 	mov.w	r1, #32
 800528c:	f381 8811 	msr	BASEPRI, r1
 8005290:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d031      	beq.n	80052fc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	3360      	adds	r3, #96	; 0x60
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	3364      	adds	r3, #100	; 0x64
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	3368      	adds	r3, #104	; 0x68
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3370      	adds	r3, #112	; 0x70
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80052e8:	6979      	ldr	r1, [r7, #20]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	440b      	add	r3, r1
 80052f6:	336c      	adds	r3, #108	; 0x6c
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	3374      	adds	r3, #116	; 0x74
 800530c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005310:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	e002      	b.n	8005326 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	2001446c 	.word	0x2001446c

08005334 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005344:	e002      	b.n	800534c <_EncodeStr+0x18>
    Len++;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3301      	adds	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f6      	bne.n	8005346 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d901      	bls.n	8005364 <_EncodeStr+0x30>
    Len = Limit;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2bfe      	cmp	r3, #254	; 0xfe
 8005368:	d806      	bhi.n	8005378 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	60fa      	str	r2, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e011      	b.n	800539c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	60fa      	str	r2, [r7, #12]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	0a19      	lsrs	r1, r3, #8
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	60fa      	str	r2, [r7, #12]
 8005398:	b2ca      	uxtb	r2, r1
 800539a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053a0:	e00a      	b.n	80053b8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	1c53      	adds	r3, r2, #1
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1c59      	adds	r1, r3, #1
 80053ac:	60f9      	str	r1, [r7, #12]
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]
    n++;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	3301      	adds	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d3f0      	bcc.n	80053a2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <_HandleIncomingPacket+0xe0>)
 80053f0:	7e1b      	ldrb	r3, [r3, #24]
 80053f2:	4618      	mov	r0, r3
 80053f4:	1cfb      	adds	r3, r7, #3
 80053f6:	2201      	movs	r2, #1
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7ff fe21 	bl	8005040 <SEGGER_RTT_ReadNoLock>
 80053fe:	4603      	mov	r3, r0
 8005400:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	dd54      	ble.n	80054b2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d032      	beq.n	8005474 <_HandleIncomingPacket+0x8c>
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	dc42      	bgt.n	8005498 <_HandleIncomingPacket+0xb0>
 8005412:	2b07      	cmp	r3, #7
 8005414:	dc16      	bgt.n	8005444 <_HandleIncomingPacket+0x5c>
 8005416:	2b00      	cmp	r3, #0
 8005418:	dd3e      	ble.n	8005498 <_HandleIncomingPacket+0xb0>
 800541a:	3b01      	subs	r3, #1
 800541c:	2b06      	cmp	r3, #6
 800541e:	d83b      	bhi.n	8005498 <_HandleIncomingPacket+0xb0>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <_HandleIncomingPacket+0x40>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800544b 	.word	0x0800544b
 800542c:	08005451 	.word	0x08005451
 8005430:	08005457 	.word	0x08005457
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005463 	.word	0x08005463
 800543c:	08005469 	.word	0x08005469
 8005440:	0800546f 	.word	0x0800546f
 8005444:	2b7f      	cmp	r3, #127	; 0x7f
 8005446:	d036      	beq.n	80054b6 <_HandleIncomingPacket+0xce>
 8005448:	e026      	b.n	8005498 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800544a:	f000 ff47 	bl	80062dc <SEGGER_SYSVIEW_Start>
      break;
 800544e:	e037      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005450:	f001 f800 	bl	8006454 <SEGGER_SYSVIEW_Stop>
      break;
 8005454:	e034      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005456:	f001 f9d9 	bl	800680c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800545a:	e031      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800545c:	f001 f99e 	bl	800679c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005460:	e02e      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005462:	f001 f81d 	bl	80064a0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005466:	e02b      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005468:	f001 fc6c 	bl	8006d44 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800546c:	e028      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800546e:	f001 fc4b 	bl	8006d08 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005472:	e025      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <_HandleIncomingPacket+0xe0>)
 8005476:	7e1b      	ldrb	r3, [r3, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	2201      	movs	r2, #1
 800547e:	4619      	mov	r1, r3
 8005480:	f7ff fdde 	bl	8005040 <SEGGER_RTT_ReadNoLock>
 8005484:	4603      	mov	r3, r0
 8005486:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd15      	ble.n	80054ba <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	4618      	mov	r0, r3
 8005492:	f001 fbb9 	bl	8006c08 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005496:	e010      	b.n	80054ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	b25b      	sxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	da0e      	bge.n	80054be <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <_HandleIncomingPacket+0xe0>)
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	4618      	mov	r0, r3
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	2201      	movs	r2, #1
 80054aa:	4619      	mov	r1, r3
 80054ac:	f7ff fdc8 	bl	8005040 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054b0:	e005      	b.n	80054be <_HandleIncomingPacket+0xd6>
    }
  }
 80054b2:	bf00      	nop
 80054b4:	e004      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
      break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
      break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
      break;
 80054be:	bf00      	nop
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200142c0 	.word	0x200142c0

080054cc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	; 0x30
 80054d0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054d2:	2301      	movs	r3, #1
 80054d4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e0:	4b32      	ldr	r3, [pc, #200]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e6:	e00b      	b.n	8005500 <_TrySendOverflowPacket+0x34>
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b7f      	cmp	r3, #127	; 0x7f
 8005504:	d8f0      	bhi.n	80054e8 <_TrySendOverflowPacket+0x1c>
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <_TrySendOverflowPacket+0xe4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800551c:	4b23      	ldr	r3, [pc, #140]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	e00b      	b.n	8005548 <_TrySendOverflowPacket+0x7c>
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	6279      	str	r1, [r7, #36]	; 0x24
 800553a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	09db      	lsrs	r3, r3, #7
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d8f0      	bhi.n	8005530 <_TrySendOverflowPacket+0x64>
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	627a      	str	r2, [r7, #36]	; 0x24
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	4618      	mov	r0, r3
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	461a      	mov	r2, r3
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	4619      	mov	r1, r3
 8005570:	f7fa fe3e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005574:	4603      	mov	r3, r0
 8005576:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005578:	f7ff fcfa 	bl	8004f70 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3b01      	subs	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	e004      	b.n	80055a0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	4a03      	ldr	r2, [pc, #12]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 800559e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055a0:	693b      	ldr	r3, [r7, #16]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200142c0 	.word	0x200142c0
 80055b0:	e0001004 	.word	0xe0001004

080055b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055c0:	4b6d      	ldr	r3, [pc, #436]	; (8005778 <_SendPacket+0x1c4>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d010      	beq.n	80055ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055c8:	4b6b      	ldr	r3, [pc, #428]	; (8005778 <_SendPacket+0x1c4>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80a5 	beq.w	800571c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055d2:	4b69      	ldr	r3, [pc, #420]	; (8005778 <_SendPacket+0x1c4>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d109      	bne.n	80055ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055da:	f7ff ff77 	bl	80054cc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055de:	4b66      	ldr	r3, [pc, #408]	; (8005778 <_SendPacket+0x1c4>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	f040 809c 	bne.w	8005720 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80055e8:	e001      	b.n	80055ee <_SendPacket+0x3a>
    goto Send;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <_SendPacket+0x3c>
Send:
 80055ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b1f      	cmp	r3, #31
 80055f4:	d809      	bhi.n	800560a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055f6:	4b60      	ldr	r3, [pc, #384]	; (8005778 <_SendPacket+0x1c4>)
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 808d 	bne.w	8005724 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b17      	cmp	r3, #23
 800560e:	d807      	bhi.n	8005620 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3b01      	subs	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e03d      	b.n	800569c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b7f      	cmp	r3, #127	; 0x7f
 800562c:	d912      	bls.n	8005654 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	09da      	lsrs	r2, r3, #7
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3b01      	subs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	3a01      	subs	r2, #1
 8005646:	60fa      	str	r2, [r7, #12]
 8005648:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e006      	b.n	8005662 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b7f      	cmp	r3, #127	; 0x7f
 8005666:	d912      	bls.n	800568e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	09da      	lsrs	r2, r3, #7
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	3a01      	subs	r2, #1
 8005680:	60fa      	str	r2, [r7, #12]
 8005682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e006      	b.n	800569c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b01      	subs	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <_SendPacket+0x1c8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <_SendPacket+0x1c4>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	e00b      	b.n	80056ce <_SendPacket+0x11a>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	6279      	str	r1, [r7, #36]	; 0x24
 80056c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b7f      	cmp	r3, #127	; 0x7f
 80056d2:	d8f0      	bhi.n	80056b6 <_SendPacket+0x102>
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	627a      	str	r2, [r7, #36]	; 0x24
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80056e4:	4b24      	ldr	r3, [pc, #144]	; (8005778 <_SendPacket+0x1c4>)
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	4618      	mov	r0, r3
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f7fa fd7c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056f8:	4603      	mov	r3, r0
 80056fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80056fc:	f7ff fc38 	bl	8004f70 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <_SendPacket+0x1c4>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	60d3      	str	r3, [r2, #12]
 800570c:	e00b      	b.n	8005726 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <_SendPacket+0x1c4>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b18      	ldr	r3, [pc, #96]	; (8005778 <_SendPacket+0x1c4>)
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e004      	b.n	8005726 <_SendPacket+0x172>
    goto SendDone;
 800571c:	bf00      	nop
 800571e:	e002      	b.n	8005726 <_SendPacket+0x172>
      goto SendDone;
 8005720:	bf00      	nop
 8005722:	e000      	b.n	8005726 <_SendPacket+0x172>
      goto SendDone;
 8005724:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <_SendPacket+0x1c4>)
 8005728:	7e1b      	ldrb	r3, [r3, #24]
 800572a:	4619      	mov	r1, r3
 800572c:	4a14      	ldr	r2, [pc, #80]	; (8005780 <_SendPacket+0x1cc>)
 800572e:	460b      	mov	r3, r1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	440b      	add	r3, r1
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	336c      	adds	r3, #108	; 0x6c
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <_SendPacket+0x1c4>)
 800573e:	7e1b      	ldrb	r3, [r3, #24]
 8005740:	4618      	mov	r0, r3
 8005742:	490f      	ldr	r1, [pc, #60]	; (8005780 <_SendPacket+0x1cc>)
 8005744:	4603      	mov	r3, r0
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4403      	add	r3, r0
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	440b      	add	r3, r1
 800574e:	3370      	adds	r3, #112	; 0x70
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d00b      	beq.n	800576e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <_SendPacket+0x1c4>)
 8005758:	789b      	ldrb	r3, [r3, #2]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <_SendPacket+0x1c4>)
 8005760:	2201      	movs	r2, #1
 8005762:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005764:	f7ff fe40 	bl	80053e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <_SendPacket+0x1c4>)
 800576a:	2200      	movs	r2, #0
 800576c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800576e:	bf00      	nop
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200142c0 	.word	0x200142c0
 800577c:	e0001004 	.word	0xe0001004
 8005780:	2001446c 	.word	0x2001446c

08005784 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3301      	adds	r3, #1
 800579a:	2b80      	cmp	r3, #128	; 0x80
 800579c:	d80a      	bhi.n	80057b4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6051      	str	r1, [r2, #4]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d15a      	bne.n	8005872 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	e00b      	b.n	80057f6 <_StoreChar+0x72>
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	6279      	str	r1, [r7, #36]	; 0x24
 80057e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	09db      	lsrs	r3, r3, #7
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b7f      	cmp	r3, #127	; 0x7f
 80057fa:	d8f0      	bhi.n	80057de <_StoreChar+0x5a>
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	627a      	str	r2, [r7, #36]	; 0x24
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e00b      	b.n	800582e <_StoreChar+0xaa>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	61f9      	str	r1, [r7, #28]
 8005820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	09db      	lsrs	r3, r3, #7
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b7f      	cmp	r3, #127	; 0x7f
 8005832:	d8f0      	bhi.n	8005816 <_StoreChar+0x92>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	61fa      	str	r2, [r7, #28]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	221a      	movs	r2, #26
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff feb1 	bl	80055b4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fdb9 	bl	80053ce <_PreparePacket>
 800585c:	4602      	mov	r2, r0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]
  }
}
 8005872:	bf00      	nop
 8005874:	3728      	adds	r7, #40	; 0x28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800588e:	2301      	movs	r3, #1
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005896:	e007      	b.n	80058a8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	623b      	str	r3, [r7, #32]
    Width++;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3301      	adds	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d2f3      	bcs.n	8005898 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d901      	bls.n	80058bc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11f      	bne.n	8005906 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01c      	beq.n	8005906 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <_PrintUnsigned+0x66>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <_PrintUnsigned+0x66>
        c = '0';
 80058dc:	2330      	movs	r3, #48	; 0x30
 80058de:	76fb      	strb	r3, [r7, #27]
 80058e0:	e001      	b.n	80058e6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80058e2:	2320      	movs	r3, #32
 80058e4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058e6:	e007      	b.n	80058f8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	3b01      	subs	r3, #1
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80058ee:	7efb      	ldrb	r3, [r7, #27]
 80058f0:	4619      	mov	r1, r3
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff ff46 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <_PrintUnsigned+0x8a>
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	429a      	cmp	r2, r3
 8005904:	d3f0      	bcc.n	80058e8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d903      	bls.n	8005914 <_PrintUnsigned+0x98>
      NumDigits--;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	e009      	b.n	8005928 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d200      	bcs.n	8005928 <_PrintUnsigned+0xac>
        break;
 8005926:	e005      	b.n	8005934 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005932:	e7e8      	b.n	8005906 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <_PrintUnsigned+0x128>)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff ff14 	bl	8005784 <_StoreChar>
    Digit /= Base;
 800595c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e3      	bne.n	8005934 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d011      	beq.n	800599a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800597c:	e006      	b.n	800598c <_PrintUnsigned+0x110>
        FieldWidth--;
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	3b01      	subs	r3, #1
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005984:	2120      	movs	r1, #32
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fefc 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <_PrintUnsigned+0x11e>
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	429a      	cmp	r2, r3
 8005998:	d3f1      	bcc.n	800597e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3728      	adds	r7, #40	; 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08007924 	.word	0x08007924

080059a8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfb8      	it	lt
 80059bc:	425b      	neglt	r3, r3
 80059be:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059c4:	e007      	b.n	80059d6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80059ce:	613b      	str	r3, [r7, #16]
    Width++;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	daf3      	bge.n	80059c6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d901      	bls.n	80059ea <_PrintInt+0x42>
    Width = NumDigits;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <_PrintInt+0x5e>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db04      	blt.n	8005a00 <_PrintInt+0x58>
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <_PrintInt+0x5e>
    FieldWidth--;
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <_PrintInt+0x6e>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <_PrintInt+0x9c>
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d111      	bne.n	8005a44 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a26:	e006      	b.n	8005a36 <_PrintInt+0x8e>
        FieldWidth--;
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a2e:	2120      	movs	r1, #32
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff fea7 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <_PrintInt+0x9c>
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d3f1      	bcc.n	8005a28 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da07      	bge.n	8005a5a <_PrintInt+0xb2>
    v = -v;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	425b      	negs	r3, r3
 8005a4e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a50:	212d      	movs	r1, #45	; 0x2d
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fe96 	bl	8005784 <_StoreChar>
 8005a58:	e008      	b.n	8005a6c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a64:	212b      	movs	r1, #43	; 0x2b
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fe8c 	bl	8005784 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d019      	beq.n	8005aaa <_PrintInt+0x102>
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d114      	bne.n	8005aaa <_PrintInt+0x102>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d111      	bne.n	8005aaa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00e      	beq.n	8005aaa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a8c:	e006      	b.n	8005a9c <_PrintInt+0xf4>
        FieldWidth--;
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005a94:	2130      	movs	r1, #48	; 0x30
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fe74 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <_PrintInt+0x102>
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3f1      	bcc.n	8005a8e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fedf 	bl	800587c <_PrintUnsigned>
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b098      	sub	sp, #96	; 0x60
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad8:	f04f 0120 	mov.w	r1, #32
 8005adc:	f381 8811 	msr	BASEPRI, r1
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae2:	48b7      	ldr	r0, [pc, #732]	; (8005dc0 <_VPrintTarget+0x2f8>)
 8005ae4:	f7ff fc73 	bl	80053ce <_PreparePacket>
 8005ae8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005aea:	4bb5      	ldr	r3, [pc, #724]	; (8005dc0 <_VPrintTarget+0x2f8>)
 8005aec:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8183 	beq.w	8005e1e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b1c:	2b25      	cmp	r3, #37	; 0x25
 8005b1e:	f040 8170 	bne.w	8005e02 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b22:	2300      	movs	r3, #0
 8005b24:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b26:	2301      	movs	r3, #1
 8005b28:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b36:	3b23      	subs	r3, #35	; 0x23
 8005b38:	2b0d      	cmp	r3, #13
 8005b3a:	d83f      	bhi.n	8005bbc <_VPrintTarget+0xf4>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <_VPrintTarget+0x7c>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005bbd 	.word	0x08005bbd
 8005b4c:	08005bbd 	.word	0x08005bbd
 8005b50:	08005bbd 	.word	0x08005bbd
 8005b54:	08005bbd 	.word	0x08005bbd
 8005b58:	08005bbd 	.word	0x08005bbd
 8005b5c:	08005bbd 	.word	0x08005bbd
 8005b60:	08005bbd 	.word	0x08005bbd
 8005b64:	08005b9d 	.word	0x08005b9d
 8005b68:	08005bbd 	.word	0x08005bbd
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005bbd 	.word	0x08005bbd
 8005b74:	08005bbd 	.word	0x08005bbd
 8005b78:	08005b8d 	.word	0x08005b8d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e01a      	b.n	8005bc2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e012      	b.n	8005bc2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e00a      	b.n	8005bc2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bae:	f043 0308 	orr.w	r3, r3, #8
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e002      	b.n	8005bc2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc0:	bf00      	nop
        }
      } while (v);
 8005bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1b0      	bne.n	8005b2a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8005bda:	d912      	bls.n	8005c02 <_VPrintTarget+0x13a>
 8005bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005be0:	2b39      	cmp	r3, #57	; 0x39
 8005be2:	d80e      	bhi.n	8005c02 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3b30      	subs	r3, #48	; 0x30
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c00:	e7e4      	b.n	8005bcc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c02:	2300      	movs	r3, #0
 8005c04:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c12:	2b2e      	cmp	r3, #46	; 0x2e
 8005c14:	d11d      	bne.n	8005c52 <_VPrintTarget+0x18a>
        sFormat++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c28:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2a:	d912      	bls.n	8005c52 <_VPrintTarget+0x18a>
 8005c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c30:	2b39      	cmp	r3, #57	; 0x39
 8005c32:	d80e      	bhi.n	8005c52 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	461a      	mov	r2, r3
 8005c46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3b30      	subs	r3, #48	; 0x30
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005c50:	e7e4      	b.n	8005c1c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c5e:	2b6c      	cmp	r3, #108	; 0x6c
 8005c60:	d003      	beq.n	8005c6a <_VPrintTarget+0x1a2>
 8005c62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c66:	2b68      	cmp	r3, #104	; 0x68
 8005c68:	d107      	bne.n	8005c7a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c78:	e7ef      	b.n	8005c5a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c7e:	2b25      	cmp	r3, #37	; 0x25
 8005c80:	f000 80b3 	beq.w	8005dea <_VPrintTarget+0x322>
 8005c84:	2b25      	cmp	r3, #37	; 0x25
 8005c86:	f2c0 80b7 	blt.w	8005df8 <_VPrintTarget+0x330>
 8005c8a:	2b78      	cmp	r3, #120	; 0x78
 8005c8c:	f300 80b4 	bgt.w	8005df8 <_VPrintTarget+0x330>
 8005c90:	2b58      	cmp	r3, #88	; 0x58
 8005c92:	f2c0 80b1 	blt.w	8005df8 <_VPrintTarget+0x330>
 8005c96:	3b58      	subs	r3, #88	; 0x58
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	f200 80ad 	bhi.w	8005df8 <_VPrintTarget+0x330>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <_VPrintTarget+0x1dc>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005d9b 	.word	0x08005d9b
 8005ca8:	08005df9 	.word	0x08005df9
 8005cac:	08005df9 	.word	0x08005df9
 8005cb0:	08005df9 	.word	0x08005df9
 8005cb4:	08005df9 	.word	0x08005df9
 8005cb8:	08005df9 	.word	0x08005df9
 8005cbc:	08005df9 	.word	0x08005df9
 8005cc0:	08005df9 	.word	0x08005df9
 8005cc4:	08005df9 	.word	0x08005df9
 8005cc8:	08005df9 	.word	0x08005df9
 8005ccc:	08005df9 	.word	0x08005df9
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d4f 	.word	0x08005d4f
 8005cd8:	08005df9 	.word	0x08005df9
 8005cdc:	08005df9 	.word	0x08005df9
 8005ce0:	08005df9 	.word	0x08005df9
 8005ce4:	08005df9 	.word	0x08005df9
 8005ce8:	08005df9 	.word	0x08005df9
 8005cec:	08005df9 	.word	0x08005df9
 8005cf0:	08005df9 	.word	0x08005df9
 8005cf4:	08005df9 	.word	0x08005df9
 8005cf8:	08005df9 	.word	0x08005df9
 8005cfc:	08005df9 	.word	0x08005df9
 8005d00:	08005df9 	.word	0x08005df9
 8005d04:	08005dc5 	.word	0x08005dc5
 8005d08:	08005df9 	.word	0x08005df9
 8005d0c:	08005df9 	.word	0x08005df9
 8005d10:	08005df9 	.word	0x08005df9
 8005d14:	08005df9 	.word	0x08005df9
 8005d18:	08005d75 	.word	0x08005d75
 8005d1c:	08005df9 	.word	0x08005df9
 8005d20:	08005df9 	.word	0x08005df9
 8005d24:	08005d9b 	.word	0x08005d9b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1d19      	adds	r1, r3, #4
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d3c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fd1c 	bl	8005784 <_StoreChar>
        break;
 8005d4c:	e055      	b.n	8005dfa <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	1d19      	adds	r1, r3, #4
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6011      	str	r1, [r2, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d5c:	f107 0014 	add.w	r0, r7, #20
 8005d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d6e:	f7ff fe1b 	bl	80059a8 <_PrintInt>
        break;
 8005d72:	e042      	b.n	8005dfa <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1d19      	adds	r1, r3, #4
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6011      	str	r1, [r2, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d84:	f107 0014 	add.w	r0, r7, #20
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	220a      	movs	r2, #10
 8005d94:	f7ff fd72 	bl	800587c <_PrintUnsigned>
        break;
 8005d98:	e02f      	b.n	8005dfa <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	1d19      	adds	r1, r3, #4
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005daa:	f107 0014 	add.w	r0, r7, #20
 8005dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db8:	2210      	movs	r2, #16
 8005dba:	f7ff fd5f 	bl	800587c <_PrintUnsigned>
        break;
 8005dbe:	e01c      	b.n	8005dfa <_VPrintTarget+0x332>
 8005dc0:	200142f0 	.word	0x200142f0
      case 'p':
        v = va_arg(*pParamList, int);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dd4:	f107 0014 	add.w	r0, r7, #20
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	2308      	movs	r3, #8
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2308      	movs	r3, #8
 8005de2:	2210      	movs	r2, #16
 8005de4:	f7ff fd4a 	bl	800587c <_PrintUnsigned>
        break;
 8005de8:	e007      	b.n	8005dfa <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005dea:	f107 0314 	add.w	r3, r7, #20
 8005dee:	2125      	movs	r1, #37	; 0x25
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fcc7 	bl	8005784 <_StoreChar>
        break;
 8005df6:	e000      	b.n	8005dfa <_VPrintTarget+0x332>
      default:
        break;
 8005df8:	bf00      	nop
      }
      sFormat++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e007      	b.n	8005e12 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e02:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fcb9 	bl	8005784 <_StoreChar>
    }
  } while (*sFormat);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f47f ae72 	bne.w	8005b00 <_VPrintTarget+0x38>
 8005e1c:	e000      	b.n	8005e20 <_VPrintTarget+0x358>
      break;
 8005e1e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d041      	beq.n	8005eaa <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	643b      	str	r3, [r7, #64]	; 0x40
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e36:	e00b      	b.n	8005e50 <_VPrintTarget+0x388>
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	1c59      	adds	r1, r3, #1
 8005e40:	6439      	str	r1, [r7, #64]	; 0x40
 8005e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	09db      	lsrs	r3, r3, #7
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b7f      	cmp	r3, #127	; 0x7f
 8005e54:	d8f0      	bhi.n	8005e38 <_VPrintTarget+0x370>
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	643a      	str	r2, [r7, #64]	; 0x40
 8005e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6e:	e00b      	b.n	8005e88 <_VPrintTarget+0x3c0>
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d8f0      	bhi.n	8005e70 <_VPrintTarget+0x3a8>
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	221a      	movs	r2, #26
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fb85 	bl	80055b4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005eb0:	bf00      	nop
 8005eb2:	3758      	adds	r7, #88	; 0x58
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ecc:	4918      	ldr	r1, [pc, #96]	; (8005f30 <SEGGER_SYSVIEW_Init+0x78>)
 8005ece:	4819      	ldr	r0, [pc, #100]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ed0:	f7ff f93c 	bl	800514c <SEGGER_RTT_AllocUpBuffer>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005eda:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005ede:	785a      	ldrb	r2, [r3, #1]
 8005ee0:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005ee2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ee4:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005ee6:	7e1b      	ldrb	r3, [r3, #24]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	2308      	movs	r3, #8
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <SEGGER_SYSVIEW_Init+0x84>)
 8005ef2:	4910      	ldr	r1, [pc, #64]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ef4:	f7ff f9ae 	bl	8005254 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005efa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005efe:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <SEGGER_SYSVIEW_Init+0x88>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a0c      	ldr	r2, [pc, #48]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005f06:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f08:	4a0b      	ldr	r2, [pc, #44]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f14:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f1a:	4a07      	ldr	r2, [pc, #28]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200132b8 	.word	0x200132b8
 8005f34:	080078f0 	.word	0x080078f0
 8005f38:	200142c0 	.word	0x200142c0
 8005f3c:	200142b8 	.word	0x200142b8
 8005f40:	e0001004 	.word	0xe0001004

08005f44 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6113      	str	r3, [r2, #16]
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	200142c0 	.word	0x200142c0

08005f64 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f70:	f04f 0120 	mov.w	r1, #32
 8005f74:	f381 8811 	msr	BASEPRI, r1
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f7c:	f7ff fa27 	bl	80053ce <_PreparePacket>
 8005f80:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f7ff fb14 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f383 8811 	msr	BASEPRI, r3
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200142f0 	.word	0x200142f0

08005fa0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005faa:	f3ef 8311 	mrs	r3, BASEPRI
 8005fae:	f04f 0120 	mov.w	r1, #32
 8005fb2:	f381 8811 	msr	BASEPRI, r1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	4816      	ldr	r0, [pc, #88]	; (8006014 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fba:	f7ff fa08 	bl	80053ce <_PreparePacket>
 8005fbe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e00b      	b.n	8005fe6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	61f9      	str	r1, [r7, #28]
 8005fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	09db      	lsrs	r3, r3, #7
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8005fea:	d8f0      	bhi.n	8005fce <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68f9      	ldr	r1, [r7, #12]
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f7ff fad7 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f383 8811 	msr	BASEPRI, r3
}
 800600c:	bf00      	nop
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	200142f0 	.word	0x200142f0

08006018 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b08c      	sub	sp, #48	; 0x30
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006024:	f3ef 8311 	mrs	r3, BASEPRI
 8006028:	f04f 0120 	mov.w	r1, #32
 800602c:	f381 8811 	msr	BASEPRI, r1
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	4825      	ldr	r0, [pc, #148]	; (80060c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006034:	f7ff f9cb 	bl	80053ce <_PreparePacket>
 8006038:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	62bb      	str	r3, [r7, #40]	; 0x28
 8006046:	e00b      	b.n	8006060 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2b7f      	cmp	r3, #127	; 0x7f
 8006064:	d8f0      	bhi.n	8006048 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800606c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	e00b      	b.n	8006098 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	6279      	str	r1, [r7, #36]	; 0x24
 800608a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	09db      	lsrs	r3, r3, #7
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b7f      	cmp	r3, #127	; 0x7f
 800609c:	d8f0      	bhi.n	8006080 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	627a      	str	r2, [r7, #36]	; 0x24
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	69b8      	ldr	r0, [r7, #24]
 80060b4:	f7ff fa7e 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f383 8811 	msr	BASEPRI, r3
}
 80060be:	bf00      	nop
 80060c0:	3730      	adds	r7, #48	; 0x30
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200142f0 	.word	0x200142f0

080060cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060da:	f3ef 8311 	mrs	r3, BASEPRI
 80060de:	f04f 0120 	mov.w	r1, #32
 80060e2:	f381 8811 	msr	BASEPRI, r1
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	4832      	ldr	r0, [pc, #200]	; (80061b4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80060ea:	f7ff f970 	bl	80053ce <_PreparePacket>
 80060ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	633b      	str	r3, [r7, #48]	; 0x30
 80060fc:	e00b      	b.n	8006116 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	b2da      	uxtb	r2, r3
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	6379      	str	r1, [r7, #52]	; 0x34
 8006108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	09db      	lsrs	r3, r3, #7
 8006114:	633b      	str	r3, [r7, #48]	; 0x30
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2b7f      	cmp	r3, #127	; 0x7f
 800611a:	d8f0      	bhi.n	80060fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	637a      	str	r2, [r7, #52]	; 0x34
 8006122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
 8006134:	e00b      	b.n	800614e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	2b7f      	cmp	r3, #127	; 0x7f
 8006152:	d8f0      	bhi.n	8006136 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800615a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	e00b      	b.n	8006186 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1c59      	adds	r1, r3, #1
 8006176:	6279      	str	r1, [r7, #36]	; 0x24
 8006178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	09db      	lsrs	r3, r3, #7
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b7f      	cmp	r3, #127	; 0x7f
 800618a:	d8f0      	bhi.n	800616e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	627a      	str	r2, [r7, #36]	; 0x24
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	6979      	ldr	r1, [r7, #20]
 80061a0:	69b8      	ldr	r0, [r7, #24]
 80061a2:	f7ff fa07 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f383 8811 	msr	BASEPRI, r3
}
 80061ac:	bf00      	nop
 80061ae:	3738      	adds	r7, #56	; 0x38
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	200142f0 	.word	0x200142f0

080061b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b090      	sub	sp, #64	; 0x40
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061c6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ca:	f04f 0120 	mov.w	r1, #32
 80061ce:	f381 8811 	msr	BASEPRI, r1
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	4840      	ldr	r0, [pc, #256]	; (80062d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061d6:	f7ff f8fa 	bl	80053ce <_PreparePacket>
 80061da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e8:	e00b      	b.n	8006202 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f0:	1c59      	adds	r1, r3, #1
 80061f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	09db      	lsrs	r3, r3, #7
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b7f      	cmp	r3, #127	; 0x7f
 8006206:	d8f0      	bhi.n	80061ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800620e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
 8006220:	e00b      	b.n	800623a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	b2da      	uxtb	r2, r3
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	1c59      	adds	r1, r3, #1
 800622a:	6379      	str	r1, [r7, #52]	; 0x34
 800622c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	09db      	lsrs	r3, r3, #7
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b7f      	cmp	r3, #127	; 0x7f
 800623e:	d8f0      	bhi.n	8006222 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	637a      	str	r2, [r7, #52]	; 0x34
 8006246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
 8006258:	e00b      	b.n	8006272 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	b2da      	uxtb	r2, r3
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	09db      	lsrs	r3, r3, #7
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2b7f      	cmp	r3, #127	; 0x7f
 8006276:	d8f0      	bhi.n	800625a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800627e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
 800628c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	e00b      	b.n	80062aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1c59      	adds	r1, r3, #1
 800629a:	6279      	str	r1, [r7, #36]	; 0x24
 800629c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	09db      	lsrs	r3, r3, #7
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b7f      	cmp	r3, #127	; 0x7f
 80062ae:	d8f0      	bhi.n	8006292 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	627a      	str	r2, [r7, #36]	; 0x24
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	6979      	ldr	r1, [r7, #20]
 80062c4:	69b8      	ldr	r0, [r7, #24]
 80062c6:	f7ff f975 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f383 8811 	msr	BASEPRI, r3
}
 80062d0:	bf00      	nop
 80062d2:	3740      	adds	r7, #64	; 0x40
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200142f0 	.word	0x200142f0

080062dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	; 0x30
 80062e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062e2:	4b59      	ldr	r3, [pc, #356]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062e8:	f3ef 8311 	mrs	r3, BASEPRI
 80062ec:	f04f 0120 	mov.w	r1, #32
 80062f0:	f381 8811 	msr	BASEPRI, r1
 80062f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80062f6:	4b54      	ldr	r3, [pc, #336]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	220a      	movs	r2, #10
 80062fc:	4953      	ldr	r1, [pc, #332]	; (800644c <SEGGER_SYSVIEW_Start+0x170>)
 80062fe:	4618      	mov	r0, r3
 8006300:	f7f9 ff76 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800630a:	f7fe fe31 	bl	8004f70 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800630e:	200a      	movs	r0, #10
 8006310:	f7ff fe28 	bl	8005f64 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	f04f 0120 	mov.w	r1, #32
 800631c:	f381 8811 	msr	BASEPRI, r1
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	484b      	ldr	r0, [pc, #300]	; (8006450 <SEGGER_SYSVIEW_Start+0x174>)
 8006324:	f7ff f853 	bl	80053ce <_PreparePacket>
 8006328:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006332:	4b45      	ldr	r3, [pc, #276]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_Start+0x76>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_Start+0x5e>
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	4b36      	ldr	r3, [pc, #216]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	e00b      	b.n	800638c <SEGGER_SYSVIEW_Start+0xb0>
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	6279      	str	r1, [r7, #36]	; 0x24
 800637e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	09db      	lsrs	r3, r3, #7
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2b7f      	cmp	r3, #127	; 0x7f
 8006390:	d8f0      	bhi.n	8006374 <SEGGER_SYSVIEW_Start+0x98>
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	627a      	str	r2, [r7, #36]	; 0x24
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	4b28      	ldr	r3, [pc, #160]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	e00b      	b.n	80063c6 <SEGGER_SYSVIEW_Start+0xea>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	1c59      	adds	r1, r3, #1
 80063b6:	61f9      	str	r1, [r7, #28]
 80063b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	09db      	lsrs	r3, r3, #7
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ca:	d8f0      	bhi.n	80063ae <SEGGER_SYSVIEW_Start+0xd2>
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	61fa      	str	r2, [r7, #28]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e00b      	b.n	80063fe <SEGGER_SYSVIEW_Start+0x122>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	6179      	str	r1, [r7, #20]
 80063f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b7f      	cmp	r3, #127	; 0x7f
 8006402:	d8f0      	bhi.n	80063e6 <SEGGER_SYSVIEW_Start+0x10a>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	617a      	str	r2, [r7, #20]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006414:	2218      	movs	r2, #24
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff f8cb 	bl	80055b4 <_SendPacket>
      RECORD_END();
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <SEGGER_SYSVIEW_Start+0x16c>)
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006432:	f000 f9eb 	bl	800680c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006436:	f000 f9b1 	bl	800679c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800643a:	f000 fc83 	bl	8006d44 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800643e:	bf00      	nop
 8006440:	3730      	adds	r7, #48	; 0x30
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	200142c0 	.word	0x200142c0
 800644c:	08007918 	.word	0x08007918
 8006450:	200142f0 	.word	0x200142f0

08006454 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800645a:	f3ef 8311 	mrs	r3, BASEPRI
 800645e:	f04f 0120 	mov.w	r1, #32
 8006462:	f381 8811 	msr	BASEPRI, r1
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <SEGGER_SYSVIEW_Stop+0x44>)
 800646a:	f7fe ffb0 	bl	80053ce <_PreparePacket>
 800646e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <SEGGER_SYSVIEW_Stop+0x48>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006478:	220b      	movs	r2, #11
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6838      	ldr	r0, [r7, #0]
 800647e:	f7ff f899 	bl	80055b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006482:	4b06      	ldr	r3, [pc, #24]	; (800649c <SEGGER_SYSVIEW_Stop+0x48>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200142f0 	.word	0x200142f0
 800649c:	200142c0 	.word	0x200142c0

080064a0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08c      	sub	sp, #48	; 0x30
 80064a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064a6:	f3ef 8311 	mrs	r3, BASEPRI
 80064aa:	f04f 0120 	mov.w	r1, #32
 80064ae:	f381 8811 	msr	BASEPRI, r1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	4845      	ldr	r0, [pc, #276]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064b6:	f7fe ff8a 	bl	80053ce <_PreparePacket>
 80064ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c4:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2b7f      	cmp	r3, #127	; 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	6279      	str	r1, [r7, #36]	; 0x24
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	627a      	str	r2, [r7, #36]	; 0x24
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	61f9      	str	r1, [r7, #28]
 800654a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b7f      	cmp	r3, #127	; 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	61fa      	str	r2, [r7, #28]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e00b      	b.n	8006590 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	6179      	str	r1, [r7, #20]
 8006582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	09db      	lsrs	r3, r3, #7
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b7f      	cmp	r3, #127	; 0x7f
 8006594:	d8f0      	bhi.n	8006578 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	617a      	str	r2, [r7, #20]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065a6:	2218      	movs	r2, #24
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	68b8      	ldr	r0, [r7, #8]
 80065ac:	f7ff f802 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4798      	blx	r3
  }
}
 80065c4:	bf00      	nop
 80065c6:	3730      	adds	r7, #48	; 0x30
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200142f0 	.word	0x200142f0
 80065d0:	200142c0 	.word	0x200142c0

080065d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b092      	sub	sp, #72	; 0x48
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065dc:	f3ef 8311 	mrs	r3, BASEPRI
 80065e0:	f04f 0120 	mov.w	r1, #32
 80065e4:	f381 8811 	msr	BASEPRI, r1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	486a      	ldr	r0, [pc, #424]	; (8006794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065ec:	f7fe feef 	bl	80053ce <_PreparePacket>
 80065f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b66      	ldr	r3, [pc, #408]	; (8006798 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	e00b      	b.n	8006620 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660a:	b2da      	uxtb	r2, r3
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	6479      	str	r1, [r7, #68]	; 0x44
 8006612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	09db      	lsrs	r3, r3, #7
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
 8006620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006622:	2b7f      	cmp	r3, #127	; 0x7f
 8006624:	d8f0      	bhi.n	8006608 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	647a      	str	r2, [r7, #68]	; 0x44
 800662c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006640:	e00b      	b.n	800665a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	b2da      	uxtb	r2, r3
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800664c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	09db      	lsrs	r3, r3, #7
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b7f      	cmp	r3, #127	; 0x7f
 800665e:	d8f0      	bhi.n	8006642 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	4619      	mov	r1, r3
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7fe fe5b 	bl	8005334 <_EncodeStr>
 800667e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006680:	2209      	movs	r2, #9
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	6938      	ldr	r0, [r7, #16]
 8006686:	f7fe ff95 	bl	80055b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b40      	ldr	r3, [pc, #256]	; (8006798 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	633b      	str	r3, [r7, #48]	; 0x30
 800669e:	e00b      	b.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	6379      	str	r1, [r7, #52]	; 0x34
 80066aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	09db      	lsrs	r3, r3, #7
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	2b7f      	cmp	r3, #127	; 0x7f
 80066bc:	d8f0      	bhi.n	80066a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	637a      	str	r2, [r7, #52]	; 0x34
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d8:	e00b      	b.n	80066f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	09db      	lsrs	r3, r3, #7
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	2b7f      	cmp	r3, #127	; 0x7f
 80066f6:	d8f0      	bhi.n	80066da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	e00b      	b.n	800672c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	6279      	str	r1, [r7, #36]	; 0x24
 800671e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	09db      	lsrs	r3, r3, #7
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2b7f      	cmp	r3, #127	; 0x7f
 8006730:	d8f0      	bhi.n	8006714 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	627a      	str	r2, [r7, #36]	; 0x24
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e00b      	b.n	8006764 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	1c59      	adds	r1, r3, #1
 8006754:	61f9      	str	r1, [r7, #28]
 8006756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	09db      	lsrs	r3, r3, #7
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b7f      	cmp	r3, #127	; 0x7f
 8006768:	d8f0      	bhi.n	800674c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	61fa      	str	r2, [r7, #28]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800677a:	2215      	movs	r2, #21
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	6938      	ldr	r0, [r7, #16]
 8006780:	f7fe ff18 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f383 8811 	msr	BASEPRI, r3
}
 800678a:	bf00      	nop
 800678c:	3748      	adds	r7, #72	; 0x48
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200142f0 	.word	0x200142f0
 8006798:	200142c0 	.word	0x200142c0

0800679c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067b2:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4798      	blx	r3
  }
}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200142c0 	.word	0x200142c0

080067c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067cc:	f3ef 8311 	mrs	r3, BASEPRI
 80067d0:	f04f 0120 	mov.w	r1, #32
 80067d4:	f381 8811 	msr	BASEPRI, r1
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	480b      	ldr	r0, [pc, #44]	; (8006808 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067dc:	f7fe fdf7 	bl	80053ce <_PreparePacket>
 80067e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067e2:	2280      	movs	r2, #128	; 0x80
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	6938      	ldr	r0, [r7, #16]
 80067e8:	f7fe fda4 	bl	8005334 <_EncodeStr>
 80067ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80067ee:	220e      	movs	r2, #14
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	6938      	ldr	r0, [r7, #16]
 80067f4:	f7fe fede 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200142f0 	.word	0x200142f0

0800680c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01a      	beq.n	8006850 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d015      	beq.n	8006850 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006824:	4b10      	ldr	r3, [pc, #64]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4798      	blx	r3
 800682c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006830:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	000a      	movs	r2, r1
 8006840:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006842:	4613      	mov	r3, r2
 8006844:	461a      	mov	r2, r3
 8006846:	4621      	mov	r1, r4
 8006848:	200d      	movs	r0, #13
 800684a:	f7ff fbe5 	bl	8006018 <SEGGER_SYSVIEW_RecordU32x2>
 800684e:	e006      	b.n	800685e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4619      	mov	r1, r3
 8006856:	200c      	movs	r0, #12
 8006858:	f7ff fba2 	bl	8005fa0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bd90      	pop	{r4, r7, pc}
 8006866:	bf00      	nop
 8006868:	200142c0 	.word	0x200142c0
 800686c:	e0001004 	.word	0xe0001004

08006870 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006876:	f3ef 8311 	mrs	r3, BASEPRI
 800687a:	f04f 0120 	mov.w	r1, #32
 800687e:	f381 8811 	msr	BASEPRI, r1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	4819      	ldr	r0, [pc, #100]	; (80068ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006886:	f7fe fda2 	bl	80053ce <_PreparePacket>
 800688a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006890:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006898:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e00b      	b.n	80068bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6179      	str	r1, [r7, #20]
 80068ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b7f      	cmp	r3, #127	; 0x7f
 80068c0:	d8f0      	bhi.n	80068a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	617a      	str	r2, [r7, #20]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068d2:	2202      	movs	r2, #2
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	68b8      	ldr	r0, [r7, #8]
 80068d8:	f7fe fe6c 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200142f0 	.word	0x200142f0
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068fa:	f3ef 8311 	mrs	r3, BASEPRI
 80068fe:	f04f 0120 	mov.w	r1, #32
 8006902:	f381 8811 	msr	BASEPRI, r1
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	4807      	ldr	r0, [pc, #28]	; (8006928 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800690a:	f7fe fd60 	bl	80053ce <_PreparePacket>
 800690e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006910:	2203      	movs	r2, #3
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6838      	ldr	r0, [r7, #0]
 8006916:	f7fe fe4d 	bl	80055b4 <_SendPacket>
  RECORD_END();
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f383 8811 	msr	BASEPRI, r3
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	200142f0 	.word	0x200142f0

0800692c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006932:	f3ef 8311 	mrs	r3, BASEPRI
 8006936:	f04f 0120 	mov.w	r1, #32
 800693a:	f381 8811 	msr	BASEPRI, r1
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	4807      	ldr	r0, [pc, #28]	; (8006960 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006942:	f7fe fd44 	bl	80053ce <_PreparePacket>
 8006946:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006948:	2212      	movs	r2, #18
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6838      	ldr	r0, [r7, #0]
 800694e:	f7fe fe31 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f383 8811 	msr	BASEPRI, r3
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	200142f0 	.word	0x200142f0

08006964 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800696a:	f3ef 8311 	mrs	r3, BASEPRI
 800696e:	f04f 0120 	mov.w	r1, #32
 8006972:	f381 8811 	msr	BASEPRI, r1
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	4807      	ldr	r0, [pc, #28]	; (8006998 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800697a:	f7fe fd28 	bl	80053ce <_PreparePacket>
 800697e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006980:	2211      	movs	r2, #17
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6838      	ldr	r0, [r7, #0]
 8006986:	f7fe fe15 	bl	80055b4 <_SendPacket>
  RECORD_END();
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f383 8811 	msr	BASEPRI, r3
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200142f0 	.word	0x200142f0

0800699c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069a4:	f3ef 8311 	mrs	r3, BASEPRI
 80069a8:	f04f 0120 	mov.w	r1, #32
 80069ac:	f381 8811 	msr	BASEPRI, r1
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	4819      	ldr	r0, [pc, #100]	; (8006a18 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069b4:	f7fe fd0b 	bl	80053ce <_PreparePacket>
 80069b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e00b      	b.n	80069ea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	1c59      	adds	r1, r3, #1
 80069da:	61f9      	str	r1, [r7, #28]
 80069dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	09db      	lsrs	r3, r3, #7
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b7f      	cmp	r3, #127	; 0x7f
 80069ee:	d8f0      	bhi.n	80069d2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	61fa      	str	r2, [r7, #28]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a00:	2208      	movs	r2, #8
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6938      	ldr	r0, [r7, #16]
 8006a06:	f7fe fdd5 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f383 8811 	msr	BASEPRI, r3
}
 8006a10:	bf00      	nop
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200142f0 	.word	0x200142f0
 8006a1c:	200142c0 	.word	0x200142c0

08006a20 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a28:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2c:	f04f 0120 	mov.w	r1, #32
 8006a30:	f381 8811 	msr	BASEPRI, r1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	4819      	ldr	r0, [pc, #100]	; (8006a9c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a38:	f7fe fcc9 	bl	80053ce <_PreparePacket>
 8006a3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e00b      	b.n	8006a6e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	61f9      	str	r1, [r7, #28]
 8006a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	09db      	lsrs	r3, r3, #7
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b7f      	cmp	r3, #127	; 0x7f
 8006a72:	d8f0      	bhi.n	8006a56 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a84:	2204      	movs	r2, #4
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f7fe fd93 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f383 8811 	msr	BASEPRI, r3
}
 8006a94:	bf00      	nop
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200142f0 	.word	0x200142f0
 8006aa0:	200142c0 	.word	0x200142c0

08006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aac:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab0:	f04f 0120 	mov.w	r1, #32
 8006ab4:	f381 8811 	msr	BASEPRI, r1
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	4819      	ldr	r0, [pc, #100]	; (8006b20 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006abc:	f7fe fc87 	bl	80053ce <_PreparePacket>
 8006ac0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e00b      	b.n	8006af2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	1c59      	adds	r1, r3, #1
 8006ae2:	61f9      	str	r1, [r7, #28]
 8006ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	09db      	lsrs	r3, r3, #7
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b7f      	cmp	r3, #127	; 0x7f
 8006af6:	d8f0      	bhi.n	8006ada <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	61fa      	str	r2, [r7, #28]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b08:	2206      	movs	r2, #6
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	6938      	ldr	r0, [r7, #16]
 8006b0e:	f7fe fd51 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f383 8811 	msr	BASEPRI, r3
}
 8006b18:	bf00      	nop
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200142f0 	.word	0x200142f0
 8006b24:	200142c0 	.word	0x200142c0

08006b28 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	4827      	ldr	r0, [pc, #156]	; (8006be0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b42:	f7fe fc44 	bl	80053ce <_PreparePacket>
 8006b46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	623b      	str	r3, [r7, #32]
 8006b5e:	e00b      	b.n	8006b78 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	6279      	str	r1, [r7, #36]	; 0x24
 8006b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	09db      	lsrs	r3, r3, #7
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	d8f0      	bhi.n	8006b60 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	627a      	str	r2, [r7, #36]	; 0x24
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	e00b      	b.n	8006bb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	1c59      	adds	r1, r3, #1
 8006ba0:	61f9      	str	r1, [r7, #28]
 8006ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	09db      	lsrs	r3, r3, #7
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb4:	d8f0      	bhi.n	8006b98 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	61fa      	str	r2, [r7, #28]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	68f9      	ldr	r1, [r7, #12]
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f7fe fcf2 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f383 8811 	msr	BASEPRI, r3
}
 8006bd6:	bf00      	nop
 8006bd8:	3728      	adds	r7, #40	; 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	200142f0 	.word	0x200142f0
 8006be4:	200142c0 	.word	0x200142c0

08006be8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	1ad3      	subs	r3, r2, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	200142c0 	.word	0x200142c0

08006c08 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d06d      	beq.n	8006cf6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c20:	2300      	movs	r3, #0
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c24:	e008      	b.n	8006c38 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	3301      	adds	r3, #1
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3f2      	bcc.n	8006c26 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c40:	e000      	b.n	8006c44 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c42:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d055      	beq.n	8006cf6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	482a      	ldr	r0, [pc, #168]	; (8006d04 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c5a:	f7fe fbb8 	bl	80053ce <_PreparePacket>
 8006c5e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	623b      	str	r3, [r7, #32]
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	6279      	str	r1, [r7, #36]	; 0x24
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_SendModule+0x66>
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	627a      	str	r2, [r7, #36]	; 0x24
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	e00b      	b.n	8006cc0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	61f9      	str	r1, [r7, #28]
 8006cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	09db      	lsrs	r3, r3, #7
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d8f0      	bhi.n	8006ca8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	61fa      	str	r2, [r7, #28]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7fe fb28 	bl	8005334 <_EncodeStr>
 8006ce4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ce6:	2216      	movs	r2, #22
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	6938      	ldr	r0, [r7, #16]
 8006cec:	f7fe fc62 	bl	80055b4 <_SendPacket>
      RECORD_END();
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3730      	adds	r7, #48	; 0x30
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200142e8 	.word	0x200142e8
 8006d04:	200142f0 	.word	0x200142f0

08006d08 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f2      	bne.n	8006d1c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	200142e8 	.word	0x200142e8

08006d44 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4e:	f04f 0120 	mov.w	r1, #32
 8006d52:	f381 8811 	msr	BASEPRI, r1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	4817      	ldr	r0, [pc, #92]	; (8006db8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d5a:	f7fe fb38 	bl	80053ce <_PreparePacket>
 8006d5e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e00b      	b.n	8006d88 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	6179      	str	r1, [r7, #20]
 8006d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	09db      	lsrs	r3, r3, #7
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8c:	d8f0      	bhi.n	8006d70 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	617a      	str	r2, [r7, #20]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d9e:	221b      	movs	r2, #27
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	68b8      	ldr	r0, [r7, #8]
 8006da4:	f7fe fc06 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f383 8811 	msr	BASEPRI, r3
}
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	200142f0 	.word	0x200142f0
 8006dbc:	200142ec 	.word	0x200142ec

08006dc0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006dc0:	b40f      	push	{r0, r1, r2, r3}
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006dc8:	f107 0314 	add.w	r3, r7, #20
 8006dcc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	6938      	ldr	r0, [r7, #16]
 8006dd6:	f7fe fe77 	bl	8005ac8 <_VPrintTarget>
  va_end(ParamList);
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006de4:	b004      	add	sp, #16
 8006de6:	4770      	bx	lr

08006de8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	; 0x28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006df0:	f3ef 8311 	mrs	r3, BASEPRI
 8006df4:	f04f 0120 	mov.w	r1, #32
 8006df8:	f381 8811 	msr	BASEPRI, r1
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	4827      	ldr	r0, [pc, #156]	; (8006e9c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e00:	f7fe fae5 	bl	80053ce <_PreparePacket>
 8006e04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f7fe fa92 	bl	8005334 <_EncodeStr>
 8006e10:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	2301      	movs	r3, #1
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	e00b      	b.n	8006e34 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	1c59      	adds	r1, r3, #1
 8006e24:	6279      	str	r1, [r7, #36]	; 0x24
 8006e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	09db      	lsrs	r3, r3, #7
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	2b7f      	cmp	r3, #127	; 0x7f
 8006e38:	d8f0      	bhi.n	8006e1c <SEGGER_SYSVIEW_Warn+0x34>
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e00b      	b.n	8006e6c <SEGGER_SYSVIEW_Warn+0x84>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	61f9      	str	r1, [r7, #28]
 8006e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	09db      	lsrs	r3, r3, #7
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d8f0      	bhi.n	8006e54 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	61fa      	str	r2, [r7, #28]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e82:	221a      	movs	r2, #26
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f7fe fb94 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f383 8811 	msr	BASEPRI, r3
}
 8006e92:	bf00      	nop
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200142f0 	.word	0x200142f0

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4d0d      	ldr	r5, [pc, #52]	; (8006ed8 <__libc_init_array+0x38>)
 8006ea4:	4c0d      	ldr	r4, [pc, #52]	; (8006edc <__libc_init_array+0x3c>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ee0 <__libc_init_array+0x40>)
 8006eb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ee4 <__libc_init_array+0x44>)
 8006eb4:	f000 fc7e 	bl	80077b4 <_init>
 8006eb8:	1b64      	subs	r4, r4, r5
 8006eba:	10a4      	asrs	r4, r4, #2
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	08007970 	.word	0x08007970
 8006edc:	08007970 	.word	0x08007970
 8006ee0:	08007970 	.word	0x08007970
 8006ee4:	08007974 	.word	0x08007974

08006ee8 <memcmp>:
 8006ee8:	b530      	push	{r4, r5, lr}
 8006eea:	3901      	subs	r1, #1
 8006eec:	2400      	movs	r4, #0
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	d101      	bne.n	8006ef6 <memcmp+0xe>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e005      	b.n	8006f02 <memcmp+0x1a>
 8006ef6:	5d03      	ldrb	r3, [r0, r4]
 8006ef8:	3401      	adds	r4, #1
 8006efa:	5d0d      	ldrb	r5, [r1, r4]
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	d0f6      	beq.n	8006eee <memcmp+0x6>
 8006f00:	1b58      	subs	r0, r3, r5
 8006f02:	bd30      	pop	{r4, r5, pc}

08006f04 <memcpy>:
 8006f04:	440a      	add	r2, r1
 8006f06:	4291      	cmp	r1, r2
 8006f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0c:	d100      	bne.n	8006f10 <memcpy+0xc>
 8006f0e:	4770      	bx	lr
 8006f10:	b510      	push	{r4, lr}
 8006f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	d1f9      	bne.n	8006f12 <memcpy+0xe>
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <memset>:
 8006f20:	4402      	add	r2, r0
 8006f22:	4603      	mov	r3, r0
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d100      	bne.n	8006f2a <memset+0xa>
 8006f28:	4770      	bx	lr
 8006f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2e:	e7f9      	b.n	8006f24 <memset+0x4>

08006f30 <sniprintf>:
 8006f30:	b40c      	push	{r2, r3}
 8006f32:	b530      	push	{r4, r5, lr}
 8006f34:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <sniprintf+0x64>)
 8006f36:	1e0c      	subs	r4, r1, #0
 8006f38:	681d      	ldr	r5, [r3, #0]
 8006f3a:	b09d      	sub	sp, #116	; 0x74
 8006f3c:	da08      	bge.n	8006f50 <sniprintf+0x20>
 8006f3e:	238b      	movs	r3, #139	; 0x8b
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	f04f 30ff 	mov.w	r0, #4294967295
 8006f46:	b01d      	add	sp, #116	; 0x74
 8006f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f4c:	b002      	add	sp, #8
 8006f4e:	4770      	bx	lr
 8006f50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f58:	bf14      	ite	ne
 8006f5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f5e:	4623      	moveq	r3, r4
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	9307      	str	r3, [sp, #28]
 8006f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f68:	9002      	str	r0, [sp, #8]
 8006f6a:	9006      	str	r0, [sp, #24]
 8006f6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f72:	ab21      	add	r3, sp, #132	; 0x84
 8006f74:	a902      	add	r1, sp, #8
 8006f76:	4628      	mov	r0, r5
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	f000 f869 	bl	8007050 <_svfiprintf_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	bfbc      	itt	lt
 8006f82:	238b      	movlt	r3, #139	; 0x8b
 8006f84:	602b      	strlt	r3, [r5, #0]
 8006f86:	2c00      	cmp	r4, #0
 8006f88:	d0dd      	beq.n	8006f46 <sniprintf+0x16>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	e7d9      	b.n	8006f46 <sniprintf+0x16>
 8006f92:	bf00      	nop
 8006f94:	20000014 	.word	0x20000014

08006f98 <__ssputs_r>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	688e      	ldr	r6, [r1, #8]
 8006f9e:	429e      	cmp	r6, r3
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4690      	mov	r8, r2
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	d838      	bhi.n	800701c <__ssputs_r+0x84>
 8006faa:	898a      	ldrh	r2, [r1, #12]
 8006fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fb0:	d032      	beq.n	8007018 <__ssputs_r+0x80>
 8006fb2:	6825      	ldr	r5, [r4, #0]
 8006fb4:	6909      	ldr	r1, [r1, #16]
 8006fb6:	eba5 0901 	sub.w	r9, r5, r1
 8006fba:	6965      	ldr	r5, [r4, #20]
 8006fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	444b      	add	r3, r9
 8006fc8:	106d      	asrs	r5, r5, #1
 8006fca:	429d      	cmp	r5, r3
 8006fcc:	bf38      	it	cc
 8006fce:	461d      	movcc	r5, r3
 8006fd0:	0553      	lsls	r3, r2, #21
 8006fd2:	d531      	bpl.n	8007038 <__ssputs_r+0xa0>
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f000 fb39 	bl	800764c <_malloc_r>
 8006fda:	4606      	mov	r6, r0
 8006fdc:	b950      	cbnz	r0, 8006ff4 <__ssputs_r+0x5c>
 8006fde:	230c      	movs	r3, #12
 8006fe0:	f8ca 3000 	str.w	r3, [sl]
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	6921      	ldr	r1, [r4, #16]
 8006ff6:	464a      	mov	r2, r9
 8006ff8:	f7ff ff84 	bl	8006f04 <memcpy>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	6126      	str	r6, [r4, #16]
 800700a:	6165      	str	r5, [r4, #20]
 800700c:	444e      	add	r6, r9
 800700e:	eba5 0509 	sub.w	r5, r5, r9
 8007012:	6026      	str	r6, [r4, #0]
 8007014:	60a5      	str	r5, [r4, #8]
 8007016:	463e      	mov	r6, r7
 8007018:	42be      	cmp	r6, r7
 800701a:	d900      	bls.n	800701e <__ssputs_r+0x86>
 800701c:	463e      	mov	r6, r7
 800701e:	4632      	mov	r2, r6
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	4641      	mov	r1, r8
 8007024:	f000 faa8 	bl	8007578 <memmove>
 8007028:	68a3      	ldr	r3, [r4, #8]
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	1b9b      	subs	r3, r3, r6
 800702e:	4432      	add	r2, r6
 8007030:	60a3      	str	r3, [r4, #8]
 8007032:	6022      	str	r2, [r4, #0]
 8007034:	2000      	movs	r0, #0
 8007036:	e7db      	b.n	8006ff0 <__ssputs_r+0x58>
 8007038:	462a      	mov	r2, r5
 800703a:	f000 fb61 	bl	8007700 <_realloc_r>
 800703e:	4606      	mov	r6, r0
 8007040:	2800      	cmp	r0, #0
 8007042:	d1e1      	bne.n	8007008 <__ssputs_r+0x70>
 8007044:	6921      	ldr	r1, [r4, #16]
 8007046:	4650      	mov	r0, sl
 8007048:	f000 fab0 	bl	80075ac <_free_r>
 800704c:	e7c7      	b.n	8006fde <__ssputs_r+0x46>
	...

08007050 <_svfiprintf_r>:
 8007050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	4698      	mov	r8, r3
 8007056:	898b      	ldrh	r3, [r1, #12]
 8007058:	061b      	lsls	r3, r3, #24
 800705a:	b09d      	sub	sp, #116	; 0x74
 800705c:	4607      	mov	r7, r0
 800705e:	460d      	mov	r5, r1
 8007060:	4614      	mov	r4, r2
 8007062:	d50e      	bpl.n	8007082 <_svfiprintf_r+0x32>
 8007064:	690b      	ldr	r3, [r1, #16]
 8007066:	b963      	cbnz	r3, 8007082 <_svfiprintf_r+0x32>
 8007068:	2140      	movs	r1, #64	; 0x40
 800706a:	f000 faef 	bl	800764c <_malloc_r>
 800706e:	6028      	str	r0, [r5, #0]
 8007070:	6128      	str	r0, [r5, #16]
 8007072:	b920      	cbnz	r0, 800707e <_svfiprintf_r+0x2e>
 8007074:	230c      	movs	r3, #12
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	e0d1      	b.n	8007222 <_svfiprintf_r+0x1d2>
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	616b      	str	r3, [r5, #20]
 8007082:	2300      	movs	r3, #0
 8007084:	9309      	str	r3, [sp, #36]	; 0x24
 8007086:	2320      	movs	r3, #32
 8007088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800708c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007090:	2330      	movs	r3, #48	; 0x30
 8007092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800723c <_svfiprintf_r+0x1ec>
 8007096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800709a:	f04f 0901 	mov.w	r9, #1
 800709e:	4623      	mov	r3, r4
 80070a0:	469a      	mov	sl, r3
 80070a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a6:	b10a      	cbz	r2, 80070ac <_svfiprintf_r+0x5c>
 80070a8:	2a25      	cmp	r2, #37	; 0x25
 80070aa:	d1f9      	bne.n	80070a0 <_svfiprintf_r+0x50>
 80070ac:	ebba 0b04 	subs.w	fp, sl, r4
 80070b0:	d00b      	beq.n	80070ca <_svfiprintf_r+0x7a>
 80070b2:	465b      	mov	r3, fp
 80070b4:	4622      	mov	r2, r4
 80070b6:	4629      	mov	r1, r5
 80070b8:	4638      	mov	r0, r7
 80070ba:	f7ff ff6d 	bl	8006f98 <__ssputs_r>
 80070be:	3001      	adds	r0, #1
 80070c0:	f000 80aa 	beq.w	8007218 <_svfiprintf_r+0x1c8>
 80070c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c6:	445a      	add	r2, fp
 80070c8:	9209      	str	r2, [sp, #36]	; 0x24
 80070ca:	f89a 3000 	ldrb.w	r3, [sl]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 80a2 	beq.w	8007218 <_svfiprintf_r+0x1c8>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070de:	f10a 0a01 	add.w	sl, sl, #1
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	9307      	str	r3, [sp, #28]
 80070e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ea:	931a      	str	r3, [sp, #104]	; 0x68
 80070ec:	4654      	mov	r4, sl
 80070ee:	2205      	movs	r2, #5
 80070f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f4:	4851      	ldr	r0, [pc, #324]	; (800723c <_svfiprintf_r+0x1ec>)
 80070f6:	f7f9 f8cb 	bl	8000290 <memchr>
 80070fa:	9a04      	ldr	r2, [sp, #16]
 80070fc:	b9d8      	cbnz	r0, 8007136 <_svfiprintf_r+0xe6>
 80070fe:	06d0      	lsls	r0, r2, #27
 8007100:	bf44      	itt	mi
 8007102:	2320      	movmi	r3, #32
 8007104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007108:	0711      	lsls	r1, r2, #28
 800710a:	bf44      	itt	mi
 800710c:	232b      	movmi	r3, #43	; 0x2b
 800710e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007112:	f89a 3000 	ldrb.w	r3, [sl]
 8007116:	2b2a      	cmp	r3, #42	; 0x2a
 8007118:	d015      	beq.n	8007146 <_svfiprintf_r+0xf6>
 800711a:	9a07      	ldr	r2, [sp, #28]
 800711c:	4654      	mov	r4, sl
 800711e:	2000      	movs	r0, #0
 8007120:	f04f 0c0a 	mov.w	ip, #10
 8007124:	4621      	mov	r1, r4
 8007126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712a:	3b30      	subs	r3, #48	; 0x30
 800712c:	2b09      	cmp	r3, #9
 800712e:	d94e      	bls.n	80071ce <_svfiprintf_r+0x17e>
 8007130:	b1b0      	cbz	r0, 8007160 <_svfiprintf_r+0x110>
 8007132:	9207      	str	r2, [sp, #28]
 8007134:	e014      	b.n	8007160 <_svfiprintf_r+0x110>
 8007136:	eba0 0308 	sub.w	r3, r0, r8
 800713a:	fa09 f303 	lsl.w	r3, r9, r3
 800713e:	4313      	orrs	r3, r2
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	46a2      	mov	sl, r4
 8007144:	e7d2      	b.n	80070ec <_svfiprintf_r+0x9c>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	1d19      	adds	r1, r3, #4
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	9103      	str	r1, [sp, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfbb      	ittet	lt
 8007152:	425b      	neglt	r3, r3
 8007154:	f042 0202 	orrlt.w	r2, r2, #2
 8007158:	9307      	strge	r3, [sp, #28]
 800715a:	9307      	strlt	r3, [sp, #28]
 800715c:	bfb8      	it	lt
 800715e:	9204      	strlt	r2, [sp, #16]
 8007160:	7823      	ldrb	r3, [r4, #0]
 8007162:	2b2e      	cmp	r3, #46	; 0x2e
 8007164:	d10c      	bne.n	8007180 <_svfiprintf_r+0x130>
 8007166:	7863      	ldrb	r3, [r4, #1]
 8007168:	2b2a      	cmp	r3, #42	; 0x2a
 800716a:	d135      	bne.n	80071d8 <_svfiprintf_r+0x188>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	9203      	str	r2, [sp, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	bfb8      	it	lt
 8007178:	f04f 33ff 	movlt.w	r3, #4294967295
 800717c:	3402      	adds	r4, #2
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800724c <_svfiprintf_r+0x1fc>
 8007184:	7821      	ldrb	r1, [r4, #0]
 8007186:	2203      	movs	r2, #3
 8007188:	4650      	mov	r0, sl
 800718a:	f7f9 f881 	bl	8000290 <memchr>
 800718e:	b140      	cbz	r0, 80071a2 <_svfiprintf_r+0x152>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	eba0 000a 	sub.w	r0, r0, sl
 8007196:	fa03 f000 	lsl.w	r0, r3, r0
 800719a:	9b04      	ldr	r3, [sp, #16]
 800719c:	4303      	orrs	r3, r0
 800719e:	3401      	adds	r4, #1
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a6:	4826      	ldr	r0, [pc, #152]	; (8007240 <_svfiprintf_r+0x1f0>)
 80071a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ac:	2206      	movs	r2, #6
 80071ae:	f7f9 f86f 	bl	8000290 <memchr>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d038      	beq.n	8007228 <_svfiprintf_r+0x1d8>
 80071b6:	4b23      	ldr	r3, [pc, #140]	; (8007244 <_svfiprintf_r+0x1f4>)
 80071b8:	bb1b      	cbnz	r3, 8007202 <_svfiprintf_r+0x1b2>
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	3307      	adds	r3, #7
 80071be:	f023 0307 	bic.w	r3, r3, #7
 80071c2:	3308      	adds	r3, #8
 80071c4:	9303      	str	r3, [sp, #12]
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	4433      	add	r3, r6
 80071ca:	9309      	str	r3, [sp, #36]	; 0x24
 80071cc:	e767      	b.n	800709e <_svfiprintf_r+0x4e>
 80071ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d2:	460c      	mov	r4, r1
 80071d4:	2001      	movs	r0, #1
 80071d6:	e7a5      	b.n	8007124 <_svfiprintf_r+0xd4>
 80071d8:	2300      	movs	r3, #0
 80071da:	3401      	adds	r4, #1
 80071dc:	9305      	str	r3, [sp, #20]
 80071de:	4619      	mov	r1, r3
 80071e0:	f04f 0c0a 	mov.w	ip, #10
 80071e4:	4620      	mov	r0, r4
 80071e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ea:	3a30      	subs	r2, #48	; 0x30
 80071ec:	2a09      	cmp	r2, #9
 80071ee:	d903      	bls.n	80071f8 <_svfiprintf_r+0x1a8>
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0c5      	beq.n	8007180 <_svfiprintf_r+0x130>
 80071f4:	9105      	str	r1, [sp, #20]
 80071f6:	e7c3      	b.n	8007180 <_svfiprintf_r+0x130>
 80071f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fc:	4604      	mov	r4, r0
 80071fe:	2301      	movs	r3, #1
 8007200:	e7f0      	b.n	80071e4 <_svfiprintf_r+0x194>
 8007202:	ab03      	add	r3, sp, #12
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	462a      	mov	r2, r5
 8007208:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <_svfiprintf_r+0x1f8>)
 800720a:	a904      	add	r1, sp, #16
 800720c:	4638      	mov	r0, r7
 800720e:	f3af 8000 	nop.w
 8007212:	1c42      	adds	r2, r0, #1
 8007214:	4606      	mov	r6, r0
 8007216:	d1d6      	bne.n	80071c6 <_svfiprintf_r+0x176>
 8007218:	89ab      	ldrh	r3, [r5, #12]
 800721a:	065b      	lsls	r3, r3, #25
 800721c:	f53f af2c 	bmi.w	8007078 <_svfiprintf_r+0x28>
 8007220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007222:	b01d      	add	sp, #116	; 0x74
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	462a      	mov	r2, r5
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <_svfiprintf_r+0x1f8>)
 8007230:	a904      	add	r1, sp, #16
 8007232:	4638      	mov	r0, r7
 8007234:	f000 f87a 	bl	800732c <_printf_i>
 8007238:	e7eb      	b.n	8007212 <_svfiprintf_r+0x1c2>
 800723a:	bf00      	nop
 800723c:	08007934 	.word	0x08007934
 8007240:	0800793e 	.word	0x0800793e
 8007244:	00000000 	.word	0x00000000
 8007248:	08006f99 	.word	0x08006f99
 800724c:	0800793a 	.word	0x0800793a

08007250 <_printf_common>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	4616      	mov	r6, r2
 8007256:	4699      	mov	r9, r3
 8007258:	688a      	ldr	r2, [r1, #8]
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007260:	4293      	cmp	r3, r2
 8007262:	bfb8      	it	lt
 8007264:	4613      	movlt	r3, r2
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800726c:	4607      	mov	r7, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b10a      	cbz	r2, 8007276 <_printf_common+0x26>
 8007272:	3301      	adds	r3, #1
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	0699      	lsls	r1, r3, #26
 800727a:	bf42      	ittt	mi
 800727c:	6833      	ldrmi	r3, [r6, #0]
 800727e:	3302      	addmi	r3, #2
 8007280:	6033      	strmi	r3, [r6, #0]
 8007282:	6825      	ldr	r5, [r4, #0]
 8007284:	f015 0506 	ands.w	r5, r5, #6
 8007288:	d106      	bne.n	8007298 <_printf_common+0x48>
 800728a:	f104 0a19 	add.w	sl, r4, #25
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	6832      	ldr	r2, [r6, #0]
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ab      	cmp	r3, r5
 8007296:	dc26      	bgt.n	80072e6 <_printf_common+0x96>
 8007298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800729c:	1e13      	subs	r3, r2, #0
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	0692      	lsls	r2, r2, #26
 80072a6:	d42b      	bmi.n	8007300 <_printf_common+0xb0>
 80072a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d01e      	beq.n	80072f4 <_printf_common+0xa4>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	68e5      	ldr	r5, [r4, #12]
 80072ba:	6832      	ldr	r2, [r6, #0]
 80072bc:	f003 0306 	and.w	r3, r3, #6
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	bf08      	it	eq
 80072c4:	1aad      	subeq	r5, r5, r2
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	bf0c      	ite	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	2500      	movne	r5, #0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfc4      	itt	gt
 80072d6:	1a9b      	subgt	r3, r3, r2
 80072d8:	18ed      	addgt	r5, r5, r3
 80072da:	2600      	movs	r6, #0
 80072dc:	341a      	adds	r4, #26
 80072de:	42b5      	cmp	r5, r6
 80072e0:	d11a      	bne.n	8007318 <_printf_common+0xc8>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e008      	b.n	80072f8 <_printf_common+0xa8>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4652      	mov	r2, sl
 80072ea:	4649      	mov	r1, r9
 80072ec:	4638      	mov	r0, r7
 80072ee:	47c0      	blx	r8
 80072f0:	3001      	adds	r0, #1
 80072f2:	d103      	bne.n	80072fc <_printf_common+0xac>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7c6      	b.n	800728e <_printf_common+0x3e>
 8007300:	18e1      	adds	r1, r4, r3
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	2030      	movs	r0, #48	; 0x30
 8007306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730a:	4422      	add	r2, r4
 800730c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007314:	3302      	adds	r3, #2
 8007316:	e7c7      	b.n	80072a8 <_printf_common+0x58>
 8007318:	2301      	movs	r3, #1
 800731a:	4622      	mov	r2, r4
 800731c:	4649      	mov	r1, r9
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	3001      	adds	r0, #1
 8007324:	d0e6      	beq.n	80072f4 <_printf_common+0xa4>
 8007326:	3601      	adds	r6, #1
 8007328:	e7d9      	b.n	80072de <_printf_common+0x8e>
	...

0800732c <_printf_i>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	460c      	mov	r4, r1
 8007332:	4691      	mov	r9, r2
 8007334:	7e27      	ldrb	r7, [r4, #24]
 8007336:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007338:	2f78      	cmp	r7, #120	; 0x78
 800733a:	4680      	mov	r8, r0
 800733c:	469a      	mov	sl, r3
 800733e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007342:	d807      	bhi.n	8007354 <_printf_i+0x28>
 8007344:	2f62      	cmp	r7, #98	; 0x62
 8007346:	d80a      	bhi.n	800735e <_printf_i+0x32>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f000 80d8 	beq.w	80074fe <_printf_i+0x1d2>
 800734e:	2f58      	cmp	r7, #88	; 0x58
 8007350:	f000 80a3 	beq.w	800749a <_printf_i+0x16e>
 8007354:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800735c:	e03a      	b.n	80073d4 <_printf_i+0xa8>
 800735e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007362:	2b15      	cmp	r3, #21
 8007364:	d8f6      	bhi.n	8007354 <_printf_i+0x28>
 8007366:	a001      	add	r0, pc, #4	; (adr r0, 800736c <_printf_i+0x40>)
 8007368:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073d9 	.word	0x080073d9
 8007374:	08007355 	.word	0x08007355
 8007378:	08007355 	.word	0x08007355
 800737c:	08007355 	.word	0x08007355
 8007380:	08007355 	.word	0x08007355
 8007384:	080073d9 	.word	0x080073d9
 8007388:	08007355 	.word	0x08007355
 800738c:	08007355 	.word	0x08007355
 8007390:	08007355 	.word	0x08007355
 8007394:	08007355 	.word	0x08007355
 8007398:	080074e5 	.word	0x080074e5
 800739c:	08007409 	.word	0x08007409
 80073a0:	080074c7 	.word	0x080074c7
 80073a4:	08007355 	.word	0x08007355
 80073a8:	08007355 	.word	0x08007355
 80073ac:	08007507 	.word	0x08007507
 80073b0:	08007355 	.word	0x08007355
 80073b4:	08007409 	.word	0x08007409
 80073b8:	08007355 	.word	0x08007355
 80073bc:	08007355 	.word	0x08007355
 80073c0:	080074cf 	.word	0x080074cf
 80073c4:	680b      	ldr	r3, [r1, #0]
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	600a      	str	r2, [r1, #0]
 80073cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0a3      	b.n	8007520 <_printf_i+0x1f4>
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	6808      	ldr	r0, [r1, #0]
 80073dc:	062e      	lsls	r6, r5, #24
 80073de:	f100 0304 	add.w	r3, r0, #4
 80073e2:	d50a      	bpl.n	80073fa <_printf_i+0xce>
 80073e4:	6805      	ldr	r5, [r0, #0]
 80073e6:	600b      	str	r3, [r1, #0]
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	da03      	bge.n	80073f4 <_printf_i+0xc8>
 80073ec:	232d      	movs	r3, #45	; 0x2d
 80073ee:	426d      	negs	r5, r5
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	485e      	ldr	r0, [pc, #376]	; (8007570 <_printf_i+0x244>)
 80073f6:	230a      	movs	r3, #10
 80073f8:	e019      	b.n	800742e <_printf_i+0x102>
 80073fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073fe:	6805      	ldr	r5, [r0, #0]
 8007400:	600b      	str	r3, [r1, #0]
 8007402:	bf18      	it	ne
 8007404:	b22d      	sxthne	r5, r5
 8007406:	e7ef      	b.n	80073e8 <_printf_i+0xbc>
 8007408:	680b      	ldr	r3, [r1, #0]
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	1d18      	adds	r0, r3, #4
 800740e:	6008      	str	r0, [r1, #0]
 8007410:	0628      	lsls	r0, r5, #24
 8007412:	d501      	bpl.n	8007418 <_printf_i+0xec>
 8007414:	681d      	ldr	r5, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0xf2>
 8007418:	0669      	lsls	r1, r5, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0xe8>
 800741c:	881d      	ldrh	r5, [r3, #0]
 800741e:	4854      	ldr	r0, [pc, #336]	; (8007570 <_printf_i+0x244>)
 8007420:	2f6f      	cmp	r7, #111	; 0x6f
 8007422:	bf0c      	ite	eq
 8007424:	2308      	moveq	r3, #8
 8007426:	230a      	movne	r3, #10
 8007428:	2100      	movs	r1, #0
 800742a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742e:	6866      	ldr	r6, [r4, #4]
 8007430:	60a6      	str	r6, [r4, #8]
 8007432:	2e00      	cmp	r6, #0
 8007434:	bfa2      	ittt	ge
 8007436:	6821      	ldrge	r1, [r4, #0]
 8007438:	f021 0104 	bicge.w	r1, r1, #4
 800743c:	6021      	strge	r1, [r4, #0]
 800743e:	b90d      	cbnz	r5, 8007444 <_printf_i+0x118>
 8007440:	2e00      	cmp	r6, #0
 8007442:	d04d      	beq.n	80074e0 <_printf_i+0x1b4>
 8007444:	4616      	mov	r6, r2
 8007446:	fbb5 f1f3 	udiv	r1, r5, r3
 800744a:	fb03 5711 	mls	r7, r3, r1, r5
 800744e:	5dc7      	ldrb	r7, [r0, r7]
 8007450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007454:	462f      	mov	r7, r5
 8007456:	42bb      	cmp	r3, r7
 8007458:	460d      	mov	r5, r1
 800745a:	d9f4      	bls.n	8007446 <_printf_i+0x11a>
 800745c:	2b08      	cmp	r3, #8
 800745e:	d10b      	bne.n	8007478 <_printf_i+0x14c>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07df      	lsls	r7, r3, #31
 8007464:	d508      	bpl.n	8007478 <_printf_i+0x14c>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	bfde      	ittt	le
 800746e:	2330      	movle	r3, #48	; 0x30
 8007470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007478:	1b92      	subs	r2, r2, r6
 800747a:	6122      	str	r2, [r4, #16]
 800747c:	f8cd a000 	str.w	sl, [sp]
 8007480:	464b      	mov	r3, r9
 8007482:	aa03      	add	r2, sp, #12
 8007484:	4621      	mov	r1, r4
 8007486:	4640      	mov	r0, r8
 8007488:	f7ff fee2 	bl	8007250 <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	d14c      	bne.n	800752a <_printf_i+0x1fe>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	b004      	add	sp, #16
 8007496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749a:	4835      	ldr	r0, [pc, #212]	; (8007570 <_printf_i+0x244>)
 800749c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	680e      	ldr	r6, [r1, #0]
 80074a4:	061f      	lsls	r7, r3, #24
 80074a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80074aa:	600e      	str	r6, [r1, #0]
 80074ac:	d514      	bpl.n	80074d8 <_printf_i+0x1ac>
 80074ae:	07d9      	lsls	r1, r3, #31
 80074b0:	bf44      	itt	mi
 80074b2:	f043 0320 	orrmi.w	r3, r3, #32
 80074b6:	6023      	strmi	r3, [r4, #0]
 80074b8:	b91d      	cbnz	r5, 80074c2 <_printf_i+0x196>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f023 0320 	bic.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2310      	movs	r3, #16
 80074c4:	e7b0      	b.n	8007428 <_printf_i+0xfc>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2378      	movs	r3, #120	; 0x78
 80074d0:	4828      	ldr	r0, [pc, #160]	; (8007574 <_printf_i+0x248>)
 80074d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d6:	e7e3      	b.n	80074a0 <_printf_i+0x174>
 80074d8:	065e      	lsls	r6, r3, #25
 80074da:	bf48      	it	mi
 80074dc:	b2ad      	uxthmi	r5, r5
 80074de:	e7e6      	b.n	80074ae <_printf_i+0x182>
 80074e0:	4616      	mov	r6, r2
 80074e2:	e7bb      	b.n	800745c <_printf_i+0x130>
 80074e4:	680b      	ldr	r3, [r1, #0]
 80074e6:	6826      	ldr	r6, [r4, #0]
 80074e8:	6960      	ldr	r0, [r4, #20]
 80074ea:	1d1d      	adds	r5, r3, #4
 80074ec:	600d      	str	r5, [r1, #0]
 80074ee:	0635      	lsls	r5, r6, #24
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	d501      	bpl.n	80074f8 <_printf_i+0x1cc>
 80074f4:	6018      	str	r0, [r3, #0]
 80074f6:	e002      	b.n	80074fe <_printf_i+0x1d2>
 80074f8:	0671      	lsls	r1, r6, #25
 80074fa:	d5fb      	bpl.n	80074f4 <_printf_i+0x1c8>
 80074fc:	8018      	strh	r0, [r3, #0]
 80074fe:	2300      	movs	r3, #0
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	4616      	mov	r6, r2
 8007504:	e7ba      	b.n	800747c <_printf_i+0x150>
 8007506:	680b      	ldr	r3, [r1, #0]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	600a      	str	r2, [r1, #0]
 800750c:	681e      	ldr	r6, [r3, #0]
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	2100      	movs	r1, #0
 8007512:	4630      	mov	r0, r6
 8007514:	f7f8 febc 	bl	8000290 <memchr>
 8007518:	b108      	cbz	r0, 800751e <_printf_i+0x1f2>
 800751a:	1b80      	subs	r0, r0, r6
 800751c:	6060      	str	r0, [r4, #4]
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	2300      	movs	r3, #0
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007528:	e7a8      	b.n	800747c <_printf_i+0x150>
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	4632      	mov	r2, r6
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	47d0      	blx	sl
 8007534:	3001      	adds	r0, #1
 8007536:	d0ab      	beq.n	8007490 <_printf_i+0x164>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	079b      	lsls	r3, r3, #30
 800753c:	d413      	bmi.n	8007566 <_printf_i+0x23a>
 800753e:	68e0      	ldr	r0, [r4, #12]
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	4298      	cmp	r0, r3
 8007544:	bfb8      	it	lt
 8007546:	4618      	movlt	r0, r3
 8007548:	e7a4      	b.n	8007494 <_printf_i+0x168>
 800754a:	2301      	movs	r3, #1
 800754c:	4632      	mov	r2, r6
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d09b      	beq.n	8007490 <_printf_i+0x164>
 8007558:	3501      	adds	r5, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	9903      	ldr	r1, [sp, #12]
 800755e:	1a5b      	subs	r3, r3, r1
 8007560:	42ab      	cmp	r3, r5
 8007562:	dcf2      	bgt.n	800754a <_printf_i+0x21e>
 8007564:	e7eb      	b.n	800753e <_printf_i+0x212>
 8007566:	2500      	movs	r5, #0
 8007568:	f104 0619 	add.w	r6, r4, #25
 800756c:	e7f5      	b.n	800755a <_printf_i+0x22e>
 800756e:	bf00      	nop
 8007570:	08007945 	.word	0x08007945
 8007574:	08007956 	.word	0x08007956

08007578 <memmove>:
 8007578:	4288      	cmp	r0, r1
 800757a:	b510      	push	{r4, lr}
 800757c:	eb01 0402 	add.w	r4, r1, r2
 8007580:	d902      	bls.n	8007588 <memmove+0x10>
 8007582:	4284      	cmp	r4, r0
 8007584:	4623      	mov	r3, r4
 8007586:	d807      	bhi.n	8007598 <memmove+0x20>
 8007588:	1e43      	subs	r3, r0, #1
 800758a:	42a1      	cmp	r1, r4
 800758c:	d008      	beq.n	80075a0 <memmove+0x28>
 800758e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007596:	e7f8      	b.n	800758a <memmove+0x12>
 8007598:	4402      	add	r2, r0
 800759a:	4601      	mov	r1, r0
 800759c:	428a      	cmp	r2, r1
 800759e:	d100      	bne.n	80075a2 <memmove+0x2a>
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075aa:	e7f7      	b.n	800759c <memmove+0x24>

080075ac <_free_r>:
 80075ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ae:	2900      	cmp	r1, #0
 80075b0:	d048      	beq.n	8007644 <_free_r+0x98>
 80075b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b6:	9001      	str	r0, [sp, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f1a1 0404 	sub.w	r4, r1, #4
 80075be:	bfb8      	it	lt
 80075c0:	18e4      	addlt	r4, r4, r3
 80075c2:	f000 f8d3 	bl	800776c <__malloc_lock>
 80075c6:	4a20      	ldr	r2, [pc, #128]	; (8007648 <_free_r+0x9c>)
 80075c8:	9801      	ldr	r0, [sp, #4]
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	4615      	mov	r5, r2
 80075ce:	b933      	cbnz	r3, 80075de <_free_r+0x32>
 80075d0:	6063      	str	r3, [r4, #4]
 80075d2:	6014      	str	r4, [r2, #0]
 80075d4:	b003      	add	sp, #12
 80075d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075da:	f000 b8cd 	b.w	8007778 <__malloc_unlock>
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d90b      	bls.n	80075fa <_free_r+0x4e>
 80075e2:	6821      	ldr	r1, [r4, #0]
 80075e4:	1862      	adds	r2, r4, r1
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bf04      	itt	eq
 80075ea:	681a      	ldreq	r2, [r3, #0]
 80075ec:	685b      	ldreq	r3, [r3, #4]
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	bf04      	itt	eq
 80075f2:	1852      	addeq	r2, r2, r1
 80075f4:	6022      	streq	r2, [r4, #0]
 80075f6:	602c      	str	r4, [r5, #0]
 80075f8:	e7ec      	b.n	80075d4 <_free_r+0x28>
 80075fa:	461a      	mov	r2, r3
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b10b      	cbz	r3, 8007604 <_free_r+0x58>
 8007600:	42a3      	cmp	r3, r4
 8007602:	d9fa      	bls.n	80075fa <_free_r+0x4e>
 8007604:	6811      	ldr	r1, [r2, #0]
 8007606:	1855      	adds	r5, r2, r1
 8007608:	42a5      	cmp	r5, r4
 800760a:	d10b      	bne.n	8007624 <_free_r+0x78>
 800760c:	6824      	ldr	r4, [r4, #0]
 800760e:	4421      	add	r1, r4
 8007610:	1854      	adds	r4, r2, r1
 8007612:	42a3      	cmp	r3, r4
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	d1dd      	bne.n	80075d4 <_free_r+0x28>
 8007618:	681c      	ldr	r4, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	6053      	str	r3, [r2, #4]
 800761e:	4421      	add	r1, r4
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	e7d7      	b.n	80075d4 <_free_r+0x28>
 8007624:	d902      	bls.n	800762c <_free_r+0x80>
 8007626:	230c      	movs	r3, #12
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	e7d3      	b.n	80075d4 <_free_r+0x28>
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	1961      	adds	r1, r4, r5
 8007630:	428b      	cmp	r3, r1
 8007632:	bf04      	itt	eq
 8007634:	6819      	ldreq	r1, [r3, #0]
 8007636:	685b      	ldreq	r3, [r3, #4]
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	bf04      	itt	eq
 800763c:	1949      	addeq	r1, r1, r5
 800763e:	6021      	streq	r1, [r4, #0]
 8007640:	6054      	str	r4, [r2, #4]
 8007642:	e7c7      	b.n	80075d4 <_free_r+0x28>
 8007644:	b003      	add	sp, #12
 8007646:	bd30      	pop	{r4, r5, pc}
 8007648:	200143d4 	.word	0x200143d4

0800764c <_malloc_r>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	1ccd      	adds	r5, r1, #3
 8007650:	f025 0503 	bic.w	r5, r5, #3
 8007654:	3508      	adds	r5, #8
 8007656:	2d0c      	cmp	r5, #12
 8007658:	bf38      	it	cc
 800765a:	250c      	movcc	r5, #12
 800765c:	2d00      	cmp	r5, #0
 800765e:	4606      	mov	r6, r0
 8007660:	db01      	blt.n	8007666 <_malloc_r+0x1a>
 8007662:	42a9      	cmp	r1, r5
 8007664:	d903      	bls.n	800766e <_malloc_r+0x22>
 8007666:	230c      	movs	r3, #12
 8007668:	6033      	str	r3, [r6, #0]
 800766a:	2000      	movs	r0, #0
 800766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766e:	f000 f87d 	bl	800776c <__malloc_lock>
 8007672:	4921      	ldr	r1, [pc, #132]	; (80076f8 <_malloc_r+0xac>)
 8007674:	680a      	ldr	r2, [r1, #0]
 8007676:	4614      	mov	r4, r2
 8007678:	b99c      	cbnz	r4, 80076a2 <_malloc_r+0x56>
 800767a:	4f20      	ldr	r7, [pc, #128]	; (80076fc <_malloc_r+0xb0>)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	b923      	cbnz	r3, 800768a <_malloc_r+0x3e>
 8007680:	4621      	mov	r1, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f000 f862 	bl	800774c <_sbrk_r>
 8007688:	6038      	str	r0, [r7, #0]
 800768a:	4629      	mov	r1, r5
 800768c:	4630      	mov	r0, r6
 800768e:	f000 f85d 	bl	800774c <_sbrk_r>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	d123      	bne.n	80076de <_malloc_r+0x92>
 8007696:	230c      	movs	r3, #12
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f86c 	bl	8007778 <__malloc_unlock>
 80076a0:	e7e3      	b.n	800766a <_malloc_r+0x1e>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	1b5b      	subs	r3, r3, r5
 80076a6:	d417      	bmi.n	80076d8 <_malloc_r+0x8c>
 80076a8:	2b0b      	cmp	r3, #11
 80076aa:	d903      	bls.n	80076b4 <_malloc_r+0x68>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	441c      	add	r4, r3
 80076b0:	6025      	str	r5, [r4, #0]
 80076b2:	e004      	b.n	80076be <_malloc_r+0x72>
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	42a2      	cmp	r2, r4
 80076b8:	bf0c      	ite	eq
 80076ba:	600b      	streq	r3, [r1, #0]
 80076bc:	6053      	strne	r3, [r2, #4]
 80076be:	4630      	mov	r0, r6
 80076c0:	f000 f85a 	bl	8007778 <__malloc_unlock>
 80076c4:	f104 000b 	add.w	r0, r4, #11
 80076c8:	1d23      	adds	r3, r4, #4
 80076ca:	f020 0007 	bic.w	r0, r0, #7
 80076ce:	1ac2      	subs	r2, r0, r3
 80076d0:	d0cc      	beq.n	800766c <_malloc_r+0x20>
 80076d2:	1a1b      	subs	r3, r3, r0
 80076d4:	50a3      	str	r3, [r4, r2]
 80076d6:	e7c9      	b.n	800766c <_malloc_r+0x20>
 80076d8:	4622      	mov	r2, r4
 80076da:	6864      	ldr	r4, [r4, #4]
 80076dc:	e7cc      	b.n	8007678 <_malloc_r+0x2c>
 80076de:	1cc4      	adds	r4, r0, #3
 80076e0:	f024 0403 	bic.w	r4, r4, #3
 80076e4:	42a0      	cmp	r0, r4
 80076e6:	d0e3      	beq.n	80076b0 <_malloc_r+0x64>
 80076e8:	1a21      	subs	r1, r4, r0
 80076ea:	4630      	mov	r0, r6
 80076ec:	f000 f82e 	bl	800774c <_sbrk_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d1dd      	bne.n	80076b0 <_malloc_r+0x64>
 80076f4:	e7cf      	b.n	8007696 <_malloc_r+0x4a>
 80076f6:	bf00      	nop
 80076f8:	200143d4 	.word	0x200143d4
 80076fc:	200143d8 	.word	0x200143d8

08007700 <_realloc_r>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	4607      	mov	r7, r0
 8007704:	4614      	mov	r4, r2
 8007706:	460e      	mov	r6, r1
 8007708:	b921      	cbnz	r1, 8007714 <_realloc_r+0x14>
 800770a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800770e:	4611      	mov	r1, r2
 8007710:	f7ff bf9c 	b.w	800764c <_malloc_r>
 8007714:	b922      	cbnz	r2, 8007720 <_realloc_r+0x20>
 8007716:	f7ff ff49 	bl	80075ac <_free_r>
 800771a:	4625      	mov	r5, r4
 800771c:	4628      	mov	r0, r5
 800771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007720:	f000 f830 	bl	8007784 <_malloc_usable_size_r>
 8007724:	42a0      	cmp	r0, r4
 8007726:	d20f      	bcs.n	8007748 <_realloc_r+0x48>
 8007728:	4621      	mov	r1, r4
 800772a:	4638      	mov	r0, r7
 800772c:	f7ff ff8e 	bl	800764c <_malloc_r>
 8007730:	4605      	mov	r5, r0
 8007732:	2800      	cmp	r0, #0
 8007734:	d0f2      	beq.n	800771c <_realloc_r+0x1c>
 8007736:	4631      	mov	r1, r6
 8007738:	4622      	mov	r2, r4
 800773a:	f7ff fbe3 	bl	8006f04 <memcpy>
 800773e:	4631      	mov	r1, r6
 8007740:	4638      	mov	r0, r7
 8007742:	f7ff ff33 	bl	80075ac <_free_r>
 8007746:	e7e9      	b.n	800771c <_realloc_r+0x1c>
 8007748:	4635      	mov	r5, r6
 800774a:	e7e7      	b.n	800771c <_realloc_r+0x1c>

0800774c <_sbrk_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d06      	ldr	r5, [pc, #24]	; (8007768 <_sbrk_r+0x1c>)
 8007750:	2300      	movs	r3, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f000 f81e 	bl	8007798 <_sbrk>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_sbrk_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_sbrk_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	20014514 	.word	0x20014514

0800776c <__malloc_lock>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__malloc_lock+0x8>)
 800776e:	f000 b811 	b.w	8007794 <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	2001451c 	.word	0x2001451c

08007778 <__malloc_unlock>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__malloc_unlock+0x8>)
 800777a:	f000 b80c 	b.w	8007796 <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	2001451c 	.word	0x2001451c

08007784 <_malloc_usable_size_r>:
 8007784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007788:	1f18      	subs	r0, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	bfbc      	itt	lt
 800778e:	580b      	ldrlt	r3, [r1, r0]
 8007790:	18c0      	addlt	r0, r0, r3
 8007792:	4770      	bx	lr

08007794 <__retarget_lock_acquire_recursive>:
 8007794:	4770      	bx	lr

08007796 <__retarget_lock_release_recursive>:
 8007796:	4770      	bx	lr

08007798 <_sbrk>:
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <_sbrk+0x14>)
 800779a:	6819      	ldr	r1, [r3, #0]
 800779c:	4602      	mov	r2, r0
 800779e:	b909      	cbnz	r1, 80077a4 <_sbrk+0xc>
 80077a0:	4903      	ldr	r1, [pc, #12]	; (80077b0 <_sbrk+0x18>)
 80077a2:	6019      	str	r1, [r3, #0]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	4402      	add	r2, r0
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	4770      	bx	lr
 80077ac:	200143dc 	.word	0x200143dc
 80077b0:	20014528 	.word	0x20014528

080077b4 <_init>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	bf00      	nop
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr

080077c0 <_fini>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	bf00      	nop
 80077c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c6:	bc08      	pop	{r3}
 80077c8:	469e      	mov	lr, r3
 80077ca:	4770      	bx	lr
