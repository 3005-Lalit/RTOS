
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b0  080070b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b8  080070b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080070c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014488  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001449c  2001449c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000183bc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e4  00000000  00000000  00038400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  0003c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002569b  00000000  00000000  0003d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014984  00000000  00000000  00062fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e647b  00000000  00000000  0007795f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015ddda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f18  00000000  00000000  0015de30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f30 	.word	0x08006f30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08006f30 	.word	0x08006f30

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200143f4 	.word	0x200143f4

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96e 	b.w	8000578 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468c      	mov	ip, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8083 	bne.w	80003ca <__udivmoddi4+0x116>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d947      	bls.n	800035a <__udivmoddi4+0xa6>
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	b142      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	f1c2 0020 	rsb	r0, r2, #32
 80002d4:	fa24 f000 	lsr.w	r0, r4, r0
 80002d8:	4091      	lsls	r1, r2
 80002da:	4097      	lsls	r7, r2
 80002dc:	ea40 0c01 	orr.w	ip, r0, r1
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fbbc f6f8 	udiv	r6, ip, r8
 80002ec:	fa1f fe87 	uxth.w	lr, r7
 80002f0:	fb08 c116 	mls	r1, r8, r6, ip
 80002f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f8:	fb06 f10e 	mul.w	r1, r6, lr
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x60>
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 8119 	bcs.w	800053c <__udivmoddi4+0x288>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 8116 	bls.w	800053c <__udivmoddi4+0x288>
 8000310:	3e02      	subs	r6, #2
 8000312:	443b      	add	r3, r7
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	45a6      	cmp	lr, r4
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x8c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	f080 8105 	bcs.w	8000540 <__udivmoddi4+0x28c>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f240 8102 	bls.w	8000540 <__udivmoddi4+0x28c>
 800033c:	3802      	subs	r0, #2
 800033e:	443c      	add	r4, r7
 8000340:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa0>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xaa>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	2a00      	cmp	r2, #0
 8000364:	d150      	bne.n	8000408 <__udivmoddi4+0x154>
 8000366:	1bcb      	subs	r3, r1, r7
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	2601      	movs	r6, #1
 8000372:	fbb3 fcfe 	udiv	ip, r3, lr
 8000376:	0c21      	lsrs	r1, r4, #16
 8000378:	fb0e 331c 	mls	r3, lr, ip, r3
 800037c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000380:	fb08 f30c 	mul.w	r3, r8, ip
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xe4>
 8000388:	1879      	adds	r1, r7, r1
 800038a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0xe2>
 8000390:	428b      	cmp	r3, r1
 8000392:	f200 80e9 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 8000396:	4684      	mov	ip, r0
 8000398:	1ac9      	subs	r1, r1, r3
 800039a:	b2a3      	uxth	r3, r4
 800039c:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a8:	fb08 f800 	mul.w	r8, r8, r0
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x10c>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x10a>
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	f200 80d9 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 80003be:	4618      	mov	r0, r3
 80003c0:	eba4 0408 	sub.w	r4, r4, r8
 80003c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c8:	e7bf      	b.n	800034a <__udivmoddi4+0x96>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x12e>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80b1 	beq.w	8000536 <__udivmoddi4+0x282>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x1cc>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0x140>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80b8 	bhi.w	8000564 <__udivmoddi4+0x2b0>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0103 	sbc.w	r1, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	468c      	mov	ip, r1
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0a8      	beq.n	8000354 <__udivmoddi4+0xa0>
 8000402:	e9c5 4c00 	strd	r4, ip, [r5]
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f603 	lsr.w	r6, r0, r3
 8000410:	4097      	lsls	r7, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800041a:	40d9      	lsrs	r1, r3
 800041c:	4330      	orrs	r0, r6
 800041e:	0c03      	lsrs	r3, r0, #16
 8000420:	fbb1 f6fe 	udiv	r6, r1, lr
 8000424:	fa1f f887 	uxth.w	r8, r7
 8000428:	fb0e 1116 	mls	r1, lr, r6, r1
 800042c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000430:	fb06 f108 	mul.w	r1, r6, r8
 8000434:	4299      	cmp	r1, r3
 8000436:	fa04 f402 	lsl.w	r4, r4, r2
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x19c>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000442:	f080 808d 	bcs.w	8000560 <__udivmoddi4+0x2ac>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 808a 	bls.w	8000560 <__udivmoddi4+0x2ac>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b281      	uxth	r1, r0
 8000454:	fbb3 f0fe 	udiv	r0, r3, lr
 8000458:	fb0e 3310 	mls	r3, lr, r0, r3
 800045c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000460:	fb00 f308 	mul.w	r3, r0, r8
 8000464:	428b      	cmp	r3, r1
 8000466:	d907      	bls.n	8000478 <__udivmoddi4+0x1c4>
 8000468:	1879      	adds	r1, r7, r1
 800046a:	f100 3cff 	add.w	ip, r0, #4294967295
 800046e:	d273      	bcs.n	8000558 <__udivmoddi4+0x2a4>
 8000470:	428b      	cmp	r3, r1
 8000472:	d971      	bls.n	8000558 <__udivmoddi4+0x2a4>
 8000474:	3802      	subs	r0, #2
 8000476:	4439      	add	r1, r7
 8000478:	1acb      	subs	r3, r1, r3
 800047a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047e:	e778      	b.n	8000372 <__udivmoddi4+0xbe>
 8000480:	f1c6 0c20 	rsb	ip, r6, #32
 8000484:	fa03 f406 	lsl.w	r4, r3, r6
 8000488:	fa22 f30c 	lsr.w	r3, r2, ip
 800048c:	431c      	orrs	r4, r3
 800048e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800049a:	fa21 f10c 	lsr.w	r1, r1, ip
 800049e:	431f      	orrs	r7, r3
 80004a0:	0c3b      	lsrs	r3, r7, #16
 80004a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a6:	fa1f f884 	uxth.w	r8, r4
 80004aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004b2:	fb09 fa08 	mul.w	sl, r9, r8
 80004b6:	458a      	cmp	sl, r1
 80004b8:	fa02 f206 	lsl.w	r2, r2, r6
 80004bc:	fa00 f306 	lsl.w	r3, r0, r6
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x220>
 80004c2:	1861      	adds	r1, r4, r1
 80004c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c8:	d248      	bcs.n	800055c <__udivmoddi4+0x2a8>
 80004ca:	458a      	cmp	sl, r1
 80004cc:	d946      	bls.n	800055c <__udivmoddi4+0x2a8>
 80004ce:	f1a9 0902 	sub.w	r9, r9, #2
 80004d2:	4421      	add	r1, r4
 80004d4:	eba1 010a 	sub.w	r1, r1, sl
 80004d8:	b2bf      	uxth	r7, r7
 80004da:	fbb1 f0fe 	udiv	r0, r1, lr
 80004de:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e6:	fb00 f808 	mul.w	r8, r0, r8
 80004ea:	45b8      	cmp	r8, r7
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x24a>
 80004ee:	19e7      	adds	r7, r4, r7
 80004f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f4:	d22e      	bcs.n	8000554 <__udivmoddi4+0x2a0>
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d92c      	bls.n	8000554 <__udivmoddi4+0x2a0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4427      	add	r7, r4
 80004fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000502:	eba7 0708 	sub.w	r7, r7, r8
 8000506:	fba0 8902 	umull	r8, r9, r0, r2
 800050a:	454f      	cmp	r7, r9
 800050c:	46c6      	mov	lr, r8
 800050e:	4649      	mov	r1, r9
 8000510:	d31a      	bcc.n	8000548 <__udivmoddi4+0x294>
 8000512:	d017      	beq.n	8000544 <__udivmoddi4+0x290>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x27a>
 8000516:	ebb3 020e 	subs.w	r2, r3, lr
 800051a:	eb67 0701 	sbc.w	r7, r7, r1
 800051e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000522:	40f2      	lsrs	r2, r6
 8000524:	ea4c 0202 	orr.w	r2, ip, r2
 8000528:	40f7      	lsrs	r7, r6
 800052a:	e9c5 2700 	strd	r2, r7, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e70b      	b.n	8000354 <__udivmoddi4+0xa0>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e9      	b.n	8000314 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fd      	b.n	8000340 <__udivmoddi4+0x8c>
 8000544:	4543      	cmp	r3, r8
 8000546:	d2e5      	bcs.n	8000514 <__udivmoddi4+0x260>
 8000548:	ebb8 0e02 	subs.w	lr, r8, r2
 800054c:	eb69 0104 	sbc.w	r1, r9, r4
 8000550:	3801      	subs	r0, #1
 8000552:	e7df      	b.n	8000514 <__udivmoddi4+0x260>
 8000554:	4608      	mov	r0, r1
 8000556:	e7d2      	b.n	80004fe <__udivmoddi4+0x24a>
 8000558:	4660      	mov	r0, ip
 800055a:	e78d      	b.n	8000478 <__udivmoddi4+0x1c4>
 800055c:	4681      	mov	r9, r0
 800055e:	e7b9      	b.n	80004d4 <__udivmoddi4+0x220>
 8000560:	4666      	mov	r6, ip
 8000562:	e775      	b.n	8000450 <__udivmoddi4+0x19c>
 8000564:	4630      	mov	r0, r6
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14a>
 8000568:	f1ac 0c02 	sub.w	ip, ip, #2
 800056c:	4439      	add	r1, r7
 800056e:	e713      	b.n	8000398 <__udivmoddi4+0xe4>
 8000570:	3802      	subs	r0, #2
 8000572:	443c      	add	r4, r7
 8000574:	e724      	b.n	80003c0 <__udivmoddi4+0x10c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc55 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f84d 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8b7 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //CYCLCNT enable
   DWT_CTRL |= ( 1 << 0);
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <main+0x94>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a1f      	ldr	r2, [pc, #124]	; (8000610 <main+0x94>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]


   SEGGER_SYSVIEW_Conf();
 800059a:	f004 fbdb 	bl	8004d54 <SEGGER_SYSVIEW_Conf>

   SEGGER_SYSVIEW_Start();
 800059e:	f005 fe9f 	bl	80062e0 <SEGGER_SYSVIEW_Start>



   status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	22c8      	movs	r2, #200	; 0xc8
 80005b0:	4918      	ldr	r1, [pc, #96]	; (8000614 <main+0x98>)
 80005b2:	4819      	ldr	r0, [pc, #100]	; (8000618 <main+0x9c>)
 80005b4:	f002 fc8e 	bl	8002ed4 <xTaskCreate>
 80005b8:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00a      	beq.n	80005d6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c4:	f383 8811 	msr	BASEPRI, r3
 80005c8:	f3bf 8f6f 	isb	sy
 80005cc:	f3bf 8f4f 	dsb	sy
 80005d0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d2:	bf00      	nop
 80005d4:	e7fe      	b.n	80005d4 <main+0x58>

   status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	22c8      	movs	r2, #200	; 0xc8
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <main+0xa0>)
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <main+0xa4>)
 80005e6:	f002 fc75 	bl	8002ed4 <xTaskCreate>
 80005ea:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00a      	beq.n	8000608 <main+0x8c>
        __asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	60fb      	str	r3, [r7, #12]
    }
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <main+0x8a>


   //start the freeRTOS scheduler
   vTaskStartScheduler();
 8000608:	f002 fe4a 	bl	80032a0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x90>
 800060e:	bf00      	nop
 8000610:	e0001000 	.word	0xe0001000
 8000614:	08006f48 	.word	0x08006f48
 8000618:	08000bd5 	.word	0x08000bd5
 800061c:	08006f58 	.word	0x08006f58
 8000620:	08000c0d 	.word	0x08000c0d

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 fc74 	bl	8006f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd4>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800069c:	2332      	movs	r3, #50	; 0x32
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fec3 	bl	8001438 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 fad6 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f924 	bl	8001928 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 fabf 	bl	8000c68 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
 8000716:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4ab1      	ldr	r2, [pc, #708]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4baf      	ldr	r3, [pc, #700]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	4bab      	ldr	r3, [pc, #684]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aaa      	ldr	r2, [pc, #680]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4ba8      	ldr	r3, [pc, #672]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	61fb      	str	r3, [r7, #28]
 8000748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4ba4      	ldr	r3, [pc, #656]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4aa3      	ldr	r2, [pc, #652]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4ba1      	ldr	r3, [pc, #644]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b9d      	ldr	r3, [pc, #628]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a9c      	ldr	r2, [pc, #624]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b96      	ldr	r3, [pc, #600]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a95      	ldr	r2, [pc, #596]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b93      	ldr	r3, [pc, #588]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a8e      	ldr	r2, [pc, #568]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b8c      	ldr	r3, [pc, #560]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a87      	ldr	r2, [pc, #540]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b81      	ldr	r3, [pc, #516]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a80      	ldr	r2, [pc, #512]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b7e      	ldr	r3, [pc, #504]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2116      	movs	r1, #22
 80007f6:	487b      	ldr	r0, [pc, #492]	; (80009e4 <MX_GPIO_Init+0x2e8>)
 80007f8:	f000 fdea 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4879      	ldr	r0, [pc, #484]	; (80009e8 <MX_GPIO_Init+0x2ec>)
 8000802:	f000 fde5 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800080c:	4877      	ldr	r0, [pc, #476]	; (80009ec <MX_GPIO_Init+0x2f0>)
 800080e:	f000 fddf 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000818:	4875      	ldr	r0, [pc, #468]	; (80009f0 <MX_GPIO_Init+0x2f4>)
 800081a:	f000 fdd9 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800081e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000830:	230c      	movs	r3, #12
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	486e      	ldr	r0, [pc, #440]	; (80009f4 <MX_GPIO_Init+0x2f8>)
 800083c:	f000 fc1c 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000840:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000852:	2305      	movs	r3, #5
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4865      	ldr	r0, [pc, #404]	; (80009f4 <MX_GPIO_Init+0x2f8>)
 800085e:	f000 fc0b 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000874:	230e      	movs	r3, #14
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	485d      	ldr	r0, [pc, #372]	; (80009f4 <MX_GPIO_Init+0x2f8>)
 8000880:	f000 fbfa 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000894:	230c      	movs	r3, #12
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	4851      	ldr	r0, [pc, #324]	; (80009e4 <MX_GPIO_Init+0x2e8>)
 80008a0:	f000 fbea 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008a4:	2316      	movs	r3, #22
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	484a      	ldr	r0, [pc, #296]	; (80009e4 <MX_GPIO_Init+0x2e8>)
 80008bc:	f000 fbdc 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008c0:	f248 0307 	movw	r3, #32775	; 0x8007
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4844      	ldr	r0, [pc, #272]	; (80009e8 <MX_GPIO_Init+0x2ec>)
 80008d8:	f000 fbce 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80008dc:	f641 0358 	movw	r3, #6232	; 0x1858
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ee:	230e      	movs	r3, #14
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	483b      	ldr	r0, [pc, #236]	; (80009e8 <MX_GPIO_Init+0x2ec>)
 80008fa:	f000 fbbd 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	4834      	ldr	r0, [pc, #208]	; (80009e8 <MX_GPIO_Init+0x2ec>)
 8000916:	f000 fbaf 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	482d      	ldr	r0, [pc, #180]	; (80009e4 <MX_GPIO_Init+0x2e8>)
 8000930:	f000 fba2 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000934:	2303      	movs	r3, #3
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000944:	2309      	movs	r3, #9
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	482a      	ldr	r0, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x2fc>)
 8000950:	f000 fb92 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	4824      	ldr	r0, [pc, #144]	; (80009f8 <MX_GPIO_Init+0x2fc>)
 8000968:	f000 fb86 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800096c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800097e:	230c      	movs	r3, #12
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <MX_GPIO_Init+0x2f4>)
 800098a:	f000 fb75 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800098e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a0:	230c      	movs	r3, #12
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <MX_GPIO_Init+0x300>)
 80009ac:	f000 fb64 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c2:	230e      	movs	r3, #14
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <MX_GPIO_Init+0x2fc>)
 80009ce:	f000 fb53 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80009d2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
 80009dc:	e010      	b.n	8000a00 <MX_GPIO_Init+0x304>
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40021800 	.word	0x40021800
 80009f4:	40021400 	.word	0x40021400
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	486b      	ldr	r0, [pc, #428]	; (8000bc0 <MX_GPIO_Init+0x4c4>)
 8000a14:	f000 fb30 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4864      	ldr	r0, [pc, #400]	; (8000bc0 <MX_GPIO_Init+0x4c4>)
 8000a2e:	f000 fb23 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a32:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	485d      	ldr	r0, [pc, #372]	; (8000bc4 <MX_GPIO_Init+0x4c8>)
 8000a50:	f000 fb12 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	4856      	ldr	r0, [pc, #344]	; (8000bc4 <MX_GPIO_Init+0x4c8>)
 8000a6a:	f000 fb05 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	484f      	ldr	r0, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x4c8>)
 8000a88:	f000 faf6 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a8c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a9e:	230e      	movs	r3, #14
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4847      	ldr	r0, [pc, #284]	; (8000bc8 <MX_GPIO_Init+0x4cc>)
 8000aaa:	f000 fae5 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000aae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4840      	ldr	r0, [pc, #256]	; (8000bcc <MX_GPIO_Init+0x4d0>)
 8000acc:	f000 fad4 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <MX_GPIO_Init+0x4d0>)
 8000aee:	f000 fac3 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af8:	2312      	movs	r3, #18
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b04:	2304      	movs	r3, #4
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4830      	ldr	r0, [pc, #192]	; (8000bd0 <MX_GPIO_Init+0x4d4>)
 8000b10:	f000 fab2 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b26:	2307      	movs	r3, #7
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4827      	ldr	r0, [pc, #156]	; (8000bd0 <MX_GPIO_Init+0x4d4>)
 8000b32:	f000 faa1 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b36:	2348      	movs	r3, #72	; 0x48
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b46:	230e      	movs	r3, #14
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <MX_GPIO_Init+0x4c8>)
 8000b52:	f000 fa91 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b68:	2309      	movs	r3, #9
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0x4cc>)
 8000b74:	f000 fa80 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_GPIO_Init+0x4cc>)
 8000b92:	f000 fa71 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b96:	2360      	movs	r3, #96	; 0x60
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <MX_GPIO_Init+0x4c4>)
 8000bb2:	f000 fa61 	bl	8001078 <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	; 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

	/************* for Delay Until *************************/
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000bdc:	f002 fc70 	bl	80034c0 <xTaskGetTickCount>
 8000be0:	4603      	mov	r3, r0
 8000be2:	60fb      	str	r3, [r7, #12]

	while(1)
		{
			SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <led_green_handler+0x30>)
 8000be6:	f006 f8eb 	bl	8006dc0 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(GPIOG, LED_GREEN_PIN);
 8000bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <led_green_handler+0x34>)
 8000bf0:	f000 fc07 	bl	8001402 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));			//RTOS delay make periodic
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 facd 	bl	800319c <xTaskDelayUntil>
			SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000c02:	e7ef      	b.n	8000be4 <led_green_handler+0x10>
 8000c04:	08006f68 	.word	0x08006f68
 8000c08:	40021800 	.word	0x40021800

08000c0c <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	   /************* for Delay Until *************************/
		TickType_t last_wakeup_time;

		last_wakeup_time = xTaskGetTickCount();
 8000c14:	f002 fc54 	bl	80034c0 <xTaskGetTickCount>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60fb      	str	r3, [r7, #12]

		while(1)
			{
				SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <led_red_handler+0x30>)
 8000c1e:	f006 f8cf 	bl	8006dc0 <SEGGER_SYSVIEW_PrintfTarget>
				HAL_GPIO_TogglePin(GPIOG, LED_RED_PIN);
 8000c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <led_red_handler+0x34>)
 8000c28:	f000 fbeb 	bl	8001402 <HAL_GPIO_TogglePin>
				vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(800));			//RTOS delay make periodic
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fab1 	bl	800319c <xTaskDelayUntil>
				SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000c3a:	e7ef      	b.n	8000c1c <led_red_handler+0x10>
 8000c3c:	08006f7c 	.word	0x08006f7c
 8000c40:	40021800 	.word	0x40021800

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 f90d 	bl	8000e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40001000 	.word	0x40001000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000cb2:	f003 fc99 	bl	80045e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	2036      	movs	r0, #54	; 0x36
 8000cda:	f000 f9a3 	bl	8001024 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cde:	2036      	movs	r0, #54	; 0x36
 8000ce0:	f000 f9bc 	bl	800105c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <HAL_InitTick+0xa4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <HAL_InitTick+0xa4>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_InitTick+0xa4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fff4 	bl	8001cf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d10:	f000 ffde 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 8000d14:	4603      	mov	r3, r0
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <HAL_InitTick+0xa8>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9b      	lsrs	r3, r3, #18
 8000d24:	3b01      	subs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_InitTick+0xac>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <HAL_InitTick+0xb0>)
 8000d2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_InitTick+0xac>)
 8000d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_InitTick+0xac>)
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_InitTick+0xac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_InitTick+0xac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_InitTick+0xac>)
 8000d4a:	f001 f807 	bl	8001d5c <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <HAL_InitTick+0xac>)
 8000d56:	f001 f85b 	bl	8001e10 <HAL_TIM_Base_Start_IT>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	20014368 	.word	0x20014368
 8000d74:	40001000 	.word	0x40001000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM6_DAC_IRQHandler+0x10>)
 8000daa:	f001 f8a1 	bl	8001ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20014368 	.word	0x20014368

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f006 f849 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbb5 	bl	800057c <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e20:	080070c0 	.word	0x080070c0
  ldr r2, =_sbss
 8000e24:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e28:	2001449c 	.word	0x2001449c

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f8d8 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff30 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff ff06 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200143b0 	.word	0x200143b0

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200143b0 	.word	0x200143b0

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff4c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff61 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff54 	bl	8000f18 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e177      	b.n	8001384 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8166 	bne.w	800137e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80c0 	beq.w	800137e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b66      	ldr	r3, [pc, #408]	; (800139c <HAL_GPIO_Init+0x324>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a65      	ldr	r2, [pc, #404]	; (800139c <HAL_GPIO_Init+0x324>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b63      	ldr	r3, [pc, #396]	; (800139c <HAL_GPIO_Init+0x324>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a61      	ldr	r2, [pc, #388]	; (80013a0 <HAL_GPIO_Init+0x328>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d037      	beq.n	80012b6 <HAL_GPIO_Init+0x23e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <HAL_GPIO_Init+0x330>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d031      	beq.n	80012b2 <HAL_GPIO_Init+0x23a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a56      	ldr	r2, [pc, #344]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x236>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a55      	ldr	r2, [pc, #340]	; (80013b0 <HAL_GPIO_Init+0x338>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x232>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a54      	ldr	r2, [pc, #336]	; (80013b4 <HAL_GPIO_Init+0x33c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x22e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a53      	ldr	r2, [pc, #332]	; (80013b8 <HAL_GPIO_Init+0x340>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x22a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_GPIO_Init+0x344>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x226>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <HAL_GPIO_Init+0x348>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x222>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_GPIO_Init+0x34c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x21e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <HAL_GPIO_Init+0x350>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x21a>
 800128e:	2309      	movs	r3, #9
 8001290:	e012      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 8001292:	230a      	movs	r3, #10
 8001294:	e010      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 8001296:	2308      	movs	r3, #8
 8001298:	e00e      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 800129a:	2307      	movs	r3, #7
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 800129e:	2306      	movs	r3, #6
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x240>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4935      	ldr	r1, [pc, #212]	; (80013a0 <HAL_GPIO_Init+0x328>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_GPIO_Init+0x354>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fa:	4a34      	ldr	r2, [pc, #208]	; (80013cc <HAL_GPIO_Init+0x354>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_GPIO_Init+0x354>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_GPIO_Init+0x354>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_GPIO_Init+0x354>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_GPIO_Init+0x354>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_GPIO_Init+0x354>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_GPIO_Init+0x354>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f ae84 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40021800 	.word	0x40021800
 80013c0:	40021c00 	.word	0x40021c00
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40022400 	.word	0x40022400
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	041a      	lsls	r2, r3, #16
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43d9      	mvns	r1, r3
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	400b      	ands	r3, r1
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e264      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d075      	beq.n	8001542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	4ba3      	ldr	r3, [pc, #652]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d00c      	beq.n	800147c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4ba0      	ldr	r3, [pc, #640]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d112      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b9d      	ldr	r3, [pc, #628]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b99      	ldr	r3, [pc, #612]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05b      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d157      	bne.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e23f      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x74>
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a90      	ldr	r2, [pc, #576]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a8a      	ldr	r2, [pc, #552]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a87      	ldr	r2, [pc, #540]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014d0:	4b84      	ldr	r3, [pc, #528]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a83      	ldr	r2, [pc, #524]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a80      	ldr	r2, [pc, #512]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fcd4 	bl	8000e9c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fcd0 	bl	8000e9c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e204      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcc0 	bl	8000e9c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcbc 	bl	8000e9c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1f0      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0xe8>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1c4      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4952      	ldr	r1, [pc, #328]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_RCC_OscConfig+0x2b0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc75 	bl	8000e9c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc71 	bl	8000e9c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1a5      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4940      	ldr	r1, [pc, #256]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x2b0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc54 	bl	8000e9c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc50 	bl	8000e9c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e184      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d030      	beq.n	8001684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_OscConfig+0x2b4>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fc34 	bl	8000e9c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc30 	bl	8000e9c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e164      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x200>
 8001656:	e015      	b.n	8001684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_OscConfig+0x2b4>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fc1d 	bl	8000e9c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fc19 	bl	8000e9c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e14d      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a0 	beq.w	80017d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x2b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_RCC_OscConfig+0x2b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_RCC_OscConfig+0x2b8>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbdf 	bl	8000e9c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e011      	b.n	8001706 <HAL_RCC_OscConfig+0x2ce>
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	42470000 	.word	0x42470000
 80016ec:	42470e80 	.word	0x42470e80
 80016f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f4:	f7ff fbd2 	bl	8000e9c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e106      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b85      	ldr	r3, [pc, #532]	; (800191c <HAL_RCC_OscConfig+0x4e4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x2f0>
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a80      	ldr	r2, [pc, #512]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e01c      	b.n	8001762 <HAL_RCC_OscConfig+0x32a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x312>
 8001730:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a7a      	ldr	r2, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	4b78      	ldr	r3, [pc, #480]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a77      	ldr	r2, [pc, #476]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x32a>
 800174a:	4b75      	ldr	r3, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a74      	ldr	r2, [pc, #464]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	4b72      	ldr	r3, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a71      	ldr	r2, [pc, #452]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fb97 	bl	8000e9c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb93 	bl	8000e9c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0c5      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ee      	beq.n	8001772 <HAL_RCC_OscConfig+0x33a>
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb81 	bl	8000e9c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb7d 	bl	8000e9c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0af      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b56      	ldr	r3, [pc, #344]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a55      	ldr	r2, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 809b 	beq.w	8001912 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d05c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d141      	bne.n	8001874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x4ec>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb51 	bl	8000e9c <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff fb4d 	bl	8000e9c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e081      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	019b      	lsls	r3, r3, #6
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	3b01      	subs	r3, #1
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	061b      	lsls	r3, r3, #24
 8001840:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_OscConfig+0x4ec>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fb26 	bl	8000e9c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fb22 	bl	8000e9c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e056      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x41c>
 8001872:	e04e      	b.n	8001912 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_OscConfig+0x4ec>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fb0f 	bl	8000e9c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff fb0b 	bl	8000e9c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e03f      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x44a>
 80018a0:	e037      	b.n	8001912 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e032      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_OscConfig+0x4e8>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d028      	beq.n	800190e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d121      	bne.n	800190e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d11a      	bne.n	800190e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d111      	bne.n	800190e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40007000 	.word	0x40007000
 8001920:	40023800 	.word	0x40023800
 8001924:	42470060 	.word	0x42470060

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0cc      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90c      	bls.n	8001964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0b8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	494d      	ldr	r1, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d044      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d119      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e067      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4934      	ldr	r1, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fa40 	bl	8000e9c <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff fa3c 	bl	8000e9c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e04f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d20c      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e032      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aae:	f000 f821 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8f8 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	08007074 	.word	0x08007074
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0c:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d00d      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x40>
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	f200 80bd 	bhi.w	8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x34>
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b26:	e0b7      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b2a:	60bb      	str	r3, [r7, #8]
       break;
 8001b2c:	e0b7      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b30:	60bb      	str	r3, [r7, #8]
      break;
 8001b32:	e0b4      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b34:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d04d      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b58      	ldr	r3, [pc, #352]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	461a      	mov	r2, r3
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	ea02 0800 	and.w	r8, r2, r0
 8001b62:	ea03 0901 	and.w	r9, r3, r1
 8001b66:	4640      	mov	r0, r8
 8001b68:	4649      	mov	r1, r9
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	014b      	lsls	r3, r1, #5
 8001b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b78:	0142      	lsls	r2, r0, #5
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	ebb0 0008 	subs.w	r0, r0, r8
 8001b82:	eb61 0109 	sbc.w	r1, r1, r9
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	018b      	lsls	r3, r1, #6
 8001b90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b94:	0182      	lsls	r2, r0, #6
 8001b96:	1a12      	subs	r2, r2, r0
 8001b98:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	00d9      	lsls	r1, r3, #3
 8001ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001baa:	00d0      	lsls	r0, r2, #3
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	eb12 0208 	adds.w	r2, r2, r8
 8001bb4:	eb43 0309 	adc.w	r3, r3, r9
 8001bb8:	f04f 0000 	mov.w	r0, #0
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	0259      	lsls	r1, r3, #9
 8001bc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bc6:	0250      	lsls	r0, r2, #9
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	f7fe fb54 	bl	8000284 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e04a      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	461a      	mov	r2, r3
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	ea02 0400 	and.w	r4, r2, r0
 8001bfe:	ea03 0501 	and.w	r5, r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	014b      	lsls	r3, r1, #5
 8001c10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c14:	0142      	lsls	r2, r0, #5
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	1b00      	subs	r0, r0, r4
 8001c1c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	018b      	lsls	r3, r1, #6
 8001c2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c2e:	0182      	lsls	r2, r0, #6
 8001c30:	1a12      	subs	r2, r2, r0
 8001c32:	eb63 0301 	sbc.w	r3, r3, r1
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	00d9      	lsls	r1, r3, #3
 8001c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c44:	00d0      	lsls	r0, r2, #3
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	1912      	adds	r2, r2, r4
 8001c4c:	eb45 0303 	adc.w	r3, r5, r3
 8001c50:	f04f 0000 	mov.w	r0, #0
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	0299      	lsls	r1, r3, #10
 8001c5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c5e:	0290      	lsls	r0, r2, #10
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	f7fe fb08 	bl	8000284 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	60bb      	str	r3, [r7, #8]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c9a:	60bb      	str	r3, [r7, #8]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff0 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08007084 	.word	0x08007084

08001cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	220f      	movs	r2, #15
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetClockConfig+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e041      	b.n	8001df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f839 	bl	8001dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 f9d8 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d001      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04e      	b.n	8001ec6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d01d      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_TIM_Base_Start_IT+0xdc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d111      	bne.n	8001eb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d010      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	e007      	b.n	8001ec4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00
 8001ee4:	40010400 	.word	0x40010400
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40001800 	.word	0x40001800

08001ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0202 	mvn.w	r2, #2
 8001f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8ee 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8e0 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8f1 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c4 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8b6 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8c7 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89a 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f88c 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f89d 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f870 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f862 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f873 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0201 	mvn.w	r2, #1
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fde8 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f902 	bl	80022a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f838 	bl	800213c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0220 	mvn.w	r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8cc 	bl	8002290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <TIM_Base_SetConfig+0x114>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <TIM_Base_SetConfig+0x118>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <TIM_Base_SetConfig+0x11c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <TIM_Base_SetConfig+0x120>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <TIM_Base_SetConfig+0x124>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <TIM_Base_SetConfig+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d027      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <TIM_Base_SetConfig+0x118>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d023      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <TIM_Base_SetConfig+0x11c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <TIM_Base_SetConfig+0x120>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a29      	ldr	r2, [pc, #164]	; (8002274 <TIM_Base_SetConfig+0x124>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d017      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <TIM_Base_SetConfig+0x128>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <TIM_Base_SetConfig+0x12c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <TIM_Base_SetConfig+0x130>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0x134>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <TIM_Base_SetConfig+0x138>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <TIM_Base_SetConfig+0x13c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <TIM_Base_SetConfig+0x114>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0xf8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <TIM_Base_SetConfig+0x124>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800
 8002284:	40001800 	.word	0x40001800
 8002288:	40001c00 	.word	0x40001c00
 800228c:	40002000 	.word	0x40002000

08002290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0208 	add.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 0208 	add.w	r2, r3, #8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0208 	add.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d103      	bne.n	800237a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e00c      	b.n	8002394 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3308      	adds	r3, #8
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e002      	b.n	8002388 <vListInsert+0x2e>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	d2f6      	bcs.n	8002382 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	601a      	str	r2, [r3, #0]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6852      	ldr	r2, [r2, #4]
 80023ec:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d103      	bne.n	8002400 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <xQueueGenericReset+0x2a>
        __asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	60bb      	str	r3, [r7, #8]
    }
 8002446:	bf00      	nop
 8002448:	e7fe      	b.n	8002448 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800244a:	f002 f94b 	bl	80046e4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	441a      	add	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	3b01      	subs	r3, #1
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	441a      	add	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d114      	bne.n	80024ca <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01a      	beq.n	80024de <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3310      	adds	r3, #16
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f9a1 	bl	80037f4 <xTaskRemoveFromEventList>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <xQueueGenericReset+0xcc>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	e009      	b.n	80024de <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3310      	adds	r3, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fef2 	bl	80022b8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3324      	adds	r3, #36	; 0x24
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff feed 	bl	80022b8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024de:	f002 f931 	bl	8004744 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	e000ed04 	.word	0xe000ed04

080024f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61bb      	str	r3, [r7, #24]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <xQueueGenericCreate+0x48>
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d101      	bne.n	800253c <xQueueGenericCreate+0x4c>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <xQueueGenericCreate+0x4e>
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <xQueueGenericCreate+0x68>
        __asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	617b      	str	r3, [r7, #20]
    }
 8002554:	bf00      	nop
 8002556:	e7fe      	b.n	8002556 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800255e:	d90a      	bls.n	8002576 <xQueueGenericCreate+0x86>
        __asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	613b      	str	r3, [r7, #16]
    }
 8002572:	bf00      	nop
 8002574:	e7fe      	b.n	8002574 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	3350      	adds	r3, #80	; 0x50
 800257a:	4618      	mov	r0, r3
 800257c:	f002 f9de 	bl	800493c <pvPortMalloc>
 8002580:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3350      	adds	r3, #80	; 0x50
 8002590:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002592:	79fa      	ldrb	r2, [r7, #7]
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f805 	bl	80025ae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
    }
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e002      	b.n	80025d0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025dc:	2101      	movs	r1, #1
 80025de:	69b8      	ldr	r0, [r7, #24]
 80025e0:	f7ff ff1e 	bl	8002420 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68f9      	ldr	r1, [r7, #12]
 80025f2:	2073      	movs	r0, #115	; 0x73
 80025f4:	f003 fd6c 	bl	80060d0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b090      	sub	sp, #64	; 0x40
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <xQueueGenericSend+0x32>
        __asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <xQueueGenericSend+0x40>
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <xQueueGenericSend+0x44>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <xQueueGenericSend+0x46>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <xQueueGenericSend+0x60>
        __asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800265c:	bf00      	nop
 800265e:	e7fe      	b.n	800265e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d103      	bne.n	800266e <xQueueGenericSend+0x6e>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <xQueueGenericSend+0x72>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <xQueueGenericSend+0x74>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <xQueueGenericSend+0x8e>
        __asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	623b      	str	r3, [r7, #32]
    }
 800268a:	bf00      	nop
 800268c:	e7fe      	b.n	800268c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800268e:	f001 fa51 	bl	8003b34 <xTaskGetSchedulerState>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <xQueueGenericSend+0x9e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <xQueueGenericSend+0xa2>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <xQueueGenericSend+0xa4>
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <xQueueGenericSend+0xbe>
        __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	61fb      	str	r3, [r7, #28]
    }
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026be:	f002 f811 	bl	80046e4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <xQueueGenericSend+0xd4>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d136      	bne.n	8002742 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fa86 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	4601      	mov	r1, r0
 80026e8:	205a      	movs	r0, #90	; 0x5a
 80026ea:	f003 fd67 	bl	80061bc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f4:	f000 fa78 	bl	8002be8 <prvCopyDataToQueue>
 80026f8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	3324      	adds	r3, #36	; 0x24
 8002706:	4618      	mov	r0, r3
 8002708:	f001 f874 	bl	80037f4 <xTaskRemoveFromEventList>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <xQueueGenericSend+0x248>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	e00a      	b.n	800273a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <xQueueGenericSend+0x248>)
 800272c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800273a:	f002 f803 	bl	8004744 <vPortExitCritical>
                return pdPASS;
 800273e:	2301      	movs	r3, #1
 8002740:	e07d      	b.n	800283e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d110      	bne.n	800276a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002748:	f001 fffc 	bl	8004744 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fa4a 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	460b      	mov	r3, r1
 800275e:	4601      	mov	r1, r0
 8002760:	205a      	movs	r0, #90	; 0x5a
 8002762:	f003 fd2b 	bl	80061bc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002766:	2300      	movs	r3, #0
 8002768:	e069      	b.n	800283e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f8a3 	bl	80038c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800277a:	2301      	movs	r3, #1
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800277e:	f001 ffe1 	bl	8004744 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002782:	f000 fdef 	bl	8003364 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002786:	f001 ffad 	bl	80046e4 <vPortEnterCritical>
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002790:	b25b      	sxtb	r3, r3
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d103      	bne.n	80027a0 <xQueueGenericSend+0x1a0>
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d103      	bne.n	80027b6 <xQueueGenericSend+0x1b6>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b6:	f001 ffc5 	bl	8004744 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ba:	1d3a      	adds	r2, r7, #4
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f892 	bl	80038ec <xTaskCheckForTimeOut>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d124      	bne.n	8002818 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d0:	f000 fb02 	bl	8002dd8 <prvIsQueueFull>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	3310      	adds	r3, #16
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 ffb4 	bl	8003750 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ea:	f000 fa8d 	bl	8002d08 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027ee:	f000 fdc7 	bl	8003380 <xTaskResumeAll>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af62 	bne.w	80026be <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <xQueueGenericSend+0x248>)
 80027fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	e758      	b.n	80026be <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800280c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280e:	f000 fa7b 	bl	8002d08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002812:	f000 fdb5 	bl	8003380 <xTaskResumeAll>
 8002816:	e752      	b.n	80026be <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800281a:	f000 fa75 	bl	8002d08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800281e:	f000 fdaf 	bl	8003380 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	4618      	mov	r0, r3
 8002826:	f004 f9df 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	460b      	mov	r3, r1
 8002834:	4601      	mov	r1, r0
 8002836:	205a      	movs	r0, #90	; 0x5a
 8002838:	f003 fcc0 	bl	80061bc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800283c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800283e:	4618      	mov	r0, r3
 8002840:	3738      	adds	r7, #56	; 0x38
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b090      	sub	sp, #64	; 0x40
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <xQueueGenericSendFromISR+0x3c>
 8002880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <xQueueGenericSendFromISR+0x40>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <xQueueGenericSendFromISR+0x42>
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80028a4:	bf00      	nop
 80028a6:	e7fe      	b.n	80028a6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d103      	bne.n	80028b6 <xQueueGenericSendFromISR+0x6a>
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <xQueueGenericSendFromISR+0x6e>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <xQueueGenericSendFromISR+0x70>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	623b      	str	r3, [r7, #32]
    }
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d6:	f001 fff1 	bl	80048bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028da:	f3ef 8211 	mrs	r2, BASEPRI
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	61fa      	str	r2, [r7, #28]
 80028f0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028f2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <xQueueGenericSendFromISR+0xbc>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d148      	bne.n	800299a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	4618      	mov	r0, r3
 800291c:	f004 f964 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002920:	4601      	mov	r1, r0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	461a      	mov	r2, r3
 8002926:	2060      	movs	r0, #96	; 0x60
 8002928:	f003 fb78 	bl	800601c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002932:	f000 f959 	bl	8002be8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002936:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d112      	bne.n	8002966 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d025      	beq.n	8002994 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	3324      	adds	r3, #36	; 0x24
 800294c:	4618      	mov	r0, r3
 800294e:	f000 ff51 	bl	80037f4 <xTaskRemoveFromEventList>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01d      	beq.n	8002994 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01a      	beq.n	8002994 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e016      	b.n	8002994 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002966:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800296a:	2b7f      	cmp	r3, #127	; 0x7f
 800296c:	d10a      	bne.n	8002984 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	617b      	str	r3, [r7, #20]
    }
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002988:	3301      	adds	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	b25a      	sxtb	r2, r3
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002994:	2301      	movs	r3, #1
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002998:	e00b      	b.n	80029b2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	4618      	mov	r0, r3
 800299e:	f004 f923 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 80029a2:	4601      	mov	r1, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	461a      	mov	r2, r3
 80029a8:	2060      	movs	r0, #96	; 0x60
 80029aa:	f003 fb37 	bl	800601c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029bc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3740      	adds	r7, #64	; 0x40
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b08f      	sub	sp, #60	; 0x3c
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <xQueueReceive+0x30>
        __asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	623b      	str	r3, [r7, #32]
    }
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <xQueueReceive+0x3e>
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <xQueueReceive+0x42>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <xQueueReceive+0x44>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueReceive+0x5e>
        __asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61fb      	str	r3, [r7, #28]
    }
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a26:	f001 f885 	bl	8003b34 <xTaskGetSchedulerState>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <xQueueReceive+0x6e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <xQueueReceive+0x72>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <xQueueReceive+0x74>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueReceive+0x8e>
        __asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	61bb      	str	r3, [r7, #24]
    }
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a56:	f001 fe45 	bl	80046e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02f      	beq.n	8002ac6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a6a:	f000 f927 	bl	8002cbc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 f8b9 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002a76:	4604      	mov	r4, r0
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f004 f8b5 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2101      	movs	r1, #1
 8002a84:	9100      	str	r1, [sp, #0]
 8002a86:	4621      	mov	r1, r4
 8002a88:	205c      	movs	r0, #92	; 0x5c
 8002a8a:	f003 fb97 	bl	80061bc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00f      	beq.n	8002abe <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	3310      	adds	r3, #16
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fea6 	bl	80037f4 <xTaskRemoveFromEventList>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <xQueueReceive+0x21c>)
 8002ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002abe:	f001 fe41 	bl	8004744 <vPortExitCritical>
                return pdPASS;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08a      	b.n	8002bdc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d113      	bne.n	8002af4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002acc:	f001 fe3a 	bl	8004744 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 f888 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	2000      	movs	r0, #0
 8002adc:	f004 f884 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	9100      	str	r1, [sp, #0]
 8002ae8:	4621      	mov	r1, r4
 8002aea:	205c      	movs	r0, #92	; 0x5c
 8002aec:	f003 fb66 	bl	80061bc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e073      	b.n	8002bdc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fede 	bl	80038c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b08:	f001 fe1c 	bl	8004744 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b0c:	f000 fc2a 	bl	8003364 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b10:	f001 fde8 	bl	80046e4 <vPortEnterCritical>
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d103      	bne.n	8002b2a <xQueueReceive+0x162>
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d103      	bne.n	8002b40 <xQueueReceive+0x178>
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b40:	f001 fe00 	bl	8004744 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b44:	1d3a      	adds	r2, r7, #4
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fecd 	bl	80038ec <xTaskCheckForTimeOut>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d124      	bne.n	8002ba2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b5a:	f000 f927 	bl	8002dac <prvIsQueueEmpty>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	3324      	adds	r3, #36	; 0x24
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fdef 	bl	8003750 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b74:	f000 f8c8 	bl	8002d08 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b78:	f000 fc02 	bl	8003380 <xTaskResumeAll>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f47f af69 	bne.w	8002a56 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <xQueueReceive+0x21c>)
 8002b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	e75f      	b.n	8002a56 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b98:	f000 f8b6 	bl	8002d08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b9c:	f000 fbf0 	bl	8003380 <xTaskResumeAll>
 8002ba0:	e759      	b.n	8002a56 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba4:	f000 f8b0 	bl	8002d08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ba8:	f000 fbea 	bl	8003380 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bae:	f000 f8fd 	bl	8002dac <prvIsQueueEmpty>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f43f af4e 	beq.w	8002a56 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 f813 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f004 f80f 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	9100      	str	r1, [sp, #0]
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	205c      	movs	r0, #92	; 0x5c
 8002bd6:	f003 faf1 	bl	80061bc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bda:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3734      	adds	r7, #52	; 0x34
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d14d      	bne.n	8002caa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ffac 	bl	8003b70 <xTaskPriorityDisinherit>
 8002c18:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	e043      	b.n	8002caa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d119      	bne.n	8002c5c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6858      	ldr	r0, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	461a      	mov	r2, r3
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	f004 f966 	bl	8006f04 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	441a      	add	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d32b      	bcc.n	8002caa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e026      	b.n	8002caa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68d8      	ldr	r0, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	461a      	mov	r2, r3
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	f004 f94c 	bl	8006f04 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	425b      	negs	r3, r3
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	425b      	negs	r3, r3
 8002c92:	441a      	add	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d105      	bne.n	8002caa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002cb2:	697b      	ldr	r3, [r7, #20]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	441a      	add	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d303      	bcc.n	8002cf0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68d9      	ldr	r1, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6838      	ldr	r0, [r7, #0]
 8002cfc:	f004 f902 	bl	8006f04 <memcpy>
    }
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d10:	f001 fce8 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d1c:	e011      	b.n	8002d42 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3324      	adds	r3, #36	; 0x24
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fd62 	bl	80037f4 <xTaskRemoveFromEventList>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d36:	f000 fe3f 	bl	80039b8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	dce9      	bgt.n	8002d1e <prvUnlockQueue+0x16>
 8002d4a:	e000      	b.n	8002d4e <prvUnlockQueue+0x46>
                        break;
 8002d4c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d56:	f001 fcf5 	bl	8004744 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d5a:	f001 fcc3 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d64:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d66:	e011      	b.n	8002d8c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3310      	adds	r3, #16
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fd3d 	bl	80037f4 <xTaskRemoveFromEventList>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d80:	f000 fe1a 	bl	80039b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d84:	7bbb      	ldrb	r3, [r7, #14]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dce9      	bgt.n	8002d68 <prvUnlockQueue+0x60>
 8002d94:	e000      	b.n	8002d98 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d96:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002da0:	f001 fcd0 	bl	8004744 <vPortExitCritical>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002db4:	f001 fc96 	bl	80046e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e001      	b.n	8002dca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dca:	f001 fcbb 	bl	8004744 <vPortExitCritical>

    return xReturn;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002de0:	f001 fc80 	bl	80046e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d102      	bne.n	8002df6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e001      	b.n	8002dfa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dfa:	f001 fca3 	bl	8004744 <vPortExitCritical>

    return xReturn;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e01e      	b.n	8002e56 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <vQueueAddToRegistry+0x60>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d115      	bne.n	8002e50 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e24:	4910      	ldr	r1, [pc, #64]	; (8002e68 <vQueueAddToRegistry+0x60>)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <vQueueAddToRegistry+0x60>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fed3 	bl	8006be8 <SEGGER_SYSVIEW_ShrinkId>
 8002e42:	4601      	mov	r1, r0
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	2071      	movs	r0, #113	; 0x71
 8002e4a:	f003 f8e7 	bl	800601c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e4e:	e006      	b.n	8002e5e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3301      	adds	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b07      	cmp	r3, #7
 8002e5a:	d9dd      	bls.n	8002e18 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200143b4 	.word	0x200143b4

08002e6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e7c:	f001 fc32 	bl	80046e4 <vPortEnterCritical>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d103      	bne.n	8002e96 <vQueueWaitForMessageRestricted+0x2a>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d103      	bne.n	8002eac <vQueueWaitForMessageRestricted+0x40>
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eac:	f001 fc4a 	bl	8004744 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3324      	adds	r3, #36	; 0x24
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fc69 	bl	8003798 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff1e 	bl	8002d08 <prvUnlockQueue>
    }
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af04      	add	r7, sp, #16
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fd27 	bl	800493c <pvPortMalloc>
 8002eee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00e      	beq.n	8002f14 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ef6:	2058      	movs	r0, #88	; 0x58
 8002ef8:	f001 fd20 	bl	800493c <pvPortMalloc>
 8002efc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0a:	e005      	b.n	8002f18 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f001 fdf5 	bl	8004afc <vPortFree>
 8002f12:	e001      	b.n	8002f18 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d013      	beq.n	8002f46 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	2300      	movs	r3, #0
 8002f22:	9303      	str	r3, [sp, #12]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f80e 	bl	8002f56 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f3a:	69f8      	ldr	r0, [r7, #28]
 8002f3c:	f000 f8a2 	bl	8003084 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	e002      	b.n	8002f4c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
    }
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b088      	sub	sp, #32
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	21a5      	movs	r1, #165	; 0xa5
 8002f70:	f003 ffd6 	bl	8006f20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f023 0307 	bic.w	r3, r3, #7
 8002f8c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	617b      	str	r3, [r7, #20]
    }
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01f      	beq.n	8002ff4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	e012      	b.n	8002fe0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	7819      	ldrb	r1, [r3, #0]
 8002fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3334      	adds	r3, #52	; 0x34
 8002fca:	460a      	mov	r2, r1
 8002fcc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d9e9      	bls.n	8002fba <prvInitialiseNewTask+0x64>
 8002fe6:	e000      	b.n	8002fea <prvInitialiseNewTask+0x94>
            {
                break;
 8002fe8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ff2:	e003      	b.n	8002ffc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d901      	bls.n	8003006 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003002:	2304      	movs	r3, #4
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003010:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	3304      	adds	r3, #4
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f96b 	bl	80022f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	3318      	adds	r3, #24
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f966 	bl	80022f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003030:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	f1c3 0205 	rsb	r2, r3, #5
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	3350      	adds	r3, #80	; 0x50
 8003046:	2204      	movs	r2, #4
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f003 ff68 	bl	8006f20 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	3354      	adds	r3, #84	; 0x54
 8003054:	2201      	movs	r2, #1
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f003 ff61 	bl	8006f20 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	69b8      	ldr	r0, [r7, #24]
 8003064:	f001 f98e 	bl	8004384 <pxPortInitialiseStack>
 8003068:	4602      	mov	r2, r0
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003078:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800307a:	bf00      	nop
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af02      	add	r7, sp, #8
 800308a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800308c:	f001 fb2a 	bl	80046e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <prvAddNewTaskToReadyList+0xfc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a3a      	ldr	r2, [pc, #232]	; (8003180 <prvAddNewTaskToReadyList+0xfc>)
 8003098:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <prvAddNewTaskToReadyList+0x100>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <prvAddNewTaskToReadyList+0x100>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <prvAddNewTaskToReadyList+0xfc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d110      	bne.n	80030d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030b0:	f000 fca6 	bl	8003a00 <prvInitialiseTaskLists>
 80030b4:	e00d      	b.n	80030d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <prvAddNewTaskToReadyList+0x104>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <prvAddNewTaskToReadyList+0x100>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d802      	bhi.n	80030d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030cc:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <prvAddNewTaskToReadyList+0x100>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <prvAddNewTaskToReadyList+0x108>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	4a2c      	ldr	r2, [pc, #176]	; (800318c <prvAddNewTaskToReadyList+0x108>)
 80030da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030dc:	4b2b      	ldr	r3, [pc, #172]	; (800318c <prvAddNewTaskToReadyList+0x108>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <prvAddNewTaskToReadyList+0x94>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fc55 	bl	800699c <SEGGER_SYSVIEW_OnTaskCreate>
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	461d      	mov	r5, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461c      	mov	r4, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	1ae3      	subs	r3, r4, r3
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	462b      	mov	r3, r5
 8003114:	f001 feb8 	bl	8004e88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fcc2 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <prvAddNewTaskToReadyList+0x10c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <prvAddNewTaskToReadyList+0x10c>)
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <prvAddNewTaskToReadyList+0x110>)
 8003140:	441a      	add	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f7ff f8e2 	bl	8002312 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800314e:	f001 faf9 	bl	8004744 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <prvAddNewTaskToReadyList+0x104>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00e      	beq.n	8003178 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <prvAddNewTaskToReadyList+0x100>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	429a      	cmp	r2, r3
 8003166:	d207      	bcs.n	8003178 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <prvAddNewTaskToReadyList+0x114>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bdb0      	pop	{r4, r5, r7, pc}
 8003180:	20000108 	.word	0x20000108
 8003184:	20000030 	.word	0x20000030
 8003188:	20000114 	.word	0x20000114
 800318c:	20000124 	.word	0x20000124
 8003190:	20000110 	.word	0x20000110
 8003194:	20000034 	.word	0x20000034
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xTaskDelayUntil+0x2a>
        __asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	617b      	str	r3, [r7, #20]
    }
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <xTaskDelayUntil+0x46>
        __asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	613b      	str	r3, [r7, #16]
    }
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <xTaskDelayUntil+0xf8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <xTaskDelayUntil+0x64>
        __asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	60fb      	str	r3, [r7, #12]
    }
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003200:	f000 f8b0 	bl	8003364 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <xTaskDelayUntil+0xfc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4413      	add	r3, r2
 8003212:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20b      	bcs.n	8003236 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	429a      	cmp	r2, r3
 8003226:	d211      	bcs.n	800324c <xTaskDelayUntil+0xb0>
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	429a      	cmp	r2, r3
 800322e:	d90d      	bls.n	800324c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	e00a      	b.n	800324c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	429a      	cmp	r2, r3
 800323e:	d303      	bcc.n	8003248 <xTaskDelayUntil+0xac>
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	429a      	cmp	r2, r3
 8003246:	d901      	bls.n	800324c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003258:	2024      	movs	r0, #36	; 0x24
 800325a:	f002 fe85 	bl	8005f68 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fd02 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800326c:	f000 f888 	bl	8003380 <xTaskResumeAll>
 8003270:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <xTaskDelayUntil+0x100>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800328a:	4618      	mov	r0, r3
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000130 	.word	0x20000130
 8003298:	2000010c 	.word	0x2000010c
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032a6:	4b27      	ldr	r3, [pc, #156]	; (8003344 <vTaskStartScheduler+0xa4>)
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	2300      	movs	r3, #0
 80032b0:	2282      	movs	r2, #130	; 0x82
 80032b2:	4925      	ldr	r1, [pc, #148]	; (8003348 <vTaskStartScheduler+0xa8>)
 80032b4:	4825      	ldr	r0, [pc, #148]	; (800334c <vTaskStartScheduler+0xac>)
 80032b6:	f7ff fe0d 	bl	8002ed4 <xTaskCreate>
 80032ba:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d102      	bne.n	80032c8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032c2:	f000 fd4d 	bl	8003d60 <xTimerCreateTimerTask>
 80032c6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d124      	bne.n	8003318 <vTaskStartScheduler+0x78>
        __asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	60bb      	str	r3, [r7, #8]
    }
 80032e0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <vTaskStartScheduler+0xb0>)
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <vTaskStartScheduler+0xb4>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <vTaskStartScheduler+0xb8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032f6:	4b19      	ldr	r3, [pc, #100]	; (800335c <vTaskStartScheduler+0xbc>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <vTaskStartScheduler+0xa4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d102      	bne.n	8003308 <vTaskStartScheduler+0x68>
 8003302:	f003 fb2f 	bl	8006964 <SEGGER_SYSVIEW_OnIdle>
 8003306:	e004      	b.n	8003312 <vTaskStartScheduler+0x72>
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <vTaskStartScheduler+0xbc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f003 fb87 	bl	8006a20 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003312:	f001 f8c7 	bl	80044a4 <xPortStartScheduler>
 8003316:	e00e      	b.n	8003336 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d10a      	bne.n	8003336 <vTaskStartScheduler+0x96>
        __asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	607b      	str	r3, [r7, #4]
    }
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <vTaskStartScheduler+0xc0>)
 8003338:	681b      	ldr	r3, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	2000012c 	.word	0x2000012c
 8003348:	08006f90 	.word	0x08006f90
 800334c:	080039d1 	.word	0x080039d1
 8003350:	20000128 	.word	0x20000128
 8003354:	20000114 	.word	0x20000114
 8003358:	2000010c 	.word	0x2000010c
 800335c:	20000030 	.word	0x20000030
 8003360:	2000000c 	.word	0x2000000c

08003364 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <vTaskSuspendAll+0x18>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	4a03      	ldr	r2, [pc, #12]	; (800337c <vTaskSuspendAll+0x18>)
 8003370:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000130 	.word	0x20000130

08003380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <xTaskResumeAll+0x11c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <xTaskResumeAll+0x2c>
        __asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	603b      	str	r3, [r7, #0]
    }
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033ac:	f001 f99a 	bl	80046e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033b0:	4b3a      	ldr	r3, [pc, #232]	; (800349c <xTaskResumeAll+0x11c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	4a39      	ldr	r2, [pc, #228]	; (800349c <xTaskResumeAll+0x11c>)
 80033b8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ba:	4b38      	ldr	r3, [pc, #224]	; (800349c <xTaskResumeAll+0x11c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d165      	bne.n	800348e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <xTaskResumeAll+0x120>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d061      	beq.n	800348e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ca:	e032      	b.n	8003432 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033cc:	4b35      	ldr	r3, [pc, #212]	; (80034a4 <xTaskResumeAll+0x124>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3318      	adds	r3, #24
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fff7 	bl	80023cc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fff2 	bl	80023cc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fb5a 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <xTaskResumeAll+0x128>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <xTaskResumeAll+0x128>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a27      	ldr	r2, [pc, #156]	; (80034ac <xTaskResumeAll+0x12c>)
 8003410:	441a      	add	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7fe ff7a 	bl	8002312 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <xTaskResumeAll+0x130>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800342c:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <xTaskResumeAll+0x134>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <xTaskResumeAll+0x124>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1c8      	bne.n	80033cc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003440:	f000 fb5c 	bl	8003afc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <xTaskResumeAll+0x138>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003450:	f000 f858 	bl	8003504 <xTaskIncrementTick>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <xTaskResumeAll+0x134>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f1      	bne.n	8003450 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <xTaskResumeAll+0x138>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <xTaskResumeAll+0x134>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <xTaskResumeAll+0x13c>)
 8003480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800348e:	f001 f959 	bl	8004744 <vPortExitCritical>

    return xAlreadyYielded;
 8003492:	68bb      	ldr	r3, [r7, #8]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000130 	.word	0x20000130
 80034a0:	20000108 	.word	0x20000108
 80034a4:	200000c8 	.word	0x200000c8
 80034a8:	20000110 	.word	0x20000110
 80034ac:	20000034 	.word	0x20000034
 80034b0:	20000030 	.word	0x20000030
 80034b4:	2000011c 	.word	0x2000011c
 80034b8:	20000118 	.word	0x20000118
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <xTaskGetTickCount+0x1c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	2000010c 	.word	0x2000010c

080034e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034e6:	f001 f9e9 	bl	80048bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <xTaskGetTickCountFromISR+0x20>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034f4:	683b      	ldr	r3, [r7, #0]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000010c 	.word	0x2000010c

08003504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350e:	4b50      	ldr	r3, [pc, #320]	; (8003650 <xTaskIncrementTick+0x14c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 8092 	bne.w	800363c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003518:	4b4e      	ldr	r3, [pc, #312]	; (8003654 <xTaskIncrementTick+0x150>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003520:	4a4c      	ldr	r2, [pc, #304]	; (8003654 <xTaskIncrementTick+0x150>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d120      	bne.n	800356e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <xTaskIncrementTick+0x154>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <xTaskIncrementTick+0x48>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	603b      	str	r3, [r7, #0]
    }
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xTaskIncrementTick+0x46>
 800354c:	4b42      	ldr	r3, [pc, #264]	; (8003658 <xTaskIncrementTick+0x154>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b42      	ldr	r3, [pc, #264]	; (800365c <xTaskIncrementTick+0x158>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a40      	ldr	r2, [pc, #256]	; (8003658 <xTaskIncrementTick+0x154>)
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4a40      	ldr	r2, [pc, #256]	; (800365c <xTaskIncrementTick+0x158>)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <xTaskIncrementTick+0x15c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a3e      	ldr	r2, [pc, #248]	; (8003660 <xTaskIncrementTick+0x15c>)
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	f000 fac7 	bl	8003afc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <xTaskIncrementTick+0x160>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d34c      	bcc.n	8003612 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003578:	4b37      	ldr	r3, [pc, #220]	; (8003658 <xTaskIncrementTick+0x154>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <xTaskIncrementTick+0x160>)
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	601a      	str	r2, [r3, #0]
                    break;
 800358a:	e042      	b.n	8003612 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <xTaskIncrementTick+0x154>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d203      	bcs.n	80035ac <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <xTaskIncrementTick+0x160>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035aa:	e032      	b.n	8003612 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe ff0b 	bl	80023cc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3318      	adds	r3, #24
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe ff02 	bl	80023cc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fa6a 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <xTaskIncrementTick+0x164>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	4a22      	ldr	r2, [pc, #136]	; (8003668 <xTaskIncrementTick+0x164>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <xTaskIncrementTick+0x168>)
 80035f0:	441a      	add	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fe fe8a 	bl	8002312 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <xTaskIncrementTick+0x16c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d3b5      	bcc.n	8003578 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003610:	e7b2      	b.n	8003578 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <xTaskIncrementTick+0x16c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4914      	ldr	r1, [pc, #80]	; (800366c <xTaskIncrementTick+0x168>)
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d901      	bls.n	800362e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <xTaskIncrementTick+0x170>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003636:	2301      	movs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e004      	b.n	8003646 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <xTaskIncrementTick+0x174>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <xTaskIncrementTick+0x174>)
 8003644:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000130 	.word	0x20000130
 8003654:	2000010c 	.word	0x2000010c
 8003658:	200000c0 	.word	0x200000c0
 800365c:	200000c4 	.word	0x200000c4
 8003660:	20000120 	.word	0x20000120
 8003664:	20000128 	.word	0x20000128
 8003668:	20000110 	.word	0x20000110
 800366c:	20000034 	.word	0x20000034
 8003670:	20000030 	.word	0x20000030
 8003674:	2000011c 	.word	0x2000011c
 8003678:	20000118 	.word	0x20000118

0800367c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003682:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <vTaskSwitchContext+0xbc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <vTaskSwitchContext+0xc0>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003690:	e04d      	b.n	800372e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <vTaskSwitchContext+0xc0>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <vTaskSwitchContext+0xc4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036a6:	7afb      	ldrb	r3, [r7, #11]
 80036a8:	f1c3 031f 	rsb	r3, r3, #31
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	4925      	ldr	r1, [pc, #148]	; (8003744 <vTaskSwitchContext+0xc8>)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	607b      	str	r3, [r7, #4]
    }
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <vTaskSwitchContext+0x5a>
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <vTaskSwitchContext+0xc8>)
 80036e4:	4413      	add	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3308      	adds	r3, #8
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d104      	bne.n	8003708 <vTaskSwitchContext+0x8c>
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <vTaskSwitchContext+0xcc>)
 8003710:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <vTaskSwitchContext+0xcc>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <vTaskSwitchContext+0xd0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d102      	bne.n	8003724 <vTaskSwitchContext+0xa8>
 800371e:	f003 f921 	bl	8006964 <SEGGER_SYSVIEW_OnIdle>
}
 8003722:	e004      	b.n	800372e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <vTaskSwitchContext+0xcc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 f979 	bl	8006a20 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000130 	.word	0x20000130
 800373c:	2000011c 	.word	0x2000011c
 8003740:	20000110 	.word	0x20000110
 8003744:	20000034 	.word	0x20000034
 8003748:	20000030 	.word	0x20000030
 800374c:	2000012c 	.word	0x2000012c

08003750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60fb      	str	r3, [r7, #12]
    }
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <vTaskPlaceOnEventList+0x44>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3318      	adds	r3, #24
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fdeb 	bl	800235a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003784:	2101      	movs	r1, #1
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	f000 fa72 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000030 	.word	0x20000030

08003798 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	617b      	str	r3, [r7, #20]
    }
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <vTaskPlaceOnEventListRestricted+0x58>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3318      	adds	r3, #24
 80037c6:	4619      	mov	r1, r3
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7fe fda2 	bl	8002312 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037da:	2024      	movs	r0, #36	; 0x24
 80037dc:	f002 fbc4 	bl	8005f68 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f000 fa44 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
    }
 80037e8:	bf00      	nop
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000030 	.word	0x20000030

080037f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	60fb      	str	r3, [r7, #12]
    }
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	3318      	adds	r3, #24
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fdd1 	bl	80023cc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <xTaskRemoveFromEventList+0xb4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d120      	bne.n	8003874 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3304      	adds	r3, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fdc8 	bl	80023cc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4618      	mov	r0, r3
 8003840:	f003 f930 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	2201      	movs	r2, #1
 800384a:	409a      	lsls	r2, r3
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <xTaskRemoveFromEventList+0xb8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	4a16      	ldr	r2, [pc, #88]	; (80038ac <xTaskRemoveFromEventList+0xb8>)
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <xTaskRemoveFromEventList+0xbc>)
 8003864:	441a      	add	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7fe fd50 	bl	8002312 <vListInsertEnd>
 8003872:	e005      	b.n	8003880 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3318      	adds	r3, #24
 8003878:	4619      	mov	r1, r3
 800387a:	480e      	ldr	r0, [pc, #56]	; (80038b4 <xTaskRemoveFromEventList+0xc0>)
 800387c:	f7fe fd49 	bl	8002312 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <xTaskRemoveFromEventList+0xc4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	429a      	cmp	r2, r3
 800388c:	d905      	bls.n	800389a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800388e:	2301      	movs	r3, #1
 8003890:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <xTaskRemoveFromEventList+0xc8>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e001      	b.n	800389e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800389e:	697b      	ldr	r3, [r7, #20]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000130 	.word	0x20000130
 80038ac:	20000110 	.word	0x20000110
 80038b0:	20000034 	.word	0x20000034
 80038b4:	200000c8 	.word	0x200000c8
 80038b8:	20000030 	.word	0x20000030
 80038bc:	2000011c 	.word	0x2000011c

080038c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <vTaskInternalSetTimeOutState+0x24>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <vTaskInternalSetTimeOutState+0x28>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	605a      	str	r2, [r3, #4]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	20000120 	.word	0x20000120
 80038e8:	2000010c 	.word	0x2000010c

080038ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	613b      	str	r3, [r7, #16]
    }
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60fb      	str	r3, [r7, #12]
    }
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800392e:	f000 fed9 	bl	80046e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <xTaskCheckForTimeOut+0xc4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d102      	bne.n	8003952 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e026      	b.n	80039a0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <xTaskCheckForTimeOut+0xc8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d00a      	beq.n	8003974 <xTaskCheckForTimeOut+0x88>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	429a      	cmp	r2, r3
 8003966:	d305      	bcc.n	8003974 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e015      	b.n	80039a0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	429a      	cmp	r2, r3
 800397c:	d20b      	bcs.n	8003996 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad2      	subs	r2, r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ff98 	bl	80038c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e004      	b.n	80039a0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039a0:	f000 fed0 	bl	8004744 <vPortExitCritical>

    return xReturn;
 80039a4:	69fb      	ldr	r3, [r7, #28]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000010c 	.word	0x2000010c
 80039b4:	20000120 	.word	0x20000120

080039b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <vTaskMissedYield+0x14>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	2000011c 	.word	0x2000011c

080039d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039d8:	f000 f852 	bl	8003a80 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <prvIdleTask+0x28>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d9f9      	bls.n	80039d8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <prvIdleTask+0x2c>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039f4:	e7f0      	b.n	80039d8 <prvIdleTask+0x8>
 80039f6:	bf00      	nop
 80039f8:	20000034 	.word	0x20000034
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	e00c      	b.n	8003a26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <prvInitialiseTaskLists+0x60>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fc4c 	bl	80022b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3301      	adds	r3, #1
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d9ef      	bls.n	8003a0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a2c:	480d      	ldr	r0, [pc, #52]	; (8003a64 <prvInitialiseTaskLists+0x64>)
 8003a2e:	f7fe fc43 	bl	80022b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a32:	480d      	ldr	r0, [pc, #52]	; (8003a68 <prvInitialiseTaskLists+0x68>)
 8003a34:	f7fe fc40 	bl	80022b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <prvInitialiseTaskLists+0x6c>)
 8003a3a:	f7fe fc3d 	bl	80022b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a3e:	480c      	ldr	r0, [pc, #48]	; (8003a70 <prvInitialiseTaskLists+0x70>)
 8003a40:	f7fe fc3a 	bl	80022b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a44:	480b      	ldr	r0, [pc, #44]	; (8003a74 <prvInitialiseTaskLists+0x74>)
 8003a46:	f7fe fc37 	bl	80022b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <prvInitialiseTaskLists+0x78>)
 8003a4c:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <prvInitialiseTaskLists+0x64>)
 8003a4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <prvInitialiseTaskLists+0x7c>)
 8003a52:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <prvInitialiseTaskLists+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000034 	.word	0x20000034
 8003a64:	20000098 	.word	0x20000098
 8003a68:	200000ac 	.word	0x200000ac
 8003a6c:	200000c8 	.word	0x200000c8
 8003a70:	200000dc 	.word	0x200000dc
 8003a74:	200000f4 	.word	0x200000f4
 8003a78:	200000c0 	.word	0x200000c0
 8003a7c:	200000c4 	.word	0x200000c4

08003a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a86:	e019      	b.n	8003abc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a88:	f000 fe2c 	bl	80046e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <prvCheckTasksWaitingTermination+0x50>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fc97 	bl	80023cc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <prvCheckTasksWaitingTermination+0x54>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <prvCheckTasksWaitingTermination+0x54>)
 8003aa6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <prvCheckTasksWaitingTermination+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <prvCheckTasksWaitingTermination+0x58>)
 8003ab0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003ab2:	f000 fe47 	bl	8004744 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f810 	bl	8003adc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <prvCheckTasksWaitingTermination+0x58>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e1      	bne.n	8003a88 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200000dc 	.word	0x200000dc
 8003ad4:	20000108 	.word	0x20000108
 8003ad8:	200000f0 	.word	0x200000f0

08003adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f807 	bl	8004afc <vPortFree>
                vPortFree( pxTCB );
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f001 f804 	bl	8004afc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <prvResetNextTaskUnblockTime+0x30>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <prvResetNextTaskUnblockTime+0x34>)
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b12:	e005      	b.n	8003b20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <prvResetNextTaskUnblockTime+0x30>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <prvResetNextTaskUnblockTime+0x34>)
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	200000c0 	.word	0x200000c0
 8003b30:	20000128 	.word	0x20000128

08003b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <xTaskGetSchedulerState+0x34>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b42:	2301      	movs	r3, #1
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	e008      	b.n	8003b5a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <xTaskGetSchedulerState+0x38>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b50:	2302      	movs	r3, #2
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	e001      	b.n	8003b5a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b5a:	687b      	ldr	r3, [r7, #4]
    }
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20000114 	.word	0x20000114
 8003b6c:	20000130 	.word	0x20000130

08003b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d068      	beq.n	8003c58 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b86:	4b37      	ldr	r3, [pc, #220]	; (8003c64 <xTaskPriorityDisinherit+0xf4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d00a      	beq.n	8003ba6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	60fb      	str	r3, [r7, #12]
    }
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	60bb      	str	r3, [r7, #8]
    }
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d03e      	beq.n	8003c58 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d13a      	bne.n	8003c58 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fbf0 	bl	80023cc <uxListRemove>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <xTaskPriorityDisinherit+0xf8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4013      	ands	r3, r2
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <xTaskPriorityDisinherit+0xf8>)
 8003c06:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	204a      	movs	r0, #74	; 0x4a
 8003c0e:	f002 f9c9 	bl	8005fa4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f1c3 0205 	rsb	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <xTaskPriorityDisinherit+0xf8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <xTaskPriorityDisinherit+0xf8>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <xTaskPriorityDisinherit+0xfc>)
 8003c46:	441a      	add	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7fe fb5f 	bl	8002312 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c58:	697b      	ldr	r3, [r7, #20]
    }
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000030 	.word	0x20000030
 8003c68:	20000110 	.word	0x20000110
 8003c6c:	20000034 	.word	0x20000034

08003c70 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c7a:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fba0 	bl	80023cc <uxListRemove>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c92:	4b2d      	ldr	r3, [pc, #180]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ca8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d110      	bne.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x64>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	211b      	movs	r1, #27
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f002 ff32 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4820      	ldr	r0, [pc, #128]	; (8003d50 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003cce:	f7fe fb20 	bl	8002312 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cd2:	e032      	b.n	8003d3a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d20f      	bcs.n	8003d0c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cec:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f002 ff18 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf8:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fb28 	bl	800235a <vListInsert>
}
 8003d0a:	e016      	b.n	8003d3a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2104      	movs	r1, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f002 ff08 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe fb18 	bl	800235a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d202      	bcs.n	8003d3a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d34:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	2000010c 	.word	0x2000010c
 8003d48:	20000030 	.word	0x20000030
 8003d4c:	20000110 	.word	0x20000110
 8003d50:	200000f4 	.word	0x200000f4
 8003d54:	200000c4 	.word	0x200000c4
 8003d58:	200000c0 	.word	0x200000c0
 8003d5c:	20000128 	.word	0x20000128

08003d60 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d6a:	f000 fad5 	bl	8004318 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <xTimerCreateTimerTask+0x54>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <xTimerCreateTimerTask+0x58>)
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d84:	490d      	ldr	r1, [pc, #52]	; (8003dbc <xTimerCreateTimerTask+0x5c>)
 8003d86:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <xTimerCreateTimerTask+0x60>)
 8003d88:	f7ff f8a4 	bl	8002ed4 <xTaskCreate>
 8003d8c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	603b      	str	r3, [r7, #0]
    }
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003daa:	687b      	ldr	r3, [r7, #4]
    }
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000164 	.word	0x20000164
 8003db8:	20000168 	.word	0x20000168
 8003dbc:	08006f98 	.word	0x08006f98
 8003dc0:	08003ef9 	.word	0x08003ef9

08003dc4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	623b      	str	r3, [r7, #32]
    }
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <xTimerGenericCommand+0x98>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02a      	beq.n	8003e50 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	dc18      	bgt.n	8003e3e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e0c:	f7ff fe92 	bl	8003b34 <xTaskGetSchedulerState>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d109      	bne.n	8003e2a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <xTimerGenericCommand+0x98>)
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f107 0114 	add.w	r1, r7, #20
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e22:	f7fe fbed 	bl	8002600 <xQueueGenericSend>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
 8003e28:	e012      	b.n	8003e50 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <xTimerGenericCommand+0x98>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f107 0114 	add.w	r1, r7, #20
 8003e32:	2300      	movs	r3, #0
 8003e34:	2200      	movs	r2, #0
 8003e36:	f7fe fbe3 	bl	8002600 <xQueueGenericSend>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e3c:	e008      	b.n	8003e50 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <xTimerGenericCommand+0x98>)
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f107 0114 	add.w	r1, r7, #20
 8003e46:	2300      	movs	r3, #0
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	f7fe fcff 	bl	800284c <xQueueGenericSendFromISR>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000164 	.word	0x20000164

08003e60 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <prvProcessExpiredTimer+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe faa7 	bl	80023cc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d022      	beq.n	8003ed2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	18d1      	adds	r1, r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	6978      	ldr	r0, [r7, #20]
 8003e9a:	f000 f8d1 	bl	8004040 <prvInsertTimerInActiveList>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01f      	beq.n	8003ee4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	2100      	movs	r1, #0
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f7ff ff88 	bl	8003dc4 <xTimerGenericCommand>
 8003eb4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d113      	bne.n	8003ee4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	60fb      	str	r3, [r7, #12]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	6978      	ldr	r0, [r7, #20]
 8003eea:	4798      	blx	r3
    }
 8003eec:	bf00      	nop
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000015c 	.word	0x2000015c

08003ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f00:	f107 0308 	add.w	r3, r7, #8
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f857 	bl	8003fb8 <prvGetNextExpireTime>
 8003f0a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f803 	bl	8003f1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f16:	f000 f8d5 	bl	80040c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f1a:	e7f1      	b.n	8003f00 <prvTimerTask+0x8>

08003f1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f26:	f7ff fa1d 	bl	8003364 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f2a:	f107 0308 	add.w	r3, r7, #8
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f866 	bl	8004000 <prvSampleTimeNow>
 8003f34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d130      	bne.n	8003f9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <prvProcessTimerOrBlockTask+0x3c>
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d806      	bhi.n	8003f58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f4a:	f7ff fa19 	bl	8003380 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff85 	bl	8003e60 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f56:	e024      	b.n	8003fa2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <prvProcessTimerOrBlockTask+0x90>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <prvProcessTimerOrBlockTask+0x50>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <prvProcessTimerOrBlockTask+0x52>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <prvProcessTimerOrBlockTask+0x94>)
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fe ff75 	bl	8002e6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f82:	f7ff f9fd 	bl	8003380 <xTaskResumeAll>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <prvProcessTimerOrBlockTask+0x98>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
    }
 8003f9c:	e001      	b.n	8003fa2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f9e:	f7ff f9ef 	bl	8003380 <xTaskResumeAll>
    }
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000160 	.word	0x20000160
 8003fb0:	20000164 	.word	0x20000164
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <prvGetNextExpireTime+0x44>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <prvGetNextExpireTime+0x16>
 8003fca:	2201      	movs	r2, #1
 8003fcc:	e000      	b.n	8003fd0 <prvGetNextExpireTime+0x18>
 8003fce:	2200      	movs	r2, #0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <prvGetNextExpireTime+0x44>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e001      	b.n	8003fec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fec:	68fb      	ldr	r3, [r7, #12]
    }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000015c 	.word	0x2000015c

08004000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004008:	f7ff fa5a 	bl	80034c0 <xTaskGetTickCount>
 800400c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <prvSampleTimeNow+0x3c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d205      	bcs.n	8004024 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004018:	f000 f91a 	bl	8004250 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e002      	b.n	800402a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800402a:	4a04      	ldr	r2, [pc, #16]	; (800403c <prvSampleTimeNow+0x3c>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004030:	68fb      	ldr	r3, [r7, #12]
    }
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	2000016c 	.word	0x2000016c

08004040 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d812      	bhi.n	800408c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e01b      	b.n	80040b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <prvInsertTimerInActiveList+0x7c>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe f968 	bl	800235a <vListInsert>
 800408a:	e012      	b.n	80040b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d206      	bcs.n	80040a2 <prvInsertTimerInActiveList+0x62>
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e007      	b.n	80040b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <prvInsertTimerInActiveList+0x80>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe f954 	bl	800235a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80040b2:	697b      	ldr	r3, [r7, #20]
    }
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000160 	.word	0x20000160
 80040c0:	2000015c 	.word	0x2000015c

080040c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	; 0x30
 80040c8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040ca:	e0ae      	b.n	800422a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f2c0 80aa 	blt.w	8004228 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe f971 	bl	80023cc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff87 	bl	8004000 <prvSampleTimeNow>
 80040f2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b09      	cmp	r3, #9
 80040f8:	f200 8097 	bhi.w	800422a <prvProcessReceivedCommands+0x166>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <prvProcessReceivedCommands+0x40>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	0800412d 	.word	0x0800412d
 8004108:	0800412d 	.word	0x0800412d
 800410c:	0800412d 	.word	0x0800412d
 8004110:	080041a1 	.word	0x080041a1
 8004114:	080041b5 	.word	0x080041b5
 8004118:	080041ff 	.word	0x080041ff
 800411c:	0800412d 	.word	0x0800412d
 8004120:	0800412d 	.word	0x0800412d
 8004124:	080041a1 	.word	0x080041a1
 8004128:	080041b5 	.word	0x080041b5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	18d1      	adds	r1, r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414c:	f7ff ff78 	bl	8004040 <prvInsertTimerInActiveList>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d069      	beq.n	800422a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800415c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05e      	beq.n	800422a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	441a      	add	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	2100      	movs	r1, #0
 800417c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800417e:	f7ff fe21 	bl	8003dc4 <xTimerGenericCommand>
 8004182:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d14f      	bne.n	800422a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	61bb      	str	r3, [r7, #24]
    }
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80041b2:	e03a      	b.n	800422a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <prvProcessReceivedCommands+0x126>
        __asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	617b      	str	r3, [r7, #20]
    }
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	18d1      	adds	r1, r2, r3
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f8:	f7ff ff22 	bl	8004040 <prvInsertTimerInActiveList>
                        break;
 80041fc:	e015      	b.n	800422a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800420c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800420e:	f000 fc75 	bl	8004afc <vPortFree>
 8004212:	e00a      	b.n	800422a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004226:	e000      	b.n	800422a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004228:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <prvProcessReceivedCommands+0x188>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f107 0108 	add.w	r1, r7, #8
 8004232:	2200      	movs	r2, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fbc7 	bl	80029c8 <xQueueReceive>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f af45 	bne.w	80040cc <prvProcessReceivedCommands+0x8>
        }
    }
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	3728      	adds	r7, #40	; 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000164 	.word	0x20000164

08004250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004256:	e048      	b.n	80042ea <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004258:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <prvSwitchTimerLists+0xc0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004262:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <prvSwitchTimerLists+0xc0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3304      	adds	r3, #4
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe f8ab 	bl	80023cc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02e      	beq.n	80042ea <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	d90e      	bls.n	80042bc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <prvSwitchTimerLists+0xc0>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe f850 	bl	800235a <vListInsert>
 80042ba:	e016      	b.n	80042ea <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042bc:	2300      	movs	r3, #0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2300      	movs	r3, #0
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	2100      	movs	r1, #0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff fd7c 	bl	8003dc4 <xTimerGenericCommand>
 80042cc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <prvSwitchTimerLists+0x9a>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	603b      	str	r3, [r7, #0]
    }
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <prvSwitchTimerLists+0xc0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1b1      	bne.n	8004258 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <prvSwitchTimerLists+0xc0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <prvSwitchTimerLists+0xc4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a04      	ldr	r2, [pc, #16]	; (8004310 <prvSwitchTimerLists+0xc0>)
 8004300:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004302:	4a04      	ldr	r2, [pc, #16]	; (8004314 <prvSwitchTimerLists+0xc4>)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	6013      	str	r3, [r2, #0]
    }
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	2000015c 	.word	0x2000015c
 8004314:	20000160 	.word	0x20000160

08004318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800431c:	f000 f9e2 	bl	80046e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11d      	bne.n	8004364 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004328:	4811      	ldr	r0, [pc, #68]	; (8004370 <prvCheckForValidListAndQueue+0x58>)
 800432a:	f7fd ffc5 	bl	80022b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800432e:	4811      	ldr	r0, [pc, #68]	; (8004374 <prvCheckForValidListAndQueue+0x5c>)
 8004330:	f7fd ffc2 	bl	80022b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <prvCheckForValidListAndQueue+0x60>)
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <prvCheckForValidListAndQueue+0x58>)
 8004338:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <prvCheckForValidListAndQueue+0x64>)
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <prvCheckForValidListAndQueue+0x5c>)
 800433e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004340:	2200      	movs	r2, #0
 8004342:	210c      	movs	r1, #12
 8004344:	200a      	movs	r0, #10
 8004346:	f7fe f8d3 	bl	80024f0 <xQueueGenericCreate>
 800434a:	4603      	mov	r3, r0
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 800434e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4908      	ldr	r1, [pc, #32]	; (8004380 <prvCheckForValidListAndQueue+0x68>)
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fd52 	bl	8002e08 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004364:	f000 f9ee 	bl	8004744 <vPortExitCritical>
    }
 8004368:	bf00      	nop
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000164 	.word	0x20000164
 8004370:	20000134 	.word	0x20000134
 8004374:	20000148 	.word	0x20000148
 8004378:	2000015c 	.word	0x2000015c
 800437c:	20000160 	.word	0x20000160
 8004380:	08006fa0 	.word	0x08006fa0

08004384 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3b04      	subs	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800439c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043b4:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <pxPortInitialiseStack+0x64>)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b14      	subs	r3, #20
 80043be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b04      	subs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f06f 0202 	mvn.w	r2, #2
 80043d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b20      	subs	r3, #32
 80043d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	080043ed 	.word	0x080043ed

080043ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <prvTaskExitError+0x54>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d00a      	beq.n	8004416 <prvTaskExitError+0x2a>
        __asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
    }
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <prvTaskExitError+0x28>
        __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
    }
 8004428:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800442a:	bf00      	nop
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0fc      	beq.n	800442c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20000010 	.word	0x20000010
	...

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <prvPortStartFirstTask+0x24>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8814 	msr	CONTROL, r0
 800448a:	b662      	cpsie	i
 800448c:	b661      	cpsie	f
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	df00      	svc	0
 8004498:	bf00      	nop
 800449a:	0000      	.short	0x0000
 800449c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop

080044a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a46      	ldr	r2, [pc, #280]	; (80045c8 <xPortStartScheduler+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x26>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044ca:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <xPortStartScheduler+0x120>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <xPortStartScheduler+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10a      	bne.n	80044ea <xPortStartScheduler+0x46>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60fb      	str	r3, [r7, #12]
    }
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <xPortStartScheduler+0x12c>)
 80044ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	22ff      	movs	r2, #255	; 0xff
 80044fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <xPortStartScheduler+0x130>)
 8004510:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <xPortStartScheduler+0x134>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004518:	e009      	b.n	800452e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <xPortStartScheduler+0x134>)
 8004522:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d0ef      	beq.n	800451a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <xPortStartScheduler+0x134>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00a      	beq.n	800455c <xPortStartScheduler+0xb8>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
    }
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <xPortStartScheduler+0x134>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <xPortStartScheduler+0x134>)
 8004564:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <xPortStartScheduler+0x134>)
 8004570:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <xPortStartScheduler+0x138>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <xPortStartScheduler+0x138>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <xPortStartScheduler+0x138>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a14      	ldr	r2, [pc, #80]	; (80045dc <xPortStartScheduler+0x138>)
 800458c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004592:	f000 f963 	bl	800485c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <xPortStartScheduler+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800459c:	f000 f982 	bl	80048a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045ac:	f7ff ff64 	bl	8004478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045b0:	f7ff f864 	bl	800367c <vTaskSwitchContext>
    prvTaskExitError();
 80045b4:	f7ff ff1a 	bl	80043ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00
 80045c8:	410fc271 	.word	0x410fc271
 80045cc:	410fc270 	.word	0x410fc270
 80045d0:	e000e400 	.word	0xe000e400
 80045d4:	20000170 	.word	0x20000170
 80045d8:	20000174 	.word	0x20000174
 80045dc:	e000ed20 	.word	0xe000ed20
 80045e0:	20000010 	.word	0x20000010
 80045e4:	e000ef34 	.word	0xe000ef34

080045e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a37      	ldr	r2, [pc, #220]	; (80046d0 <vInitPrioGroupValue+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x26>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	613b      	str	r3, [r7, #16]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <vInitPrioGroupValue+0xe4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <vInitPrioGroupValue+0xec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10a      	bne.n	800462e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60fb      	str	r3, [r7, #12]
    }
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <vInitPrioGroupValue+0xf0>)
 8004630:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <vInitPrioGroupValue+0xf4>)
 8004654:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800465c:	e009      	b.n	8004672 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004666:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d0ef      	beq.n	800465e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	d00a      	beq.n	80046a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60bb      	str	r3, [r7, #8]
    }
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b2:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00
 80046d0:	410fc271 	.word	0x410fc271
 80046d4:	410fc270 	.word	0x410fc270
 80046d8:	e000e400 	.word	0xe000e400
 80046dc:	20000170 	.word	0x20000170
 80046e0:	20000174 	.word	0x20000174

080046e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
    }
 80046fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <vPortEnterCritical+0x58>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a0d      	ldr	r2, [pc, #52]	; (800473c <vPortEnterCritical+0x58>)
 8004706:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <vPortEnterCritical+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10f      	bne.n	8004730 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortEnterCritical+0x5c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <vPortEnterCritical+0x4c>
        __asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	603b      	str	r3, [r7, #0]
    }
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vPortEnterCritical+0x4a>
    }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000010 	.word	0x20000010
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <vPortExitCritical+0x50>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <vPortExitCritical+0x24>
        __asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
    }
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <vPortExitCritical+0x50>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <vPortExitCritical+0x50>)
 8004770:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <vPortExitCritical+0x50>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <vPortExitCritical+0x42>
 800477a:	2300      	movs	r3, #0
 800477c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f383 8811 	msr	BASEPRI, r3
    }
 8004784:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010
	...

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	f380 8811 	msr	BASEPRI, r0
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f7fe ff54 	bl	800367c <vTaskSwitchContext>
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f380 8811 	msr	BASEPRI, r0
 80047dc:	bc09      	pop	{r0, r3}
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e6:	f01e 0f10 	tst.w	lr, #16
 80047ea:	bf08      	it	eq
 80047ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f0:	f380 8809 	msr	PSP, r0
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst>:
 8004800:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
    }
 8004820:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004822:	f002 f825 	bl	8006870 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004826:	f7fe fe6d 	bl	8003504 <xTaskIncrementTick>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d006      	beq.n	800483e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004830:	f002 f87c 	bl	800692c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <SysTick_Handler+0x50>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e001      	b.n	8004842 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800483e:	f002 f859 	bl	80068f4 <SEGGER_SYSVIEW_RecordExitISR>
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f383 8811 	msr	BASEPRI, r3
    }
 800484c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
 80048b2:	0000      	.short	0x0000
 80048b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop

080048bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048c2:	f3ef 8305 	mrs	r3, IPSR
 80048c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d914      	bls.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <vPortValidateInterruptPriority+0x70>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <vPortValidateInterruptPriority+0x74>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	7afa      	ldrb	r2, [r7, #11]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20a      	bcs.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
    }
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <vPortValidateInterruptPriority+0x78>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <vPortValidateInterruptPriority+0x7c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d90a      	bls.n	800491e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	603b      	str	r3, [r7, #0]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vPortValidateInterruptPriority+0x60>
    }
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e3f0 	.word	0xe000e3f0
 8004930:	20000170 	.word	0x20000170
 8004934:	e000ed0c 	.word	0xe000ed0c
 8004938:	20000174 	.word	0x20000174

0800493c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004948:	f7fe fd0c 	bl	8003364 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <pvPortMalloc+0x1a8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004954:	f000 f934 	bl	8004bc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004958:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <pvPortMalloc+0x1ac>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 80a7 	bne.w	8004ab4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02d      	beq.n	80049c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800496c:	2208      	movs	r2, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d227      	bcs.n	80049c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004978:	2208      	movs	r2, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d021      	beq.n	80049ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d214      	bcs.n	80049c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	3308      	adds	r3, #8
 80049a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <pvPortMalloc+0x92>
        __asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	617b      	str	r3, [r7, #20]
    }
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049c6:	e002      	b.n	80049ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e000      	b.n	80049d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d06e      	beq.n	8004ab4 <pvPortMalloc+0x178>
 80049d6:	4b45      	ldr	r3, [pc, #276]	; (8004aec <pvPortMalloc+0x1b0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d869      	bhi.n	8004ab4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <pvPortMalloc+0x1b4>)
 80049e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049e4:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <pvPortMalloc+0x1b4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ea:	e004      	b.n	80049f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d903      	bls.n	8004a08 <pvPortMalloc+0xcc>
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f1      	bne.n	80049ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a08:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <pvPortMalloc+0x1a8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d050      	beq.n	8004ab4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2208      	movs	r2, #8
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d91f      	bls.n	8004a74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <pvPortMalloc+0x120>
        __asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	613b      	str	r3, [r7, #16]
    }
 8004a58:	bf00      	nop
 8004a5a:	e7fe      	b.n	8004a5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a6e:	69b8      	ldr	r0, [r7, #24]
 8004a70:	f000 f908 	bl	8004c84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <pvPortMalloc+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d203      	bcs.n	8004a96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <pvPortMalloc+0x1b0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <pvPortMalloc+0x1b8>)
 8004a94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <pvPortMalloc+0x1ac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <pvPortMalloc+0x1bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <pvPortMalloc+0x1bc>)
 8004ab2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ab4:	f7fe fc64 	bl	8003380 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <pvPortMalloc+0x19c>
        __asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60fb      	str	r3, [r7, #12]
    }
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20012d80 	.word	0x20012d80
 8004ae8:	20012d94 	.word	0x20012d94
 8004aec:	20012d84 	.word	0x20012d84
 8004af0:	20012d78 	.word	0x20012d78
 8004af4:	20012d88 	.word	0x20012d88
 8004af8:	20012d8c 	.word	0x20012d8c

08004afc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d04d      	beq.n	8004baa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	425b      	negs	r3, r3
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <vPortFree+0xb8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <vPortFree+0x44>
        __asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	60fb      	str	r3, [r7, #12]
    }
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <vPortFree+0x62>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60bb      	str	r3, [r7, #8]
    }
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <vPortFree+0xb8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01e      	beq.n	8004baa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11a      	bne.n	8004baa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <vPortFree+0xb8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	401a      	ands	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b84:	f7fe fbee 	bl	8003364 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vPortFree+0xbc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <vPortFree+0xbc>)
 8004b94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b96:	6938      	ldr	r0, [r7, #16]
 8004b98:	f000 f874 	bl	8004c84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b9c:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <vPortFree+0xc0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a06      	ldr	r2, [pc, #24]	; (8004bbc <vPortFree+0xc0>)
 8004ba4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ba6:	f7fe fbeb 	bl	8003380 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004baa:	bf00      	nop
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20012d94 	.word	0x20012d94
 8004bb8:	20012d84 	.word	0x20012d84
 8004bbc:	20012d90 	.word	0x20012d90

08004bc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004bca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <prvHeapInit+0xac>)
 8004bce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3307      	adds	r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0307 	bic.w	r3, r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <prvHeapInit+0xac>)
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <prvHeapInit+0xb0>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <prvHeapInit+0xb0>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0307 	bic.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <prvHeapInit+0xb4>)
 8004c20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <prvHeapInit+0xb4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <prvHeapInit+0xb4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <prvHeapInit+0xb4>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <prvHeapInit+0xb8>)
 8004c4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <prvHeapInit+0xbc>)
 8004c56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <prvHeapInit+0xc0>)
 8004c5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000178 	.word	0x20000178
 8004c70:	20012d78 	.word	0x20012d78
 8004c74:	20012d80 	.word	0x20012d80
 8004c78:	20012d88 	.word	0x20012d88
 8004c7c:	20012d84 	.word	0x20012d84
 8004c80:	20012d94 	.word	0x20012d94

08004c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c8c:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <prvInsertBlockIntoFreeList+0xac>)
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e002      	b.n	8004c98 <prvInsertBlockIntoFreeList+0x14>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d8f7      	bhi.n	8004c92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d108      	bne.n	8004cc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	441a      	add	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d118      	bne.n	8004d0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d00d      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e008      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <prvInsertBlockIntoFreeList+0xb0>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e003      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d002      	beq.n	8004d22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20012d78 	.word	0x20012d78
 8004d34:	20012d80 	.word	0x20012d80

08004d38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d3c:	4803      	ldr	r0, [pc, #12]	; (8004d4c <_cbSendSystemDesc+0x14>)
 8004d3e:	f001 fd41 	bl	80067c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d42:	4803      	ldr	r0, [pc, #12]	; (8004d50 <_cbSendSystemDesc+0x18>)
 8004d44:	f001 fd3e 	bl	80067c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08006fa8 	.word	0x08006fa8
 8004d50:	08006fec 	.word	0x08006fec

08004d54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d62:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <SEGGER_SYSVIEW_Conf+0x28>)
 8004d64:	f001 f8aa 	bl	8005ebc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d6c:	f001 f8ec 	bl	8005f48 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d70:	bf00      	nop
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000000 	.word	0x20000000
 8004d78:	08004d39 	.word	0x08004d39
 8004d7c:	0800708c 	.word	0x0800708c

08004d80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	e033      	b.n	8004df4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d8c:	491e      	ldr	r1, [pc, #120]	; (8004e08 <_cbSendTaskList+0x88>)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	491a      	ldr	r1, [pc, #104]	; (8004e08 <_cbSendTaskList+0x88>)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3304      	adds	r3, #4
 8004dac:	6819      	ldr	r1, [r3, #0]
 8004dae:	4c16      	ldr	r4, [pc, #88]	; (8004e08 <_cbSendTaskList+0x88>)
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4423      	add	r3, r4
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	681c      	ldr	r4, [r3, #0]
 8004dc0:	4d11      	ldr	r5, [pc, #68]	; (8004e08 <_cbSendTaskList+0x88>)
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	442b      	add	r3, r5
 8004dce:	330c      	adds	r3, #12
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	4e0d      	ldr	r6, [pc, #52]	; (8004e08 <_cbSendTaskList+0x88>)
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4433      	add	r3, r6
 8004de0:	3310      	adds	r3, #16
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462b      	mov	r3, r5
 8004de8:	4622      	mov	r2, r4
 8004dea:	f000 f8b5 	bl	8004f58 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3301      	adds	r3, #1
 8004df2:	607b      	str	r3, [r7, #4]
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <_cbSendTaskList+0x8c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3c6      	bcc.n	8004d8c <_cbSendTaskList+0xc>
  }
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e08:	20012d98 	.word	0x20012d98
 8004e0c:	20012e38 	.word	0x20012e38

08004e10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e16:	f7fe fb63 	bl	80034e0 <xTaskGetTickCountFromISR>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	f04f 0400 	mov.w	r4, #0
 8004e32:	f04f 0500 	mov.w	r5, #0
 8004e36:	015d      	lsls	r5, r3, #5
 8004e38:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004e3c:	0154      	lsls	r4, r2, #5
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	1a12      	subs	r2, r2, r0
 8004e44:	eb63 0301 	sbc.w	r3, r3, r1
 8004e48:	f04f 0400 	mov.w	r4, #0
 8004e4c:	f04f 0500 	mov.w	r5, #0
 8004e50:	009d      	lsls	r5, r3, #2
 8004e52:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004e56:	0094      	lsls	r4, r2, #2
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	1812      	adds	r2, r2, r0
 8004e5e:	eb41 0303 	adc.w	r3, r1, r3
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	00d9      	lsls	r1, r3, #3
 8004e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e70:	00d0      	lsls	r0, r2, #3
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bdb0      	pop	{r4, r5, r7, pc}

08004e88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e96:	2205      	movs	r2, #5
 8004e98:	492b      	ldr	r1, [pc, #172]	; (8004f48 <SYSVIEW_AddTask+0xc0>)
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f002 f824 	bl	8006ee8 <memcmp>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d04b      	beq.n	8004f3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ea6:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	d903      	bls.n	8004eb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004eae:	4828      	ldr	r0, [pc, #160]	; (8004f50 <SYSVIEW_AddTask+0xc8>)
 8004eb0:	f001 ff9a 	bl	8006de8 <SEGGER_SYSVIEW_Warn>
    return;
 8004eb4:	e044      	b.n	8004f40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004eb6:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4926      	ldr	r1, [pc, #152]	; (8004f54 <SYSVIEW_AddTask+0xcc>)
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4921      	ldr	r1, [pc, #132]	; (8004f54 <SYSVIEW_AddTask+0xcc>)
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3304      	adds	r3, #4
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ee0:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	491b      	ldr	r1, [pc, #108]	; (8004f54 <SYSVIEW_AddTask+0xcc>)
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ef6:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4916      	ldr	r1, [pc, #88]	; (8004f54 <SYSVIEW_AddTask+0xcc>)
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	330c      	adds	r3, #12
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4910      	ldr	r1, [pc, #64]	; (8004f54 <SYSVIEW_AddTask+0xcc>)
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3310      	adds	r3, #16
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <SYSVIEW_AddTask+0xc4>)
 8004f2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f80e 	bl	8004f58 <SYSVIEW_SendTaskInfo>
 8004f3c:	e000      	b.n	8004f40 <SYSVIEW_AddTask+0xb8>
    return;
 8004f3e:	bf00      	nop

}
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	08006ffc 	.word	0x08006ffc
 8004f4c:	20012e38 	.word	0x20012e38
 8004f50:	08007004 	.word	0x08007004
 8004f54:	20012d98 	.word	0x20012d98

08004f58 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	2214      	movs	r2, #20
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 ffd6 	bl	8006f20 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fb21 	bl	80065d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f92:	bf00      	nop
 8004f94:	3728      	adds	r7, #40	; 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004fa2:	4b24      	ldr	r3, [pc, #144]	; (8005034 <_DoInit+0x98>)
 8004fa4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a20      	ldr	r2, [pc, #128]	; (8005038 <_DoInit+0x9c>)
 8004fb6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a20      	ldr	r2, [pc, #128]	; (800503c <_DoInit+0xa0>)
 8004fbc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <_DoInit+0x9c>)
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a17      	ldr	r2, [pc, #92]	; (8005040 <_DoInit+0xa4>)
 8004fe2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3307      	adds	r3, #7
 8005000:	4a10      	ldr	r2, [pc, #64]	; (8005044 <_DoInit+0xa8>)
 8005002:	6810      	ldr	r0, [r2, #0]
 8005004:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005006:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a0e      	ldr	r2, [pc, #56]	; (8005048 <_DoInit+0xac>)
 800500e:	6810      	ldr	r0, [r2, #0]
 8005010:	6018      	str	r0, [r3, #0]
 8005012:	8891      	ldrh	r1, [r2, #4]
 8005014:	7992      	ldrb	r2, [r2, #6]
 8005016:	8099      	strh	r1, [r3, #4]
 8005018:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800501a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005024:	f3bf 8f5f 	dmb	sy
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	200143f4 	.word	0x200143f4
 8005038:	08007054 	.word	0x08007054
 800503c:	20012e3c 	.word	0x20012e3c
 8005040:	2001323c 	.word	0x2001323c
 8005044:	08007060 	.word	0x08007060
 8005048:	08007064 	.word	0x08007064

0800504c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005058:	4b3e      	ldr	r3, [pc, #248]	; (8005154 <SEGGER_RTT_ReadNoLock+0x108>)
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <SEGGER_RTT_ReadNoLock+0x1e>
 8005066:	f7ff ff99 	bl	8004f9c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4613      	mov	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4413      	add	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3360      	adds	r3, #96	; 0x60
 8005076:	4a37      	ldr	r2, [pc, #220]	; (8005154 <SEGGER_RTT_ReadNoLock+0x108>)
 8005078:	4413      	add	r3, r2
 800507a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800508c:	2300      	movs	r3, #0
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	d92b      	bls.n	80050f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4293      	cmp	r3, r2
 80050a8:	bf28      	it	cs
 80050aa:	4613      	movcs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	4413      	add	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	6939      	ldr	r1, [r7, #16]
 80050bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050be:	f001 ff21 	bl	8006f04 <memcpy>
    NumBytesRead += NumBytesRem;
 80050c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4413      	add	r3, r2
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4413      	add	r3, r2
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d101      	bne.n	80050f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bf28      	it	cs
 8005100:	4613      	movcs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d019      	beq.n	800513e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	4413      	add	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800511a:	f001 fef3 	bl	8006f04 <memcpy>
    NumBytesRead += NumBytesRem;
 800511e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005148:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800514c:	4618      	mov	r0, r3
 800514e:	3730      	adds	r7, #48	; 0x30
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200143f4 	.word	0x200143f4

08005158 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005166:	4b3d      	ldr	r3, [pc, #244]	; (800525c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005174:	f7ff ff12 	bl	8004f9c <_DoInit>
  SEGGER_RTT_LOCK();
 8005178:	f3ef 8311 	mrs	r3, BASEPRI
 800517c:	f04f 0120 	mov.w	r1, #32
 8005180:	f381 8811 	msr	BASEPRI, r1
 8005184:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005186:	4b35      	ldr	r3, [pc, #212]	; (800525c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005188:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800518e:	6939      	ldr	r1, [r7, #16]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	4613      	mov	r3, r2
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	440b      	add	r3, r1
 800519e:	3304      	adds	r3, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	dbeb      	blt.n	800518e <SEGGER_RTT_AllocUpBuffer+0x36>
 80051b6:	e000      	b.n	80051ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80051b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	da3f      	bge.n	8005244 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051c4:	6939      	ldr	r1, [r7, #16]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051d8:	6939      	ldr	r1, [r7, #16]
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	440b      	add	r3, r1
 80051e8:	3304      	adds	r3, #4
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051ee:	6939      	ldr	r1, [r7, #16]
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	4613      	mov	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	440b      	add	r3, r1
 80051fc:	3320      	adds	r3, #32
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005202:	6939      	ldr	r1, [r7, #16]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	440b      	add	r3, r1
 8005210:	3328      	adds	r3, #40	; 0x28
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005216:	6939      	ldr	r1, [r7, #16]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	4613      	mov	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	3324      	adds	r3, #36	; 0x24
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	4613      	mov	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	332c      	adds	r3, #44	; 0x2c
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800523e:	f3bf 8f5f 	dmb	sy
 8005242:	e002      	b.n	800524a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005250:	69fb      	ldr	r3, [r7, #28]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200143f4 	.word	0x200143f4

08005260 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800526e:	4b33      	ldr	r3, [pc, #204]	; (800533c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800527c:	f7ff fe8e 	bl	8004f9c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005280:	4b2e      	ldr	r3, [pc, #184]	; (800533c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005282:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	461a      	mov	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4293      	cmp	r3, r2
 800528e:	d24d      	bcs.n	800532c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005290:	f3ef 8311 	mrs	r3, BASEPRI
 8005294:	f04f 0120 	mov.w	r1, #32
 8005298:	f381 8811 	msr	BASEPRI, r1
 800529c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d031      	beq.n	8005308 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80052a4:	6979      	ldr	r1, [r7, #20]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4413      	add	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	440b      	add	r3, r1
 80052b2:	3360      	adds	r3, #96	; 0x60
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	3364      	adds	r3, #100	; 0x64
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4413      	add	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	440b      	add	r3, r1
 80052da:	3368      	adds	r3, #104	; 0x68
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	440b      	add	r3, r1
 80052ee:	3370      	adds	r3, #112	; 0x70
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80052f4:	6979      	ldr	r1, [r7, #20]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	440b      	add	r3, r1
 8005302:	336c      	adds	r3, #108	; 0x6c
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005308:	6979      	ldr	r1, [r7, #20]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4413      	add	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	440b      	add	r3, r1
 8005316:	3374      	adds	r3, #116	; 0x74
 8005318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800531c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	e002      	b.n	8005332 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800532c:	f04f 33ff 	mov.w	r3, #4294967295
 8005330:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005332:	69fb      	ldr	r3, [r7, #28]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	200143f4 	.word	0x200143f4

08005340 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005350:	e002      	b.n	8005358 <_EncodeStr+0x18>
    Len++;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3301      	adds	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f6      	bne.n	8005352 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d901      	bls.n	8005370 <_EncodeStr+0x30>
    Len = Limit;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2bfe      	cmp	r3, #254	; 0xfe
 8005374:	d806      	bhi.n	8005384 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e011      	b.n	80053a8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	60fa      	str	r2, [r7, #12]
 800538a:	22ff      	movs	r2, #255	; 0xff
 800538c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	60fa      	str	r2, [r7, #12]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	0a19      	lsrs	r1, r3, #8
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	60fa      	str	r2, [r7, #12]
 80053a4:	b2ca      	uxtb	r2, r1
 80053a6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053ac:	e00a      	b.n	80053c4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	1c53      	adds	r3, r2, #1
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	60f9      	str	r1, [r7, #12]
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
    n++;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3301      	adds	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d3f0      	bcc.n	80053ae <_EncodeStr+0x6e>
  }
  return pPayload;
 80053cc:	68fb      	ldr	r3, [r7, #12]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <_HandleIncomingPacket+0xe0>)
 80053fc:	7e1b      	ldrb	r3, [r3, #24]
 80053fe:	4618      	mov	r0, r3
 8005400:	1cfb      	adds	r3, r7, #3
 8005402:	2201      	movs	r2, #1
 8005404:	4619      	mov	r1, r3
 8005406:	f7ff fe21 	bl	800504c <SEGGER_RTT_ReadNoLock>
 800540a:	4603      	mov	r3, r0
 800540c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd54      	ble.n	80054be <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d032      	beq.n	8005480 <_HandleIncomingPacket+0x8c>
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	dc42      	bgt.n	80054a4 <_HandleIncomingPacket+0xb0>
 800541e:	2b07      	cmp	r3, #7
 8005420:	dc16      	bgt.n	8005450 <_HandleIncomingPacket+0x5c>
 8005422:	2b00      	cmp	r3, #0
 8005424:	dd3e      	ble.n	80054a4 <_HandleIncomingPacket+0xb0>
 8005426:	3b01      	subs	r3, #1
 8005428:	2b06      	cmp	r3, #6
 800542a:	d83b      	bhi.n	80054a4 <_HandleIncomingPacket+0xb0>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <_HandleIncomingPacket+0x40>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005457 	.word	0x08005457
 8005438:	0800545d 	.word	0x0800545d
 800543c:	08005463 	.word	0x08005463
 8005440:	08005469 	.word	0x08005469
 8005444:	0800546f 	.word	0x0800546f
 8005448:	08005475 	.word	0x08005475
 800544c:	0800547b 	.word	0x0800547b
 8005450:	2b7f      	cmp	r3, #127	; 0x7f
 8005452:	d036      	beq.n	80054c2 <_HandleIncomingPacket+0xce>
 8005454:	e026      	b.n	80054a4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005456:	f000 ff43 	bl	80062e0 <SEGGER_SYSVIEW_Start>
      break;
 800545a:	e037      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800545c:	f000 fffa 	bl	8006454 <SEGGER_SYSVIEW_Stop>
      break;
 8005460:	e034      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005462:	f001 f9d3 	bl	800680c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005466:	e031      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005468:	f001 f998 	bl	800679c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800546c:	e02e      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800546e:	f001 f817 	bl	80064a0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005472:	e02b      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005474:	f001 fc66 	bl	8006d44 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005478:	e028      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800547a:	f001 fc45 	bl	8006d08 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800547e:	e025      	b.n	80054cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <_HandleIncomingPacket+0xe0>)
 8005482:	7e1b      	ldrb	r3, [r3, #24]
 8005484:	4618      	mov	r0, r3
 8005486:	1cfb      	adds	r3, r7, #3
 8005488:	2201      	movs	r2, #1
 800548a:	4619      	mov	r1, r3
 800548c:	f7ff fdde 	bl	800504c <SEGGER_RTT_ReadNoLock>
 8005490:	4603      	mov	r3, r0
 8005492:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	dd15      	ble.n	80054c6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	4618      	mov	r0, r3
 800549e:	f001 fbb3 	bl	8006c08 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054a2:	e010      	b.n	80054c6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	b25b      	sxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	da0e      	bge.n	80054ca <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <_HandleIncomingPacket+0xe0>)
 80054ae:	7e1b      	ldrb	r3, [r3, #24]
 80054b0:	4618      	mov	r0, r3
 80054b2:	1cfb      	adds	r3, r7, #3
 80054b4:	2201      	movs	r2, #1
 80054b6:	4619      	mov	r1, r3
 80054b8:	f7ff fdc8 	bl	800504c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054bc:	e005      	b.n	80054ca <_HandleIncomingPacket+0xd6>
    }
  }
 80054be:	bf00      	nop
 80054c0:	e004      	b.n	80054cc <_HandleIncomingPacket+0xd8>
      break;
 80054c2:	bf00      	nop
 80054c4:	e002      	b.n	80054cc <_HandleIncomingPacket+0xd8>
      break;
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <_HandleIncomingPacket+0xd8>
      break;
 80054ca:	bf00      	nop
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20014254 	.word	0x20014254

080054d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	; 0x30
 80054dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054de:	2301      	movs	r3, #1
 80054e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054e2:	1d3b      	adds	r3, r7, #4
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ec:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f2:	e00b      	b.n	800550c <_TrySendOverflowPacket+0x34>
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	09db      	lsrs	r3, r3, #7
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	2b7f      	cmp	r3, #127	; 0x7f
 8005510:	d8f0      	bhi.n	80054f4 <_TrySendOverflowPacket+0x1c>
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005522:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <_TrySendOverflowPacket+0xe0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005528:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	e00b      	b.n	8005554 <_TrySendOverflowPacket+0x7c>
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	6279      	str	r1, [r7, #36]	; 0x24
 8005546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	09db      	lsrs	r3, r3, #7
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b7f      	cmp	r3, #127	; 0x7f
 8005558:	d8f0      	bhi.n	800553c <_TrySendOverflowPacket+0x64>
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	627a      	str	r2, [r7, #36]	; 0x24
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	4618      	mov	r0, r3
 8005570:	1d3b      	adds	r3, r7, #4
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	461a      	mov	r2, r3
 8005578:	1d3b      	adds	r3, r7, #4
 800557a:	4619      	mov	r1, r3
 800557c:	f7fa fe38 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005580:	4603      	mov	r3, r0
 8005582:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e004      	b.n	80055a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a03      	ldr	r2, [pc, #12]	; (80055b4 <_TrySendOverflowPacket+0xdc>)
 80055a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055a8:	693b      	ldr	r3, [r7, #16]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3730      	adds	r7, #48	; 0x30
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20014254 	.word	0x20014254
 80055b8:	e0001004 	.word	0xe0001004

080055bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055c8:	4b6c      	ldr	r3, [pc, #432]	; (800577c <_SendPacket+0x1c0>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d010      	beq.n	80055f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055d0:	4b6a      	ldr	r3, [pc, #424]	; (800577c <_SendPacket+0x1c0>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80a3 	beq.w	8005720 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055da:	4b68      	ldr	r3, [pc, #416]	; (800577c <_SendPacket+0x1c0>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d109      	bne.n	80055f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055e2:	f7ff ff79 	bl	80054d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055e6:	4b65      	ldr	r3, [pc, #404]	; (800577c <_SendPacket+0x1c0>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	f040 809a 	bne.w	8005724 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80055f0:	e001      	b.n	80055f6 <_SendPacket+0x3a>
    goto Send;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <_SendPacket+0x3c>
Send:
 80055f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b1f      	cmp	r3, #31
 80055fc:	d809      	bhi.n	8005612 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055fe:	4b5f      	ldr	r3, [pc, #380]	; (800577c <_SendPacket+0x1c0>)
 8005600:	69da      	ldr	r2, [r3, #28]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 808b 	bne.w	8005728 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b17      	cmp	r3, #23
 8005616:	d807      	bhi.n	8005628 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b01      	subs	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e03d      	b.n	80056a4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b7f      	cmp	r3, #127	; 0x7f
 8005634:	d912      	bls.n	800565c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	09da      	lsrs	r2, r3, #7
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b01      	subs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	3a01      	subs	r2, #1
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e006      	b.n	800566a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b01      	subs	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b7f      	cmp	r3, #127	; 0x7f
 800566e:	d912      	bls.n	8005696 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	09da      	lsrs	r2, r3, #7
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3b01      	subs	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	3a01      	subs	r2, #1
 8005688:	60fa      	str	r2, [r7, #12]
 800568a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e006      	b.n	80056a4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b01      	subs	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056a4:	4b36      	ldr	r3, [pc, #216]	; (8005780 <_SendPacket+0x1c4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056aa:	4b34      	ldr	r3, [pc, #208]	; (800577c <_SendPacket+0x1c0>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	e00b      	b.n	80056d6 <_SendPacket+0x11a>
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1c59      	adds	r1, r3, #1
 80056c6:	6279      	str	r1, [r7, #36]	; 0x24
 80056c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	09db      	lsrs	r3, r3, #7
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2b7f      	cmp	r3, #127	; 0x7f
 80056da:	d8f0      	bhi.n	80056be <_SendPacket+0x102>
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	627a      	str	r2, [r7, #36]	; 0x24
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80056ec:	4b23      	ldr	r3, [pc, #140]	; (800577c <_SendPacket+0x1c0>)
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	4618      	mov	r0, r3
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f7fa fd78 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005700:	4603      	mov	r3, r0
 8005702:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800570a:	4a1c      	ldr	r2, [pc, #112]	; (800577c <_SendPacket+0x1c0>)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	60d3      	str	r3, [r2, #12]
 8005710:	e00b      	b.n	800572a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005712:	4b1a      	ldr	r3, [pc, #104]	; (800577c <_SendPacket+0x1c0>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <_SendPacket+0x1c0>)
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e004      	b.n	800572a <_SendPacket+0x16e>
    goto SendDone;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <_SendPacket+0x16e>
      goto SendDone;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <_SendPacket+0x16e>
      goto SendDone;
 8005728:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800572a:	4b14      	ldr	r3, [pc, #80]	; (800577c <_SendPacket+0x1c0>)
 800572c:	7e1b      	ldrb	r3, [r3, #24]
 800572e:	4619      	mov	r1, r3
 8005730:	4a14      	ldr	r2, [pc, #80]	; (8005784 <_SendPacket+0x1c8>)
 8005732:	460b      	mov	r3, r1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	336c      	adds	r3, #108	; 0x6c
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0e      	ldr	r3, [pc, #56]	; (800577c <_SendPacket+0x1c0>)
 8005742:	7e1b      	ldrb	r3, [r3, #24]
 8005744:	4618      	mov	r0, r3
 8005746:	490f      	ldr	r1, [pc, #60]	; (8005784 <_SendPacket+0x1c8>)
 8005748:	4603      	mov	r3, r0
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4403      	add	r3, r0
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	3370      	adds	r3, #112	; 0x70
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d00b      	beq.n	8005772 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <_SendPacket+0x1c0>)
 800575c:	789b      	ldrb	r3, [r3, #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <_SendPacket+0x1c0>)
 8005764:	2201      	movs	r2, #1
 8005766:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005768:	f7ff fe44 	bl	80053f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <_SendPacket+0x1c0>)
 800576e:	2200      	movs	r2, #0
 8005770:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005772:	bf00      	nop
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20014254 	.word	0x20014254
 8005780:	e0001004 	.word	0xe0001004
 8005784:	200143f4 	.word	0x200143f4

08005788 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	3301      	adds	r3, #1
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	d80a      	bhi.n	80057b8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6051      	str	r1, [r2, #4]
 80057ac:	78fa      	ldrb	r2, [r7, #3]
 80057ae:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b80      	cmp	r3, #128	; 0x80
 80057be:	d15a      	bne.n	8005876 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	e00b      	b.n	80057fa <_StoreChar+0x72>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	1c59      	adds	r1, r3, #1
 80057ea:	6279      	str	r1, [r7, #36]	; 0x24
 80057ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	09db      	lsrs	r3, r3, #7
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2b7f      	cmp	r3, #127	; 0x7f
 80057fe:	d8f0      	bhi.n	80057e2 <_StoreChar+0x5a>
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	627a      	str	r2, [r7, #36]	; 0x24
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e00b      	b.n	8005832 <_StoreChar+0xaa>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	1c59      	adds	r1, r3, #1
 8005822:	61f9      	str	r1, [r7, #28]
 8005824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	09db      	lsrs	r3, r3, #7
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b7f      	cmp	r3, #127	; 0x7f
 8005836:	d8f0      	bhi.n	800581a <_StoreChar+0x92>
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	221a      	movs	r2, #26
 800584e:	6939      	ldr	r1, [r7, #16]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff feb3 	bl	80055bc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fdbd 	bl	80053da <_PreparePacket>
 8005860:	4602      	mov	r2, r0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	611a      	str	r2, [r3, #16]
  }
}
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	; 0x28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005892:	2301      	movs	r3, #1
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005896:	2301      	movs	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800589a:	e007      	b.n	80058ac <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	623b      	str	r3, [r7, #32]
    Width++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3301      	adds	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d2f3      	bcs.n	800589c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d901      	bls.n	80058c0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11f      	bne.n	800590a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01c      	beq.n	800590a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <_PrintUnsigned+0x66>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <_PrintUnsigned+0x66>
        c = '0';
 80058e0:	2330      	movs	r3, #48	; 0x30
 80058e2:	76fb      	strb	r3, [r7, #27]
 80058e4:	e001      	b.n	80058ea <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80058e6:	2320      	movs	r3, #32
 80058e8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058ea:	e007      	b.n	80058fc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	3b01      	subs	r3, #1
 80058f0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80058f2:	7efb      	ldrb	r3, [r7, #27]
 80058f4:	4619      	mov	r1, r3
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ff46 	bl	8005788 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <_PrintUnsigned+0x8a>
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	429a      	cmp	r2, r3
 8005908:	d3f0      	bcc.n	80058ec <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d903      	bls.n	8005918 <_PrintUnsigned+0x98>
      NumDigits--;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	e009      	b.n	800592c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d200      	bcs.n	800592c <_PrintUnsigned+0xac>
        break;
 800592a:	e005      	b.n	8005938 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005936:	e7e8      	b.n	800590a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005950:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <_PrintUnsigned+0x128>)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	4413      	add	r3, r2
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff ff14 	bl	8005788 <_StoreChar>
    Digit /= Base;
 8005960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d011      	beq.n	800599e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00e      	beq.n	800599e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005980:	e006      	b.n	8005990 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	3b01      	subs	r3, #1
 8005986:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005988:	2120      	movs	r1, #32
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fefc 	bl	8005788 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <_PrintUnsigned+0x11e>
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	429a      	cmp	r2, r3
 800599c:	d3f1      	bcc.n	8005982 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	080070a0 	.word	0x080070a0

080059ac <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfb8      	it	lt
 80059c0:	425b      	neglt	r3, r3
 80059c2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059c8:	e007      	b.n	80059da <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80059d2:	613b      	str	r3, [r7, #16]
    Width++;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3301      	adds	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	daf3      	bge.n	80059ca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d901      	bls.n	80059ee <_PrintInt+0x42>
    Width = NumDigits;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <_PrintInt+0x5e>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	db04      	blt.n	8005a04 <_PrintInt+0x58>
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <_PrintInt+0x5e>
    FieldWidth--;
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <_PrintInt+0x6e>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <_PrintInt+0x9c>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d111      	bne.n	8005a48 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00e      	beq.n	8005a48 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a2a:	e006      	b.n	8005a3a <_PrintInt+0x8e>
        FieldWidth--;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a32:	2120      	movs	r1, #32
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff fea7 	bl	8005788 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <_PrintInt+0x9c>
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3f1      	bcc.n	8005a2c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da07      	bge.n	8005a5e <_PrintInt+0xb2>
    v = -v;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	425b      	negs	r3, r3
 8005a52:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a54:	212d      	movs	r1, #45	; 0x2d
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff fe96 	bl	8005788 <_StoreChar>
 8005a5c:	e008      	b.n	8005a70 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a68:	212b      	movs	r1, #43	; 0x2b
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff fe8c 	bl	8005788 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d019      	beq.n	8005aae <_PrintInt+0x102>
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d114      	bne.n	8005aae <_PrintInt+0x102>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d111      	bne.n	8005aae <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a90:	e006      	b.n	8005aa0 <_PrintInt+0xf4>
        FieldWidth--;
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005a98:	2130      	movs	r1, #48	; 0x30
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff fe74 	bl	8005788 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <_PrintInt+0x102>
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d3f1      	bcc.n	8005a92 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	9301      	str	r3, [sp, #4]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fedf 	bl	8005880 <_PrintUnsigned>
}
 8005ac2:	bf00      	nop
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b098      	sub	sp, #96	; 0x60
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8005adc:	f04f 0120 	mov.w	r1, #32
 8005ae0:	f381 8811 	msr	BASEPRI, r1
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae6:	48b7      	ldr	r0, [pc, #732]	; (8005dc4 <_VPrintTarget+0x2f8>)
 8005ae8:	f7ff fc77 	bl	80053da <_PreparePacket>
 8005aec:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005aee:	4bb5      	ldr	r3, [pc, #724]	; (8005dc4 <_VPrintTarget+0x2f8>)
 8005af0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8183 	beq.w	8005e22 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b20:	2b25      	cmp	r3, #37	; 0x25
 8005b22:	f040 8170 	bne.w	8005e06 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b26:	2300      	movs	r3, #0
 8005b28:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b3a:	3b23      	subs	r3, #35	; 0x23
 8005b3c:	2b0d      	cmp	r3, #13
 8005b3e:	d83f      	bhi.n	8005bc0 <_VPrintTarget+0xf4>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <_VPrintTarget+0x7c>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005bb1 	.word	0x08005bb1
 8005b4c:	08005bc1 	.word	0x08005bc1
 8005b50:	08005bc1 	.word	0x08005bc1
 8005b54:	08005bc1 	.word	0x08005bc1
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005bc1 	.word	0x08005bc1
 8005b60:	08005bc1 	.word	0x08005bc1
 8005b64:	08005bc1 	.word	0x08005bc1
 8005b68:	08005ba1 	.word	0x08005ba1
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005bc1 	.word	0x08005bc1
 8005b78:	08005bc1 	.word	0x08005bc1
 8005b7c:	08005b91 	.word	0x08005b91
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e01a      	b.n	8005bc6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b92:	f043 0302 	orr.w	r3, r3, #2
 8005b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e012      	b.n	8005bc6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	f043 0304 	orr.w	r3, r3, #4
 8005ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e00a      	b.n	8005bc6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	f043 0308 	orr.w	r3, r3, #8
 8005bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e002      	b.n	8005bc6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc4:	bf00      	nop
        }
      } while (v);
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1b0      	bne.n	8005b2e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8005bde:	d912      	bls.n	8005c06 <_VPrintTarget+0x13a>
 8005be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005be4:	2b39      	cmp	r3, #57	; 0x39
 8005be6:	d80e      	bhi.n	8005c06 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bfe:	4413      	add	r3, r2
 8005c00:	3b30      	subs	r3, #48	; 0x30
 8005c02:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c04:	e7e4      	b.n	8005bd0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c06:	2300      	movs	r3, #0
 8005c08:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d11d      	bne.n	8005c56 <_VPrintTarget+0x18a>
        sFormat++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2e:	d912      	bls.n	8005c56 <_VPrintTarget+0x18a>
 8005c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c34:	2b39      	cmp	r3, #57	; 0x39
 8005c36:	d80e      	bhi.n	8005c56 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4e:	4413      	add	r3, r2
 8005c50:	3b30      	subs	r3, #48	; 0x30
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005c54:	e7e4      	b.n	8005c20 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c62:	2b6c      	cmp	r3, #108	; 0x6c
 8005c64:	d003      	beq.n	8005c6e <_VPrintTarget+0x1a2>
 8005c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c6a:	2b68      	cmp	r3, #104	; 0x68
 8005c6c:	d107      	bne.n	8005c7e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c7c:	e7ef      	b.n	8005c5e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c82:	2b25      	cmp	r3, #37	; 0x25
 8005c84:	f000 80b3 	beq.w	8005dee <_VPrintTarget+0x322>
 8005c88:	2b25      	cmp	r3, #37	; 0x25
 8005c8a:	f2c0 80b7 	blt.w	8005dfc <_VPrintTarget+0x330>
 8005c8e:	2b78      	cmp	r3, #120	; 0x78
 8005c90:	f300 80b4 	bgt.w	8005dfc <_VPrintTarget+0x330>
 8005c94:	2b58      	cmp	r3, #88	; 0x58
 8005c96:	f2c0 80b1 	blt.w	8005dfc <_VPrintTarget+0x330>
 8005c9a:	3b58      	subs	r3, #88	; 0x58
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	f200 80ad 	bhi.w	8005dfc <_VPrintTarget+0x330>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <_VPrintTarget+0x1dc>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005d9f 	.word	0x08005d9f
 8005cac:	08005dfd 	.word	0x08005dfd
 8005cb0:	08005dfd 	.word	0x08005dfd
 8005cb4:	08005dfd 	.word	0x08005dfd
 8005cb8:	08005dfd 	.word	0x08005dfd
 8005cbc:	08005dfd 	.word	0x08005dfd
 8005cc0:	08005dfd 	.word	0x08005dfd
 8005cc4:	08005dfd 	.word	0x08005dfd
 8005cc8:	08005dfd 	.word	0x08005dfd
 8005ccc:	08005dfd 	.word	0x08005dfd
 8005cd0:	08005dfd 	.word	0x08005dfd
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d53 	.word	0x08005d53
 8005cdc:	08005dfd 	.word	0x08005dfd
 8005ce0:	08005dfd 	.word	0x08005dfd
 8005ce4:	08005dfd 	.word	0x08005dfd
 8005ce8:	08005dfd 	.word	0x08005dfd
 8005cec:	08005dfd 	.word	0x08005dfd
 8005cf0:	08005dfd 	.word	0x08005dfd
 8005cf4:	08005dfd 	.word	0x08005dfd
 8005cf8:	08005dfd 	.word	0x08005dfd
 8005cfc:	08005dfd 	.word	0x08005dfd
 8005d00:	08005dfd 	.word	0x08005dfd
 8005d04:	08005dfd 	.word	0x08005dfd
 8005d08:	08005dc9 	.word	0x08005dc9
 8005d0c:	08005dfd 	.word	0x08005dfd
 8005d10:	08005dfd 	.word	0x08005dfd
 8005d14:	08005dfd 	.word	0x08005dfd
 8005d18:	08005dfd 	.word	0x08005dfd
 8005d1c:	08005d79 	.word	0x08005d79
 8005d20:	08005dfd 	.word	0x08005dfd
 8005d24:	08005dfd 	.word	0x08005dfd
 8005d28:	08005d9f 	.word	0x08005d9f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	1d19      	adds	r1, r3, #4
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d40:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d44:	f107 0314 	add.w	r3, r7, #20
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fd1c 	bl	8005788 <_StoreChar>
        break;
 8005d50:	e055      	b.n	8005dfe <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1d19      	adds	r1, r3, #4
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6011      	str	r1, [r2, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d60:	f107 0014 	add.w	r0, r7, #20
 8005d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6e:	220a      	movs	r2, #10
 8005d70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d72:	f7ff fe1b 	bl	80059ac <_PrintInt>
        break;
 8005d76:	e042      	b.n	8005dfe <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1d19      	adds	r1, r3, #4
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6011      	str	r1, [r2, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d88:	f107 0014 	add.w	r0, r7, #20
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d96:	220a      	movs	r2, #10
 8005d98:	f7ff fd72 	bl	8005880 <_PrintUnsigned>
        break;
 8005d9c:	e02f      	b.n	8005dfe <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	1d19      	adds	r1, r3, #4
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6011      	str	r1, [r2, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005dac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dae:	f107 0014 	add.w	r0, r7, #20
 8005db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	f7ff fd5f 	bl	8005880 <_PrintUnsigned>
        break;
 8005dc2:	e01c      	b.n	8005dfe <_VPrintTarget+0x332>
 8005dc4:	20014284 	.word	0x20014284
      case 'p':
        v = va_arg(*pParamList, int);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6011      	str	r1, [r2, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005dd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dd8:	f107 0014 	add.w	r0, r7, #20
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	2308      	movs	r3, #8
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2308      	movs	r3, #8
 8005de6:	2210      	movs	r2, #16
 8005de8:	f7ff fd4a 	bl	8005880 <_PrintUnsigned>
        break;
 8005dec:	e007      	b.n	8005dfe <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005dee:	f107 0314 	add.w	r3, r7, #20
 8005df2:	2125      	movs	r1, #37	; 0x25
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fcc7 	bl	8005788 <_StoreChar>
        break;
 8005dfa:	e000      	b.n	8005dfe <_VPrintTarget+0x332>
      default:
        break;
 8005dfc:	bf00      	nop
      }
      sFormat++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3301      	adds	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e007      	b.n	8005e16 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e06:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fcb9 	bl	8005788 <_StoreChar>
    }
  } while (*sFormat);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f47f ae72 	bne.w	8005b04 <_VPrintTarget+0x38>
 8005e20:	e000      	b.n	8005e24 <_VPrintTarget+0x358>
      break;
 8005e22:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d041      	beq.n	8005eae <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	643b      	str	r3, [r7, #64]	; 0x40
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e3a:	e00b      	b.n	8005e54 <_VPrintTarget+0x388>
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	6439      	str	r1, [r7, #64]	; 0x40
 8005e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e50:	09db      	lsrs	r3, r3, #7
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	2b7f      	cmp	r3, #127	; 0x7f
 8005e58:	d8f0      	bhi.n	8005e3c <_VPrintTarget+0x370>
 8005e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	643a      	str	r2, [r7, #64]	; 0x40
 8005e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e68:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	e00b      	b.n	8005e8c <_VPrintTarget+0x3c0>
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e90:	d8f0      	bhi.n	8005e74 <_VPrintTarget+0x3a8>
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	69b9      	ldr	r1, [r7, #24]
 8005ea6:	221a      	movs	r2, #26
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fb87 	bl	80055bc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005eb4:	bf00      	nop
 8005eb6:	3758      	adds	r7, #88	; 0x58
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ed0:	4918      	ldr	r1, [pc, #96]	; (8005f34 <SEGGER_SYSVIEW_Init+0x78>)
 8005ed2:	4819      	ldr	r0, [pc, #100]	; (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ed4:	f7ff f940 	bl	8005158 <SEGGER_RTT_AllocUpBuffer>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005ede:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005ee0:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005ee2:	785a      	ldrb	r2, [r3, #1]
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005ee6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005eea:	7e1b      	ldrb	r3, [r3, #24]
 8005eec:	4618      	mov	r0, r3
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <SEGGER_SYSVIEW_Init+0x84>)
 8005ef6:	4910      	ldr	r1, [pc, #64]	; (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ef8:	f7ff f9b2 	bl	8005260 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005efe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f02:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <SEGGER_SYSVIEW_Init+0x88>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005f0a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f12:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f18:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f1e:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	2001324c 	.word	0x2001324c
 8005f38:	0800706c 	.word	0x0800706c
 8005f3c:	20014254 	.word	0x20014254
 8005f40:	2001424c 	.word	0x2001424c
 8005f44:	e0001004 	.word	0xe0001004

08005f48 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6113      	str	r3, [r2, #16]
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20014254 	.word	0x20014254

08005f68 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f70:	f3ef 8311 	mrs	r3, BASEPRI
 8005f74:	f04f 0120 	mov.w	r1, #32
 8005f78:	f381 8811 	msr	BASEPRI, r1
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	4808      	ldr	r0, [pc, #32]	; (8005fa0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f80:	f7ff fa2b 	bl	80053da <_PreparePacket>
 8005f84:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	68b8      	ldr	r0, [r7, #8]
 8005f8c:	f7ff fb16 	bl	80055bc <_SendPacket>
  RECORD_END();
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f383 8811 	msr	BASEPRI, r3
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20014284 	.word	0x20014284

08005fa4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	f04f 0120 	mov.w	r1, #32
 8005fb6:	f381 8811 	msr	BASEPRI, r1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	4816      	ldr	r0, [pc, #88]	; (8006018 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fbe:	f7ff fa0c 	bl	80053da <_PreparePacket>
 8005fc2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	e00b      	b.n	8005fea <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	1c59      	adds	r1, r3, #1
 8005fda:	61f9      	str	r1, [r7, #28]
 8005fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b7f      	cmp	r3, #127	; 0x7f
 8005fee:	d8f0      	bhi.n	8005fd2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	61fa      	str	r2, [r7, #28]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	6938      	ldr	r0, [r7, #16]
 8006006:	f7ff fad9 	bl	80055bc <_SendPacket>
  RECORD_END();
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f383 8811 	msr	BASEPRI, r3
}
 8006010:	bf00      	nop
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20014284 	.word	0x20014284

0800601c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006028:	f3ef 8311 	mrs	r3, BASEPRI
 800602c:	f04f 0120 	mov.w	r1, #32
 8006030:	f381 8811 	msr	BASEPRI, r1
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	4825      	ldr	r0, [pc, #148]	; (80060cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006038:	f7ff f9cf 	bl	80053da <_PreparePacket>
 800603c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
 800604a:	e00b      	b.n	8006064 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	b2da      	uxtb	r2, r3
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	09db      	lsrs	r3, r3, #7
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b7f      	cmp	r3, #127	; 0x7f
 8006068:	d8f0      	bhi.n	800604c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	e00b      	b.n	800609c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	1c59      	adds	r1, r3, #1
 800608c:	6279      	str	r1, [r7, #36]	; 0x24
 800608e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	09db      	lsrs	r3, r3, #7
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d8f0      	bhi.n	8006084 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	627a      	str	r2, [r7, #36]	; 0x24
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	69b8      	ldr	r0, [r7, #24]
 80060b8:	f7ff fa80 	bl	80055bc <_SendPacket>
  RECORD_END();
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f383 8811 	msr	BASEPRI, r3
}
 80060c2:	bf00      	nop
 80060c4:	3730      	adds	r7, #48	; 0x30
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20014284 	.word	0x20014284

080060d0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	; 0x38
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060de:	f3ef 8311 	mrs	r3, BASEPRI
 80060e2:	f04f 0120 	mov.w	r1, #32
 80060e6:	f381 8811 	msr	BASEPRI, r1
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	4832      	ldr	r0, [pc, #200]	; (80061b8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80060ee:	f7ff f974 	bl	80053da <_PreparePacket>
 80060f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006100:	e00b      	b.n	800611a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	b2da      	uxtb	r2, r3
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	6379      	str	r1, [r7, #52]	; 0x34
 800610c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	09db      	lsrs	r3, r3, #7
 8006118:	633b      	str	r3, [r7, #48]	; 0x30
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b7f      	cmp	r3, #127	; 0x7f
 800611e:	d8f0      	bhi.n	8006102 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	637a      	str	r2, [r7, #52]	; 0x34
 8006126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
 8006138:	e00b      	b.n	8006152 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	b2da      	uxtb	r2, r3
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	1c59      	adds	r1, r3, #1
 8006142:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	09db      	lsrs	r3, r3, #7
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	2b7f      	cmp	r3, #127	; 0x7f
 8006156:	d8f0      	bhi.n	800613a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800615e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	623b      	str	r3, [r7, #32]
 8006170:	e00b      	b.n	800618a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	1c59      	adds	r1, r3, #1
 800617a:	6279      	str	r1, [r7, #36]	; 0x24
 800617c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	09db      	lsrs	r3, r3, #7
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	2b7f      	cmp	r3, #127	; 0x7f
 800618e:	d8f0      	bhi.n	8006172 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	627a      	str	r2, [r7, #36]	; 0x24
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	6979      	ldr	r1, [r7, #20]
 80061a4:	69b8      	ldr	r0, [r7, #24]
 80061a6:	f7ff fa09 	bl	80055bc <_SendPacket>
  RECORD_END();
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f383 8811 	msr	BASEPRI, r3
}
 80061b0:	bf00      	nop
 80061b2:	3738      	adds	r7, #56	; 0x38
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20014284 	.word	0x20014284

080061bc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b090      	sub	sp, #64	; 0x40
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ca:	f3ef 8311 	mrs	r3, BASEPRI
 80061ce:	f04f 0120 	mov.w	r1, #32
 80061d2:	f381 8811 	msr	BASEPRI, r1
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	4840      	ldr	r0, [pc, #256]	; (80062dc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061da:	f7ff f8fe 	bl	80053da <_PreparePacket>
 80061de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ec:	e00b      	b.n	8006206 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	1c59      	adds	r1, r3, #1
 80061f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	09db      	lsrs	r3, r3, #7
 8006204:	63bb      	str	r3, [r7, #56]	; 0x38
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	2b7f      	cmp	r3, #127	; 0x7f
 800620a:	d8f0      	bhi.n	80061ee <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800620c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	633b      	str	r3, [r7, #48]	; 0x30
 8006224:	e00b      	b.n	800623e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	b2da      	uxtb	r2, r3
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	1c59      	adds	r1, r3, #1
 800622e:	6379      	str	r1, [r7, #52]	; 0x34
 8006230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	09db      	lsrs	r3, r3, #7
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b7f      	cmp	r3, #127	; 0x7f
 8006242:	d8f0      	bhi.n	8006226 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	637a      	str	r2, [r7, #52]	; 0x34
 800624a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
 800625c:	e00b      	b.n	8006276 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	2b7f      	cmp	r3, #127	; 0x7f
 800627a:	d8f0      	bhi.n	800625e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	e00b      	b.n	80062ae <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	6279      	str	r1, [r7, #36]	; 0x24
 80062a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2b7f      	cmp	r3, #127	; 0x7f
 80062b2:	d8f0      	bhi.n	8006296 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	627a      	str	r2, [r7, #36]	; 0x24
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	6979      	ldr	r1, [r7, #20]
 80062c8:	69b8      	ldr	r0, [r7, #24]
 80062ca:	f7ff f977 	bl	80055bc <_SendPacket>
  RECORD_END();
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f383 8811 	msr	BASEPRI, r3
}
 80062d4:	bf00      	nop
 80062d6:	3740      	adds	r7, #64	; 0x40
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20014284 	.word	0x20014284

080062e0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08c      	sub	sp, #48	; 0x30
 80062e4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062e6:	4b58      	ldr	r3, [pc, #352]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062ec:	f3ef 8311 	mrs	r3, BASEPRI
 80062f0:	f04f 0120 	mov.w	r1, #32
 80062f4:	f381 8811 	msr	BASEPRI, r1
 80062f8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80062fa:	4b53      	ldr	r3, [pc, #332]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	220a      	movs	r2, #10
 8006300:	4952      	ldr	r1, [pc, #328]	; (800644c <SEGGER_SYSVIEW_Start+0x16c>)
 8006302:	4618      	mov	r0, r3
 8006304:	f7f9 ff74 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800630e:	200a      	movs	r0, #10
 8006310:	f7ff fe2a 	bl	8005f68 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	f04f 0120 	mov.w	r1, #32
 800631c:	f381 8811 	msr	BASEPRI, r1
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	484b      	ldr	r0, [pc, #300]	; (8006450 <SEGGER_SYSVIEW_Start+0x170>)
 8006324:	f7ff f859 	bl	80053da <_PreparePacket>
 8006328:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006332:	4b45      	ldr	r3, [pc, #276]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_Start+0x72>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_Start+0x5a>
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	4b36      	ldr	r3, [pc, #216]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	e00b      	b.n	800638c <SEGGER_SYSVIEW_Start+0xac>
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	6279      	str	r1, [r7, #36]	; 0x24
 800637e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	09db      	lsrs	r3, r3, #7
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2b7f      	cmp	r3, #127	; 0x7f
 8006390:	d8f0      	bhi.n	8006374 <SEGGER_SYSVIEW_Start+0x94>
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	627a      	str	r2, [r7, #36]	; 0x24
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	4b28      	ldr	r3, [pc, #160]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	e00b      	b.n	80063c6 <SEGGER_SYSVIEW_Start+0xe6>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	1c59      	adds	r1, r3, #1
 80063b6:	61f9      	str	r1, [r7, #28]
 80063b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	09db      	lsrs	r3, r3, #7
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ca:	d8f0      	bhi.n	80063ae <SEGGER_SYSVIEW_Start+0xce>
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	61fa      	str	r2, [r7, #28]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e00b      	b.n	80063fe <SEGGER_SYSVIEW_Start+0x11e>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	6179      	str	r1, [r7, #20]
 80063f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b7f      	cmp	r3, #127	; 0x7f
 8006402:	d8f0      	bhi.n	80063e6 <SEGGER_SYSVIEW_Start+0x106>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	617a      	str	r2, [r7, #20]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006414:	2218      	movs	r2, #24
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff f8cf 	bl	80055bc <_SendPacket>
      RECORD_END();
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <SEGGER_SYSVIEW_Start+0x168>)
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006432:	f000 f9eb 	bl	800680c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006436:	f000 f9b1 	bl	800679c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800643a:	f000 fc83 	bl	8006d44 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800643e:	bf00      	nop
 8006440:	3730      	adds	r7, #48	; 0x30
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20014254 	.word	0x20014254
 800644c:	08007094 	.word	0x08007094
 8006450:	20014284 	.word	0x20014284

08006454 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800645a:	f3ef 8311 	mrs	r3, BASEPRI
 800645e:	f04f 0120 	mov.w	r1, #32
 8006462:	f381 8811 	msr	BASEPRI, r1
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <SEGGER_SYSVIEW_Stop+0x44>)
 800646a:	f7fe ffb6 	bl	80053da <_PreparePacket>
 800646e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <SEGGER_SYSVIEW_Stop+0x48>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006478:	220b      	movs	r2, #11
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6838      	ldr	r0, [r7, #0]
 800647e:	f7ff f89d 	bl	80055bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006482:	4b06      	ldr	r3, [pc, #24]	; (800649c <SEGGER_SYSVIEW_Stop+0x48>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20014284 	.word	0x20014284
 800649c:	20014254 	.word	0x20014254

080064a0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08c      	sub	sp, #48	; 0x30
 80064a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064a6:	f3ef 8311 	mrs	r3, BASEPRI
 80064aa:	f04f 0120 	mov.w	r1, #32
 80064ae:	f381 8811 	msr	BASEPRI, r1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	4845      	ldr	r0, [pc, #276]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064b6:	f7fe ff90 	bl	80053da <_PreparePacket>
 80064ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c4:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2b7f      	cmp	r3, #127	; 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	6279      	str	r1, [r7, #36]	; 0x24
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	627a      	str	r2, [r7, #36]	; 0x24
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	61f9      	str	r1, [r7, #28]
 800654a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b7f      	cmp	r3, #127	; 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	61fa      	str	r2, [r7, #28]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e00b      	b.n	8006590 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	6179      	str	r1, [r7, #20]
 8006582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	09db      	lsrs	r3, r3, #7
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b7f      	cmp	r3, #127	; 0x7f
 8006594:	d8f0      	bhi.n	8006578 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	617a      	str	r2, [r7, #20]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065a6:	2218      	movs	r2, #24
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	68b8      	ldr	r0, [r7, #8]
 80065ac:	f7ff f806 	bl	80055bc <_SendPacket>
  RECORD_END();
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4798      	blx	r3
  }
}
 80065c4:	bf00      	nop
 80065c6:	3730      	adds	r7, #48	; 0x30
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20014284 	.word	0x20014284
 80065d0:	20014254 	.word	0x20014254

080065d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b092      	sub	sp, #72	; 0x48
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065dc:	f3ef 8311 	mrs	r3, BASEPRI
 80065e0:	f04f 0120 	mov.w	r1, #32
 80065e4:	f381 8811 	msr	BASEPRI, r1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	486a      	ldr	r0, [pc, #424]	; (8006794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065ec:	f7fe fef5 	bl	80053da <_PreparePacket>
 80065f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b66      	ldr	r3, [pc, #408]	; (8006798 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	e00b      	b.n	8006620 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660a:	b2da      	uxtb	r2, r3
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	6479      	str	r1, [r7, #68]	; 0x44
 8006612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	09db      	lsrs	r3, r3, #7
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
 8006620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006622:	2b7f      	cmp	r3, #127	; 0x7f
 8006624:	d8f0      	bhi.n	8006608 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	647a      	str	r2, [r7, #68]	; 0x44
 800662c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006640:	e00b      	b.n	800665a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	b2da      	uxtb	r2, r3
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800664c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	09db      	lsrs	r3, r3, #7
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b7f      	cmp	r3, #127	; 0x7f
 800665e:	d8f0      	bhi.n	8006642 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	4619      	mov	r1, r3
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7fe fe61 	bl	8005340 <_EncodeStr>
 800667e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006680:	2209      	movs	r2, #9
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	6938      	ldr	r0, [r7, #16]
 8006686:	f7fe ff99 	bl	80055bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b40      	ldr	r3, [pc, #256]	; (8006798 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	633b      	str	r3, [r7, #48]	; 0x30
 800669e:	e00b      	b.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	6379      	str	r1, [r7, #52]	; 0x34
 80066aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	09db      	lsrs	r3, r3, #7
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	2b7f      	cmp	r3, #127	; 0x7f
 80066bc:	d8f0      	bhi.n	80066a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	637a      	str	r2, [r7, #52]	; 0x34
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d8:	e00b      	b.n	80066f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	09db      	lsrs	r3, r3, #7
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	2b7f      	cmp	r3, #127	; 0x7f
 80066f6:	d8f0      	bhi.n	80066da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	e00b      	b.n	800672c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	6279      	str	r1, [r7, #36]	; 0x24
 800671e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	09db      	lsrs	r3, r3, #7
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2b7f      	cmp	r3, #127	; 0x7f
 8006730:	d8f0      	bhi.n	8006714 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	627a      	str	r2, [r7, #36]	; 0x24
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e00b      	b.n	8006764 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	1c59      	adds	r1, r3, #1
 8006754:	61f9      	str	r1, [r7, #28]
 8006756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	09db      	lsrs	r3, r3, #7
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b7f      	cmp	r3, #127	; 0x7f
 8006768:	d8f0      	bhi.n	800674c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	61fa      	str	r2, [r7, #28]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800677a:	2215      	movs	r2, #21
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	6938      	ldr	r0, [r7, #16]
 8006780:	f7fe ff1c 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f383 8811 	msr	BASEPRI, r3
}
 800678a:	bf00      	nop
 800678c:	3748      	adds	r7, #72	; 0x48
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20014284 	.word	0x20014284
 8006798:	20014254 	.word	0x20014254

0800679c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067b2:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4798      	blx	r3
  }
}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20014254 	.word	0x20014254

080067c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067cc:	f3ef 8311 	mrs	r3, BASEPRI
 80067d0:	f04f 0120 	mov.w	r1, #32
 80067d4:	f381 8811 	msr	BASEPRI, r1
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	480b      	ldr	r0, [pc, #44]	; (8006808 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067dc:	f7fe fdfd 	bl	80053da <_PreparePacket>
 80067e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067e2:	2280      	movs	r2, #128	; 0x80
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	6938      	ldr	r0, [r7, #16]
 80067e8:	f7fe fdaa 	bl	8005340 <_EncodeStr>
 80067ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80067ee:	220e      	movs	r2, #14
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	6938      	ldr	r0, [r7, #16]
 80067f4:	f7fe fee2 	bl	80055bc <_SendPacket>
  RECORD_END();
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20014284 	.word	0x20014284

0800680c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01a      	beq.n	8006850 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d015      	beq.n	8006850 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006824:	4b10      	ldr	r3, [pc, #64]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4798      	blx	r3
 800682c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006830:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	000a      	movs	r2, r1
 8006840:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006842:	4613      	mov	r3, r2
 8006844:	461a      	mov	r2, r3
 8006846:	4621      	mov	r1, r4
 8006848:	200d      	movs	r0, #13
 800684a:	f7ff fbe7 	bl	800601c <SEGGER_SYSVIEW_RecordU32x2>
 800684e:	e006      	b.n	800685e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4619      	mov	r1, r3
 8006856:	200c      	movs	r0, #12
 8006858:	f7ff fba4 	bl	8005fa4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bd90      	pop	{r4, r7, pc}
 8006866:	bf00      	nop
 8006868:	20014254 	.word	0x20014254
 800686c:	e0001004 	.word	0xe0001004

08006870 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006876:	f3ef 8311 	mrs	r3, BASEPRI
 800687a:	f04f 0120 	mov.w	r1, #32
 800687e:	f381 8811 	msr	BASEPRI, r1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	4819      	ldr	r0, [pc, #100]	; (80068ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006886:	f7fe fda8 	bl	80053da <_PreparePacket>
 800688a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006890:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006898:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e00b      	b.n	80068bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6179      	str	r1, [r7, #20]
 80068ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b7f      	cmp	r3, #127	; 0x7f
 80068c0:	d8f0      	bhi.n	80068a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	617a      	str	r2, [r7, #20]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068d2:	2202      	movs	r2, #2
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	68b8      	ldr	r0, [r7, #8]
 80068d8:	f7fe fe70 	bl	80055bc <_SendPacket>
  RECORD_END();
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20014284 	.word	0x20014284
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068fa:	f3ef 8311 	mrs	r3, BASEPRI
 80068fe:	f04f 0120 	mov.w	r1, #32
 8006902:	f381 8811 	msr	BASEPRI, r1
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	4807      	ldr	r0, [pc, #28]	; (8006928 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800690a:	f7fe fd66 	bl	80053da <_PreparePacket>
 800690e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006910:	2203      	movs	r2, #3
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6838      	ldr	r0, [r7, #0]
 8006916:	f7fe fe51 	bl	80055bc <_SendPacket>
  RECORD_END();
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f383 8811 	msr	BASEPRI, r3
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20014284 	.word	0x20014284

0800692c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006932:	f3ef 8311 	mrs	r3, BASEPRI
 8006936:	f04f 0120 	mov.w	r1, #32
 800693a:	f381 8811 	msr	BASEPRI, r1
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	4807      	ldr	r0, [pc, #28]	; (8006960 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006942:	f7fe fd4a 	bl	80053da <_PreparePacket>
 8006946:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006948:	2212      	movs	r2, #18
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6838      	ldr	r0, [r7, #0]
 800694e:	f7fe fe35 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f383 8811 	msr	BASEPRI, r3
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20014284 	.word	0x20014284

08006964 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800696a:	f3ef 8311 	mrs	r3, BASEPRI
 800696e:	f04f 0120 	mov.w	r1, #32
 8006972:	f381 8811 	msr	BASEPRI, r1
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	4807      	ldr	r0, [pc, #28]	; (8006998 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800697a:	f7fe fd2e 	bl	80053da <_PreparePacket>
 800697e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006980:	2211      	movs	r2, #17
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6838      	ldr	r0, [r7, #0]
 8006986:	f7fe fe19 	bl	80055bc <_SendPacket>
  RECORD_END();
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f383 8811 	msr	BASEPRI, r3
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20014284 	.word	0x20014284

0800699c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069a4:	f3ef 8311 	mrs	r3, BASEPRI
 80069a8:	f04f 0120 	mov.w	r1, #32
 80069ac:	f381 8811 	msr	BASEPRI, r1
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	4819      	ldr	r0, [pc, #100]	; (8006a18 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069b4:	f7fe fd11 	bl	80053da <_PreparePacket>
 80069b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e00b      	b.n	80069ea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	1c59      	adds	r1, r3, #1
 80069da:	61f9      	str	r1, [r7, #28]
 80069dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	09db      	lsrs	r3, r3, #7
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b7f      	cmp	r3, #127	; 0x7f
 80069ee:	d8f0      	bhi.n	80069d2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	61fa      	str	r2, [r7, #28]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a00:	2208      	movs	r2, #8
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6938      	ldr	r0, [r7, #16]
 8006a06:	f7fe fdd9 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f383 8811 	msr	BASEPRI, r3
}
 8006a10:	bf00      	nop
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20014284 	.word	0x20014284
 8006a1c:	20014254 	.word	0x20014254

08006a20 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a28:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2c:	f04f 0120 	mov.w	r1, #32
 8006a30:	f381 8811 	msr	BASEPRI, r1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	4819      	ldr	r0, [pc, #100]	; (8006a9c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a38:	f7fe fccf 	bl	80053da <_PreparePacket>
 8006a3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e00b      	b.n	8006a6e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	61f9      	str	r1, [r7, #28]
 8006a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	09db      	lsrs	r3, r3, #7
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b7f      	cmp	r3, #127	; 0x7f
 8006a72:	d8f0      	bhi.n	8006a56 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a84:	2204      	movs	r2, #4
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f7fe fd97 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f383 8811 	msr	BASEPRI, r3
}
 8006a94:	bf00      	nop
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20014284 	.word	0x20014284
 8006aa0:	20014254 	.word	0x20014254

08006aa4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aac:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab0:	f04f 0120 	mov.w	r1, #32
 8006ab4:	f381 8811 	msr	BASEPRI, r1
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	4819      	ldr	r0, [pc, #100]	; (8006b20 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006abc:	f7fe fc8d 	bl	80053da <_PreparePacket>
 8006ac0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e00b      	b.n	8006af2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	1c59      	adds	r1, r3, #1
 8006ae2:	61f9      	str	r1, [r7, #28]
 8006ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	09db      	lsrs	r3, r3, #7
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b7f      	cmp	r3, #127	; 0x7f
 8006af6:	d8f0      	bhi.n	8006ada <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	61fa      	str	r2, [r7, #28]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b08:	2206      	movs	r2, #6
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	6938      	ldr	r0, [r7, #16]
 8006b0e:	f7fe fd55 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f383 8811 	msr	BASEPRI, r3
}
 8006b18:	bf00      	nop
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20014284 	.word	0x20014284
 8006b24:	20014254 	.word	0x20014254

08006b28 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	4827      	ldr	r0, [pc, #156]	; (8006be0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b42:	f7fe fc4a 	bl	80053da <_PreparePacket>
 8006b46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	623b      	str	r3, [r7, #32]
 8006b5e:	e00b      	b.n	8006b78 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	6279      	str	r1, [r7, #36]	; 0x24
 8006b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	09db      	lsrs	r3, r3, #7
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	d8f0      	bhi.n	8006b60 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	627a      	str	r2, [r7, #36]	; 0x24
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	e00b      	b.n	8006bb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	1c59      	adds	r1, r3, #1
 8006ba0:	61f9      	str	r1, [r7, #28]
 8006ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	09db      	lsrs	r3, r3, #7
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb4:	d8f0      	bhi.n	8006b98 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	61fa      	str	r2, [r7, #28]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	68f9      	ldr	r1, [r7, #12]
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f7fe fcf6 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f383 8811 	msr	BASEPRI, r3
}
 8006bd6:	bf00      	nop
 8006bd8:	3728      	adds	r7, #40	; 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20014284 	.word	0x20014284
 8006be4:	20014254 	.word	0x20014254

08006be8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	1ad3      	subs	r3, r2, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20014254 	.word	0x20014254

08006c08 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d06d      	beq.n	8006cf6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c20:	2300      	movs	r3, #0
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c24:	e008      	b.n	8006c38 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	3301      	adds	r3, #1
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3f2      	bcc.n	8006c26 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c40:	e000      	b.n	8006c44 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c42:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d055      	beq.n	8006cf6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	482a      	ldr	r0, [pc, #168]	; (8006d04 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c5a:	f7fe fbbe 	bl	80053da <_PreparePacket>
 8006c5e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	623b      	str	r3, [r7, #32]
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	6279      	str	r1, [r7, #36]	; 0x24
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_SendModule+0x66>
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	627a      	str	r2, [r7, #36]	; 0x24
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	e00b      	b.n	8006cc0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	61f9      	str	r1, [r7, #28]
 8006cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	09db      	lsrs	r3, r3, #7
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d8f0      	bhi.n	8006ca8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	61fa      	str	r2, [r7, #28]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7fe fb2e 	bl	8005340 <_EncodeStr>
 8006ce4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ce6:	2216      	movs	r2, #22
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	6938      	ldr	r0, [r7, #16]
 8006cec:	f7fe fc66 	bl	80055bc <_SendPacket>
      RECORD_END();
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3730      	adds	r7, #48	; 0x30
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2001427c 	.word	0x2001427c
 8006d04:	20014284 	.word	0x20014284

08006d08 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f2      	bne.n	8006d1c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	2001427c 	.word	0x2001427c

08006d44 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4e:	f04f 0120 	mov.w	r1, #32
 8006d52:	f381 8811 	msr	BASEPRI, r1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	4817      	ldr	r0, [pc, #92]	; (8006db8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d5a:	f7fe fb3e 	bl	80053da <_PreparePacket>
 8006d5e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e00b      	b.n	8006d88 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	6179      	str	r1, [r7, #20]
 8006d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	09db      	lsrs	r3, r3, #7
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8c:	d8f0      	bhi.n	8006d70 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	617a      	str	r2, [r7, #20]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d9e:	221b      	movs	r2, #27
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	68b8      	ldr	r0, [r7, #8]
 8006da4:	f7fe fc0a 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f383 8811 	msr	BASEPRI, r3
}
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20014284 	.word	0x20014284
 8006dbc:	20014280 	.word	0x20014280

08006dc0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006dc0:	b40f      	push	{r0, r1, r2, r3}
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006dc8:	f107 0314 	add.w	r3, r7, #20
 8006dcc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	6938      	ldr	r0, [r7, #16]
 8006dd6:	f7fe fe79 	bl	8005acc <_VPrintTarget>
  va_end(ParamList);
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006de4:	b004      	add	sp, #16
 8006de6:	4770      	bx	lr

08006de8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	; 0x28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006df0:	f3ef 8311 	mrs	r3, BASEPRI
 8006df4:	f04f 0120 	mov.w	r1, #32
 8006df8:	f381 8811 	msr	BASEPRI, r1
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	4827      	ldr	r0, [pc, #156]	; (8006e9c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e00:	f7fe faeb 	bl	80053da <_PreparePacket>
 8006e04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f7fe fa98 	bl	8005340 <_EncodeStr>
 8006e10:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	2301      	movs	r3, #1
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	e00b      	b.n	8006e34 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	1c59      	adds	r1, r3, #1
 8006e24:	6279      	str	r1, [r7, #36]	; 0x24
 8006e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	09db      	lsrs	r3, r3, #7
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	2b7f      	cmp	r3, #127	; 0x7f
 8006e38:	d8f0      	bhi.n	8006e1c <SEGGER_SYSVIEW_Warn+0x34>
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e00b      	b.n	8006e6c <SEGGER_SYSVIEW_Warn+0x84>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	61f9      	str	r1, [r7, #28]
 8006e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	09db      	lsrs	r3, r3, #7
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d8f0      	bhi.n	8006e54 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	61fa      	str	r2, [r7, #28]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e82:	221a      	movs	r2, #26
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f7fe fb98 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f383 8811 	msr	BASEPRI, r3
}
 8006e92:	bf00      	nop
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20014284 	.word	0x20014284

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4d0d      	ldr	r5, [pc, #52]	; (8006ed8 <__libc_init_array+0x38>)
 8006ea4:	4c0d      	ldr	r4, [pc, #52]	; (8006edc <__libc_init_array+0x3c>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ee0 <__libc_init_array+0x40>)
 8006eb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ee4 <__libc_init_array+0x44>)
 8006eb4:	f000 f83c 	bl	8006f30 <_init>
 8006eb8:	1b64      	subs	r4, r4, r5
 8006eba:	10a4      	asrs	r4, r4, #2
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	080070b8 	.word	0x080070b8
 8006edc:	080070b8 	.word	0x080070b8
 8006ee0:	080070b8 	.word	0x080070b8
 8006ee4:	080070bc 	.word	0x080070bc

08006ee8 <memcmp>:
 8006ee8:	b530      	push	{r4, r5, lr}
 8006eea:	3901      	subs	r1, #1
 8006eec:	2400      	movs	r4, #0
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	d101      	bne.n	8006ef6 <memcmp+0xe>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e005      	b.n	8006f02 <memcmp+0x1a>
 8006ef6:	5d03      	ldrb	r3, [r0, r4]
 8006ef8:	3401      	adds	r4, #1
 8006efa:	5d0d      	ldrb	r5, [r1, r4]
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	d0f6      	beq.n	8006eee <memcmp+0x6>
 8006f00:	1b58      	subs	r0, r3, r5
 8006f02:	bd30      	pop	{r4, r5, pc}

08006f04 <memcpy>:
 8006f04:	440a      	add	r2, r1
 8006f06:	4291      	cmp	r1, r2
 8006f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0c:	d100      	bne.n	8006f10 <memcpy+0xc>
 8006f0e:	4770      	bx	lr
 8006f10:	b510      	push	{r4, lr}
 8006f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	d1f9      	bne.n	8006f12 <memcpy+0xe>
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <memset>:
 8006f20:	4402      	add	r2, r0
 8006f22:	4603      	mov	r3, r0
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d100      	bne.n	8006f2a <memset+0xa>
 8006f28:	4770      	bx	lr
 8006f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2e:	e7f9      	b.n	8006f24 <memset+0x4>

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
