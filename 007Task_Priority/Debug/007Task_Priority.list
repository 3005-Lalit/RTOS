
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dbc  08006dbc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc4  08006dc4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0001448c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a0  200144a0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187f7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000312b  00000000  00000000  0003883b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0003cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256a3  00000000  00000000  0003de10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ae7  00000000  00000000  000634b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6516  00000000  00000000  00077f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015e4b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fc0  00000000  00000000  0015e504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c84 	.word	0x08006c84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08006c84 	.word	0x08006c84

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200143f8 	.word	0x200143f8

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b96e 	b.w	8000588 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	9d08      	ldr	r5, [sp, #32]
 80002ca:	4604      	mov	r4, r0
 80002cc:	468c      	mov	ip, r1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	f040 8083 	bne.w	80003da <__udivmoddi4+0x116>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d947      	bls.n	800036a <__udivmoddi4+0xa6>
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	b142      	cbz	r2, 80002f2 <__udivmoddi4+0x2e>
 80002e0:	f1c2 0020 	rsb	r0, r2, #32
 80002e4:	fa24 f000 	lsr.w	r0, r4, r0
 80002e8:	4091      	lsls	r1, r2
 80002ea:	4097      	lsls	r7, r2
 80002ec:	ea40 0c01 	orr.w	ip, r0, r1
 80002f0:	4094      	lsls	r4, r2
 80002f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f6:	0c23      	lsrs	r3, r4, #16
 80002f8:	fbbc f6f8 	udiv	r6, ip, r8
 80002fc:	fa1f fe87 	uxth.w	lr, r7
 8000300:	fb08 c116 	mls	r1, r8, r6, ip
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb06 f10e 	mul.w	r1, r6, lr
 800030c:	4299      	cmp	r1, r3
 800030e:	d909      	bls.n	8000324 <__udivmoddi4+0x60>
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 8119 	bcs.w	800054c <__udivmoddi4+0x288>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 8116 	bls.w	800054c <__udivmoddi4+0x288>
 8000320:	3e02      	subs	r6, #2
 8000322:	443b      	add	r3, r7
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 fe0e 	mul.w	lr, r0, lr
 8000338:	45a6      	cmp	lr, r4
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x8c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	f080 8105 	bcs.w	8000550 <__udivmoddi4+0x28c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f240 8102 	bls.w	8000550 <__udivmoddi4+0x28c>
 800034c:	3802      	subs	r0, #2
 800034e:	443c      	add	r4, r7
 8000350:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000354:	eba4 040e 	sub.w	r4, r4, lr
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa0>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xaa>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f282 	clz	r2, r2
 8000372:	2a00      	cmp	r2, #0
 8000374:	d150      	bne.n	8000418 <__udivmoddi4+0x154>
 8000376:	1bcb      	subs	r3, r1, r7
 8000378:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	2601      	movs	r6, #1
 8000382:	fbb3 fcfe 	udiv	ip, r3, lr
 8000386:	0c21      	lsrs	r1, r4, #16
 8000388:	fb0e 331c 	mls	r3, lr, ip, r3
 800038c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000390:	fb08 f30c 	mul.w	r3, r8, ip
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xe4>
 8000398:	1879      	adds	r1, r7, r1
 800039a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0xe2>
 80003a0:	428b      	cmp	r3, r1
 80003a2:	f200 80e9 	bhi.w	8000578 <__udivmoddi4+0x2b4>
 80003a6:	4684      	mov	ip, r0
 80003a8:	1ac9      	subs	r1, r1, r3
 80003aa:	b2a3      	uxth	r3, r4
 80003ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b8:	fb08 f800 	mul.w	r8, r8, r0
 80003bc:	45a0      	cmp	r8, r4
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x10c>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x10a>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f200 80d9 	bhi.w	8000580 <__udivmoddi4+0x2bc>
 80003ce:	4618      	mov	r0, r3
 80003d0:	eba4 0408 	sub.w	r4, r4, r8
 80003d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d8:	e7bf      	b.n	800035a <__udivmoddi4+0x96>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d909      	bls.n	80003f2 <__udivmoddi4+0x12e>
 80003de:	2d00      	cmp	r5, #0
 80003e0:	f000 80b1 	beq.w	8000546 <__udivmoddi4+0x282>
 80003e4:	2600      	movs	r6, #0
 80003e6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ea:	4630      	mov	r0, r6
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	fab3 f683 	clz	r6, r3
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d14a      	bne.n	8000490 <__udivmoddi4+0x1cc>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0x140>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 80b8 	bhi.w	8000574 <__udivmoddi4+0x2b0>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb61 0103 	sbc.w	r1, r1, r3
 800040a:	2001      	movs	r0, #1
 800040c:	468c      	mov	ip, r1
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0a8      	beq.n	8000364 <__udivmoddi4+0xa0>
 8000412:	e9c5 4c00 	strd	r4, ip, [r5]
 8000416:	e7a5      	b.n	8000364 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f603 	lsr.w	r6, r0, r3
 8000420:	4097      	lsls	r7, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800042a:	40d9      	lsrs	r1, r3
 800042c:	4330      	orrs	r0, r6
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	fbb1 f6fe 	udiv	r6, r1, lr
 8000434:	fa1f f887 	uxth.w	r8, r7
 8000438:	fb0e 1116 	mls	r1, lr, r6, r1
 800043c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000440:	fb06 f108 	mul.w	r1, r6, r8
 8000444:	4299      	cmp	r1, r3
 8000446:	fa04 f402 	lsl.w	r4, r4, r2
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x19c>
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000452:	f080 808d 	bcs.w	8000570 <__udivmoddi4+0x2ac>
 8000456:	4299      	cmp	r1, r3
 8000458:	f240 808a 	bls.w	8000570 <__udivmoddi4+0x2ac>
 800045c:	3e02      	subs	r6, #2
 800045e:	443b      	add	r3, r7
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b281      	uxth	r1, r0
 8000464:	fbb3 f0fe 	udiv	r0, r3, lr
 8000468:	fb0e 3310 	mls	r3, lr, r0, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb00 f308 	mul.w	r3, r0, r8
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x1c4>
 8000478:	1879      	adds	r1, r7, r1
 800047a:	f100 3cff 	add.w	ip, r0, #4294967295
 800047e:	d273      	bcs.n	8000568 <__udivmoddi4+0x2a4>
 8000480:	428b      	cmp	r3, r1
 8000482:	d971      	bls.n	8000568 <__udivmoddi4+0x2a4>
 8000484:	3802      	subs	r0, #2
 8000486:	4439      	add	r1, r7
 8000488:	1acb      	subs	r3, r1, r3
 800048a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048e:	e778      	b.n	8000382 <__udivmoddi4+0xbe>
 8000490:	f1c6 0c20 	rsb	ip, r6, #32
 8000494:	fa03 f406 	lsl.w	r4, r3, r6
 8000498:	fa22 f30c 	lsr.w	r3, r2, ip
 800049c:	431c      	orrs	r4, r3
 800049e:	fa20 f70c 	lsr.w	r7, r0, ip
 80004a2:	fa01 f306 	lsl.w	r3, r1, r6
 80004a6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004aa:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ae:	431f      	orrs	r7, r3
 80004b0:	0c3b      	lsrs	r3, r7, #16
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fa1f f884 	uxth.w	r8, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004c2:	fb09 fa08 	mul.w	sl, r9, r8
 80004c6:	458a      	cmp	sl, r1
 80004c8:	fa02 f206 	lsl.w	r2, r2, r6
 80004cc:	fa00 f306 	lsl.w	r3, r0, r6
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x220>
 80004d2:	1861      	adds	r1, r4, r1
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d248      	bcs.n	800056c <__udivmoddi4+0x2a8>
 80004da:	458a      	cmp	sl, r1
 80004dc:	d946      	bls.n	800056c <__udivmoddi4+0x2a8>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	4421      	add	r1, r4
 80004e4:	eba1 010a 	sub.w	r1, r1, sl
 80004e8:	b2bf      	uxth	r7, r7
 80004ea:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ee:	fb0e 1110 	mls	r1, lr, r0, r1
 80004f2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45b8      	cmp	r8, r7
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x24a>
 80004fe:	19e7      	adds	r7, r4, r7
 8000500:	f100 31ff 	add.w	r1, r0, #4294967295
 8000504:	d22e      	bcs.n	8000564 <__udivmoddi4+0x2a0>
 8000506:	45b8      	cmp	r8, r7
 8000508:	d92c      	bls.n	8000564 <__udivmoddi4+0x2a0>
 800050a:	3802      	subs	r0, #2
 800050c:	4427      	add	r7, r4
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba7 0708 	sub.w	r7, r7, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454f      	cmp	r7, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	4649      	mov	r1, r9
 8000520:	d31a      	bcc.n	8000558 <__udivmoddi4+0x294>
 8000522:	d017      	beq.n	8000554 <__udivmoddi4+0x290>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x27a>
 8000526:	ebb3 020e 	subs.w	r2, r3, lr
 800052a:	eb67 0701 	sbc.w	r7, r7, r1
 800052e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000532:	40f2      	lsrs	r2, r6
 8000534:	ea4c 0202 	orr.w	r2, ip, r2
 8000538:	40f7      	lsrs	r7, r6
 800053a:	e9c5 2700 	strd	r2, r7, [r5]
 800053e:	2600      	movs	r6, #0
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e70b      	b.n	8000364 <__udivmoddi4+0xa0>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e9      	b.n	8000324 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fd      	b.n	8000350 <__udivmoddi4+0x8c>
 8000554:	4543      	cmp	r3, r8
 8000556:	d2e5      	bcs.n	8000524 <__udivmoddi4+0x260>
 8000558:	ebb8 0e02 	subs.w	lr, r8, r2
 800055c:	eb69 0104 	sbc.w	r1, r9, r4
 8000560:	3801      	subs	r0, #1
 8000562:	e7df      	b.n	8000524 <__udivmoddi4+0x260>
 8000564:	4608      	mov	r0, r1
 8000566:	e7d2      	b.n	800050e <__udivmoddi4+0x24a>
 8000568:	4660      	mov	r0, ip
 800056a:	e78d      	b.n	8000488 <__udivmoddi4+0x1c4>
 800056c:	4681      	mov	r9, r0
 800056e:	e7b9      	b.n	80004e4 <__udivmoddi4+0x220>
 8000570:	4666      	mov	r6, ip
 8000572:	e775      	b.n	8000460 <__udivmoddi4+0x19c>
 8000574:	4630      	mov	r0, r6
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14a>
 8000578:	f1ac 0c02 	sub.w	ip, ip, #2
 800057c:	4439      	add	r1, r7
 800057e:	e713      	b.n	80003a8 <__udivmoddi4+0xe4>
 8000580:	3802      	subs	r0, #2
 8000582:	443c      	add	r4, r7
 8000584:	e724      	b.n	80003d0 <__udivmoddi4+0x10c>
 8000586:	bf00      	nop

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fcb5 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f84d 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8b7 	bl	800070c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //CYCLCNT enable
    DWT_CTRL |= ( 1 << 0);
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <main+0x94>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <main+0x94>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 80005aa:	f004 fdbb 	bl	8005124 <SEGGER_SYSVIEW_Conf>

    SEGGER_SYSVIEW_Start();
 80005ae:	f005 fd55 	bl	800605c <SEGGER_SYSVIEW_Start>

    status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	; 0xc8
 80005c0:	4918      	ldr	r1, [pc, #96]	; (8000624 <main+0x98>)
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <main+0x9c>)
 80005c4:	f002 fd36 	bl	8003034 <xTaskCreate>
 80005c8:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00a      	beq.n	80005e6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e2:	bf00      	nop
 80005e4:	e7fe      	b.n	80005e4 <main+0x58>

    status = xTaskCreate(task2_handler, "Task-2", 200,NULL, 3, &task2_handle);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2303      	movs	r3, #3
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	22c8      	movs	r2, #200	; 0xc8
 80005f2:	490e      	ldr	r1, [pc, #56]	; (800062c <main+0xa0>)
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <main+0xa4>)
 80005f6:	f002 fd1d 	bl	8003034 <xTaskCreate>
 80005fa:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00a      	beq.n	8000618 <main+0x8c>
        __asm volatile
 8000602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	60fb      	str	r3, [r7, #12]
    }
 8000614:	bf00      	nop
 8000616:	e7fe      	b.n	8000616 <main+0x8a>

    //start the freeRTOS scheduler
    vTaskStartScheduler();
 8000618:	f002 ff4a 	bl	80034b0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x90>
 800061e:	bf00      	nop
 8000620:	e0001000 	.word	0xe0001000
 8000624:	08006c9c 	.word	0x08006c9c
 8000628:	08000c9d 	.word	0x08000c9d
 800062c:	08006ca4 	.word	0x08006ca4
 8000630:	08000cc1 	.word	0x08000cc1

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fb16 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd4>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006ac:	2332      	movs	r3, #50	; 0x32
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff6b 	bl	8001598 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 fb2c 	bl	8000d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9cc 	bl	8001a88 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 fb15 	bl	8000d24 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	4bb2      	ldr	r3, [pc, #712]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4ab1      	ldr	r2, [pc, #708]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4baf      	ldr	r3, [pc, #700]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	4bab      	ldr	r3, [pc, #684]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4aaa      	ldr	r2, [pc, #680]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4ba8      	ldr	r3, [pc, #672]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4ba4      	ldr	r3, [pc, #656]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4aa3      	ldr	r2, [pc, #652]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4ba1      	ldr	r3, [pc, #644]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b9d      	ldr	r3, [pc, #628]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a9c      	ldr	r2, [pc, #624]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b9a      	ldr	r3, [pc, #616]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b96      	ldr	r3, [pc, #600]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a95      	ldr	r2, [pc, #596]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b93      	ldr	r3, [pc, #588]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a8e      	ldr	r2, [pc, #568]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b88      	ldr	r3, [pc, #544]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a87      	ldr	r2, [pc, #540]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b85      	ldr	r3, [pc, #532]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a80      	ldr	r2, [pc, #512]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b7e      	ldr	r3, [pc, #504]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2116      	movs	r1, #22
 8000806:	487b      	ldr	r0, [pc, #492]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 8000808:	f000 fe6e 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000812:	f000 fe69 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <MX_GPIO_Init+0x2f0>)
 800081e:	f000 fe63 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000828:	4875      	ldr	r0, [pc, #468]	; (8000a00 <MX_GPIO_Init+0x2f4>)
 800082a:	f000 fe5d 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800082e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000840:	230c      	movs	r3, #12
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	486e      	ldr	r0, [pc, #440]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 800084c:	f000 fca0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000850:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000862:	2305      	movs	r3, #5
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	4865      	ldr	r0, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 800086e:	f000 fc8f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000884:	230e      	movs	r3, #14
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	485d      	ldr	r0, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 8000890:	f000 fc7e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a4:	230c      	movs	r3, #12
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4851      	ldr	r0, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 80008b0:	f000 fc6e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008b4:	2316      	movs	r3, #22
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	484a      	ldr	r0, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 80008cc:	f000 fc60 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4844      	ldr	r0, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 80008e6:	f000 fc53 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008ea:	f248 0306 	movw	r3, #32774	; 0x8006
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	483d      	ldr	r0, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000902:	f000 fc45 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000906:	f641 0358 	movw	r3, #6232	; 0x1858
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000918:	230e      	movs	r3, #14
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000924:	f000 fc34 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000940:	f000 fc26 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000948:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 800095a:	f000 fc19 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800095e:	2303      	movs	r3, #3
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800096e:	2309      	movs	r3, #9
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4823      	ldr	r0, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x2fc>)
 800097a:	f000 fc09 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097e:	2304      	movs	r3, #4
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x2fc>)
 8000992:	f000 fbfd 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000996:	f248 1333 	movw	r3, #33075	; 0x8133
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a8:	230c      	movs	r3, #12
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x2f4>)
 80009b4:	f000 fbec 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ca:	230c      	movs	r3, #12
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_GPIO_Init+0x300>)
 80009d6:	f000 fbdb 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
 80009ec:	e010      	b.n	8000a10 <MX_GPIO_Init+0x304>
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40021400 	.word	0x40021400
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a10:	230e      	movs	r3, #14
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4877      	ldr	r0, [pc, #476]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a1c:	f000 fbb8 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a20:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a32:	230c      	movs	r3, #12
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	486e      	ldr	r0, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a3e:	f000 fba7 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4868      	ldr	r0, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a58:	f000 fb9a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a5c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4860      	ldr	r0, [pc, #384]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000a7a:	f000 fb89 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	485a      	ldr	r0, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000a94:	f000 fb7c 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4852      	ldr	r0, [pc, #328]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000ab2:	f000 fb6d 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ab6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac8:	230e      	movs	r3, #14
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	484b      	ldr	r0, [pc, #300]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000ad4:	f000 fb5c 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ad8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aea:	230e      	movs	r3, #14
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4843      	ldr	r0, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x4f8>)
 8000af6:	f000 fb4b 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	483b      	ldr	r0, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x4f8>)
 8000b18:	f000 fb3a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4833      	ldr	r0, [pc, #204]	; (8000c08 <MX_GPIO_Init+0x4fc>)
 8000b3a:	f000 fb29 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b50:	2307      	movs	r3, #7
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482b      	ldr	r0, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x4fc>)
 8000b5c:	f000 fb18 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b60:	2348      	movs	r3, #72	; 0x48
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b70:	230e      	movs	r3, #14
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4820      	ldr	r0, [pc, #128]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000b7c:	f000 fb08 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b92:	2309      	movs	r3, #9
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000b9e:	f000 faf7 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ba2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000bbc:	f000 fae8 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bc0:	2360      	movs	r3, #96	; 0x60
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000bdc:	f000 fad8 	bl	8001190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2106      	movs	r1, #6
 8000be4:	2006      	movs	r0, #6
 8000be6:	f000 faa9 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bea:	2006      	movs	r0, #6
 8000bec:	f000 fac2 	bl	8001174 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020000 	.word	0x40020000

08000c0c <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000c16:	f003 ff4d 	bl	8004ab4 <vPortEnterCritical>
	if(status_button){
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <switch_priority+0x84>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d004      	beq.n	8000c2c <switch_priority+0x20>
		status_button = 0;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <switch_priority+0x84>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000c2c:	f003 ff72 	bl	8004b14 <vPortExitCritical>

	if(switch_priority){
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d027      	beq.n	8000c86 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <switch_priority+0x88>)
 8000c38:	f002 fdda 	bl	80037f0 <xTaskGetHandle>
 8000c3c:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <switch_priority+0x8c>)
 8000c40:	f002 fdd6 	bl	80037f0 <xTaskGetHandle>
 8000c44:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000c46:	6938      	ldr	r0, [r7, #16]
 8000c48:	f002 fb58 	bl	80032fc <uxTaskPriorityGet>
 8000c4c:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f002 fb54 	bl	80032fc <uxTaskPriorityGet>
 8000c54:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000c56:	f003 f949 	bl	8003eec <xTaskGetCurrentTaskHandle>
 8000c5a:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d108      	bne.n	8000c76 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	6938      	ldr	r0, [r7, #16]
 8000c68:	f002 fb62 	bl	8003330 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f002 fb5e 	bl	8003330 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000c74:	e007      	b.n	8000c86 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f002 fb59 	bl	8003330 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	6938      	ldr	r0, [r7, #16]
 8000c82:	f002 fb55 	bl	8003330 <vTaskPrioritySet>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000030 	.word	0x20000030
 8000c94:	08006c9c 	.word	0x08006c9c
 8000c98:	08006ca4 	.word	0x08006ca4

08000c9c <task1_handler>:

static void task1_handler(void* parameters)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOG, LED_RED_PIN);
 8000ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <task1_handler+0x20>)
 8000caa:	f000 fc36 	bl	800151a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000cae:	2064      	movs	r0, #100	; 0x64
 8000cb0:	f000 f968 	bl	8000f84 <HAL_Delay>
		switch_priority();
 8000cb4:	f7ff ffaa 	bl	8000c0c <switch_priority>
		HAL_GPIO_TogglePin(GPIOG, LED_RED_PIN);
 8000cb8:	e7f4      	b.n	8000ca4 <task1_handler+0x8>
 8000cba:	bf00      	nop
 8000cbc:	40021800 	.word	0x40021800

08000cc0 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOG, LED_GREEN_PIN);
 8000cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <task2_handler+0x20>)
 8000cce:	f000 fc24 	bl	800151a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd6:	f000 f955 	bl	8000f84 <HAL_Delay>
		switch_priority();
 8000cda:	f7ff ff97 	bl	8000c0c <switch_priority>
		HAL_GPIO_TogglePin(GPIOG, LED_GREEN_PIN);
 8000cde:	e7f3      	b.n	8000cc8 <task2_handler+0x8>
 8000ce0:	40021800 	.word	0x40021800

08000ce4 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000ce8:	f005 fc80 	bl	80065ec <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <button_interrupt_handler+0x18>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000cf2:	f005 fcbd 	bl	8006670 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000030 	.word	0x20000030

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f000 f917 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40001000 	.word	0x40001000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000d6e:	f003 fe23 	bl	80049b8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	; 0x30
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	2036      	movs	r0, #54	; 0x36
 8000d96:	f000 f9d1 	bl	800113c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d9a:	2036      	movs	r0, #54	; 0x36
 8000d9c:	f000 f9ea 	bl	8001174 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_InitTick+0xa4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <HAL_InitTick+0xa4>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_InitTick+0xa4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 0310 	and.w	r3, r3, #16
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dbc:	f107 0210 	add.w	r2, r7, #16
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f846 	bl	8001e58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dcc:	f001 f830 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <HAL_InitTick+0xa8>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0c9b      	lsrs	r3, r3, #18
 8000de0:	3b01      	subs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_InitTick+0xac>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_InitTick+0xb0>)
 8000de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_InitTick+0xac>)
 8000dec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_InitTick+0xac>)
 8000df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_InitTick+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_InitTick+0xac>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_InitTick+0xac>)
 8000e06:	f001 f859 	bl	8001ebc <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d104      	bne.n	8000e1a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <HAL_InitTick+0xac>)
 8000e12:	f001 f8ad 	bl	8001f70 <HAL_TIM_Base_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3730      	adds	r7, #48	; 0x30
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	2001436c 	.word	0x2001436c
 8000e30:	40001000 	.word	0x40001000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000e64:	f7ff ff3e 	bl	8000ce4 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb71 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM6_DAC_IRQHandler+0x10>)
 8000e7a:	f001 f8e9 	bl	8002050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2001436c 	.word	0x2001436c

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed6:	f7ff ffd7 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f005 fe8b 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fb55 	bl	800058c <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ef0:	08006dcc 	.word	0x08006dcc
  ldr r2, =_sbss
 8000ef4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ef8:	200144a0 	.word	0x200144a0

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f8fc 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f7ff ff26 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fefc 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200143b4 	.word	0x200143b4

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200143b4 	.word	0x200143b4

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e177      	b.n	800149c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8166 	bne.w	8001496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c0 	beq.w	8001496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x338>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x33c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_GPIO_Init+0x340>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x344>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x348>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x34c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x21a>
 80013a6:	2309      	movs	r3, #9
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013aa:	230a      	movs	r3, #10
 80013ac:	e010      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x328>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x354>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae84 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	041a      	lsls	r2, r3, #16
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43d9      	mvns	r1, r3
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	400b      	ands	r3, r1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f806 	bl	8001580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e264      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d075      	beq.n	80016a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	4ba3      	ldr	r3, [pc, #652]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d00c      	beq.n	80015dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4ba0      	ldr	r3, [pc, #640]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d112      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4b9d      	ldr	r3, [pc, #628]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b99      	ldr	r3, [pc, #612]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d05b      	beq.n	80016a0 <HAL_RCC_OscConfig+0x108>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d157      	bne.n	80016a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e23f      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x74>
 80015fe:	4b91      	ldr	r3, [pc, #580]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a90      	ldr	r2, [pc, #576]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0xb0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8a      	ldr	r2, [pc, #552]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xb0>
 8001630:	4b84      	ldr	r3, [pc, #528]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a83      	ldr	r2, [pc, #524]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a80      	ldr	r2, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fc8c 	bl	8000f6c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fc88 	bl	8000f6c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e204      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0xc0>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc78 	bl	8000f6c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fc74 	bl	8000f6c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1f0      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0xe8>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d063      	beq.n	8001776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b62      	ldr	r3, [pc, #392]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d11c      	bne.n	8001700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x152>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e1c4      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4952      	ldr	r1, [pc, #328]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	e03a      	b.n	8001776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <HAL_RCC_OscConfig+0x2b0>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fc2d 	bl	8000f6c <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff fc29 	bl	8000f6c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1a5      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4940      	ldr	r1, [pc, #256]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_RCC_OscConfig+0x2b0>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fc0c 	bl	8000f6c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fc08 	bl	8000f6c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e184      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d030      	beq.n	80017e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d016      	beq.n	80017b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x2b4>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fbec 	bl	8000f6c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fbe8 	bl	8000f6c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e164      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x200>
 80017b6:	e015      	b.n	80017e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x2b4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fbd5 	bl	8000f6c <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fbd1 	bl	8000f6c <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e14d      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a0 	beq.w	8001932 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x2b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d121      	bne.n	8001872 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_RCC_OscConfig+0x2b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_RCC_OscConfig+0x2b8>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb97 	bl	8000f6c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	e011      	b.n	8001866 <HAL_RCC_OscConfig+0x2ce>
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	42470000 	.word	0x42470000
 800184c:	42470e80 	.word	0x42470e80
 8001850:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fb8a 	bl	8000f6c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e106      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <HAL_RCC_OscConfig+0x4e4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x2f0>
 800187a:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a80      	ldr	r2, [pc, #512]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	e01c      	b.n	80018c2 <HAL_RCC_OscConfig+0x32a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a7a      	ldr	r2, [pc, #488]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	4b78      	ldr	r3, [pc, #480]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a77      	ldr	r2, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x32a>
 80018aa:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a74      	ldr	r2, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	4a71      	ldr	r2, [pc, #452]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fb4f 	bl	8000f6c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fb4b 	bl	8000f6c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0c5      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	4b65      	ldr	r3, [pc, #404]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ee      	beq.n	80018d2 <HAL_RCC_OscConfig+0x33a>
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fb39 	bl	8000f6c <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fb35 	bl	8000f6c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0af      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 809b 	beq.w	8001a72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193c:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d05c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d141      	bne.n	80019d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fb09 	bl	8000f6c <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff fb05 	bl	8000f6c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e081      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001970:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	019b      	lsls	r3, r3, #6
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	3b01      	subs	r3, #1
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	061b      	lsls	r3, r3, #24
 80019a0:	4937      	ldr	r1, [pc, #220]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a6:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fade 	bl	8000f6c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fada 	bl	8000f6c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e056      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x41c>
 80019d2:	e04e      	b.n	8001a72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fac7 	bl	8000f6c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fac3 	bl	8000f6c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e03f      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x44a>
 8001a00:	e037      	b.n	8001a72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e032      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d028      	beq.n	8001a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d121      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d11a      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d111      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470060 	.word	0x42470060

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0cc      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d90c      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d044      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e067      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4934      	ldr	r1, [pc, #208]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f9f8 	bl	8000f6c <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f9f4 	bl	8000f6c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20c      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f821 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	490a      	ldr	r1, [pc, #40]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	5ccb      	ldrb	r3, [r1, r3]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f8a6 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08006d90 	.word	0x08006d90
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	2300      	movs	r3, #0
 8001c66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6c:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d00d      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x40>
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	f200 80bd 	bhi.w	8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x34>
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c86:	e0b7      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c8a:	60bb      	str	r3, [r7, #8]
       break;
 8001c8c:	e0b7      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c90:	60bb      	str	r3, [r7, #8]
      break;
 8001c92:	e0b4      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d04d      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	ea02 0800 	and.w	r8, r2, r0
 8001cc2:	ea03 0901 	and.w	r9, r3, r1
 8001cc6:	4640      	mov	r0, r8
 8001cc8:	4649      	mov	r1, r9
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	014b      	lsls	r3, r1, #5
 8001cd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd8:	0142      	lsls	r2, r0, #5
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	ebb0 0008 	subs.w	r0, r0, r8
 8001ce2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cf4:	0182      	lsls	r2, r0, #6
 8001cf6:	1a12      	subs	r2, r2, r0
 8001cf8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	00d9      	lsls	r1, r3, #3
 8001d06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d0a:	00d0      	lsls	r0, r2, #3
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	eb12 0208 	adds.w	r2, r2, r8
 8001d14:	eb43 0309 	adc.w	r3, r3, r9
 8001d18:	f04f 0000 	mov.w	r0, #0
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	0259      	lsls	r1, r3, #9
 8001d22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d26:	0250      	lsls	r0, r2, #9
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	461a      	mov	r2, r3
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	f7fe faac 	bl	8000294 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e04a      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	ea02 0400 	and.w	r4, r2, r0
 8001d5e:	ea03 0501 	and.w	r5, r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	014b      	lsls	r3, r1, #5
 8001d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d74:	0142      	lsls	r2, r0, #5
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	1b00      	subs	r0, r0, r4
 8001d7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	018b      	lsls	r3, r1, #6
 8001d8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d8e:	0182      	lsls	r2, r0, #6
 8001d90:	1a12      	subs	r2, r2, r0
 8001d92:	eb63 0301 	sbc.w	r3, r3, r1
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	00d9      	lsls	r1, r3, #3
 8001da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da4:	00d0      	lsls	r0, r2, #3
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	1912      	adds	r2, r2, r4
 8001dac:	eb45 0303 	adc.w	r3, r5, r3
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	0299      	lsls	r1, r3, #10
 8001dba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dbe:	0290      	lsls	r0, r2, #10
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f7fe fa60 	bl	8000294 <__aeabi_uldivmod>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	60bb      	str	r3, [r7, #8]
      break;
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dfa:	60bb      	str	r3, [r7, #8]
      break;
 8001dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a9b      	lsrs	r3, r3, #10
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08006da0 	.word	0x08006da0

08001e58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	220f      	movs	r2, #15
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_RCC_GetClockConfig+0x60>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e041      	b.n	8001f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f839 	bl	8001f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 f9d8 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d001      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e04e      	b.n	8002026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d010      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002012:	e007      	b.n	8002024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000
 8002038:	40000400 	.word	0x40000400
 800203c:	40000800 	.word	0x40000800
 8002040:	40000c00 	.word	0x40000c00
 8002044:	40010400 	.word	0x40010400
 8002048:	40014000 	.word	0x40014000
 800204c:	40001800 	.word	0x40001800

08002050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b02      	cmp	r3, #2
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0202 	mvn.w	r2, #2
 800207c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8ee 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8e0 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f8f1 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0204 	mvn.w	r2, #4
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8c4 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8b6 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8c7 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0208 	mvn.w	r2, #8
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f89a 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f88c 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f89d 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b10      	cmp	r3, #16
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0210 	mvn.w	r2, #16
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2208      	movs	r2, #8
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f870 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f862 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f873 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0201 	mvn.w	r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fd96 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f902 	bl	8002404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f838 	bl	800229c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b20      	cmp	r3, #32
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0220 	mvn.w	r2, #32
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8cc 	bl	80023f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a40      	ldr	r2, [pc, #256]	; (80023c4 <TIM_Base_SetConfig+0x114>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d00f      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	; (80023c8 <TIM_Base_SetConfig+0x118>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a3c      	ldr	r2, [pc, #240]	; (80023cc <TIM_Base_SetConfig+0x11c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a3b      	ldr	r2, [pc, #236]	; (80023d0 <TIM_Base_SetConfig+0x120>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a3a      	ldr	r2, [pc, #232]	; (80023d4 <TIM_Base_SetConfig+0x124>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d108      	bne.n	8002302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <TIM_Base_SetConfig+0x114>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02b      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d027      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <TIM_Base_SetConfig+0x118>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d023      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <TIM_Base_SetConfig+0x11c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01f      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <TIM_Base_SetConfig+0x120>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01b      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <TIM_Base_SetConfig+0x124>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d017      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <TIM_Base_SetConfig+0x128>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a27      	ldr	r2, [pc, #156]	; (80023dc <TIM_Base_SetConfig+0x12c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00f      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <TIM_Base_SetConfig+0x130>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00b      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <TIM_Base_SetConfig+0x134>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <TIM_Base_SetConfig+0x138>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <TIM_Base_SetConfig+0x13c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d108      	bne.n	8002374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <TIM_Base_SetConfig+0x114>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0xf8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <TIM_Base_SetConfig+0x124>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	40010400 	.word	0x40010400
 80023d8:	40014000 	.word	0x40014000
 80023dc:	40014400 	.word	0x40014400
 80023e0:	40014800 	.word	0x40014800
 80023e4:	40001800 	.word	0x40001800
 80023e8:	40001c00 	.word	0x40001c00
 80023ec:	40002000 	.word	0x40002000

080023f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0208 	add.w	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f103 0208 	add.w	r2, r3, #8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f103 0208 	add.w	r2, r3, #8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d103      	bne.n	80024da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e00c      	b.n	80024f4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3308      	adds	r3, #8
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e002      	b.n	80024e8 <vListInsert+0x2e>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d2f6      	bcs.n	80024e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6852      	ldr	r2, [r2, #4]
 800254c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d103      	bne.n	8002560 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <xQueueGenericReset+0x2a>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	60bb      	str	r3, [r7, #8]
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80025aa:	f002 fa83 	bl	8004ab4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	441a      	add	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	3b01      	subs	r3, #1
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	441a      	add	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	22ff      	movs	r2, #255	; 0xff
 80025ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d114      	bne.n	800262a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01a      	beq.n	800263e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3310      	adds	r3, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f001 facd 	bl	8003bac <xTaskRemoveFromEventList>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <xQueueGenericReset+0xcc>)
 800261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	e009      	b.n	800263e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3310      	adds	r3, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fef2 	bl	8002418 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3324      	adds	r3, #36	; 0x24
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff feed 	bl	8002418 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800263e:	f002 fa69 	bl	8004b14 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	e000ed04 	.word	0xe000ed04

08002650 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61bb      	str	r3, [r7, #24]
    }
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <xQueueGenericCreate+0x48>
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d101      	bne.n	800269c <xQueueGenericCreate+0x4c>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <xQueueGenericCreate+0x4e>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <xQueueGenericCreate+0x68>
        __asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	617b      	str	r3, [r7, #20]
    }
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026be:	d90a      	bls.n	80026d6 <xQueueGenericCreate+0x86>
        __asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	613b      	str	r3, [r7, #16]
    }
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	3350      	adds	r3, #80	; 0x50
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fb16 	bl	8004d0c <pvPortMalloc>
 80026e0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3350      	adds	r3, #80	; 0x50
 80026f0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f805 	bl	800270e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002704:	6a3b      	ldr	r3, [r7, #32]
    }
 8002706:	4618      	mov	r0, r3
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e002      	b.n	8002730 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800273c:	2101      	movs	r1, #1
 800273e:	69b8      	ldr	r0, [r7, #24]
 8002740:	f7ff ff1e 	bl	8002580 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	2073      	movs	r0, #115	; 0x73
 8002754:	f003 fb7a 	bl	8005e4c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b090      	sub	sp, #64	; 0x40
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueGenericSend+0x32>
        __asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d103      	bne.n	80027a0 <xQueueGenericSend+0x40>
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <xQueueGenericSend+0x44>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <xQueueGenericSend+0x46>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <xQueueGenericSend+0x60>
        __asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d103      	bne.n	80027ce <xQueueGenericSend+0x6e>
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <xQueueGenericSend+0x72>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <xQueueGenericSend+0x74>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericSend+0x8e>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	623b      	str	r3, [r7, #32]
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ee:	f001 fb8d 	bl	8003f0c <xTaskGetSchedulerState>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <xQueueGenericSend+0x9e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <xQueueGenericSend+0xa2>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <xQueueGenericSend+0xa4>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <xQueueGenericSend+0xbe>
        __asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	61fb      	str	r3, [r7, #28]
    }
 800281a:	bf00      	nop
 800281c:	e7fe      	b.n	800281c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800281e:	f002 f949 	bl	8004ab4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <xQueueGenericSend+0xd4>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d136      	bne.n	80028a2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	4618      	mov	r0, r3
 8002838:	f004 f894 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	460b      	mov	r3, r1
 8002846:	4601      	mov	r1, r0
 8002848:	205a      	movs	r0, #90	; 0x5a
 800284a:	f003 fb75 	bl	8005f38 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002854:	f000 fa78 	bl	8002d48 <prvCopyDataToQueue>
 8002858:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	3324      	adds	r3, #36	; 0x24
 8002866:	4618      	mov	r0, r3
 8002868:	f001 f9a0 	bl	8003bac <xTaskRemoveFromEventList>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d013      	beq.n	800289a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002872:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <xQueueGenericSend+0x248>)
 8002874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	e00a      	b.n	800289a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <xQueueGenericSend+0x248>)
 800288c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800289a:	f002 f93b 	bl	8004b14 <vPortExitCritical>
                return pdPASS;
 800289e:	2301      	movs	r3, #1
 80028a0:	e07d      	b.n	800299e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d110      	bne.n	80028ca <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028a8:	f002 f934 	bl	8004b14 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f858 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	460b      	mov	r3, r1
 80028be:	4601      	mov	r1, r0
 80028c0:	205a      	movs	r0, #90	; 0x5a
 80028c2:	f003 fb39 	bl	8005f38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e069      	b.n	800299e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f9cf 	bl	8003c78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028da:	2301      	movs	r3, #1
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028de:	f002 f919 	bl	8004b14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028e2:	f000 fe47 	bl	8003574 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028e6:	f002 f8e5 	bl	8004ab4 <vPortEnterCritical>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d103      	bne.n	8002900 <xQueueGenericSend+0x1a0>
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002906:	b25b      	sxtb	r3, r3
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d103      	bne.n	8002916 <xQueueGenericSend+0x1b6>
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002916:	f002 f8fd 	bl	8004b14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800291a:	1d3a      	adds	r2, r7, #4
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f9be 	bl	8003ca4 <xTaskCheckForTimeOut>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d124      	bne.n	8002978 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800292e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002930:	f000 fb02 	bl	8002f38 <prvIsQueueFull>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	3310      	adds	r3, #16
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 f8e0 	bl	8003b08 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294a:	f000 fa8d 	bl	8002e68 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800294e:	f000 fe1f 	bl	8003590 <xTaskResumeAll>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af62 	bne.w	800281e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <xQueueGenericSend+0x248>)
 800295c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	e758      	b.n	800281e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800296c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296e:	f000 fa7b 	bl	8002e68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002972:	f000 fe0d 	bl	8003590 <xTaskResumeAll>
 8002976:	e752      	b.n	800281e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800297a:	f000 fa75 	bl	8002e68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800297e:	f000 fe07 	bl	8003590 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	4618      	mov	r0, r3
 8002986:	f003 ffed 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	460b      	mov	r3, r1
 8002994:	4601      	mov	r1, r0
 8002996:	205a      	movs	r0, #90	; 0x5a
 8002998:	f003 face 	bl	8005f38 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800299c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3738      	adds	r7, #56	; 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b090      	sub	sp, #64	; 0x40
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <xQueueGenericSendFromISR+0x3c>
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <xQueueGenericSendFromISR+0x40>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <xQueueGenericSendFromISR+0x42>
 80029ec:	2300      	movs	r3, #0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a04:	bf00      	nop
 8002a06:	e7fe      	b.n	8002a06 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d103      	bne.n	8002a16 <xQueueGenericSendFromISR+0x6a>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <xQueueGenericSendFromISR+0x6e>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueGenericSendFromISR+0x70>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	623b      	str	r3, [r7, #32]
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a36:	f002 f929 	bl	8004c8c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	61fa      	str	r2, [r7, #28]
 8002a50:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a52:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <xQueueGenericSendFromISR+0xbc>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d148      	bne.n	8002afa <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 ff72 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002a80:	4601      	mov	r1, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	461a      	mov	r2, r3
 8002a86:	2060      	movs	r0, #96	; 0x60
 8002a88:	f003 f986 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a92:	f000 f959 	bl	8002d48 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d112      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d025      	beq.n	8002af4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	3324      	adds	r3, #36	; 0x24
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f87d 	bl	8003bac <xTaskRemoveFromEventList>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01d      	beq.n	8002af4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01a      	beq.n	8002af4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e016      	b.n	8002af4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002ac6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002aca:	2b7f      	cmp	r3, #127	; 0x7f
 8002acc:	d10a      	bne.n	8002ae4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	617b      	str	r3, [r7, #20]
    }
 8002ae0:	bf00      	nop
 8002ae2:	e7fe      	b.n	8002ae2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	b25a      	sxtb	r2, r3
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002af4:	2301      	movs	r3, #1
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002af8:	e00b      	b.n	8002b12 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 ff31 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002b02:	4601      	mov	r1, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	461a      	mov	r2, r3
 8002b08:	2060      	movs	r0, #96	; 0x60
 8002b0a:	f003 f945 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b14:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b1c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3740      	adds	r7, #64	; 0x40
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b08f      	sub	sp, #60	; 0x3c
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <xQueueReceive+0x30>
        __asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	623b      	str	r3, [r7, #32]
    }
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <xQueueReceive+0x3e>
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <xQueueReceive+0x42>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xQueueReceive+0x44>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueReceive+0x5e>
        __asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	61fb      	str	r3, [r7, #28]
    }
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b86:	f001 f9c1 	bl	8003f0c <xTaskGetSchedulerState>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <xQueueReceive+0x6e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <xQueueReceive+0x72>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueReceive+0x74>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueReceive+0x8e>
        __asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	61bb      	str	r3, [r7, #24]
    }
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bb6:	f001 ff7d 	bl	8004ab4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d02f      	beq.n	8002c26 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bca:	f000 f927 	bl	8002e1c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fec7 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f003 fec3 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2101      	movs	r1, #1
 8002be4:	9100      	str	r1, [sp, #0]
 8002be6:	4621      	mov	r1, r4
 8002be8:	205c      	movs	r0, #92	; 0x5c
 8002bea:	f003 f9a5 	bl	8005f38 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1e5a      	subs	r2, r3, #1
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00f      	beq.n	8002c1e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	3310      	adds	r3, #16
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 ffd2 	bl	8003bac <xTaskRemoveFromEventList>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c0e:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <xQueueReceive+0x21c>)
 8002c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c1e:	f001 ff79 	bl	8004b14 <vPortExitCritical>
                return pdPASS;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e08a      	b.n	8002d3c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d113      	bne.n	8002c54 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c2c:	f001 ff72 	bl	8004b14 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fe96 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f003 fe92 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2101      	movs	r1, #1
 8002c46:	9100      	str	r1, [sp, #0]
 8002c48:	4621      	mov	r1, r4
 8002c4a:	205c      	movs	r0, #92	; 0x5c
 8002c4c:	f003 f974 	bl	8005f38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e073      	b.n	8002d3c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f80a 	bl	8003c78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c68:	f001 ff54 	bl	8004b14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c6c:	f000 fc82 	bl	8003574 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c70:	f001 ff20 	bl	8004ab4 <vPortEnterCritical>
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d103      	bne.n	8002c8a <xQueueReceive+0x162>
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d103      	bne.n	8002ca0 <xQueueReceive+0x178>
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca0:	f001 ff38 	bl	8004b14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ca4:	1d3a      	adds	r2, r7, #4
 8002ca6:	f107 0310 	add.w	r3, r7, #16
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fff9 	bl	8003ca4 <xTaskCheckForTimeOut>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d124      	bne.n	8002d02 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cba:	f000 f927 	bl	8002f0c <prvIsQueueEmpty>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d018      	beq.n	8002cf6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	3324      	adds	r3, #36	; 0x24
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ff1b 	bl	8003b08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd4:	f000 f8c8 	bl	8002e68 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cd8:	f000 fc5a 	bl	8003590 <xTaskResumeAll>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f af69 	bne.w	8002bb6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <xQueueReceive+0x21c>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	e75f      	b.n	8002bb6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf8:	f000 f8b6 	bl	8002e68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cfc:	f000 fc48 	bl	8003590 <xTaskResumeAll>
 8002d00:	e759      	b.n	8002bb6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d04:	f000 f8b0 	bl	8002e68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d08:	f000 fc42 	bl	8003590 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d0e:	f000 f8fd 	bl	8002f0c <prvIsQueueEmpty>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f43f af4e 	beq.w	8002bb6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 fe21 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002d22:	4604      	mov	r4, r0
 8002d24:	2000      	movs	r0, #0
 8002d26:	f003 fe1d 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	9100      	str	r1, [sp, #0]
 8002d32:	4621      	mov	r1, r4
 8002d34:	205c      	movs	r0, #92	; 0x5c
 8002d36:	f003 f8ff 	bl	8005f38 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d3a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3734      	adds	r7, #52	; 0x34
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d14d      	bne.n	8002e0a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f8e8 	bl	8003f48 <xTaskPriorityDisinherit>
 8002d78:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	e043      	b.n	8002e0a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d119      	bne.n	8002dbc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6858      	ldr	r0, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	461a      	mov	r2, r3
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	f003 ff60 	bl	8006c58 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	441a      	add	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d32b      	bcc.n	8002e0a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	e026      	b.n	8002e0a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68d8      	ldr	r0, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	f003 ff46 	bl	8006c58 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	425b      	negs	r3, r3
 8002dd6:	441a      	add	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	425b      	negs	r3, r3
 8002df2:	441a      	add	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d105      	bne.n	8002e0a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e12:	697b      	ldr	r3, [r7, #20]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	441a      	add	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d303      	bcc.n	8002e50 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68d9      	ldr	r1, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6838      	ldr	r0, [r7, #0]
 8002e5c:	f003 fefc 	bl	8006c58 <memcpy>
    }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e70:	f001 fe20 	bl	8004ab4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e7c:	e011      	b.n	8002ea2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fe8e 	bl	8003bac <xTaskRemoveFromEventList>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e96:	f000 ff6b 	bl	8003d70 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dce9      	bgt.n	8002e7e <prvUnlockQueue+0x16>
 8002eaa:	e000      	b.n	8002eae <prvUnlockQueue+0x46>
                        break;
 8002eac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002eb6:	f001 fe2d 	bl	8004b14 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002eba:	f001 fdfb 	bl	8004ab4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ec6:	e011      	b.n	8002eec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3310      	adds	r3, #16
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fe69 	bl	8003bac <xTaskRemoveFromEventList>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ee0:	f000 ff46 	bl	8003d70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ee4:	7bbb      	ldrb	r3, [r7, #14]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	dce9      	bgt.n	8002ec8 <prvUnlockQueue+0x60>
 8002ef4:	e000      	b.n	8002ef8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ef6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	22ff      	movs	r2, #255	; 0xff
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f00:	f001 fe08 	bl	8004b14 <vPortExitCritical>
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f14:	f001 fdce 	bl	8004ab4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e001      	b.n	8002f2a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f2a:	f001 fdf3 	bl	8004b14 <vPortExitCritical>

    return xReturn;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f40:	f001 fdb8 	bl	8004ab4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d102      	bne.n	8002f56 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e001      	b.n	8002f5a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f5a:	f001 fddb 	bl	8004b14 <vPortExitCritical>

    return xReturn;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e01e      	b.n	8002fb6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <vQueueAddToRegistry+0x60>)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f84:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <vQueueAddToRegistry+0x60>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f8e:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <vQueueAddToRegistry+0x60>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fce1 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2071      	movs	r0, #113	; 0x71
 8002faa:	f002 fef5 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002fae:	e006      	b.n	8002fbe <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b07      	cmp	r3, #7
 8002fba:	d9dd      	bls.n	8002f78 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200143b8 	.word	0x200143b8

08002fcc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fdc:	f001 fd6a 	bl	8004ab4 <vPortEnterCritical>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d103      	bne.n	8002ff6 <vQueueWaitForMessageRestricted+0x2a>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d103      	bne.n	800300c <vQueueWaitForMessageRestricted+0x40>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800300c:	f001 fd82 	bl	8004b14 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3324      	adds	r3, #36	; 0x24
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fd95 	bl	8003b50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff1e 	bl	8002e68 <prvUnlockQueue>
    }
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af04      	add	r7, sp, #16
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fe5f 	bl	8004d0c <pvPortMalloc>
 800304e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00e      	beq.n	8003074 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003056:	2058      	movs	r0, #88	; 0x58
 8003058:	f001 fe58 	bl	8004d0c <pvPortMalloc>
 800305c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
 800306a:	e005      	b.n	8003078 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f001 ff2d 	bl	8004ecc <vPortFree>
 8003072:	e001      	b.n	8003078 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	2300      	movs	r3, #0
 8003082:	9303      	str	r3, [sp, #12]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	9302      	str	r3, [sp, #8]
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f80e 	bl	80030b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800309a:	69f8      	ldr	r0, [r7, #28]
 800309c:	f000 f8a2 	bl	80031e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	e002      	b.n	80030ac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030ac:	69bb      	ldr	r3, [r7, #24]
    }
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b088      	sub	sp, #32
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	461a      	mov	r2, r3
 80030ce:	21a5      	movs	r1, #165	; 0xa5
 80030d0:	f003 fdd0 	bl	8006c74 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030de:	3b01      	subs	r3, #1
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f023 0307 	bic.w	r3, r3, #7
 80030ec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <prvInitialiseNewTask+0x58>
        __asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	617b      	str	r3, [r7, #20]
    }
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01f      	beq.n	8003154 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e012      	b.n	8003140 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	4413      	add	r3, r2
 8003120:	7819      	ldrb	r1, [r3, #0]
 8003122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	3334      	adds	r3, #52	; 0x34
 800312a:	460a      	mov	r2, r1
 800312c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b09      	cmp	r3, #9
 8003144:	d9e9      	bls.n	800311a <prvInitialiseNewTask+0x64>
 8003146:	e000      	b.n	800314a <prvInitialiseNewTask+0x94>
            {
                break;
 8003148:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003152:	e003      	b.n	800315c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	2b04      	cmp	r3, #4
 8003160:	d901      	bls.n	8003166 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003162:	2304      	movs	r3, #4
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003170:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	3304      	adds	r3, #4
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f96b 	bl	8002458 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	3318      	adds	r3, #24
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f966 	bl	8002458 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003190:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	f1c3 0205 	rsb	r2, r3, #5
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	3350      	adds	r3, #80	; 0x50
 80031a6:	2204      	movs	r2, #4
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fd62 	bl	8006c74 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	3354      	adds	r3, #84	; 0x54
 80031b4:	2201      	movs	r2, #1
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fd5b 	bl	8006c74 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	69b8      	ldr	r0, [r7, #24]
 80031c4:	f001 faca 	bl	800475c <pxPortInitialiseStack>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031da:	bf00      	nop
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031ec:	f001 fc62 	bl	8004ab4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031f0:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <prvAddNewTaskToReadyList+0xfc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <prvAddNewTaskToReadyList+0xfc>)
 80031f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <prvAddNewTaskToReadyList+0x100>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003202:	4a38      	ldr	r2, [pc, #224]	; (80032e4 <prvAddNewTaskToReadyList+0x100>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <prvAddNewTaskToReadyList+0xfc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d110      	bne.n	8003232 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003210:	f000 fdd2 	bl	8003db8 <prvInitialiseTaskLists>
 8003214:	e00d      	b.n	8003232 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003216:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <prvAddNewTaskToReadyList+0x104>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <prvAddNewTaskToReadyList+0x100>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	429a      	cmp	r2, r3
 800322a:	d802      	bhi.n	8003232 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800322c:	4a2d      	ldr	r2, [pc, #180]	; (80032e4 <prvAddNewTaskToReadyList+0x100>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <prvAddNewTaskToReadyList+0x108>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a2c      	ldr	r2, [pc, #176]	; (80032ec <prvAddNewTaskToReadyList+0x108>)
 800323a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <prvAddNewTaskToReadyList+0x108>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <prvAddNewTaskToReadyList+0x94>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fa63 	bl	8006718 <SEGGER_SYSVIEW_OnTaskCreate>
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	461d      	mov	r5, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461c      	mov	r4, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	1ae3      	subs	r3, r4, r3
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	462b      	mov	r3, r5
 8003274:	f001 fff0 	bl	8005258 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fad0 	bl	8006820 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <prvAddNewTaskToReadyList+0x10c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <prvAddNewTaskToReadyList+0x10c>)
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <prvAddNewTaskToReadyList+0x110>)
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f7ff f8e2 	bl	8002472 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032ae:	f001 fc31 	bl	8004b14 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <prvAddNewTaskToReadyList+0x104>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <prvAddNewTaskToReadyList+0x100>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <prvAddNewTaskToReadyList+0x114>)
 80032ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}
 80032e0:	2000010c 	.word	0x2000010c
 80032e4:	20000034 	.word	0x20000034
 80032e8:	20000118 	.word	0x20000118
 80032ec:	20000128 	.word	0x20000128
 80032f0:	20000114 	.word	0x20000114
 80032f4:	20000038 	.word	0x20000038
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8003304:	f001 fbd6 	bl	8004ab4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <uxTaskPriorityGet+0x18>
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <uxTaskPriorityGet+0x30>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	e000      	b.n	8003316 <uxTaskPriorityGet+0x1a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800331e:	f001 fbf9 	bl	8004b14 <vPortExitCritical>

        return uxReturn;
 8003322:	68bb      	ldr	r3, [r7, #8]
    }
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000034 	.word	0x20000034

08003330 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d90a      	bls.n	800335a <vTaskPrioritySet+0x2a>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	60fb      	str	r3, [r7, #12]
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d901      	bls.n	8003364 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003360:	2304      	movs	r3, #4
 8003362:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003364:	f001 fba6 	bl	8004ab4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <vTaskPrioritySet+0x44>
 800336e:	4b4c      	ldr	r3, [pc, #304]	; (80034a0 <vTaskPrioritySet+0x170>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e000      	b.n	8003376 <vTaskPrioritySet+0x46>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 faf2 	bl	8006964 <SEGGER_SYSVIEW_ShrinkId>
 8003380:	4603      	mov	r3, r0
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	2028      	movs	r0, #40	; 0x28
 8003388:	f002 fd06 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x2>
 800338c:	69b8      	ldr	r0, [r7, #24]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	461a      	mov	r2, r3
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	f001 ffc1 	bl	8005328 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d06f      	beq.n	8003494 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d90d      	bls.n	80033d8 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <vTaskPrioritySet+0x170>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d00f      	beq.n	80033e6 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80033c6:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <vTaskPrioritySet+0x170>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d309      	bcc.n	80033e6 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e006      	b.n	80033e6 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <vTaskPrioritySet+0x170>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d101      	bne.n	80033e6 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d102      	bne.n	80033fe <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db04      	blt.n	8003416 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1c3 0205 	rsb	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	6959      	ldr	r1, [r3, #20]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <vTaskPrioritySet+0x174>)
 8003426:	4413      	add	r3, r2
 8003428:	4299      	cmp	r1, r3
 800342a:	d128      	bne.n	800347e <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	3304      	adds	r3, #4
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f87b 	bl	800252c <uxListRemove>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800343c:	2201      	movs	r2, #1
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43da      	mvns	r2, r3
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <vTaskPrioritySet+0x178>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4013      	ands	r3, r2
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <vTaskPrioritySet+0x178>)
 800344e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <vTaskPrioritySet+0x178>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <vTaskPrioritySet+0x178>)
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <vTaskPrioritySet+0x174>)
 8003470:	441a      	add	r2, r3
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7fe fffa 	bl	8002472 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <vTaskPrioritySet+0x17c>)
 8003486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003494:	f001 fb3e 	bl	8004b14 <vPortExitCritical>
    }
 8003498:	bf00      	nop
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000034 	.word	0x20000034
 80034a4:	20000038 	.word	0x20000038
 80034a8:	20000114 	.word	0x20000114
 80034ac:	e000ed04 	.word	0xe000ed04

080034b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034b6:	4b27      	ldr	r3, [pc, #156]	; (8003554 <vTaskStartScheduler+0xa4>)
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2300      	movs	r3, #0
 80034c0:	2282      	movs	r2, #130	; 0x82
 80034c2:	4925      	ldr	r1, [pc, #148]	; (8003558 <vTaskStartScheduler+0xa8>)
 80034c4:	4825      	ldr	r0, [pc, #148]	; (800355c <vTaskStartScheduler+0xac>)
 80034c6:	f7ff fdb5 	bl	8003034 <xTaskCreate>
 80034ca:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80034d2:	f000 fe31 	bl	8004138 <xTimerCreateTimerTask>
 80034d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d124      	bne.n	8003528 <vTaskStartScheduler+0x78>
        __asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60bb      	str	r3, [r7, #8]
    }
 80034f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <vTaskStartScheduler+0xb0>)
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <vTaskStartScheduler+0xb4>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <vTaskStartScheduler+0xb8>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <vTaskStartScheduler+0xbc>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <vTaskStartScheduler+0xa4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d102      	bne.n	8003518 <vTaskStartScheduler+0x68>
 8003512:	f003 f8e5 	bl	80066e0 <SEGGER_SYSVIEW_OnIdle>
 8003516:	e004      	b.n	8003522 <vTaskStartScheduler+0x72>
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <vTaskStartScheduler+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 f93d 	bl	800679c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003522:	f001 f9a7 	bl	8004874 <xPortStartScheduler>
 8003526:	e00e      	b.n	8003546 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d10a      	bne.n	8003546 <vTaskStartScheduler+0x96>
        __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	607b      	str	r3, [r7, #4]
    }
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <vTaskStartScheduler+0xc0>)
 8003548:	681b      	ldr	r3, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000130 	.word	0x20000130
 8003558:	08006cac 	.word	0x08006cac
 800355c:	08003d89 	.word	0x08003d89
 8003560:	2000012c 	.word	0x2000012c
 8003564:	20000118 	.word	0x20000118
 8003568:	20000110 	.word	0x20000110
 800356c:	20000034 	.word	0x20000034
 8003570:	2000000c 	.word	0x2000000c

08003574 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <vTaskSuspendAll+0x18>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	4a03      	ldr	r2, [pc, #12]	; (800358c <vTaskSuspendAll+0x18>)
 8003580:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20000134 	.word	0x20000134

08003590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <xTaskResumeAll+0x11c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <xTaskResumeAll+0x2c>
        __asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	603b      	str	r3, [r7, #0]
    }
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035bc:	f001 fa7a 	bl	8004ab4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <xTaskResumeAll+0x11c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	4a39      	ldr	r2, [pc, #228]	; (80036ac <xTaskResumeAll+0x11c>)
 80035c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ca:	4b38      	ldr	r3, [pc, #224]	; (80036ac <xTaskResumeAll+0x11c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d165      	bne.n	800369e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <xTaskResumeAll+0x120>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d061      	beq.n	800369e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035da:	e032      	b.n	8003642 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <xTaskResumeAll+0x124>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3318      	adds	r3, #24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe ff9f 	bl	800252c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe ff9a 	bl	800252c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 f910 	bl	8006820 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <xTaskResumeAll+0x128>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <xTaskResumeAll+0x128>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4a27      	ldr	r2, [pc, #156]	; (80036bc <xTaskResumeAll+0x12c>)
 8003620:	441a      	add	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe ff22 	bl	8002472 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <xTaskResumeAll+0x130>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <xTaskResumeAll+0x134>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <xTaskResumeAll+0x124>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1c8      	bne.n	80035dc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003650:	f000 fc30 	bl	8003eb4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <xTaskResumeAll+0x138>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003660:	f000 f92c 	bl	80038bc <xTaskIncrementTick>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <xTaskResumeAll+0x134>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f1      	bne.n	8003660 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <xTaskResumeAll+0x138>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <xTaskResumeAll+0x134>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <xTaskResumeAll+0x13c>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800369e:	f001 fa39 	bl	8004b14 <vPortExitCritical>

    return xAlreadyYielded;
 80036a2:	68bb      	ldr	r3, [r7, #8]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000134 	.word	0x20000134
 80036b0:	2000010c 	.word	0x2000010c
 80036b4:	200000cc 	.word	0x200000cc
 80036b8:	20000114 	.word	0x20000114
 80036bc:	20000038 	.word	0x20000038
 80036c0:	20000034 	.word	0x20000034
 80036c4:	20000120 	.word	0x20000120
 80036c8:	2000011c 	.word	0x2000011c
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <xTaskGetTickCount+0x1c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036dc:	687b      	ldr	r3, [r7, #4]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000110 	.word	0x20000110

080036f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036f6:	f001 fac9 	bl	8004c8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <xTaskGetTickCountFromISR+0x20>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003704:	683b      	ldr	r3, [r7, #0]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000110 	.word	0x20000110

08003714 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003714:	b480      	push	{r7}
 8003716:	b08b      	sub	sp, #44	; 0x2c
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d05b      	beq.n	80037e2 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	3308      	adds	r3, #8
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <prvSearchForNameWithinSingleList+0x3a>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3308      	adds	r3, #8
 800376c:	429a      	cmp	r2, r3
 800376e:	d104      	bne.n	800377a <prvSearchForNameWithinSingleList+0x66>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	e01c      	b.n	80037c6 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	4413      	add	r3, r2
 8003792:	3334      	adds	r3, #52	; 0x34
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	7afa      	ldrb	r2, [r7, #11]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d002      	beq.n	80037ac <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e006      	b.n	80037ba <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	3301      	adds	r3, #1
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d9df      	bls.n	800378c <prvSearchForNameWithinSingleList+0x78>
 80037cc:	e000      	b.n	80037d0 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 80037ce:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d1bb      	bne.n	8003756 <prvSearchForNameWithinSingleList+0x42>
 80037de:	e000      	b.n	80037e2 <prvSearchForNameWithinSingleList+0xce>
                    break;
 80037e0:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037e4:	4618      	mov	r0, r3
 80037e6:	372c      	adds	r7, #44	; 0x2c
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 80037f8:	2305      	movs	r3, #5
 80037fa:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7fc fd41 	bl	8000284 <strlen>
 8003802:	4603      	mov	r3, r0
 8003804:	2b09      	cmp	r3, #9
 8003806:	d90a      	bls.n	800381e <xTaskGetHandle+0x2e>
        __asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
    }
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 800381e:	f7ff fea9 	bl	8003574 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	3b01      	subs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <xTaskGetHandle+0xb8>)
 8003834:	4413      	add	r3, r2
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff6b 	bl	8003714 <prvSearchForNameWithinSingleList>
 800383e:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ea      	bne.n	8003822 <xTaskGetHandle+0x32>
 800384c:	e000      	b.n	8003850 <xTaskGetHandle+0x60>
                    break;
 800384e:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <xTaskGetHandle+0xbc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff59 	bl	8003714 <prvSearchForNameWithinSingleList>
 8003862:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <xTaskGetHandle+0xc0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff4f 	bl	8003714 <prvSearchForNameWithinSingleList>
 8003876:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d104      	bne.n	8003888 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <xTaskGetHandle+0xc4>)
 8003882:	f7ff ff47 	bl	8003714 <prvSearchForNameWithinSingleList>
 8003886:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <xTaskGetHandle+0xc8>)
 8003892:	f7ff ff3f 	bl	8003714 <prvSearchForNameWithinSingleList>
 8003896:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003898:	f7ff fe7a 	bl	8003590 <xTaskResumeAll>

        return pxTCB;
 800389c:	693b      	ldr	r3, [r7, #16]
    }
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000038 	.word	0x20000038
 80038ac:	200000c4 	.word	0x200000c4
 80038b0:	200000c8 	.word	0x200000c8
 80038b4:	200000f8 	.word	0x200000f8
 80038b8:	200000e0 	.word	0x200000e0

080038bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c6:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <xTaskIncrementTick+0x14c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 8092 	bne.w	80039f4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d0:	4b4e      	ldr	r3, [pc, #312]	; (8003a0c <xTaskIncrementTick+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80038d8:	4a4c      	ldr	r2, [pc, #304]	; (8003a0c <xTaskIncrementTick+0x150>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d120      	bne.n	8003926 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80038e4:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <xTaskIncrementTick+0x154>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <xTaskIncrementTick+0x48>
        __asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	603b      	str	r3, [r7, #0]
    }
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <xTaskIncrementTick+0x46>
 8003904:	4b42      	ldr	r3, [pc, #264]	; (8003a10 <xTaskIncrementTick+0x154>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <xTaskIncrementTick+0x158>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a40      	ldr	r2, [pc, #256]	; (8003a10 <xTaskIncrementTick+0x154>)
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <xTaskIncrementTick+0x15c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a3e      	ldr	r2, [pc, #248]	; (8003a18 <xTaskIncrementTick+0x15c>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	f000 fac7 	bl	8003eb4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <xTaskIncrementTick+0x160>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d34c      	bcc.n	80039ca <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003930:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <xTaskIncrementTick+0x154>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393a:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <xTaskIncrementTick+0x160>)
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	601a      	str	r2, [r3, #0]
                    break;
 8003942:	e042      	b.n	80039ca <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <xTaskIncrementTick+0x154>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d203      	bcs.n	8003964 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800395c:	4a2f      	ldr	r2, [pc, #188]	; (8003a1c <xTaskIncrementTick+0x160>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003962:	e032      	b.n	80039ca <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3304      	adds	r3, #4
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fddf 	bl	800252c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3318      	adds	r3, #24
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fdd6 	bl	800252c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f002 ff4c 	bl	8006820 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2201      	movs	r2, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <xTaskIncrementTick+0x164>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <xTaskIncrementTick+0x164>)
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <xTaskIncrementTick+0x168>)
 80039a8:	441a      	add	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7fe fd5e 	bl	8002472 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d3b5      	bcc.n	8003930 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80039c4:	2301      	movs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c8:	e7b2      	b.n	8003930 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4914      	ldr	r1, [pc, #80]	; (8003a24 <xTaskIncrementTick+0x168>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d901      	bls.n	80039e6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80039e2:	2301      	movs	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <xTaskIncrementTick+0x170>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e004      	b.n	80039fe <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <xTaskIncrementTick+0x174>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <xTaskIncrementTick+0x174>)
 80039fc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80039fe:	697b      	ldr	r3, [r7, #20]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000134 	.word	0x20000134
 8003a0c:	20000110 	.word	0x20000110
 8003a10:	200000c4 	.word	0x200000c4
 8003a14:	200000c8 	.word	0x200000c8
 8003a18:	20000124 	.word	0x20000124
 8003a1c:	2000012c 	.word	0x2000012c
 8003a20:	20000114 	.word	0x20000114
 8003a24:	20000038 	.word	0x20000038
 8003a28:	20000034 	.word	0x20000034
 8003a2c:	20000120 	.word	0x20000120
 8003a30:	2000011c 	.word	0x2000011c

08003a34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a3a:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <vTaskSwitchContext+0xbc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <vTaskSwitchContext+0xc0>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003a48:	e04d      	b.n	8003ae6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <vTaskSwitchContext+0xc0>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <vTaskSwitchContext+0xc4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	f1c3 031f 	rsb	r3, r3, #31
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	4925      	ldr	r1, [pc, #148]	; (8003afc <vTaskSwitchContext+0xc8>)
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	607b      	str	r3, [r7, #4]
    }
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <vTaskSwitchContext+0x5a>
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <vTaskSwitchContext+0xc8>)
 8003a9c:	4413      	add	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d104      	bne.n	8003ac0 <vTaskSwitchContext+0x8c>
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <vTaskSwitchContext+0xcc>)
 8003ac8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <vTaskSwitchContext+0xcc>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <vTaskSwitchContext+0xd0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d102      	bne.n	8003adc <vTaskSwitchContext+0xa8>
 8003ad6:	f002 fe03 	bl	80066e0 <SEGGER_SYSVIEW_OnIdle>
}
 8003ada:	e004      	b.n	8003ae6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <vTaskSwitchContext+0xcc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 fe5b 	bl	800679c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000134 	.word	0x20000134
 8003af4:	20000120 	.word	0x20000120
 8003af8:	20000114 	.word	0x20000114
 8003afc:	20000038 	.word	0x20000038
 8003b00:	20000034 	.word	0x20000034
 8003b04:	20000130 	.word	0x20000130

08003b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60fb      	str	r3, [r7, #12]
    }
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <vTaskPlaceOnEventList+0x44>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3318      	adds	r3, #24
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe fcbf 	bl	80024ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	6838      	ldr	r0, [r7, #0]
 8003b40:	f000 fa82 	bl	8004048 <prvAddCurrentTaskToDelayedList>
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000034 	.word	0x20000034

08003b50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617b      	str	r3, [r7, #20]
    }
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <vTaskPlaceOnEventListRestricted+0x58>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3318      	adds	r3, #24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7fe fc76 	bl	8002472 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003b92:	2024      	movs	r0, #36	; 0x24
 8003b94:	f002 f8a6 	bl	8005ce4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	68b8      	ldr	r0, [r7, #8]
 8003b9c:	f000 fa54 	bl	8004048 <prvAddCurrentTaskToDelayedList>
    }
 8003ba0:	bf00      	nop
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000034 	.word	0x20000034

08003bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60fb      	str	r3, [r7, #12]
    }
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	3318      	adds	r3, #24
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fca5 	bl	800252c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <xTaskRemoveFromEventList+0xb4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d120      	bne.n	8003c2c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fc9c 	bl	800252c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fe12 	bl	8006820 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <xTaskRemoveFromEventList+0xb8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <xTaskRemoveFromEventList+0xb8>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <xTaskRemoveFromEventList+0xbc>)
 8003c1c:	441a      	add	r2, r3
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fe fc24 	bl	8002472 <vListInsertEnd>
 8003c2a:	e005      	b.n	8003c38 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4619      	mov	r1, r3
 8003c32:	480e      	ldr	r0, [pc, #56]	; (8003c6c <xTaskRemoveFromEventList+0xc0>)
 8003c34:	f7fe fc1d 	bl	8002472 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <xTaskRemoveFromEventList+0xc4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d905      	bls.n	8003c52 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <xTaskRemoveFromEventList+0xc8>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e001      	b.n	8003c56 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003c56:	697b      	ldr	r3, [r7, #20]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000134 	.word	0x20000134
 8003c64:	20000114 	.word	0x20000114
 8003c68:	20000038 	.word	0x20000038
 8003c6c:	200000cc 	.word	0x200000cc
 8003c70:	20000034 	.word	0x20000034
 8003c74:	20000120 	.word	0x20000120

08003c78 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <vTaskInternalSetTimeOutState+0x24>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <vTaskInternalSetTimeOutState+0x28>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	605a      	str	r2, [r3, #4]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20000124 	.word	0x20000124
 8003ca0:	20000110 	.word	0x20000110

08003ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	613b      	str	r3, [r7, #16]
    }
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
    }
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ce6:	f000 fee5 	bl	8004ab4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <xTaskCheckForTimeOut+0xc4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d102      	bne.n	8003d0a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e026      	b.n	8003d58 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <xTaskCheckForTimeOut+0xc8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d00a      	beq.n	8003d2c <xTaskCheckForTimeOut+0x88>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d305      	bcc.n	8003d2c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e015      	b.n	8003d58 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20b      	bcs.n	8003d4e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ff98 	bl	8003c78 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	e004      	b.n	8003d58 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d58:	f000 fedc 	bl	8004b14 <vPortExitCritical>

    return xReturn;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000110 	.word	0x20000110
 8003d6c:	20000124 	.word	0x20000124

08003d70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <vTaskMissedYield+0x14>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	20000120 	.word	0x20000120

08003d88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003d90:	f000 f852 	bl	8003e38 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <prvIdleTask+0x28>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d9f9      	bls.n	8003d90 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <prvIdleTask+0x2c>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003dac:	e7f0      	b.n	8003d90 <prvIdleTask+0x8>
 8003dae:	bf00      	nop
 8003db0:	20000038 	.word	0x20000038
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	e00c      	b.n	8003dde <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <prvInitialiseTaskLists+0x60>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fb20 	bl	8002418 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d9ef      	bls.n	8003dc4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <prvInitialiseTaskLists+0x64>)
 8003de6:	f7fe fb17 	bl	8002418 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003dea:	480d      	ldr	r0, [pc, #52]	; (8003e20 <prvInitialiseTaskLists+0x68>)
 8003dec:	f7fe fb14 	bl	8002418 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003df0:	480c      	ldr	r0, [pc, #48]	; (8003e24 <prvInitialiseTaskLists+0x6c>)
 8003df2:	f7fe fb11 	bl	8002418 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003df6:	480c      	ldr	r0, [pc, #48]	; (8003e28 <prvInitialiseTaskLists+0x70>)
 8003df8:	f7fe fb0e 	bl	8002418 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003dfc:	480b      	ldr	r0, [pc, #44]	; (8003e2c <prvInitialiseTaskLists+0x74>)
 8003dfe:	f7fe fb0b 	bl	8002418 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <prvInitialiseTaskLists+0x78>)
 8003e04:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <prvInitialiseTaskLists+0x64>)
 8003e06:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <prvInitialiseTaskLists+0x7c>)
 8003e0a:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <prvInitialiseTaskLists+0x68>)
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000038 	.word	0x20000038
 8003e1c:	2000009c 	.word	0x2000009c
 8003e20:	200000b0 	.word	0x200000b0
 8003e24:	200000cc 	.word	0x200000cc
 8003e28:	200000e0 	.word	0x200000e0
 8003e2c:	200000f8 	.word	0x200000f8
 8003e30:	200000c4 	.word	0x200000c4
 8003e34:	200000c8 	.word	0x200000c8

08003e38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e3e:	e019      	b.n	8003e74 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003e40:	f000 fe38 	bl	8004ab4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <prvCheckTasksWaitingTermination+0x50>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fb6b 	bl	800252c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <prvCheckTasksWaitingTermination+0x54>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <prvCheckTasksWaitingTermination+0x54>)
 8003e5e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <prvCheckTasksWaitingTermination+0x58>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <prvCheckTasksWaitingTermination+0x58>)
 8003e68:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003e6a:	f000 fe53 	bl	8004b14 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f810 	bl	8003e94 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <prvCheckTasksWaitingTermination+0x58>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e1      	bne.n	8003e40 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200000e0 	.word	0x200000e0
 8003e8c:	2000010c 	.word	0x2000010c
 8003e90:	200000f4 	.word	0x200000f4

08003e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 f813 	bl	8004ecc <vPortFree>
                vPortFree( pxTCB );
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 f810 	bl	8004ecc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <prvResetNextTaskUnblockTime+0x30>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <prvResetNextTaskUnblockTime+0x34>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003eca:	e005      	b.n	8003ed8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <prvResetNextTaskUnblockTime+0x30>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <prvResetNextTaskUnblockTime+0x34>)
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200000c4 	.word	0x200000c4
 8003ee8:	2000012c 	.word	0x2000012c

08003eec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <xTaskGetCurrentTaskHandle+0x1c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003ef8:	687b      	ldr	r3, [r7, #4]
    }
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000034 	.word	0x20000034

08003f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <xTaskGetSchedulerState+0x34>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	e008      	b.n	8003f32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <xTaskGetSchedulerState+0x38>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	e001      	b.n	8003f32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003f32:	687b      	ldr	r3, [r7, #4]
    }
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	20000118 	.word	0x20000118
 8003f44:	20000134 	.word	0x20000134

08003f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d068      	beq.n	8004030 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <xTaskPriorityDisinherit+0xf4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d00a      	beq.n	8003f7e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	60fb      	str	r3, [r7, #12]
    }
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
    }
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d03e      	beq.n	8004030 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d13a      	bne.n	8004030 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fab4 	bl	800252c <uxListRemove>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	2201      	movs	r2, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <xTaskPriorityDisinherit+0xf8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <xTaskPriorityDisinherit+0xf8>)
 8003fde:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	204a      	movs	r0, #74	; 0x4a
 8003fe6:	f001 fe9b 	bl	8005d20 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f1c3 0205 	rsb	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	2201      	movs	r2, #1
 8004004:	409a      	lsls	r2, r3
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <xTaskPriorityDisinherit+0xf8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	4a0c      	ldr	r2, [pc, #48]	; (8004040 <xTaskPriorityDisinherit+0xf8>)
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4a09      	ldr	r2, [pc, #36]	; (8004044 <xTaskPriorityDisinherit+0xfc>)
 800401e:	441a      	add	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7fe fa23 	bl	8002472 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004030:	697b      	ldr	r3, [r7, #20]
    }
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000034 	.word	0x20000034
 8004040:	20000114 	.word	0x20000114
 8004044:	20000038 	.word	0x20000038

08004048 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004052:	4b32      	ldr	r3, [pc, #200]	; (800411c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fa64 	bl	800252c <uxListRemove>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	2201      	movs	r2, #1
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <prvAddCurrentTaskToDelayedList+0xdc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4013      	ands	r3, r2
 800407e:	4a29      	ldr	r2, [pc, #164]	; (8004124 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004080:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d110      	bne.n	80040ac <prvAddCurrentTaskToDelayedList+0x64>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	211b      	movs	r1, #27
 8004096:	4618      	mov	r0, r3
 8004098:	f002 fc04 	bl	80068a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800409c:	4b20      	ldr	r3, [pc, #128]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4820      	ldr	r0, [pc, #128]	; (8004128 <prvAddCurrentTaskToDelayedList+0xe0>)
 80040a6:	f7fe f9e4 	bl	8002472 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040aa:	e032      	b.n	8004112 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d20f      	bcs.n	80040e4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80040c4:	4b16      	ldr	r3, [pc, #88]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2104      	movs	r1, #4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 fbea 	bl	80068a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <prvAddCurrentTaskToDelayedList+0xe4>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7fe f9ec 	bl	80024ba <vListInsert>
}
 80040e2:	e016      	b.n	8004112 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80040e4:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2104      	movs	r1, #4
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 fbda 	bl	80068a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7fe f9dc 	bl	80024ba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <prvAddCurrentTaskToDelayedList+0xec>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	429a      	cmp	r2, r3
 800410a:	d202      	bcs.n	8004112 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <prvAddCurrentTaskToDelayedList+0xec>)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000110 	.word	0x20000110
 8004120:	20000034 	.word	0x20000034
 8004124:	20000114 	.word	0x20000114
 8004128:	200000f8 	.word	0x200000f8
 800412c:	200000c8 	.word	0x200000c8
 8004130:	200000c4 	.word	0x200000c4
 8004134:	2000012c 	.word	0x2000012c

08004138 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004142:	f000 fad5 	bl	80046f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <xTimerCreateTimerTask+0x54>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <xTimerCreateTimerTask+0x58>)
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2302      	movs	r3, #2
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800415c:	490d      	ldr	r1, [pc, #52]	; (8004194 <xTimerCreateTimerTask+0x5c>)
 800415e:	480e      	ldr	r0, [pc, #56]	; (8004198 <xTimerCreateTimerTask+0x60>)
 8004160:	f7fe ff68 	bl	8003034 <xTaskCreate>
 8004164:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	603b      	str	r3, [r7, #0]
    }
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004182:	687b      	ldr	r3, [r7, #4]
    }
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000168 	.word	0x20000168
 8004190:	2000016c 	.word	0x2000016c
 8004194:	08006cb4 	.word	0x08006cb4
 8004198:	080042d1 	.word	0x080042d1

0800419c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xTimerGenericCommand+0x2e>
        __asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	623b      	str	r3, [r7, #32]
    }
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80041ca:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <xTimerGenericCommand+0x98>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02a      	beq.n	8004228 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	dc18      	bgt.n	8004216 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041e4:	f7ff fe92 	bl	8003f0c <xTaskGetSchedulerState>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d109      	bne.n	8004202 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <xTimerGenericCommand+0x98>)
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f107 0114 	add.w	r1, r7, #20
 80041f6:	2300      	movs	r3, #0
 80041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fa:	f7fe fab1 	bl	8002760 <xQueueGenericSend>
 80041fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004200:	e012      	b.n	8004228 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <xTimerGenericCommand+0x98>)
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f107 0114 	add.w	r1, r7, #20
 800420a:	2300      	movs	r3, #0
 800420c:	2200      	movs	r2, #0
 800420e:	f7fe faa7 	bl	8002760 <xQueueGenericSend>
 8004212:	6278      	str	r0, [r7, #36]	; 0x24
 8004214:	e008      	b.n	8004228 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <xTimerGenericCommand+0x98>)
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	f107 0114 	add.w	r1, r7, #20
 800421e:	2300      	movs	r3, #0
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	f7fe fbc3 	bl	80029ac <xQueueGenericSendFromISR>
 8004226:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800422a:	4618      	mov	r0, r3
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000168 	.word	0x20000168

08004238 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <prvProcessExpiredTimer+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe f96b 	bl	800252c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d022      	beq.n	80042aa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	18d1      	adds	r1, r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	f000 f8d1 	bl	8004418 <prvInsertTimerInActiveList>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01f      	beq.n	80042bc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	2100      	movs	r1, #0
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f7ff ff88 	bl	800419c <xTimerGenericCommand>
 800428c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
    }
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	6978      	ldr	r0, [r7, #20]
 80042c2:	4798      	blx	r3
    }
 80042c4:	bf00      	nop
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000160 	.word	0x20000160

080042d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f857 	bl	8004390 <prvGetNextExpireTime>
 80042e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4619      	mov	r1, r3
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f803 	bl	80042f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80042ee:	f000 f8d5 	bl	800449c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042f2:	e7f1      	b.n	80042d8 <prvTimerTask+0x8>

080042f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80042fe:	f7ff f939 	bl	8003574 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f866 	bl	80043d8 <prvSampleTimeNow>
 800430c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d130      	bne.n	8004376 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <prvProcessTimerOrBlockTask+0x3c>
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	429a      	cmp	r2, r3
 8004320:	d806      	bhi.n	8004330 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004322:	f7ff f935 	bl	8003590 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff85 	bl	8004238 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800432e:	e024      	b.n	800437a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <prvProcessTimerOrBlockTask+0x90>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <prvProcessTimerOrBlockTask+0x50>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <prvProcessTimerOrBlockTask+0x52>
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <prvProcessTimerOrBlockTask+0x94>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4619      	mov	r1, r3
 8004356:	f7fe fe39 	bl	8002fcc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800435a:	f7ff f919 	bl	8003590 <xTaskResumeAll>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <prvProcessTimerOrBlockTask+0x98>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	f3bf 8f6f 	isb	sy
    }
 8004374:	e001      	b.n	800437a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004376:	f7ff f90b 	bl	8003590 <xTaskResumeAll>
    }
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000164 	.word	0x20000164
 8004388:	20000168 	.word	0x20000168
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <prvGetNextExpireTime+0x44>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <prvGetNextExpireTime+0x16>
 80043a2:	2201      	movs	r2, #1
 80043a4:	e000      	b.n	80043a8 <prvGetNextExpireTime+0x18>
 80043a6:	2200      	movs	r2, #0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <prvGetNextExpireTime+0x44>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e001      	b.n	80043c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80043c4:	68fb      	ldr	r3, [r7, #12]
    }
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000160 	.word	0x20000160

080043d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80043e0:	f7ff f976 	bl	80036d0 <xTaskGetTickCount>
 80043e4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <prvSampleTimeNow+0x3c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d205      	bcs.n	80043fc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80043f0:	f000 f91a 	bl	8004628 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e002      	b.n	8004402 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <prvSampleTimeNow+0x3c>)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004408:	68fb      	ldr	r3, [r7, #12]
    }
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000170 	.word	0x20000170

08004418 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d812      	bhi.n	8004464 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e01b      	b.n	800448a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <prvInsertTimerInActiveList+0x7c>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7fe f82c 	bl	80024ba <vListInsert>
 8004462:	e012      	b.n	800448a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d206      	bcs.n	800447a <prvInsertTimerInActiveList+0x62>
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e007      	b.n	800448a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <prvInsertTimerInActiveList+0x80>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7fe f818 	bl	80024ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 800448a:	697b      	ldr	r3, [r7, #20]
    }
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000164 	.word	0x20000164
 8004498:	20000160 	.word	0x20000160

0800449c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044a2:	e0ae      	b.n	8004602 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f2c0 80aa 	blt.w	8004600 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe f835 	bl	800252c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff87 	bl	80043d8 <prvSampleTimeNow>
 80044ca:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	f200 8097 	bhi.w	8004602 <prvProcessReceivedCommands+0x166>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <prvProcessReceivedCommands+0x40>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004505 	.word	0x08004505
 80044e0:	08004505 	.word	0x08004505
 80044e4:	08004505 	.word	0x08004505
 80044e8:	08004579 	.word	0x08004579
 80044ec:	0800458d 	.word	0x0800458d
 80044f0:	080045d7 	.word	0x080045d7
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004505 	.word	0x08004505
 80044fc:	08004579 	.word	0x08004579
 8004500:	0800458d 	.word	0x0800458d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	18d1      	adds	r1, r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004524:	f7ff ff78 	bl	8004418 <prvInsertTimerInActiveList>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d069      	beq.n	8004602 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004534:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05e      	beq.n	8004602 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	441a      	add	r2, r3
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	2100      	movs	r1, #0
 8004554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004556:	f7ff fe21 	bl	800419c <xTimerGenericCommand>
 800455a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d14f      	bne.n	8004602 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	61bb      	str	r3, [r7, #24]
    }
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	b2da      	uxtb	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800458a:	e03a      	b.n	8004602 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	617b      	str	r3, [r7, #20]
    }
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	18d1      	adds	r1, r2, r3
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045d0:	f7ff ff22 	bl	8004418 <prvInsertTimerInActiveList>
                        break;
 80045d4:	e015      	b.n	8004602 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80045e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e6:	f000 fc71 	bl	8004ecc <vPortFree>
 80045ea:	e00a      	b.n	8004602 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80045fe:	e000      	b.n	8004602 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004600:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <prvProcessReceivedCommands+0x188>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f107 0108 	add.w	r1, r7, #8
 800460a:	2200      	movs	r2, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fa8b 	bl	8002b28 <xQueueReceive>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f af45 	bne.w	80044a4 <prvProcessReceivedCommands+0x8>
        }
    }
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000168 	.word	0x20000168

08004628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800462e:	e048      	b.n	80046c2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd ff6f 	bl	800252c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02e      	beq.n	80046c2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d90e      	bls.n	8004694 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004682:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fd ff14 	bl	80024ba <vListInsert>
 8004692:	e016      	b.n	80046c2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	2100      	movs	r1, #0
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fd7c 	bl	800419c <xTimerGenericCommand>
 80046a4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	603b      	str	r3, [r7, #0]
    }
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1b1      	bne.n	8004630 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <prvSwitchTimerLists+0xc4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <prvSwitchTimerLists+0xc0>)
 80046d8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <prvSwitchTimerLists+0xc4>)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	6013      	str	r3, [r2, #0]
    }
 80046e0:	bf00      	nop
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000160 	.word	0x20000160
 80046ec:	20000164 	.word	0x20000164

080046f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80046f4:	f000 f9de 	bl	8004ab4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <prvCheckForValidListAndQueue+0x54>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11d      	bne.n	800473c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004700:	4811      	ldr	r0, [pc, #68]	; (8004748 <prvCheckForValidListAndQueue+0x58>)
 8004702:	f7fd fe89 	bl	8002418 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004706:	4811      	ldr	r0, [pc, #68]	; (800474c <prvCheckForValidListAndQueue+0x5c>)
 8004708:	f7fd fe86 	bl	8002418 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <prvCheckForValidListAndQueue+0x60>)
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <prvCheckForValidListAndQueue+0x58>)
 8004710:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <prvCheckForValidListAndQueue+0x64>)
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <prvCheckForValidListAndQueue+0x5c>)
 8004716:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004718:	2200      	movs	r2, #0
 800471a:	210c      	movs	r1, #12
 800471c:	200a      	movs	r0, #10
 800471e:	f7fd ff97 	bl	8002650 <xQueueGenericCreate>
 8004722:	4603      	mov	r3, r0
 8004724:	4a07      	ldr	r2, [pc, #28]	; (8004744 <prvCheckForValidListAndQueue+0x54>)
 8004726:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <prvCheckForValidListAndQueue+0x54>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <prvCheckForValidListAndQueue+0x54>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4908      	ldr	r1, [pc, #32]	; (8004758 <prvCheckForValidListAndQueue+0x68>)
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fc16 	bl	8002f68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800473c:	f000 f9ea 	bl	8004b14 <vPortExitCritical>
    }
 8004740:	bf00      	nop
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000168 	.word	0x20000168
 8004748:	20000138 	.word	0x20000138
 800474c:	2000014c 	.word	0x2000014c
 8004750:	20000160 	.word	0x20000160
 8004754:	20000164 	.word	0x20000164
 8004758:	08006cbc 	.word	0x08006cbc

0800475c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b04      	subs	r3, #4
 800476c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004774:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b04      	subs	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b04      	subs	r3, #4
 800478a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <pxPortInitialiseStack+0x64>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3b14      	subs	r3, #20
 8004796:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3b04      	subs	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f06f 0202 	mvn.w	r2, #2
 80047aa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b20      	subs	r3, #32
 80047b0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80047b2:	68fb      	ldr	r3, [r7, #12]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	080047c5 	.word	0x080047c5

080047c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <prvTaskExitError+0x54>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d00a      	beq.n	80047ee <prvTaskExitError+0x2a>
        __asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
    }
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <prvTaskExitError+0x28>
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60bb      	str	r3, [r7, #8]
    }
 8004800:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004802:	bf00      	nop
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0fc      	beq.n	8004804 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000010 	.word	0x20000010
 800481c:	00000000 	.word	0x00000000

08004820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <pxCurrentTCBConst2>)
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	6808      	ldr	r0, [r1, #0]
 8004826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	f380 8809 	msr	PSP, r0
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	4770      	bx	lr
 800483c:	f3af 8000 	nop.w

08004840 <pxCurrentTCBConst2>:
 8004840:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop

08004848 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004848:	4808      	ldr	r0, [pc, #32]	; (800486c <prvPortStartFirstTask+0x24>)
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f380 8808 	msr	MSP, r0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8814 	msr	CONTROL, r0
 800485a:	b662      	cpsie	i
 800485c:	b661      	cpsie	f
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	df00      	svc	0
 8004868:	bf00      	nop
 800486a:	0000      	.short	0x0000
 800486c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop

08004874 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <xPortStartScheduler+0x120>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a46      	ldr	r2, [pc, #280]	; (8004998 <xPortStartScheduler+0x124>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10a      	bne.n	800489a <xPortStartScheduler+0x26>
        __asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	613b      	str	r3, [r7, #16]
    }
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800489a:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <xPortStartScheduler+0x120>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a3f      	ldr	r2, [pc, #252]	; (800499c <xPortStartScheduler+0x128>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10a      	bne.n	80048ba <xPortStartScheduler+0x46>
        __asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
    }
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <xPortStartScheduler+0x12c>)
 80048bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <xPortStartScheduler+0x130>)
 80048e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048e2:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <xPortStartScheduler+0x134>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048e8:	e009      	b.n	80048fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80048ea:	4b2f      	ldr	r3, [pc, #188]	; (80049a8 <xPortStartScheduler+0x134>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <xPortStartScheduler+0x134>)
 80048f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d0ef      	beq.n	80048ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800490a:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <xPortStartScheduler+0x134>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1c3 0307 	rsb	r3, r3, #7
 8004912:	2b04      	cmp	r3, #4
 8004914:	d00a      	beq.n	800492c <xPortStartScheduler+0xb8>
        __asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60bb      	str	r3, [r7, #8]
    }
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <xPortStartScheduler+0x134>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <xPortStartScheduler+0x134>)
 8004934:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <xPortStartScheduler+0x134>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800493e:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <xPortStartScheduler+0x134>)
 8004940:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800494a:	4b18      	ldr	r3, [pc, #96]	; (80049ac <xPortStartScheduler+0x138>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <xPortStartScheduler+0x138>)
 8004950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004954:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <xPortStartScheduler+0x138>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <xPortStartScheduler+0x138>)
 800495c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004960:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004962:	f000 f963 	bl	8004c2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <xPortStartScheduler+0x13c>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800496c:	f000 f982 	bl	8004c74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <xPortStartScheduler+0x140>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <xPortStartScheduler+0x140>)
 8004976:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800497a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800497c:	f7ff ff64 	bl	8004848 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004980:	f7ff f858 	bl	8003a34 <vTaskSwitchContext>
    prvTaskExitError();
 8004984:	f7ff ff1e 	bl	80047c4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000ed00 	.word	0xe000ed00
 8004998:	410fc271 	.word	0x410fc271
 800499c:	410fc270 	.word	0x410fc270
 80049a0:	e000e400 	.word	0xe000e400
 80049a4:	20000174 	.word	0x20000174
 80049a8:	20000178 	.word	0x20000178
 80049ac:	e000ed20 	.word	0xe000ed20
 80049b0:	20000010 	.word	0x20000010
 80049b4:	e000ef34 	.word	0xe000ef34

080049b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <vInitPrioGroupValue+0xe4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a37      	ldr	r2, [pc, #220]	; (8004aa0 <vInitPrioGroupValue+0xe8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10a      	bne.n	80049de <vInitPrioGroupValue+0x26>
        __asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	613b      	str	r3, [r7, #16]
    }
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049de:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <vInitPrioGroupValue+0xe4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <vInitPrioGroupValue+0xec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10a      	bne.n	80049fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
    }
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049fe:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <vInitPrioGroupValue+0xf0>)
 8004a00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	22ff      	movs	r2, #255	; 0xff
 8004a0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <vInitPrioGroupValue+0xf4>)
 8004a24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a28:	2207      	movs	r2, #7
 8004a2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2c:	e009      	b.n	8004a42 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d0ef      	beq.n	8004a2e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d00a      	beq.n	8004a70 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60bb      	str	r3, [r7, #8]
    }
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a78:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a82:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <vInitPrioGroupValue+0xf8>)
 8004a84:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000ed00 	.word	0xe000ed00
 8004aa0:	410fc271 	.word	0x410fc271
 8004aa4:	410fc270 	.word	0x410fc270
 8004aa8:	e000e400 	.word	0xe000e400
 8004aac:	20000174 	.word	0x20000174
 8004ab0:	20000178 	.word	0x20000178

08004ab4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
        __asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
    }
 8004acc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <vPortEnterCritical+0x58>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <vPortEnterCritical+0x58>)
 8004ad6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <vPortEnterCritical+0x58>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10f      	bne.n	8004b00 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <vPortEnterCritical+0x5c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <vPortEnterCritical+0x4c>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	603b      	str	r3, [r7, #0]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vPortEnterCritical+0x4a>
    }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000010 	.word	0x20000010
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <vPortExitCritical+0x50>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <vPortExitCritical+0x24>
        __asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	607b      	str	r3, [r7, #4]
    }
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <vPortExitCritical+0x50>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <vPortExitCritical+0x50>)
 8004b40:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <vPortExitCritical+0x50>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d105      	bne.n	8004b56 <vPortExitCritical+0x42>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f383 8811 	msr	BASEPRI, r3
    }
 8004b54:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000010 	.word	0x20000010
	...

08004b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004b70:	f3ef 8009 	mrs	r0, PSP
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <pxCurrentTCBConst>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	f01e 0f10 	tst.w	lr, #16
 8004b80:	bf08      	it	eq
 8004b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	6010      	str	r0, [r2, #0]
 8004b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b94:	f380 8811 	msr	BASEPRI, r0
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f7fe ff48 	bl	8003a34 <vTaskSwitchContext>
 8004ba4:	f04f 0000 	mov.w	r0, #0
 8004ba8:	f380 8811 	msr	BASEPRI, r0
 8004bac:	bc09      	pop	{r0, r3}
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	6808      	ldr	r0, [r1, #0]
 8004bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb6:	f01e 0f10 	tst.w	lr, #16
 8004bba:	bf08      	it	eq
 8004bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bc0:	f380 8809 	msr	PSP, r0
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w

08004bd0 <pxCurrentTCBConst>:
 8004bd0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop

08004bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
        __asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	607b      	str	r3, [r7, #4]
    }
 8004bf0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004bf2:	f001 fcfb 	bl	80065ec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004bf6:	f7fe fe61 	bl	80038bc <xTaskIncrementTick>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004c00:	f001 fd52 	bl	80066a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c04:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <SysTick_Handler+0x50>)
 8004c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e001      	b.n	8004c12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004c0e:	f001 fd2f 	bl	8006670 <SEGGER_SYSVIEW_RecordExitISR>
 8004c12:	2300      	movs	r3, #0
 8004c14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f383 8811 	msr	BASEPRI, r3
    }
 8004c1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <vPortSetupTimerInterrupt+0x34>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <vPortSetupTimerInterrupt+0x38>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <vPortSetupTimerInterrupt+0x3c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <vPortSetupTimerInterrupt+0x40>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <vPortSetupTimerInterrupt+0x44>)
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <vPortSetupTimerInterrupt+0x34>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000e010 	.word	0xe000e010
 8004c64:	e000e018 	.word	0xe000e018
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	10624dd3 	.word	0x10624dd3
 8004c70:	e000e014 	.word	0xe000e014

08004c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c84 <vPortEnableVFP+0x10>
 8004c78:	6801      	ldr	r1, [r0, #0]
 8004c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c7e:	6001      	str	r1, [r0, #0]
 8004c80:	4770      	bx	lr
 8004c82:	0000      	.short	0x0000
 8004c84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop

08004c8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004c92:	f3ef 8305 	mrs	r3, IPSR
 8004c96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b0f      	cmp	r3, #15
 8004c9c:	d914      	bls.n	8004cc8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <vPortValidateInterruptPriority+0x70>)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <vPortValidateInterruptPriority+0x74>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	7afa      	ldrb	r2, [r7, #11]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20a      	bcs.n	8004cc8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	607b      	str	r3, [r7, #4]
    }
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <vPortValidateInterruptPriority+0x78>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <vPortValidateInterruptPriority+0x7c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d90a      	bls.n	8004cee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	603b      	str	r3, [r7, #0]
    }
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <vPortValidateInterruptPriority+0x60>
    }
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	e000e3f0 	.word	0xe000e3f0
 8004d00:	20000174 	.word	0x20000174
 8004d04:	e000ed0c 	.word	0xe000ed0c
 8004d08:	20000178 	.word	0x20000178

08004d0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004d18:	f7fe fc2c 	bl	8003574 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d1c:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <pvPortMalloc+0x1a8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d24:	f000 f934 	bl	8004f90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d28:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <pvPortMalloc+0x1ac>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 80a7 	bne.w	8004e84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02d      	beq.n	8004d98 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d227      	bcs.n	8004d98 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004d48:	2208      	movs	r2, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d021      	beq.n	8004d9e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	3308      	adds	r3, #8
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d214      	bcs.n	8004d92 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	3308      	adds	r3, #8
 8004d70:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <pvPortMalloc+0x92>
        __asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	617b      	str	r3, [r7, #20]
    }
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d96:	e002      	b.n	8004d9e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	e000      	b.n	8004da0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d9e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d06e      	beq.n	8004e84 <pvPortMalloc+0x178>
 8004da6:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d869      	bhi.n	8004e84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004db0:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <pvPortMalloc+0x1b4>)
 8004db2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004db4:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <pvPortMalloc+0x1b4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dba:	e004      	b.n	8004dc6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d903      	bls.n	8004dd8 <pvPortMalloc+0xcc>
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f1      	bne.n	8004dbc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <pvPortMalloc+0x1a8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d050      	beq.n	8004e84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2208      	movs	r2, #8
 8004de8:	4413      	add	r3, r2
 8004dea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d91f      	bls.n	8004e44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <pvPortMalloc+0x120>
        __asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	613b      	str	r3, [r7, #16]
    }
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e3e:	69b8      	ldr	r0, [r7, #24]
 8004e40:	f000 f908 	bl	8005054 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <pvPortMalloc+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d203      	bcs.n	8004e66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <pvPortMalloc+0x1b8>)
 8004e64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <pvPortMalloc+0x1ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <pvPortMalloc+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <pvPortMalloc+0x1bc>)
 8004e82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004e84:	f7fe fb84 	bl	8003590 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <pvPortMalloc+0x19c>
        __asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
    }
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20012d84 	.word	0x20012d84
 8004eb8:	20012d98 	.word	0x20012d98
 8004ebc:	20012d88 	.word	0x20012d88
 8004ec0:	20012d7c 	.word	0x20012d7c
 8004ec4:	20012d8c 	.word	0x20012d8c
 8004ec8:	20012d90 	.word	0x20012d90

08004ecc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d04d      	beq.n	8004f7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ede:	2308      	movs	r3, #8
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <vPortFree+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <vPortFree+0x44>
        __asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60fb      	str	r3, [r7, #12]
    }
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <vPortFree+0x62>
        __asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60bb      	str	r3, [r7, #8]
    }
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <vPortFree+0xb8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01e      	beq.n	8004f7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11a      	bne.n	8004f7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <vPortFree+0xb8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	401a      	ands	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004f54:	f7fe fb0e 	bl	8003574 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortFree+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <vPortFree+0xbc>)
 8004f64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f66:	6938      	ldr	r0, [r7, #16]
 8004f68:	f000 f874 	bl	8005054 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <vPortFree+0xc0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <vPortFree+0xc0>)
 8004f74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004f76:	f7fe fb0b 	bl	8003590 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20012d98 	.word	0x20012d98
 8004f88:	20012d88 	.word	0x20012d88
 8004f8c:	20012d94 	.word	0x20012d94

08004f90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004f9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <prvHeapInit+0xac>)
 8004f9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3307      	adds	r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0307 	bic.w	r3, r3, #7
 8004fb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	; (800503c <prvHeapInit+0xac>)
 8004fc0:	4413      	add	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <prvHeapInit+0xb0>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <prvHeapInit+0xb0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4413      	add	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004fdc:	2208      	movs	r2, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a15      	ldr	r2, [pc, #84]	; (8005044 <prvHeapInit+0xb4>)
 8004ff0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <prvHeapInit+0xb4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <prvHeapInit+0xb4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <prvHeapInit+0xb4>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <prvHeapInit+0xb8>)
 800501e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a09      	ldr	r2, [pc, #36]	; (800504c <prvHeapInit+0xbc>)
 8005026:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <prvHeapInit+0xc0>)
 800502a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	2000017c 	.word	0x2000017c
 8005040:	20012d7c 	.word	0x20012d7c
 8005044:	20012d84 	.word	0x20012d84
 8005048:	20012d8c 	.word	0x20012d8c
 800504c:	20012d88 	.word	0x20012d88
 8005050:	20012d98 	.word	0x20012d98

08005054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <prvInsertBlockIntoFreeList+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e002      	b.n	8005068 <prvInsertBlockIntoFreeList+0x14>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d8f7      	bhi.n	8005062 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d108      	bne.n	8005096 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	441a      	add	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d118      	bne.n	80050dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <prvInsertBlockIntoFreeList+0xb0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d00d      	beq.n	80050d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e008      	b.n	80050e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <prvInsertBlockIntoFreeList+0xb0>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e003      	b.n	80050e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d002      	beq.n	80050f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20012d7c 	.word	0x20012d7c
 8005104:	20012d84 	.word	0x20012d84

08005108 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800510c:	4803      	ldr	r0, [pc, #12]	; (800511c <_cbSendSystemDesc+0x14>)
 800510e:	f001 fa17 	bl	8006540 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005112:	4803      	ldr	r0, [pc, #12]	; (8005120 <_cbSendSystemDesc+0x18>)
 8005114:	f001 fa14 	bl	8006540 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}
 800511c:	08006cc4 	.word	0x08006cc4
 8005120:	08006d08 	.word	0x08006d08

08005124 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <SEGGER_SYSVIEW_Conf+0x20>)
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <SEGGER_SYSVIEW_Conf+0x20>)
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <SEGGER_SYSVIEW_Conf+0x24>)
 8005132:	4a06      	ldr	r2, [pc, #24]	; (800514c <SEGGER_SYSVIEW_Conf+0x28>)
 8005134:	f000 fd80 	bl	8005c38 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005138:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800513c:	f000 fdc2 	bl	8005cc4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005140:	bf00      	nop
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000000 	.word	0x20000000
 8005148:	08005109 	.word	0x08005109
 800514c:	08006da8 	.word	0x08006da8

08005150 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b085      	sub	sp, #20
 8005154:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	e033      	b.n	80051c4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800515c:	491e      	ldr	r1, [pc, #120]	; (80051d8 <_cbSendTaskList+0x88>)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	491a      	ldr	r1, [pc, #104]	; (80051d8 <_cbSendTaskList+0x88>)
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	3304      	adds	r3, #4
 800517c:	6819      	ldr	r1, [r3, #0]
 800517e:	4c16      	ldr	r4, [pc, #88]	; (80051d8 <_cbSendTaskList+0x88>)
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4423      	add	r3, r4
 800518c:	3308      	adds	r3, #8
 800518e:	681c      	ldr	r4, [r3, #0]
 8005190:	4d11      	ldr	r5, [pc, #68]	; (80051d8 <_cbSendTaskList+0x88>)
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	442b      	add	r3, r5
 800519e:	330c      	adds	r3, #12
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	4e0d      	ldr	r6, [pc, #52]	; (80051d8 <_cbSendTaskList+0x88>)
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4433      	add	r3, r6
 80051b0:	3310      	adds	r3, #16
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	462b      	mov	r3, r5
 80051b8:	4622      	mov	r2, r4
 80051ba:	f000 f925 	bl	8005408 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3301      	adds	r3, #1
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <_cbSendTaskList+0x8c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3c6      	bcc.n	800515c <_cbSendTaskList+0xc>
  }
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	20012d9c 	.word	0x20012d9c
 80051dc:	20012e3c 	.word	0x20012e3c

080051e0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80051e6:	f7fe fa83 	bl	80036f0 <xTaskGetTickCountFromISR>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80051f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	f04f 0400 	mov.w	r4, #0
 8005202:	f04f 0500 	mov.w	r5, #0
 8005206:	015d      	lsls	r5, r3, #5
 8005208:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800520c:	0154      	lsls	r4, r2, #5
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	1a12      	subs	r2, r2, r0
 8005214:	eb63 0301 	sbc.w	r3, r3, r1
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	f04f 0500 	mov.w	r5, #0
 8005220:	009d      	lsls	r5, r3, #2
 8005222:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8005226:	0094      	lsls	r4, r2, #2
 8005228:	4622      	mov	r2, r4
 800522a:	462b      	mov	r3, r5
 800522c:	1812      	adds	r2, r2, r0
 800522e:	eb41 0303 	adc.w	r3, r1, r3
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	00d9      	lsls	r1, r3, #3
 800523c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005240:	00d0      	lsls	r0, r2, #3
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800524a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bdb0      	pop	{r4, r5, r7, pc}

08005258 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005266:	2205      	movs	r2, #5
 8005268:	492b      	ldr	r1, [pc, #172]	; (8005318 <SYSVIEW_AddTask+0xc0>)
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	f001 fce6 	bl	8006c3c <memcmp>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04b      	beq.n	800530e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005276:	4b29      	ldr	r3, [pc, #164]	; (800531c <SYSVIEW_AddTask+0xc4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b07      	cmp	r3, #7
 800527c:	d903      	bls.n	8005286 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800527e:	4828      	ldr	r0, [pc, #160]	; (8005320 <SYSVIEW_AddTask+0xc8>)
 8005280:	f001 fc5c 	bl	8006b3c <SEGGER_SYSVIEW_Warn>
    return;
 8005284:	e044      	b.n	8005310 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005286:	4b25      	ldr	r3, [pc, #148]	; (800531c <SYSVIEW_AddTask+0xc4>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4926      	ldr	r1, [pc, #152]	; (8005324 <SYSVIEW_AddTask+0xcc>)
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800529a:	4b20      	ldr	r3, [pc, #128]	; (800531c <SYSVIEW_AddTask+0xc4>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4921      	ldr	r1, [pc, #132]	; (8005324 <SYSVIEW_AddTask+0xcc>)
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3304      	adds	r3, #4
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80052b0:	4b1a      	ldr	r3, [pc, #104]	; (800531c <SYSVIEW_AddTask+0xc4>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	491b      	ldr	r1, [pc, #108]	; (8005324 <SYSVIEW_AddTask+0xcc>)
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3308      	adds	r3, #8
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <SYSVIEW_AddTask+0xc4>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4916      	ldr	r1, [pc, #88]	; (8005324 <SYSVIEW_AddTask+0xcc>)
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	330c      	adds	r3, #12
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <SYSVIEW_AddTask+0xc4>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4910      	ldr	r1, [pc, #64]	; (8005324 <SYSVIEW_AddTask+0xcc>)
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	3310      	adds	r3, #16
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <SYSVIEW_AddTask+0xc4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <SYSVIEW_AddTask+0xc4>)
 80052fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f87e 	bl	8005408 <SYSVIEW_SendTaskInfo>
 800530c:	e000      	b.n	8005310 <SYSVIEW_AddTask+0xb8>
    return;
 800530e:	bf00      	nop

}
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	08006d18 	.word	0x08006d18
 800531c:	20012e3c 	.word	0x20012e3c
 8005320:	08006d20 	.word	0x08006d20
 8005324:	20012d9c 	.word	0x20012d9c

08005328 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005336:	2205      	movs	r2, #5
 8005338:	4930      	ldr	r1, [pc, #192]	; (80053fc <SYSVIEW_UpdateTask+0xd4>)
 800533a:	68b8      	ldr	r0, [r7, #8]
 800533c:	f001 fc7e 	bl	8006c3c <memcmp>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d056      	beq.n	80053f4 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e00d      	b.n	8005368 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 800534c:	492c      	ldr	r1, [pc, #176]	; (8005400 <SYSVIEW_UpdateTask+0xd8>)
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	429a      	cmp	r2, r3
 8005360:	d008      	beq.n	8005374 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3301      	adds	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <SYSVIEW_UpdateTask+0xdc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	429a      	cmp	r2, r3
 8005370:	d3ec      	bcc.n	800534c <SYSVIEW_UpdateTask+0x24>
 8005372:	e000      	b.n	8005376 <SYSVIEW_UpdateTask+0x4e>
      break;
 8005374:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8005376:	4b23      	ldr	r3, [pc, #140]	; (8005404 <SYSVIEW_UpdateTask+0xdc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	d230      	bcs.n	80053e2 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8005380:	491f      	ldr	r1, [pc, #124]	; (8005400 <SYSVIEW_UpdateTask+0xd8>)
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3304      	adds	r3, #4
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8005394:	491a      	ldr	r1, [pc, #104]	; (8005400 <SYSVIEW_UpdateTask+0xd8>)
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3308      	adds	r3, #8
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80053a8:	4915      	ldr	r1, [pc, #84]	; (8005400 <SYSVIEW_UpdateTask+0xd8>)
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	330c      	adds	r3, #12
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 80053bc:	4910      	ldr	r1, [pc, #64]	; (8005400 <SYSVIEW_UpdateTask+0xd8>)
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3310      	adds	r3, #16
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f814 	bl	8005408 <SYSVIEW_SendTaskInfo>
 80053e0:	e009      	b.n	80053f6 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ff33 	bl	8005258 <SYSVIEW_AddTask>
 80053f2:	e000      	b.n	80053f6 <SYSVIEW_UpdateTask+0xce>
    return;
 80053f4:	bf00      	nop
  }
}
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	08006d18 	.word	0x08006d18
 8005400:	20012d9c 	.word	0x20012d9c
 8005404:	20012e3c 	.word	0x20012e3c

08005408 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	2214      	movs	r2, #20
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fc28 	bl	8006c74 <memset>
  TaskInfo.TaskID     = TaskID;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005438:	f107 0314 	add.w	r3, r7, #20
 800543c:	4618      	mov	r0, r3
 800543e:	f000 ff87 	bl	8006350 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005442:	bf00      	nop
 8005444:	3728      	adds	r7, #40	; 0x28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005452:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <_DoInit+0x98>)
 8005454:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2203      	movs	r2, #3
 800545a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2203      	movs	r2, #3
 8005460:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <_DoInit+0x9c>)
 8005466:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a20      	ldr	r2, [pc, #128]	; (80054ec <_DoInit+0xa0>)
 800546c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005474:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <_DoInit+0x9c>)
 800548c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <_DoInit+0xa4>)
 8005492:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2210      	movs	r2, #16
 8005498:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3307      	adds	r3, #7
 80054b0:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <_DoInit+0xa8>)
 80054b2:	6810      	ldr	r0, [r2, #0]
 80054b4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054b6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <_DoInit+0xac>)
 80054be:	6810      	ldr	r0, [r2, #0]
 80054c0:	6018      	str	r0, [r3, #0]
 80054c2:	8891      	ldrh	r1, [r2, #4]
 80054c4:	7992      	ldrb	r2, [r2, #6]
 80054c6:	8099      	strh	r1, [r3, #4]
 80054c8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054ca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054d4:	f3bf 8f5f 	dmb	sy
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	200143f8 	.word	0x200143f8
 80054e8:	08006d70 	.word	0x08006d70
 80054ec:	20012e40 	.word	0x20012e40
 80054f0:	20013240 	.word	0x20013240
 80054f4:	08006d7c 	.word	0x08006d7c
 80054f8:	08006d80 	.word	0x08006d80

080054fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08c      	sub	sp, #48	; 0x30
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005508:	4b3e      	ldr	r3, [pc, #248]	; (8005604 <SEGGER_RTT_ReadNoLock+0x108>)
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <SEGGER_RTT_ReadNoLock+0x1e>
 8005516:	f7ff ff99 	bl	800544c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3360      	adds	r3, #96	; 0x60
 8005526:	4a37      	ldr	r2, [pc, #220]	; (8005604 <SEGGER_RTT_ReadNoLock+0x108>)
 8005528:	4413      	add	r3, r2
 800552a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	429a      	cmp	r2, r3
 8005546:	d92b      	bls.n	80055a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4293      	cmp	r3, r2
 8005558:	bf28      	it	cs
 800555a:	4613      	movcs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	4413      	add	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	6939      	ldr	r1, [r7, #16]
 800556c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800556e:	f001 fb73 	bl	8006c58 <memcpy>
    NumBytesRead += NumBytesRem;
 8005572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4413      	add	r3, r2
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800557a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800558a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	429a      	cmp	r2, r3
 800559a:	d101      	bne.n	80055a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800559c:	2300      	movs	r3, #0
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bf28      	it	cs
 80055b0:	4613      	movcs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d019      	beq.n	80055ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	4413      	add	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	6939      	ldr	r1, [r7, #16]
 80055c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055ca:	f001 fb45 	bl	8006c58 <memcpy>
    NumBytesRead += NumBytesRem;
 80055ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3730      	adds	r7, #48	; 0x30
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	200143f8 	.word	0x200143f8

08005608 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005616:	4b3d      	ldr	r3, [pc, #244]	; (800570c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005624:	f7ff ff12 	bl	800544c <_DoInit>
  SEGGER_RTT_LOCK();
 8005628:	f3ef 8311 	mrs	r3, BASEPRI
 800562c:	f04f 0120 	mov.w	r1, #32
 8005630:	f381 8811 	msr	BASEPRI, r1
 8005634:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005636:	4b35      	ldr	r3, [pc, #212]	; (800570c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005638:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800563e:	6939      	ldr	r1, [r7, #16]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	440b      	add	r3, r1
 800564e:	3304      	adds	r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	429a      	cmp	r2, r3
 8005664:	dbeb      	blt.n	800563e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005666:	e000      	b.n	800566a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005668:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	429a      	cmp	r2, r3
 8005672:	da3f      	bge.n	80056f4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005674:	6939      	ldr	r1, [r7, #16]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	440b      	add	r3, r1
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005688:	6939      	ldr	r1, [r7, #16]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	440b      	add	r3, r1
 8005698:	3304      	adds	r3, #4
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800569e:	6939      	ldr	r1, [r7, #16]
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	4613      	mov	r3, r2
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	440b      	add	r3, r1
 80056ac:	3320      	adds	r3, #32
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80056b2:	6939      	ldr	r1, [r7, #16]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	3328      	adds	r3, #40	; 0x28
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80056c6:	6939      	ldr	r1, [r7, #16]
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	4613      	mov	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4413      	add	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	440b      	add	r3, r1
 80056d4:	3324      	adds	r3, #36	; 0x24
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	4613      	mov	r3, r2
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	4413      	add	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	440b      	add	r3, r1
 80056e8:	332c      	adds	r3, #44	; 0x2c
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056ee:	f3bf 8f5f 	dmb	sy
 80056f2:	e002      	b.n	80056fa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005700:	69fb      	ldr	r3, [r7, #28]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200143f8 	.word	0x200143f8

08005710 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800571e:	4b33      	ldr	r3, [pc, #204]	; (80057ec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800572c:	f7ff fe8e 	bl	800544c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005730:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005732:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	461a      	mov	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4293      	cmp	r3, r2
 800573e:	d24d      	bcs.n	80057dc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005740:	f3ef 8311 	mrs	r3, BASEPRI
 8005744:	f04f 0120 	mov.w	r1, #32
 8005748:	f381 8811 	msr	BASEPRI, r1
 800574c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d031      	beq.n	80057b8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005754:	6979      	ldr	r1, [r7, #20]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	3360      	adds	r3, #96	; 0x60
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	3364      	adds	r3, #100	; 0x64
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800577c:	6979      	ldr	r1, [r7, #20]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	440b      	add	r3, r1
 800578a:	3368      	adds	r3, #104	; 0x68
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	3370      	adds	r3, #112	; 0x70
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80057a4:	6979      	ldr	r1, [r7, #20]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	336c      	adds	r3, #108	; 0x6c
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80057b8:	6979      	ldr	r1, [r7, #20]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	3374      	adds	r3, #116	; 0x74
 80057c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ca:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80057cc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e002      	b.n	80057e2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	200143f8 	.word	0x200143f8

080057f0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005800:	e002      	b.n	8005808 <_EncodeStr+0x18>
    Len++;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3301      	adds	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f6      	bne.n	8005802 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d901      	bls.n	8005820 <_EncodeStr+0x30>
    Len = Limit;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2bfe      	cmp	r3, #254	; 0xfe
 8005824:	d806      	bhi.n	8005834 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	60fa      	str	r2, [r7, #12]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e011      	b.n	8005858 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	60fa      	str	r2, [r7, #12]
 800583a:	22ff      	movs	r2, #255	; 0xff
 800583c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	60fa      	str	r2, [r7, #12]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	0a19      	lsrs	r1, r3, #8
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	60fa      	str	r2, [r7, #12]
 8005854:	b2ca      	uxtb	r2, r1
 8005856:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800585c:	e00a      	b.n	8005874 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	1c53      	adds	r3, r2, #1
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	60f9      	str	r1, [r7, #12]
 800586a:	7812      	ldrb	r2, [r2, #0]
 800586c:	701a      	strb	r2, [r3, #0]
    n++;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	3301      	adds	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	429a      	cmp	r2, r3
 800587a:	d3f0      	bcc.n	800585e <_EncodeStr+0x6e>
  }
  return pPayload;
 800587c:	68fb      	ldr	r3, [r7, #12]
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058aa:	4b36      	ldr	r3, [pc, #216]	; (8005984 <_HandleIncomingPacket+0xe0>)
 80058ac:	7e1b      	ldrb	r3, [r3, #24]
 80058ae:	4618      	mov	r0, r3
 80058b0:	1cfb      	adds	r3, r7, #3
 80058b2:	2201      	movs	r2, #1
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7ff fe21 	bl	80054fc <SEGGER_RTT_ReadNoLock>
 80058ba:	4603      	mov	r3, r0
 80058bc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dd54      	ble.n	800596e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d032      	beq.n	8005930 <_HandleIncomingPacket+0x8c>
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	dc42      	bgt.n	8005954 <_HandleIncomingPacket+0xb0>
 80058ce:	2b07      	cmp	r3, #7
 80058d0:	dc16      	bgt.n	8005900 <_HandleIncomingPacket+0x5c>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dd3e      	ble.n	8005954 <_HandleIncomingPacket+0xb0>
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d83b      	bhi.n	8005954 <_HandleIncomingPacket+0xb0>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <_HandleIncomingPacket+0x40>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005907 	.word	0x08005907
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005913 	.word	0x08005913
 80058f0:	08005919 	.word	0x08005919
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800592b 	.word	0x0800592b
 8005900:	2b7f      	cmp	r3, #127	; 0x7f
 8005902:	d036      	beq.n	8005972 <_HandleIncomingPacket+0xce>
 8005904:	e026      	b.n	8005954 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005906:	f000 fba9 	bl	800605c <SEGGER_SYSVIEW_Start>
      break;
 800590a:	e037      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800590c:	f000 fc60 	bl	80061d0 <SEGGER_SYSVIEW_Stop>
      break;
 8005910:	e034      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005912:	f000 fe39 	bl	8006588 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005916:	e031      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005918:	f000 fdfe 	bl	8006518 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800591c:	e02e      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800591e:	f000 fc7d 	bl	800621c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005922:	e02b      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005924:	f001 f8cc 	bl	8006ac0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005928:	e028      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800592a:	f001 f8ab 	bl	8006a84 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800592e:	e025      	b.n	800597c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <_HandleIncomingPacket+0xe0>)
 8005932:	7e1b      	ldrb	r3, [r3, #24]
 8005934:	4618      	mov	r0, r3
 8005936:	1cfb      	adds	r3, r7, #3
 8005938:	2201      	movs	r2, #1
 800593a:	4619      	mov	r1, r3
 800593c:	f7ff fdde 	bl	80054fc <SEGGER_RTT_ReadNoLock>
 8005940:	4603      	mov	r3, r0
 8005942:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	dd15      	ble.n	8005976 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f819 	bl	8006984 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005952:	e010      	b.n	8005976 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	b25b      	sxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	da0e      	bge.n	800597a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <_HandleIncomingPacket+0xe0>)
 800595e:	7e1b      	ldrb	r3, [r3, #24]
 8005960:	4618      	mov	r0, r3
 8005962:	1cfb      	adds	r3, r7, #3
 8005964:	2201      	movs	r2, #1
 8005966:	4619      	mov	r1, r3
 8005968:	f7ff fdc8 	bl	80054fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800596c:	e005      	b.n	800597a <_HandleIncomingPacket+0xd6>
    }
  }
 800596e:	bf00      	nop
 8005970:	e004      	b.n	800597c <_HandleIncomingPacket+0xd8>
      break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <_HandleIncomingPacket+0xd8>
      break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <_HandleIncomingPacket+0xd8>
      break;
 800597a:	bf00      	nop
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20014258 	.word	0x20014258

08005988 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	; 0x30
 800598c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800598e:	2301      	movs	r3, #1
 8005990:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005992:	1d3b      	adds	r3, r7, #4
 8005994:	3301      	adds	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599c:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a2:	e00b      	b.n	80059bc <_TrySendOverflowPacket+0x34>
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	09db      	lsrs	r3, r3, #7
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	2b7f      	cmp	r3, #127	; 0x7f
 80059c0:	d8f0      	bhi.n	80059a4 <_TrySendOverflowPacket+0x1c>
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059d2:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <_TrySendOverflowPacket+0xe0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059d8:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	e00b      	b.n	8005a04 <_TrySendOverflowPacket+0x7c>
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	1c59      	adds	r1, r3, #1
 80059f4:	6279      	str	r1, [r7, #36]	; 0x24
 80059f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	09db      	lsrs	r3, r3, #7
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b7f      	cmp	r3, #127	; 0x7f
 8005a08:	d8f0      	bhi.n	80059ec <_TrySendOverflowPacket+0x64>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a1a:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f7fa fbe0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a30:	4603      	mov	r3, r0
 8005a32:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a40:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e004      	b.n	8005a58 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a4e:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a03      	ldr	r2, [pc, #12]	; (8005a64 <_TrySendOverflowPacket+0xdc>)
 8005a56:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a58:	693b      	ldr	r3, [r7, #16]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3730      	adds	r7, #48	; 0x30
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20014258 	.word	0x20014258
 8005a68:	e0001004 	.word	0xe0001004

08005a6c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a78:	4b6c      	ldr	r3, [pc, #432]	; (8005c2c <_SendPacket+0x1c0>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d010      	beq.n	8005aa2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a80:	4b6a      	ldr	r3, [pc, #424]	; (8005c2c <_SendPacket+0x1c0>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80a3 	beq.w	8005bd0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a8a:	4b68      	ldr	r3, [pc, #416]	; (8005c2c <_SendPacket+0x1c0>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d109      	bne.n	8005aa6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a92:	f7ff ff79 	bl	8005988 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a96:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <_SendPacket+0x1c0>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	f040 809a 	bne.w	8005bd4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005aa0:	e001      	b.n	8005aa6 <_SendPacket+0x3a>
    goto Send;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <_SendPacket+0x3c>
Send:
 8005aa6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b1f      	cmp	r3, #31
 8005aac:	d809      	bhi.n	8005ac2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005aae:	4b5f      	ldr	r3, [pc, #380]	; (8005c2c <_SendPacket+0x1c0>)
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 808b 	bne.w	8005bd8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b17      	cmp	r3, #23
 8005ac6:	d807      	bhi.n	8005ad8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	e03d      	b.n	8005b54 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae4:	d912      	bls.n	8005b0c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	09da      	lsrs	r2, r3, #7
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	60fa      	str	r2, [r7, #12]
 8005b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e006      	b.n	8005b1a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1e:	d912      	bls.n	8005b46 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	09da      	lsrs	r2, r3, #7
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	3a01      	subs	r2, #1
 8005b38:	60fa      	str	r2, [r7, #12]
 8005b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e006      	b.n	8005b54 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <_SendPacket+0x1c4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b5a:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <_SendPacket+0x1c0>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	e00b      	b.n	8005b86 <_SendPacket+0x11a>
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1c59      	adds	r1, r3, #1
 8005b76:	6279      	str	r1, [r7, #36]	; 0x24
 8005b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	09db      	lsrs	r3, r3, #7
 8005b84:	623b      	str	r3, [r7, #32]
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8a:	d8f0      	bhi.n	8005b6e <_SendPacket+0x102>
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	627a      	str	r2, [r7, #36]	; 0x24
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b9c:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <_SendPacket+0x1c0>)
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	f7fa fb20 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bba:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <_SendPacket+0x1c0>)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	60d3      	str	r3, [r2, #12]
 8005bc0:	e00b      	b.n	8005bda <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <_SendPacket+0x1c0>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <_SendPacket+0x1c0>)
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e004      	b.n	8005bda <_SendPacket+0x16e>
    goto SendDone;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <_SendPacket+0x16e>
      goto SendDone;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <_SendPacket+0x16e>
      goto SendDone;
 8005bd8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <_SendPacket+0x1c0>)
 8005bdc:	7e1b      	ldrb	r3, [r3, #24]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <_SendPacket+0x1c8>)
 8005be2:	460b      	mov	r3, r1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	440b      	add	r3, r1
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	336c      	adds	r3, #108	; 0x6c
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <_SendPacket+0x1c0>)
 8005bf2:	7e1b      	ldrb	r3, [r3, #24]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	490f      	ldr	r1, [pc, #60]	; (8005c34 <_SendPacket+0x1c8>)
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4403      	add	r3, r0
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	440b      	add	r3, r1
 8005c02:	3370      	adds	r3, #112	; 0x70
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d00b      	beq.n	8005c22 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <_SendPacket+0x1c0>)
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d107      	bne.n	8005c22 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <_SendPacket+0x1c0>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c18:	f7ff fe44 	bl	80058a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <_SendPacket+0x1c0>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c22:	bf00      	nop
 8005c24:	3728      	adds	r7, #40	; 0x28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20014258 	.word	0x20014258
 8005c30:	e0001004 	.word	0xe0001004
 8005c34:	200143f8 	.word	0x200143f8

08005c38 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c46:	2300      	movs	r3, #0
 8005c48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c4c:	4918      	ldr	r1, [pc, #96]	; (8005cb0 <SEGGER_SYSVIEW_Init+0x78>)
 8005c4e:	4819      	ldr	r0, [pc, #100]	; (8005cb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c50:	f7ff fcda 	bl	8005608 <SEGGER_RTT_AllocUpBuffer>
 8005c54:	4603      	mov	r3, r0
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c5a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c5e:	785a      	ldrb	r2, [r3, #1]
 8005c60:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c62:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c64:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c66:	7e1b      	ldrb	r3, [r3, #24]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2308      	movs	r3, #8
 8005c70:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <SEGGER_SYSVIEW_Init+0x84>)
 8005c72:	4910      	ldr	r1, [pc, #64]	; (8005cb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c74:	f7ff fd4c 	bl	8005710 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c7e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <SEGGER_SYSVIEW_Init+0x88>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c86:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005c88:	4a0b      	ldr	r2, [pc, #44]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005c8e:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005c94:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005c9a:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <SEGGER_SYSVIEW_Init+0x80>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20013250 	.word	0x20013250
 8005cb4:	08006d88 	.word	0x08006d88
 8005cb8:	20014258 	.word	0x20014258
 8005cbc:	20014250 	.word	0x20014250
 8005cc0:	e0001004 	.word	0xe0001004

08005cc4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ccc:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6113      	str	r3, [r2, #16]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20014258 	.word	0x20014258

08005ce4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cec:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf0:	f04f 0120 	mov.w	r1, #32
 8005cf4:	f381 8811 	msr	BASEPRI, r1
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4808      	ldr	r0, [pc, #32]	; (8005d1c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005cfc:	f7ff fdc5 	bl	800588a <_PreparePacket>
 8005d00:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	68b8      	ldr	r0, [r7, #8]
 8005d08:	f7ff feb0 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f383 8811 	msr	BASEPRI, r3
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20014288 	.word	0x20014288

08005d20 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2e:	f04f 0120 	mov.w	r1, #32
 8005d32:	f381 8811 	msr	BASEPRI, r1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	4816      	ldr	r0, [pc, #88]	; (8005d94 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005d3a:	f7ff fda6 	bl	800588a <_PreparePacket>
 8005d3e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e00b      	b.n	8005d66 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	61f9      	str	r1, [r7, #28]
 8005d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6a:	d8f0      	bhi.n	8005d4e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	61fa      	str	r2, [r7, #28]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	6938      	ldr	r0, [r7, #16]
 8005d82:	f7ff fe73 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f383 8811 	msr	BASEPRI, r3
}
 8005d8c:	bf00      	nop
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20014288 	.word	0x20014288

08005d98 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	; 0x30
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005da4:	f3ef 8311 	mrs	r3, BASEPRI
 8005da8:	f04f 0120 	mov.w	r1, #32
 8005dac:	f381 8811 	msr	BASEPRI, r1
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	4825      	ldr	r0, [pc, #148]	; (8005e48 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005db4:	f7ff fd69 	bl	800588a <_PreparePacket>
 8005db8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc6:	e00b      	b.n	8005de0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	09db      	lsrs	r3, r3, #7
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b7f      	cmp	r3, #127	; 0x7f
 8005de4:	d8f0      	bhi.n	8005dc8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	e00b      	b.n	8005e18 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	6279      	str	r1, [r7, #36]	; 0x24
 8005e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1c:	d8f0      	bhi.n	8005e00 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	627a      	str	r2, [r7, #36]	; 0x24
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	69b8      	ldr	r0, [r7, #24]
 8005e34:	f7ff fe1a 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f383 8811 	msr	BASEPRI, r3
}
 8005e3e:	bf00      	nop
 8005e40:	3730      	adds	r7, #48	; 0x30
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20014288 	.word	0x20014288

08005e4c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e5e:	f04f 0120 	mov.w	r1, #32
 8005e62:	f381 8811 	msr	BASEPRI, r1
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	4832      	ldr	r0, [pc, #200]	; (8005f34 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005e6a:	f7ff fd0e 	bl	800588a <_PreparePacket>
 8005e6e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7c:	e00b      	b.n	8005e96 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	1c59      	adds	r1, r3, #1
 8005e86:	6379      	str	r1, [r7, #52]	; 0x34
 8005e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	09db      	lsrs	r3, r3, #7
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9a:	d8f0      	bhi.n	8005e7e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb4:	e00b      	b.n	8005ece <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	1c59      	adds	r1, r3, #1
 8005ebe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	09db      	lsrs	r3, r3, #7
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed2:	d8f0      	bhi.n	8005eb6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	623b      	str	r3, [r7, #32]
 8005eec:	e00b      	b.n	8005f06 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	09db      	lsrs	r3, r3, #7
 8005f04:	623b      	str	r3, [r7, #32]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	2b7f      	cmp	r3, #127	; 0x7f
 8005f0a:	d8f0      	bhi.n	8005eee <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	627a      	str	r2, [r7, #36]	; 0x24
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	6979      	ldr	r1, [r7, #20]
 8005f20:	69b8      	ldr	r0, [r7, #24]
 8005f22:	f7ff fda3 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f383 8811 	msr	BASEPRI, r3
}
 8005f2c:	bf00      	nop
 8005f2e:	3738      	adds	r7, #56	; 0x38
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20014288 	.word	0x20014288

08005f38 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b090      	sub	sp, #64	; 0x40
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f46:	f3ef 8311 	mrs	r3, BASEPRI
 8005f4a:	f04f 0120 	mov.w	r1, #32
 8005f4e:	f381 8811 	msr	BASEPRI, r1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	4840      	ldr	r0, [pc, #256]	; (8006058 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f56:	f7ff fc98 	bl	800588a <_PreparePacket>
 8005f5a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f68:	e00b      	b.n	8005f82 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	1c59      	adds	r1, r3, #1
 8005f72:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	09db      	lsrs	r3, r3, #7
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	2b7f      	cmp	r3, #127	; 0x7f
 8005f86:	d8f0      	bhi.n	8005f6a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa0:	e00b      	b.n	8005fba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	6379      	str	r1, [r7, #52]	; 0x34
 8005fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	09db      	lsrs	r3, r3, #7
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbe:	d8f0      	bhi.n	8005fa2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	637a      	str	r2, [r7, #52]	; 0x34
 8005fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd8:	e00b      	b.n	8005ff2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	1c59      	adds	r1, r3, #1
 8005fe2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	09db      	lsrs	r3, r3, #7
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff6:	d8f0      	bhi.n	8005fda <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	623b      	str	r3, [r7, #32]
 8006010:	e00b      	b.n	800602a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	1c59      	adds	r1, r3, #1
 800601a:	6279      	str	r1, [r7, #36]	; 0x24
 800601c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	09db      	lsrs	r3, r3, #7
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2b7f      	cmp	r3, #127	; 0x7f
 800602e:	d8f0      	bhi.n	8006012 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	627a      	str	r2, [r7, #36]	; 0x24
 8006036:	6a3a      	ldr	r2, [r7, #32]
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	69b8      	ldr	r0, [r7, #24]
 8006046:	f7ff fd11 	bl	8005a6c <_SendPacket>
  RECORD_END();
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f383 8811 	msr	BASEPRI, r3
}
 8006050:	bf00      	nop
 8006052:	3740      	adds	r7, #64	; 0x40
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20014288 	.word	0x20014288

0800605c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006062:	4b58      	ldr	r3, [pc, #352]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006068:	f3ef 8311 	mrs	r3, BASEPRI
 800606c:	f04f 0120 	mov.w	r1, #32
 8006070:	f381 8811 	msr	BASEPRI, r1
 8006074:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006076:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	220a      	movs	r2, #10
 800607c:	4952      	ldr	r1, [pc, #328]	; (80061c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa f8b6 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800608a:	200a      	movs	r0, #10
 800608c:	f7ff fe2a 	bl	8005ce4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006090:	f3ef 8311 	mrs	r3, BASEPRI
 8006094:	f04f 0120 	mov.w	r1, #32
 8006098:	f381 8811 	msr	BASEPRI, r1
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	484b      	ldr	r0, [pc, #300]	; (80061cc <SEGGER_SYSVIEW_Start+0x170>)
 80060a0:	f7ff fbf3 	bl	800588a <_PreparePacket>
 80060a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ae:	4b45      	ldr	r3, [pc, #276]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b4:	e00b      	b.n	80060ce <SEGGER_SYSVIEW_Start+0x72>
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	1c59      	adds	r1, r3, #1
 80060be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	09db      	lsrs	r3, r3, #7
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	2b7f      	cmp	r3, #127	; 0x7f
 80060d2:	d8f0      	bhi.n	80060b6 <SEGGER_SYSVIEW_Start+0x5a>
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	e00b      	b.n	8006108 <SEGGER_SYSVIEW_Start+0xac>
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	1c59      	adds	r1, r3, #1
 80060f8:	6279      	str	r1, [r7, #36]	; 0x24
 80060fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	09db      	lsrs	r3, r3, #7
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	2b7f      	cmp	r3, #127	; 0x7f
 800610c:	d8f0      	bhi.n	80060f0 <SEGGER_SYSVIEW_Start+0x94>
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	627a      	str	r2, [r7, #36]	; 0x24
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e00b      	b.n	8006142 <SEGGER_SYSVIEW_Start+0xe6>
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	1c59      	adds	r1, r3, #1
 8006132:	61f9      	str	r1, [r7, #28]
 8006134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	09db      	lsrs	r3, r3, #7
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b7f      	cmp	r3, #127	; 0x7f
 8006146:	d8f0      	bhi.n	800612a <SEGGER_SYSVIEW_Start+0xce>
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	61fa      	str	r2, [r7, #28]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	e00b      	b.n	800617a <SEGGER_SYSVIEW_Start+0x11e>
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	6179      	str	r1, [r7, #20]
 800616c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	09db      	lsrs	r3, r3, #7
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b7f      	cmp	r3, #127	; 0x7f
 800617e:	d8f0      	bhi.n	8006162 <SEGGER_SYSVIEW_Start+0x106>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	617a      	str	r2, [r7, #20]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006190:	2218      	movs	r2, #24
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fc69 	bl	8005a6c <_SendPacket>
      RECORD_END();
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <SEGGER_SYSVIEW_Start+0x168>)
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80061ae:	f000 f9eb 	bl	8006588 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80061b2:	f000 f9b1 	bl	8006518 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80061b6:	f000 fc83 	bl	8006ac0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80061ba:	bf00      	nop
 80061bc:	3730      	adds	r7, #48	; 0x30
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20014258 	.word	0x20014258
 80061c8:	08006db0 	.word	0x08006db0
 80061cc:	20014288 	.word	0x20014288

080061d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061d6:	f3ef 8311 	mrs	r3, BASEPRI
 80061da:	f04f 0120 	mov.w	r1, #32
 80061de:	f381 8811 	msr	BASEPRI, r1
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	480b      	ldr	r0, [pc, #44]	; (8006214 <SEGGER_SYSVIEW_Stop+0x44>)
 80061e6:	f7ff fb50 	bl	800588a <_PreparePacket>
 80061ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <SEGGER_SYSVIEW_Stop+0x48>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80061f4:	220b      	movs	r2, #11
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6838      	ldr	r0, [r7, #0]
 80061fa:	f7ff fc37 	bl	8005a6c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <SEGGER_SYSVIEW_Stop+0x48>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f383 8811 	msr	BASEPRI, r3
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20014288 	.word	0x20014288
 8006218:	20014258 	.word	0x20014258

0800621c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006222:	f3ef 8311 	mrs	r3, BASEPRI
 8006226:	f04f 0120 	mov.w	r1, #32
 800622a:	f381 8811 	msr	BASEPRI, r1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	4845      	ldr	r0, [pc, #276]	; (8006348 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006232:	f7ff fb2a 	bl	800588a <_PreparePacket>
 8006236:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006240:	4b42      	ldr	r3, [pc, #264]	; (800634c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	62bb      	str	r3, [r7, #40]	; 0x28
 8006246:	e00b      	b.n	8006260 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	b2da      	uxtb	r2, r3
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b7f      	cmp	r3, #127	; 0x7f
 8006264:	d8f0      	bhi.n	8006248 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800626c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
 800627a:	4b34      	ldr	r3, [pc, #208]	; (800634c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	623b      	str	r3, [r7, #32]
 8006280:	e00b      	b.n	800629a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	6279      	str	r1, [r7, #36]	; 0x24
 800628c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	09db      	lsrs	r3, r3, #7
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	2b7f      	cmp	r3, #127	; 0x7f
 800629e:	d8f0      	bhi.n	8006282 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	627a      	str	r2, [r7, #36]	; 0x24
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	4b25      	ldr	r3, [pc, #148]	; (800634c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e00b      	b.n	80062d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	1c59      	adds	r1, r3, #1
 80062c4:	61f9      	str	r1, [r7, #28]
 80062c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	09db      	lsrs	r3, r3, #7
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b7f      	cmp	r3, #127	; 0x7f
 80062d8:	d8f0      	bhi.n	80062bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	61fa      	str	r2, [r7, #28]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	e00b      	b.n	800630c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	6179      	str	r1, [r7, #20]
 80062fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	09db      	lsrs	r3, r3, #7
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b7f      	cmp	r3, #127	; 0x7f
 8006310:	d8f0      	bhi.n	80062f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	617a      	str	r2, [r7, #20]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006322:	2218      	movs	r2, #24
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	68b8      	ldr	r0, [r7, #8]
 8006328:	f7ff fba0 	bl	8005a6c <_SendPacket>
  RECORD_END();
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800633a:	4b04      	ldr	r3, [pc, #16]	; (800634c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	4798      	blx	r3
  }
}
 8006340:	bf00      	nop
 8006342:	3730      	adds	r7, #48	; 0x30
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20014288 	.word	0x20014288
 800634c:	20014258 	.word	0x20014258

08006350 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b092      	sub	sp, #72	; 0x48
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006358:	f3ef 8311 	mrs	r3, BASEPRI
 800635c:	f04f 0120 	mov.w	r1, #32
 8006360:	f381 8811 	msr	BASEPRI, r1
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	486a      	ldr	r0, [pc, #424]	; (8006510 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006368:	f7ff fa8f 	bl	800588a <_PreparePacket>
 800636c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	647b      	str	r3, [r7, #68]	; 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b66      	ldr	r3, [pc, #408]	; (8006514 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	643b      	str	r3, [r7, #64]	; 0x40
 8006382:	e00b      	b.n	800639c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	b2da      	uxtb	r2, r3
 8006388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	6479      	str	r1, [r7, #68]	; 0x44
 800638e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006398:	09db      	lsrs	r3, r3, #7
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	2b7f      	cmp	r3, #127	; 0x7f
 80063a0:	d8f0      	bhi.n	8006384 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80063a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	647a      	str	r2, [r7, #68]	; 0x44
 80063a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80063bc:	e00b      	b.n	80063d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	09db      	lsrs	r3, r3, #7
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	2b7f      	cmp	r3, #127	; 0x7f
 80063da:	d8f0      	bhi.n	80063be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	4619      	mov	r1, r3
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff f9fb 	bl	80057f0 <_EncodeStr>
 80063fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80063fc:	2209      	movs	r2, #9
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	6938      	ldr	r0, [r7, #16]
 8006402:	f7ff fb33 	bl	8005a6c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b40      	ldr	r3, [pc, #256]	; (8006514 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	633b      	str	r3, [r7, #48]	; 0x30
 800641a:	e00b      	b.n	8006434 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	b2da      	uxtb	r2, r3
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	6379      	str	r1, [r7, #52]	; 0x34
 8006426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	09db      	lsrs	r3, r3, #7
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2b7f      	cmp	r3, #127	; 0x7f
 8006438:	d8f0      	bhi.n	800641c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	637a      	str	r2, [r7, #52]	; 0x34
 8006440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
 8006454:	e00b      	b.n	800646e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	09db      	lsrs	r3, r3, #7
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	2b7f      	cmp	r3, #127	; 0x7f
 8006472:	d8f0      	bhi.n	8006456 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800647a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	623b      	str	r3, [r7, #32]
 800648e:	e00b      	b.n	80064a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	1c59      	adds	r1, r3, #1
 8006498:	6279      	str	r1, [r7, #36]	; 0x24
 800649a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	09db      	lsrs	r3, r3, #7
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	2b7f      	cmp	r3, #127	; 0x7f
 80064ac:	d8f0      	bhi.n	8006490 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	627a      	str	r2, [r7, #36]	; 0x24
 80064b4:	6a3a      	ldr	r2, [r7, #32]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	2300      	movs	r3, #0
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e00b      	b.n	80064e0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	61f9      	str	r1, [r7, #28]
 80064d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	09db      	lsrs	r3, r3, #7
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b7f      	cmp	r3, #127	; 0x7f
 80064e4:	d8f0      	bhi.n	80064c8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	61fa      	str	r2, [r7, #28]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80064f6:	2215      	movs	r2, #21
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	6938      	ldr	r0, [r7, #16]
 80064fc:	f7ff fab6 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f383 8811 	msr	BASEPRI, r3
}
 8006506:	bf00      	nop
 8006508:	3748      	adds	r7, #72	; 0x48
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20014288 	.word	0x20014288
 8006514:	20014258 	.word	0x20014258

08006518 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800651c:	4b07      	ldr	r3, [pc, #28]	; (800653c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800652e:	4b03      	ldr	r3, [pc, #12]	; (800653c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4798      	blx	r3
  }
}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20014258 	.word	0x20014258

08006540 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006548:	f3ef 8311 	mrs	r3, BASEPRI
 800654c:	f04f 0120 	mov.w	r1, #32
 8006550:	f381 8811 	msr	BASEPRI, r1
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	480b      	ldr	r0, [pc, #44]	; (8006584 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006558:	f7ff f997 	bl	800588a <_PreparePacket>
 800655c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800655e:	2280      	movs	r2, #128	; 0x80
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	6938      	ldr	r0, [r7, #16]
 8006564:	f7ff f944 	bl	80057f0 <_EncodeStr>
 8006568:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800656a:	220e      	movs	r2, #14
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	6938      	ldr	r0, [r7, #16]
 8006570:	f7ff fa7c 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f383 8811 	msr	BASEPRI, r3
}
 800657a:	bf00      	nop
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20014288 	.word	0x20014288

08006588 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800658e:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01a      	beq.n	80065cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006596:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d015      	beq.n	80065cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4798      	blx	r3
 80065a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80065ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	000a      	movs	r2, r1
 80065bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065be:	4613      	mov	r3, r2
 80065c0:	461a      	mov	r2, r3
 80065c2:	4621      	mov	r1, r4
 80065c4:	200d      	movs	r0, #13
 80065c6:	f7ff fbe7 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x2>
 80065ca:	e006      	b.n	80065da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4619      	mov	r1, r3
 80065d2:	200c      	movs	r0, #12
 80065d4:	f7ff fba4 	bl	8005d20 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd90      	pop	{r4, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20014258 	.word	0x20014258
 80065e8:	e0001004 	.word	0xe0001004

080065ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065f2:	f3ef 8311 	mrs	r3, BASEPRI
 80065f6:	f04f 0120 	mov.w	r1, #32
 80065fa:	f381 8811 	msr	BASEPRI, r1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	4819      	ldr	r0, [pc, #100]	; (8006668 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006602:	f7ff f942 	bl	800588a <_PreparePacket>
 8006606:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800660c:	4b17      	ldr	r3, [pc, #92]	; (800666c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006614:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	e00b      	b.n	8006638 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	6179      	str	r1, [r7, #20]
 800662a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	09db      	lsrs	r3, r3, #7
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b7f      	cmp	r3, #127	; 0x7f
 800663c:	d8f0      	bhi.n	8006620 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	617a      	str	r2, [r7, #20]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800664e:	2202      	movs	r2, #2
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	68b8      	ldr	r0, [r7, #8]
 8006654:	f7ff fa0a 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f383 8811 	msr	BASEPRI, r3
}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20014288 	.word	0x20014288
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006676:	f3ef 8311 	mrs	r3, BASEPRI
 800667a:	f04f 0120 	mov.w	r1, #32
 800667e:	f381 8811 	msr	BASEPRI, r1
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	4807      	ldr	r0, [pc, #28]	; (80066a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006686:	f7ff f900 	bl	800588a <_PreparePacket>
 800668a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800668c:	2203      	movs	r2, #3
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6838      	ldr	r0, [r7, #0]
 8006692:	f7ff f9eb 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f383 8811 	msr	BASEPRI, r3
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20014288 	.word	0x20014288

080066a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066ae:	f3ef 8311 	mrs	r3, BASEPRI
 80066b2:	f04f 0120 	mov.w	r1, #32
 80066b6:	f381 8811 	msr	BASEPRI, r1
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	4807      	ldr	r0, [pc, #28]	; (80066dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80066be:	f7ff f8e4 	bl	800588a <_PreparePacket>
 80066c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80066c4:	2212      	movs	r2, #18
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6838      	ldr	r0, [r7, #0]
 80066ca:	f7ff f9cf 	bl	8005a6c <_SendPacket>
  RECORD_END();
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f383 8811 	msr	BASEPRI, r3
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20014288 	.word	0x20014288

080066e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066e6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ea:	f04f 0120 	mov.w	r1, #32
 80066ee:	f381 8811 	msr	BASEPRI, r1
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	4807      	ldr	r0, [pc, #28]	; (8006714 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80066f6:	f7ff f8c8 	bl	800588a <_PreparePacket>
 80066fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80066fc:	2211      	movs	r2, #17
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6838      	ldr	r0, [r7, #0]
 8006702:	f7ff f9b3 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f383 8811 	msr	BASEPRI, r3
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20014288 	.word	0x20014288

08006718 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006720:	f3ef 8311 	mrs	r3, BASEPRI
 8006724:	f04f 0120 	mov.w	r1, #32
 8006728:	f381 8811 	msr	BASEPRI, r1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	4819      	ldr	r0, [pc, #100]	; (8006794 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006730:	f7ff f8ab 	bl	800588a <_PreparePacket>
 8006734:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800673a:	4b17      	ldr	r3, [pc, #92]	; (8006798 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	e00b      	b.n	8006766 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	1c59      	adds	r1, r3, #1
 8006756:	61f9      	str	r1, [r7, #28]
 8006758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b7f      	cmp	r3, #127	; 0x7f
 800676a:	d8f0      	bhi.n	800674e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	61fa      	str	r2, [r7, #28]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800677c:	2208      	movs	r2, #8
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	6938      	ldr	r0, [r7, #16]
 8006782:	f7ff f973 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f383 8811 	msr	BASEPRI, r3
}
 800678c:	bf00      	nop
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20014288 	.word	0x20014288
 8006798:	20014258 	.word	0x20014258

0800679c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067a4:	f3ef 8311 	mrs	r3, BASEPRI
 80067a8:	f04f 0120 	mov.w	r1, #32
 80067ac:	f381 8811 	msr	BASEPRI, r1
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	4819      	ldr	r0, [pc, #100]	; (8006818 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80067b4:	f7ff f869 	bl	800588a <_PreparePacket>
 80067b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067be:	4b17      	ldr	r3, [pc, #92]	; (800681c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e00b      	b.n	80067ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	61f9      	str	r1, [r7, #28]
 80067dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b7f      	cmp	r3, #127	; 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	61fa      	str	r2, [r7, #28]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006800:	2204      	movs	r2, #4
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	6938      	ldr	r0, [r7, #16]
 8006806:	f7ff f931 	bl	8005a6c <_SendPacket>
  RECORD_END();
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f383 8811 	msr	BASEPRI, r3
}
 8006810:	bf00      	nop
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20014288 	.word	0x20014288
 800681c:	20014258 	.word	0x20014258

08006820 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006828:	f3ef 8311 	mrs	r3, BASEPRI
 800682c:	f04f 0120 	mov.w	r1, #32
 8006830:	f381 8811 	msr	BASEPRI, r1
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	4819      	ldr	r0, [pc, #100]	; (800689c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006838:	f7ff f827 	bl	800588a <_PreparePacket>
 800683c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e00b      	b.n	800686e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	1c59      	adds	r1, r3, #1
 800685e:	61f9      	str	r1, [r7, #28]
 8006860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b7f      	cmp	r3, #127	; 0x7f
 8006872:	d8f0      	bhi.n	8006856 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	61fa      	str	r2, [r7, #28]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006884:	2206      	movs	r2, #6
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7ff f8ef 	bl	8005a6c <_SendPacket>
  RECORD_END();
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20014288 	.word	0x20014288
 80068a0:	20014258 	.word	0x20014258

080068a4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08a      	sub	sp, #40	; 0x28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ae:	f3ef 8311 	mrs	r3, BASEPRI
 80068b2:	f04f 0120 	mov.w	r1, #32
 80068b6:	f381 8811 	msr	BASEPRI, r1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	4827      	ldr	r0, [pc, #156]	; (800695c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80068be:	f7fe ffe4 	bl	800588a <_PreparePacket>
 80068c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068c8:	4b25      	ldr	r3, [pc, #148]	; (8006960 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	e00b      	b.n	80068f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1c59      	adds	r1, r3, #1
 80068e4:	6279      	str	r1, [r7, #36]	; 0x24
 80068e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	09db      	lsrs	r3, r3, #7
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	2b7f      	cmp	r3, #127	; 0x7f
 80068f8:	d8f0      	bhi.n	80068dc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	e00b      	b.n	800692c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	61f9      	str	r1, [r7, #28]
 800691e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b7f      	cmp	r3, #127	; 0x7f
 8006930:	d8f0      	bhi.n	8006914 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	61fa      	str	r2, [r7, #28]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006942:	2207      	movs	r2, #7
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	6938      	ldr	r0, [r7, #16]
 8006948:	f7ff f890 	bl	8005a6c <_SendPacket>
  RECORD_END();
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f383 8811 	msr	BASEPRI, r3
}
 8006952:	bf00      	nop
 8006954:	3728      	adds	r7, #40	; 0x28
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20014288 	.word	0x20014288
 8006960:	20014258 	.word	0x20014258

08006964 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	1ad3      	subs	r3, r2, r3
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20014258 	.word	0x20014258

08006984 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b08c      	sub	sp, #48	; 0x30
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800698e:	4b3b      	ldr	r3, [pc, #236]	; (8006a7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d06d      	beq.n	8006a72 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800699c:	2300      	movs	r3, #0
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a0:	e008      	b.n	80069b4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	3301      	adds	r3, #1
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3f2      	bcc.n	80069a2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80069bc:	e000      	b.n	80069c0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069be:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d055      	beq.n	8006a72 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069c6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ca:	f04f 0120 	mov.w	r1, #32
 80069ce:	f381 8811 	msr	BASEPRI, r1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	482a      	ldr	r0, [pc, #168]	; (8006a80 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80069d6:	f7fe ff58 	bl	800588a <_PreparePacket>
 80069da:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_SendModule+0x7e>
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	6279      	str	r1, [r7, #36]	; 0x24
 80069f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	2b7f      	cmp	r3, #127	; 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_SendModule+0x66>
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a0e:	6a3a      	ldr	r2, [r7, #32]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	e00b      	b.n	8006a3c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	61f9      	str	r1, [r7, #28]
 8006a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	09db      	lsrs	r3, r3, #7
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a40:	d8f0      	bhi.n	8006a24 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	61fa      	str	r2, [r7, #28]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7fe fec8 	bl	80057f0 <_EncodeStr>
 8006a60:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a62:	2216      	movs	r2, #22
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	6938      	ldr	r0, [r7, #16]
 8006a68:	f7ff f800 	bl	8005a6c <_SendPacket>
      RECORD_END();
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006a72:	bf00      	nop
 8006a74:	3730      	adds	r7, #48	; 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20014280 	.word	0x20014280
 8006a80:	20014288 	.word	0x20014288

08006a84 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00f      	beq.n	8006ab2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f2      	bne.n	8006a98 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20014280 	.word	0x20014280

08006ac0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aca:	f04f 0120 	mov.w	r1, #32
 8006ace:	f381 8811 	msr	BASEPRI, r1
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	4817      	ldr	r0, [pc, #92]	; (8006b34 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ad6:	f7fe fed8 	bl	800588a <_PreparePacket>
 8006ada:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	e00b      	b.n	8006b04 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	6179      	str	r1, [r7, #20]
 8006af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	09db      	lsrs	r3, r3, #7
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b7f      	cmp	r3, #127	; 0x7f
 8006b08:	d8f0      	bhi.n	8006aec <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	617a      	str	r2, [r7, #20]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b1a:	221b      	movs	r2, #27
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	68b8      	ldr	r0, [r7, #8]
 8006b20:	f7fe ffa4 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f383 8811 	msr	BASEPRI, r3
}
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20014288 	.word	0x20014288
 8006b38:	20014284 	.word	0x20014284

08006b3c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b44:	f3ef 8311 	mrs	r3, BASEPRI
 8006b48:	f04f 0120 	mov.w	r1, #32
 8006b4c:	f381 8811 	msr	BASEPRI, r1
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	4827      	ldr	r0, [pc, #156]	; (8006bf0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b54:	f7fe fe99 	bl	800588a <_PreparePacket>
 8006b58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	6938      	ldr	r0, [r7, #16]
 8006b60:	f7fe fe46 	bl	80057f0 <_EncodeStr>
 8006b64:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	e00b      	b.n	8006b88 <SEGGER_SYSVIEW_Warn+0x4c>
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	6279      	str	r1, [r7, #36]	; 0x24
 8006b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	09db      	lsrs	r3, r3, #7
 8006b86:	623b      	str	r3, [r7, #32]
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8c:	d8f0      	bhi.n	8006b70 <SEGGER_SYSVIEW_Warn+0x34>
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	627a      	str	r2, [r7, #36]	; 0x24
 8006b94:	6a3a      	ldr	r2, [r7, #32]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e00b      	b.n	8006bc0 <SEGGER_SYSVIEW_Warn+0x84>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	61f9      	str	r1, [r7, #28]
 8006bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	09db      	lsrs	r3, r3, #7
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc4:	d8f0      	bhi.n	8006ba8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	61fa      	str	r2, [r7, #28]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006bd6:	221a      	movs	r2, #26
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f7fe ff46 	bl	8005a6c <_SendPacket>
  RECORD_END();
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f383 8811 	msr	BASEPRI, r3
}
 8006be6:	bf00      	nop
 8006be8:	3728      	adds	r7, #40	; 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20014288 	.word	0x20014288

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	; (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	; (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1b64      	subs	r4, r4, r5
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	; (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	; (8006c38 <__libc_init_array+0x44>)
 8006c08:	f000 f83c 	bl	8006c84 <_init>
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2600      	movs	r6, #0
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08006dc4 	.word	0x08006dc4
 8006c30:	08006dc4 	.word	0x08006dc4
 8006c34:	08006dc4 	.word	0x08006dc4
 8006c38:	08006dc8 	.word	0x08006dc8

08006c3c <memcmp>:
 8006c3c:	b530      	push	{r4, r5, lr}
 8006c3e:	3901      	subs	r1, #1
 8006c40:	2400      	movs	r4, #0
 8006c42:	42a2      	cmp	r2, r4
 8006c44:	d101      	bne.n	8006c4a <memcmp+0xe>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e005      	b.n	8006c56 <memcmp+0x1a>
 8006c4a:	5d03      	ldrb	r3, [r0, r4]
 8006c4c:	3401      	adds	r4, #1
 8006c4e:	5d0d      	ldrb	r5, [r1, r4]
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	d0f6      	beq.n	8006c42 <memcmp+0x6>
 8006c54:	1b58      	subs	r0, r3, r5
 8006c56:	bd30      	pop	{r4, r5, pc}

08006c58 <memcpy>:
 8006c58:	440a      	add	r2, r1
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c60:	d100      	bne.n	8006c64 <memcpy+0xc>
 8006c62:	4770      	bx	lr
 8006c64:	b510      	push	{r4, lr}
 8006c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	d1f9      	bne.n	8006c66 <memcpy+0xe>
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
