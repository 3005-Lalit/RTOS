
STM32_FreeRTOS_Bin_Sema_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008024  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c0  080084c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c8  080084c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080084d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000144a8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014520  20014520  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a837  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d3  00000000  00000000  0003a8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0003dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ade  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013430  00000000  00000000  00066b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3c6a  00000000  00000000  00079fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015dc28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff8  00000000  00000000  0015dc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080081bc 	.word	0x080081bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080081bc 	.word	0x080081bc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20014468 	.word	0x20014468
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b96e 	b.w	8000624 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468c      	mov	ip, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8083 	bne.w	8000476 <__udivmoddi4+0x116>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d947      	bls.n	8000406 <__udivmoddi4+0xa6>
 8000376:	fab2 f282 	clz	r2, r2
 800037a:	b142      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037c:	f1c2 0020 	rsb	r0, r2, #32
 8000380:	fa24 f000 	lsr.w	r0, r4, r0
 8000384:	4091      	lsls	r1, r2
 8000386:	4097      	lsls	r7, r2
 8000388:	ea40 0c01 	orr.w	ip, r0, r1
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbbc f6f8 	udiv	r6, ip, r8
 8000398:	fa1f fe87 	uxth.w	lr, r7
 800039c:	fb08 c116 	mls	r1, r8, r6, ip
 80003a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a4:	fb06 f10e 	mul.w	r1, r6, lr
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b2:	f080 8119 	bcs.w	80005e8 <__udivmoddi4+0x288>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8116 	bls.w	80005e8 <__udivmoddi4+0x288>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8105 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f240 8102 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003e8:	3802      	subs	r0, #2
 80003ea:	443c      	add	r4, r7
 80003ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	2600      	movs	r6, #0
 80003f6:	b11d      	cbz	r5, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000400:	4631      	mov	r1, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	b902      	cbnz	r2, 800040a <__udivmoddi4+0xaa>
 8000408:	deff      	udf	#255	; 0xff
 800040a:	fab2 f282 	clz	r2, r2
 800040e:	2a00      	cmp	r2, #0
 8000410:	d150      	bne.n	80004b4 <__udivmoddi4+0x154>
 8000412:	1bcb      	subs	r3, r1, r7
 8000414:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000418:	fa1f f887 	uxth.w	r8, r7
 800041c:	2601      	movs	r6, #1
 800041e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000422:	0c21      	lsrs	r1, r4, #16
 8000424:	fb0e 331c 	mls	r3, lr, ip, r3
 8000428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042c:	fb08 f30c 	mul.w	r3, r8, ip
 8000430:	428b      	cmp	r3, r1
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000434:	1879      	adds	r1, r7, r1
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0xe2>
 800043c:	428b      	cmp	r3, r1
 800043e:	f200 80e9 	bhi.w	8000614 <__udivmoddi4+0x2b4>
 8000442:	4684      	mov	ip, r0
 8000444:	1ac9      	subs	r1, r1, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000450:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x10c>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x10a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80d9 	bhi.w	800061c <__udivmoddi4+0x2bc>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e7bf      	b.n	80003f6 <__udivmoddi4+0x96>
 8000476:	428b      	cmp	r3, r1
 8000478:	d909      	bls.n	800048e <__udivmoddi4+0x12e>
 800047a:	2d00      	cmp	r5, #0
 800047c:	f000 80b1 	beq.w	80005e2 <__udivmoddi4+0x282>
 8000480:	2600      	movs	r6, #0
 8000482:	e9c5 0100 	strd	r0, r1, [r5]
 8000486:	4630      	mov	r0, r6
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	fab3 f683 	clz	r6, r3
 8000492:	2e00      	cmp	r6, #0
 8000494:	d14a      	bne.n	800052c <__udivmoddi4+0x1cc>
 8000496:	428b      	cmp	r3, r1
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x140>
 800049a:	4282      	cmp	r2, r0
 800049c:	f200 80b8 	bhi.w	8000610 <__udivmoddi4+0x2b0>
 80004a0:	1a84      	subs	r4, r0, r2
 80004a2:	eb61 0103 	sbc.w	r1, r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	468c      	mov	ip, r1
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d0a8      	beq.n	8000400 <__udivmoddi4+0xa0>
 80004ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80004b2:	e7a5      	b.n	8000400 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f603 	lsr.w	r6, r0, r3
 80004bc:	4097      	lsls	r7, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c6:	40d9      	lsrs	r1, r3
 80004c8:	4330      	orrs	r0, r6
 80004ca:	0c03      	lsrs	r3, r0, #16
 80004cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004d0:	fa1f f887 	uxth.w	r8, r7
 80004d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004dc:	fb06 f108 	mul.w	r1, r6, r8
 80004e0:	4299      	cmp	r1, r3
 80004e2:	fa04 f402 	lsl.w	r4, r4, r2
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x19c>
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ee:	f080 808d 	bcs.w	800060c <__udivmoddi4+0x2ac>
 80004f2:	4299      	cmp	r1, r3
 80004f4:	f240 808a 	bls.w	800060c <__udivmoddi4+0x2ac>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	443b      	add	r3, r7
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b281      	uxth	r1, r0
 8000500:	fbb3 f0fe 	udiv	r0, r3, lr
 8000504:	fb0e 3310 	mls	r3, lr, r0, r3
 8000508:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050c:	fb00 f308 	mul.w	r3, r0, r8
 8000510:	428b      	cmp	r3, r1
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x1c4>
 8000514:	1879      	adds	r1, r7, r1
 8000516:	f100 3cff 	add.w	ip, r0, #4294967295
 800051a:	d273      	bcs.n	8000604 <__udivmoddi4+0x2a4>
 800051c:	428b      	cmp	r3, r1
 800051e:	d971      	bls.n	8000604 <__udivmoddi4+0x2a4>
 8000520:	3802      	subs	r0, #2
 8000522:	4439      	add	r1, r7
 8000524:	1acb      	subs	r3, r1, r3
 8000526:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800052a:	e778      	b.n	800041e <__udivmoddi4+0xbe>
 800052c:	f1c6 0c20 	rsb	ip, r6, #32
 8000530:	fa03 f406 	lsl.w	r4, r3, r6
 8000534:	fa22 f30c 	lsr.w	r3, r2, ip
 8000538:	431c      	orrs	r4, r3
 800053a:	fa20 f70c 	lsr.w	r7, r0, ip
 800053e:	fa01 f306 	lsl.w	r3, r1, r6
 8000542:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000546:	fa21 f10c 	lsr.w	r1, r1, ip
 800054a:	431f      	orrs	r7, r3
 800054c:	0c3b      	lsrs	r3, r7, #16
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fa1f f884 	uxth.w	r8, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800055e:	fb09 fa08 	mul.w	sl, r9, r8
 8000562:	458a      	cmp	sl, r1
 8000564:	fa02 f206 	lsl.w	r2, r2, r6
 8000568:	fa00 f306 	lsl.w	r3, r0, r6
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x220>
 800056e:	1861      	adds	r1, r4, r1
 8000570:	f109 30ff 	add.w	r0, r9, #4294967295
 8000574:	d248      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 8000576:	458a      	cmp	sl, r1
 8000578:	d946      	bls.n	8000608 <__udivmoddi4+0x2a8>
 800057a:	f1a9 0902 	sub.w	r9, r9, #2
 800057e:	4421      	add	r1, r4
 8000580:	eba1 010a 	sub.w	r1, r1, sl
 8000584:	b2bf      	uxth	r7, r7
 8000586:	fbb1 f0fe 	udiv	r0, r1, lr
 800058a:	fb0e 1110 	mls	r1, lr, r0, r1
 800058e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000592:	fb00 f808 	mul.w	r8, r0, r8
 8000596:	45b8      	cmp	r8, r7
 8000598:	d907      	bls.n	80005aa <__udivmoddi4+0x24a>
 800059a:	19e7      	adds	r7, r4, r7
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295
 80005a0:	d22e      	bcs.n	8000600 <__udivmoddi4+0x2a0>
 80005a2:	45b8      	cmp	r8, r7
 80005a4:	d92c      	bls.n	8000600 <__udivmoddi4+0x2a0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4427      	add	r7, r4
 80005aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ae:	eba7 0708 	sub.w	r7, r7, r8
 80005b2:	fba0 8902 	umull	r8, r9, r0, r2
 80005b6:	454f      	cmp	r7, r9
 80005b8:	46c6      	mov	lr, r8
 80005ba:	4649      	mov	r1, r9
 80005bc:	d31a      	bcc.n	80005f4 <__udivmoddi4+0x294>
 80005be:	d017      	beq.n	80005f0 <__udivmoddi4+0x290>
 80005c0:	b15d      	cbz	r5, 80005da <__udivmoddi4+0x27a>
 80005c2:	ebb3 020e 	subs.w	r2, r3, lr
 80005c6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ce:	40f2      	lsrs	r2, r6
 80005d0:	ea4c 0202 	orr.w	r2, ip, r2
 80005d4:	40f7      	lsrs	r7, r6
 80005d6:	e9c5 2700 	strd	r2, r7, [r5]
 80005da:	2600      	movs	r6, #0
 80005dc:	4631      	mov	r1, r6
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e70b      	b.n	8000400 <__udivmoddi4+0xa0>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0x60>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6fd      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f0:	4543      	cmp	r3, r8
 80005f2:	d2e5      	bcs.n	80005c0 <__udivmoddi4+0x260>
 80005f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f8:	eb69 0104 	sbc.w	r1, r9, r4
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7df      	b.n	80005c0 <__udivmoddi4+0x260>
 8000600:	4608      	mov	r0, r1
 8000602:	e7d2      	b.n	80005aa <__udivmoddi4+0x24a>
 8000604:	4660      	mov	r0, ip
 8000606:	e78d      	b.n	8000524 <__udivmoddi4+0x1c4>
 8000608:	4681      	mov	r9, r0
 800060a:	e7b9      	b.n	8000580 <__udivmoddi4+0x220>
 800060c:	4666      	mov	r6, ip
 800060e:	e775      	b.n	80004fc <__udivmoddi4+0x19c>
 8000610:	4630      	mov	r0, r6
 8000612:	e74a      	b.n	80004aa <__udivmoddi4+0x14a>
 8000614:	f1ac 0c02 	sub.w	ip, ip, #2
 8000618:	4439      	add	r1, r7
 800061a:	e713      	b.n	8000444 <__udivmoddi4+0xe4>
 800061c:	3802      	subs	r0, #2
 800061e:	443c      	add	r4, r7
 8000620:	e724      	b.n	800046c <__udivmoddi4+0x10c>
 8000622:	bf00      	nop

08000624 <__aeabi_idiv0>:
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fd5f 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f863 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8f7 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f8cb 	bl	80007d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //this is here to collect segger event time stamp
  	DWT->CTRL |= (1 << 0);//Enable CYCCNT in DWT_CTRL.
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <main+0xb0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <main+0xb0>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]

  //Start Recording
  	SEGGER_SYSVIEW_Conf();
 800064a:	f005 fa4b 	bl	8005ae4 <SEGGER_SYSVIEW_Conf>
  	SEGGER_SYSVIEW_Start();
 800064e:	f006 f943 	bl	80068d8 <SEGGER_SYSVIEW_Start>

  //	sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
  //	printmsg(usr_msg);

  	printf("Demo of Binary semaphore usage between 2 Tasks \r\n");
 8000652:	4822      	ldr	r0, [pc, #136]	; (80006dc <main+0xb4>)
 8000654:	f006 fdbc 	bl	80071d0 <puts>

    /* Before a semaphore is used it must be explicitly created.
     * In this example a binary semaphore is created . */
    vSemaphoreCreateBinary( xWork );
 8000658:	2203      	movs	r2, #3
 800065a:	2100      	movs	r1, #0
 800065c:	2001      	movs	r0, #1
 800065e:	f002 fd07 	bl	8003070 <xQueueGenericCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <main+0xb8>)
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <main+0xb8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <main+0x56>
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <main+0xb8>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fd7b 	bl	8003174 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 800067e:	2200      	movs	r2, #0
 8000680:	2104      	movs	r1, #4
 8000682:	2001      	movs	r0, #1
 8000684:	f002 fcf4 	bl	8003070 <xQueueGenericCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <main+0xbc>)
 800068c:	6013      	str	r3, [r2, #0]

    /* Check the semaphore and queue was created successfully. */
    if( (xWork != NULL) && (xWorkQueue != NULL) )
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <main+0xb8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01b      	beq.n	80006ce <main+0xa6>
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <main+0xbc>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d017      	beq.n	80006ce <main+0xa6>
    {

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
        xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 800069e:	2300      	movs	r3, #0
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2303      	movs	r3, #3
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ac:	490e      	ldr	r1, [pc, #56]	; (80006e8 <main+0xc0>)
 80006ae:	480f      	ldr	r0, [pc, #60]	; (80006ec <main+0xc4>)
 80006b0:	f003 fa7a 	bl	8003ba8 <xTaskCreate>

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006c2:	490b      	ldr	r1, [pc, #44]	; (80006f0 <main+0xc8>)
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <main+0xcc>)
 80006c6:	f003 fa6f 	bl	8003ba8 <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 80006ca:	f003 fbe7 	bl	8003e9c <vTaskStartScheduler>
    }

    //sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
    //printmsg(usr_msg);
    printf("Queue/Sema create failed.. \r\n");
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <main+0xd0>)
 80006d0:	f006 fd7e 	bl	80071d0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0xac>
 80006d6:	bf00      	nop
 80006d8:	e0001000 	.word	0xe0001000
 80006dc:	080081d4 	.word	0x080081d4
 80006e0:	200143dc 	.word	0x200143dc
 80006e4:	200143d8 	.word	0x200143d8
 80006e8:	08008208 	.word	0x08008208
 80006ec:	08000d01 	.word	0x08000d01
 80006f0:	08008210 	.word	0x08008210
 80006f4:	08000d9d 	.word	0x08000d9d
 80006f8:	0800821c 	.word	0x0800821c

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 fcd2 	bl	80070b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <SystemClock_Config+0xd0>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd4>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000774:	2332      	movs	r3, #50	; 0x32
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000778:	2304      	movs	r3, #4
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077c:	2307      	movs	r3, #7
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f001 f87b 	bl	8001880 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 fb2a 	bl	8000de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fadc 	bl	8001d70 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007be:	f000 fb13 	bl	8000de8 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f001 fcac 	bl	8002168 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 fae7 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200143e0 	.word	0x200143e0
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	4bb2      	ldr	r3, [pc, #712]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4ab1      	ldr	r2, [pc, #708]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4baf      	ldr	r3, [pc, #700]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	623b      	str	r3, [r7, #32]
 8000858:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	4bab      	ldr	r3, [pc, #684]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4aaa      	ldr	r2, [pc, #680]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4ba8      	ldr	r3, [pc, #672]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4ba4      	ldr	r3, [pc, #656]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4aa3      	ldr	r2, [pc, #652]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4ba1      	ldr	r3, [pc, #644]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b9d      	ldr	r3, [pc, #628]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a9c      	ldr	r2, [pc, #624]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b9a      	ldr	r3, [pc, #616]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b96      	ldr	r3, [pc, #600]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a95      	ldr	r2, [pc, #596]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b93      	ldr	r3, [pc, #588]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b8f      	ldr	r3, [pc, #572]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a8e      	ldr	r2, [pc, #568]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b8c      	ldr	r3, [pc, #560]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b88      	ldr	r3, [pc, #544]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a87      	ldr	r2, [pc, #540]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b85      	ldr	r3, [pc, #532]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b81      	ldr	r3, [pc, #516]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a80      	ldr	r2, [pc, #512]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <MX_GPIO_Init+0x2e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2116      	movs	r1, #22
 8000922:	487b      	ldr	r0, [pc, #492]	; (8000b10 <MX_GPIO_Init+0x2e8>)
 8000924:	f000 ff92 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	4879      	ldr	r0, [pc, #484]	; (8000b14 <MX_GPIO_Init+0x2ec>)
 800092e:	f000 ff8d 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000938:	4877      	ldr	r0, [pc, #476]	; (8000b18 <MX_GPIO_Init+0x2f0>)
 800093a:	f000 ff87 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000944:	4875      	ldr	r0, [pc, #468]	; (8000b1c <MX_GPIO_Init+0x2f4>)
 8000946:	f000 ff81 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800094a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800095c:	230c      	movs	r3, #12
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	486e      	ldr	r0, [pc, #440]	; (8000b20 <MX_GPIO_Init+0x2f8>)
 8000968:	f000 fdc4 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800096c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800097e:	2305      	movs	r3, #5
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4865      	ldr	r0, [pc, #404]	; (8000b20 <MX_GPIO_Init+0x2f8>)
 800098a:	f000 fdb3 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009a0:	230e      	movs	r3, #14
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	485d      	ldr	r0, [pc, #372]	; (8000b20 <MX_GPIO_Init+0x2f8>)
 80009ac:	f000 fda2 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c0:	230c      	movs	r3, #12
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4851      	ldr	r0, [pc, #324]	; (8000b10 <MX_GPIO_Init+0x2e8>)
 80009cc:	f000 fd92 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009d0:	2316      	movs	r3, #22
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	484a      	ldr	r0, [pc, #296]	; (8000b10 <MX_GPIO_Init+0x2e8>)
 80009e8:	f000 fd84 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009ec:	f248 0307 	movw	r3, #32775	; 0x8007
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4844      	ldr	r0, [pc, #272]	; (8000b14 <MX_GPIO_Init+0x2ec>)
 8000a04:	f000 fd76 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000a08:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a1a:	230e      	movs	r3, #14
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	483b      	ldr	r0, [pc, #236]	; (8000b14 <MX_GPIO_Init+0x2ec>)
 8000a26:	f000 fd65 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4834      	ldr	r0, [pc, #208]	; (8000b14 <MX_GPIO_Init+0x2ec>)
 8000a42:	f000 fd57 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	482d      	ldr	r0, [pc, #180]	; (8000b10 <MX_GPIO_Init+0x2e8>)
 8000a5c:	f000 fd4a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a60:	2303      	movs	r3, #3
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a70:	2309      	movs	r3, #9
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482a      	ldr	r0, [pc, #168]	; (8000b24 <MX_GPIO_Init+0x2fc>)
 8000a7c:	f000 fd3a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a80:	2304      	movs	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4824      	ldr	r0, [pc, #144]	; (8000b24 <MX_GPIO_Init+0x2fc>)
 8000a94:	f000 fd2e 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a98:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0x2f4>)
 8000ab6:	f000 fd1d 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000aba:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4814      	ldr	r0, [pc, #80]	; (8000b28 <MX_GPIO_Init+0x300>)
 8000ad8:	f000 fd0c 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000adc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aee:	230e      	movs	r3, #14
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <MX_GPIO_Init+0x2fc>)
 8000afa:	f000 fcfb 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000afe:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b08:	e010      	b.n	8000b2c <MX_GPIO_Init+0x304>
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40021800 	.word	0x40021800
 8000b20:	40021400 	.word	0x40021400
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b34:	230c      	movs	r3, #12
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	486b      	ldr	r0, [pc, #428]	; (8000cec <MX_GPIO_Init+0x4c4>)
 8000b40:	f000 fcd8 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4864      	ldr	r0, [pc, #400]	; (8000cec <MX_GPIO_Init+0x4c4>)
 8000b5a:	f000 fccb 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b70:	230c      	movs	r3, #12
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	485d      	ldr	r0, [pc, #372]	; (8000cf0 <MX_GPIO_Init+0x4c8>)
 8000b7c:	f000 fcba 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4856      	ldr	r0, [pc, #344]	; (8000cf0 <MX_GPIO_Init+0x4c8>)
 8000b96:	f000 fcad 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <MX_GPIO_Init+0x4c8>)
 8000bb4:	f000 fc9e 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000bb8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bca:	230e      	movs	r3, #14
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4847      	ldr	r0, [pc, #284]	; (8000cf4 <MX_GPIO_Init+0x4cc>)
 8000bd6:	f000 fc8d 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000bda:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bec:	230e      	movs	r3, #14
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x4d0>)
 8000bf8:	f000 fc7c 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c02:	2312      	movs	r3, #18
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4837      	ldr	r0, [pc, #220]	; (8000cf8 <MX_GPIO_Init+0x4d0>)
 8000c1a:	f000 fc6b 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c30:	2304      	movs	r3, #4
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4830      	ldr	r0, [pc, #192]	; (8000cfc <MX_GPIO_Init+0x4d4>)
 8000c3c:	f000 fc5a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c52:	2307      	movs	r3, #7
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4827      	ldr	r0, [pc, #156]	; (8000cfc <MX_GPIO_Init+0x4d4>)
 8000c5e:	f000 fc49 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8000c62:	2308      	movs	r3, #8
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c72:	230e      	movs	r3, #14
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0x4c8>)
 8000c7e:	f000 fc39 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c94:	2309      	movs	r3, #9
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <MX_GPIO_Init+0x4cc>)
 8000ca0:	f000 fc28 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ca4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_GPIO_Init+0x4cc>)
 8000cbe:	f000 fc19 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000cc2:	2360      	movs	r3, #96	; 0x60
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_GPIO_Init+0x4c4>)
 8000cde:	f000 fc09 	bl	80014f4 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	40021800 	.word	0x40021800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <vManagerTask>:

/* USER CODE BEGIN 4 */
void vManagerTask( void *pvParameters )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

    /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
    xSemaphoreGive( xWork);
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <vManagerTask+0x64>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	f002 fa2f 	bl	8003174 <xQueueGenericSend>

    for( ;; )
    {
        /* get a work ticket id(some random number) */
        xWorkTicketId = ( rand() & 0x1FF );
 8000d16:	f006 fa63 	bl	80071e0 <rand>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d20:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <vManagerTask+0x68>)
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	f107 0108 	add.w	r1, r7, #8
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	f002 fa20 	bl	8003174 <xQueueGenericSend>
 8000d34:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d003      	beq.n	8000d44 <vManagerTask+0x44>
		{
			//sprintf(usr_msg,"Could not send to the queue.\r\n");
		   // printmsg(usr_msg);
		    printf("Could not send to the queue.\r\n");
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <vManagerTask+0x6c>)
 8000d3e:	f006 fa47 	bl	80071d0 <puts>
 8000d42:	e7e8      	b.n	8000d16 <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <vManagerTask+0x64>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f002 fa11 	bl	8003174 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <vManagerTask+0x70>)
 8000d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	f3bf 8f6f 	isb	sy
        xWorkTicketId = ( rand() & 0x1FF );
 8000d62:	e7d8      	b.n	8000d16 <vManagerTask+0x16>
 8000d64:	200143dc 	.word	0x200143dc
 8000d68:	200143d8 	.word	0x200143d8
 8000d6c:	0800823c 	.word	0x0800823c
 8000d70:	e000ed04 	.word	0xe000ed04

08000d74 <EmployeeDoWork>:
}

/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	//sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
	//printmsg(usr_msg);
	printf("Employee task : Working on Ticked id : %d\r\n",TicketId);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <EmployeeDoWork+0x24>)
 8000d84:	f006 f99e 	bl	80070c4 <iprintf>
	vTaskDelay(TicketId);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 f852 	bl	8003e34 <vTaskDelay>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	0800825c 	.word	0x0800825c

08000d9c <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <vEmployeeTask+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fc6a 	bl	8003684 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <vEmployeeTask+0x44>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f107 010b 	add.w	r1, r7, #11
 8000db8:	2200      	movs	r2, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fb82 	bl	80034c4 <xQueueReceive>
 8000dc0:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d104      	bne.n	8000dd2 <vEmployeeTask+0x36>
		{
			/* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffd2 	bl	8000d74 <EmployeeDoWork>
 8000dd0:	e7e8      	b.n	8000da4 <vEmployeeTask+0x8>
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			//sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
			//printmsg(usr_msg);
			printf("Employee task : Queue is empty , nothing to do.\r\n");
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <vEmployeeTask+0x48>)
 8000dd4:	f006 f9fc 	bl	80071d0 <puts>
		xSemaphoreTake( xWork, 0 );
 8000dd8:	e7e4      	b.n	8000da4 <vEmployeeTask+0x8>
 8000dda:	bf00      	nop
 8000ddc:	200143dc 	.word	0x200143dc
 8000de0:	200143d8 	.word	0x200143d8
 8000de4:	08008288 	.word	0x08008288

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000e32:	f004 faa9 	bl	8005388 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_UART_MspInit+0x94>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d133      	bne.n	8000ece <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e9e:	2360      	movs	r3, #96	; 0x60
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000eba:	f000 fb1b 	bl	80014f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2106      	movs	r1, #6
 8000ec2:	2026      	movs	r0, #38	; 0x26
 8000ec4:	f000 fa4d 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec8:	2026      	movs	r0, #38	; 0x26
 8000eca:	f000 fa66 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <USART2_IRQHandler+0x10>)
 8000f16:	f001 f975 	bl	8002204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200143e0 	.word	0x200143e0

08000f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_kill>:

int _kill(int pid, int sig)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f3e:	f006 f881 	bl	8007044 <__errno>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2216      	movs	r2, #22
 8000f46:	601a      	str	r2, [r3, #0]
	return -1;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_exit>:

void _exit (int status)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffe7 	bl	8000f34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f66:	e7fe      	b.n	8000f66 <_exit+0x12>

08000f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
	}

return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fca:	605a      	str	r2, [r3, #4]
	return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_isatty>:

int _isatty(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f006 f802 	bl	8007044 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20030000 	.word	0x20030000
 800106c:	00000400 	.word	0x00000400
 8001070:	20000094 	.word	0x20000094
 8001074:	20014520 	.word	0x20014520

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c6:	f7ff ffd7 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f005 ffc1 	bl	8007050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff faab 	bl	8000628 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010e0:	080084d0 	.word	0x080084d0
  ldr r2, =_sbss
 80010e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010e8:	20014520 	.word	0x20014520

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f917 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fe66 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f92f 	bl	80013b6 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f8f7 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20014424 	.word	0x20014424

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff feda 	bl	8001194 <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d008      	beq.n	8001400 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e052      	b.n	80014a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0216 	bic.w	r2, r2, #22
 800140e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800141e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <HAL_DMA_Abort+0x62>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0208 	bic.w	r2, r2, #8
 800143e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001450:	e013      	b.n	800147a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001452:	f7ff fe9f 	bl	8001194 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b05      	cmp	r3, #5
 800145e:	d90c      	bls.n	800147a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e015      	b.n	80014a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e4      	bne.n	8001452 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	223f      	movs	r2, #63	; 0x3f
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d004      	beq.n	80014cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e00c      	b.n	80014e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2205      	movs	r2, #5
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e177      	b.n	8001800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8166 	bne.w	80017fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80c0 	beq.w	80017fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_GPIO_Init+0x324>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a61      	ldr	r2, [pc, #388]	; (800181c <HAL_GPIO_Init+0x328>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d037      	beq.n	8001732 <HAL_GPIO_Init+0x23e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a57      	ldr	r2, [pc, #348]	; (8001824 <HAL_GPIO_Init+0x330>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d031      	beq.n	800172e <HAL_GPIO_Init+0x23a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a56      	ldr	r2, [pc, #344]	; (8001828 <HAL_GPIO_Init+0x334>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x236>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a55      	ldr	r2, [pc, #340]	; (800182c <HAL_GPIO_Init+0x338>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x232>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a54      	ldr	r2, [pc, #336]	; (8001830 <HAL_GPIO_Init+0x33c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x22e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a53      	ldr	r2, [pc, #332]	; (8001834 <HAL_GPIO_Init+0x340>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x22a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x344>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x226>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a51      	ldr	r2, [pc, #324]	; (800183c <HAL_GPIO_Init+0x348>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x222>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_GPIO_Init+0x34c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x21e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x350>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x21a>
 800170a:	2309      	movs	r3, #9
 800170c:	e012      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800170e:	230a      	movs	r3, #10
 8001710:	e010      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001712:	2308      	movs	r3, #8
 8001714:	e00e      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001716:	2307      	movs	r3, #7
 8001718:	e00c      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800171a:	2306      	movs	r3, #6
 800171c:	e00a      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800171e:	2305      	movs	r3, #5
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001732:	2300      	movs	r3, #0
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f002 0203 	and.w	r2, r2, #3
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	4935      	ldr	r1, [pc, #212]	; (800181c <HAL_GPIO_Init+0x328>)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_GPIO_Init+0x354>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001776:	4a34      	ldr	r2, [pc, #208]	; (8001848 <HAL_GPIO_Init+0x354>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_GPIO_Init+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a0:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_GPIO_Init+0x354>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <HAL_GPIO_Init+0x354>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <HAL_GPIO_Init+0x354>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_GPIO_Init+0x354>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_GPIO_Init+0x354>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	f67f ae84 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40021400 	.word	0x40021400
 8001838:	40021800 	.word	0x40021800
 800183c:	40021c00 	.word	0x40021c00
 8001840:	40022000 	.word	0x40022000
 8001844:	40022400 	.word	0x40022400
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e264      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d075      	beq.n	800198a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189e:	4ba3      	ldr	r3, [pc, #652]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d00c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4ba0      	ldr	r3, [pc, #640]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b9d      	ldr	r3, [pc, #628]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c2:	d10b      	bne.n	80018dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	4b99      	ldr	r3, [pc, #612]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05b      	beq.n	8001988 <HAL_RCC_OscConfig+0x108>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d157      	bne.n	8001988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e23f      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x74>
 80018e6:	4b91      	ldr	r3, [pc, #580]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a90      	ldr	r2, [pc, #576]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xb0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x98>
 80018fe:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a8a      	ldr	r2, [pc, #552]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xb0>
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a83      	ldr	r2, [pc, #524]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a80      	ldr	r2, [pc, #512]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fc2c 	bl	8001194 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fc28 	bl	8001194 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e204      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xc0>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fc18 	bl	8001194 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fc14 	bl	8001194 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1f0      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b6c      	ldr	r3, [pc, #432]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0xe8>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001996:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d11c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x152>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1c4      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4952      	ldr	r1, [pc, #328]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	e03a      	b.n	8001a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_RCC_OscConfig+0x2b0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fbcd 	bl	8001194 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff fbc9 	bl	8001194 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1a5      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4940      	ldr	r1, [pc, #256]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x2b0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fbac 	bl	8001194 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fba8 	bl	8001194 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e184      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d030      	beq.n	8001acc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d016      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_OscConfig+0x2b4>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff fb8c 	bl	8001194 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fb88 	bl	8001194 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e164      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x200>
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_OscConfig+0x2b4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb75 	bl	8001194 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff fb71 	bl	8001194 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e14d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a0 	beq.w	8001c1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10f      	bne.n	8001b0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x2b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_OscConfig+0x2b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_RCC_OscConfig+0x2b8>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7ff fb37 	bl	8001194 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	e011      	b.n	8001b4e <HAL_RCC_OscConfig+0x2ce>
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470000 	.word	0x42470000
 8001b34:	42470e80 	.word	0x42470e80
 8001b38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3c:	f7ff fb2a 	bl	8001194 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e106      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <HAL_RCC_OscConfig+0x4e4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
 8001b62:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a80      	ldr	r2, [pc, #512]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	e01c      	b.n	8001baa <HAL_RCC_OscConfig+0x32a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x312>
 8001b78:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a7a      	ldr	r2, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	e00b      	b.n	8001baa <HAL_RCC_OscConfig+0x32a>
 8001b92:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a74      	ldr	r2, [pc, #464]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d015      	beq.n	8001bde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7ff faef 	bl	8001194 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff faeb 	bl	8001194 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0c5      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ee      	beq.n	8001bba <HAL_RCC_OscConfig+0x33a>
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fad9 	bl	8001194 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff fad5 	bl	8001194 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0af      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a55      	ldr	r2, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809b 	beq.w	8001d5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d05c      	beq.n	8001cea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d141      	bne.n	8001cbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x4ec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff faa9 	bl	8001194 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff faa5 	bl	8001194 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e081      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	019b      	lsls	r3, r3, #6
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	061b      	lsls	r3, r3, #24
 8001c88:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x4ec>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fa7e 	bl	8001194 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fa7a 	bl	8001194 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e056      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x41c>
 8001cba:	e04e      	b.n	8001d5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x4ec>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fa67 	bl	8001194 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff fa63 	bl	8001194 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e03f      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x44a>
 8001ce8:	e037      	b.n	8001d5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e032      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d028      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d11a      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d111      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40007000 	.word	0x40007000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470060 	.word	0x42470060

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0cc      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d90c      	bls.n	8001dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b8      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	494d      	ldr	r1, [pc, #308]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d044      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d119      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e07f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e067      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 0203 	bic.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4934      	ldr	r1, [pc, #208]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e60:	f7ff f998 	bl	8001194 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7ff f994 	bl	8001194 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 020c 	and.w	r2, r3, #12
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1eb      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d20c      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4916      	ldr	r1, [pc, #88]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	490e      	ldr	r1, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f821 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	490a      	ldr	r1, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	5ccb      	ldrb	r3, [r1, r3]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f90c 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08008348 	.word	0x08008348
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f54:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d00d      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x40>
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	f200 80bd 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f6e:	e0b7      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f72:	60bb      	str	r3, [r7, #8]
       break;
 8001f74:	e0b7      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f76:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f78:	60bb      	str	r3, [r7, #8]
      break;
 8001f7a:	e0b4      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f7c:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d04d      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f92:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	099b      	lsrs	r3, r3, #6
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	ea02 0800 	and.w	r8, r2, r0
 8001faa:	ea03 0901 	and.w	r9, r3, r1
 8001fae:	4640      	mov	r0, r8
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	014b      	lsls	r3, r1, #5
 8001fbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fc0:	0142      	lsls	r2, r0, #5
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	ebb0 0008 	subs.w	r0, r0, r8
 8001fca:	eb61 0109 	sbc.w	r1, r1, r9
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	018b      	lsls	r3, r1, #6
 8001fd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fdc:	0182      	lsls	r2, r0, #6
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe4:	f04f 0000 	mov.w	r0, #0
 8001fe8:	f04f 0100 	mov.w	r1, #0
 8001fec:	00d9      	lsls	r1, r3, #3
 8001fee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ff2:	00d0      	lsls	r0, r2, #3
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	eb12 0208 	adds.w	r2, r2, r8
 8001ffc:	eb43 0309 	adc.w	r3, r3, r9
 8002000:	f04f 0000 	mov.w	r0, #0
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	0259      	lsls	r1, r3, #9
 800200a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800200e:	0250      	lsls	r0, r2, #9
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	f7fe f986 	bl	8000330 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4613      	mov	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e04a      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	461a      	mov	r2, r3
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	ea02 0400 	and.w	r4, r2, r0
 8002046:	ea03 0501 	and.w	r5, r3, r1
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	014b      	lsls	r3, r1, #5
 8002058:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800205c:	0142      	lsls	r2, r0, #5
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	1b00      	subs	r0, r0, r4
 8002064:	eb61 0105 	sbc.w	r1, r1, r5
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	018b      	lsls	r3, r1, #6
 8002072:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002076:	0182      	lsls	r2, r0, #6
 8002078:	1a12      	subs	r2, r2, r0
 800207a:	eb63 0301 	sbc.w	r3, r3, r1
 800207e:	f04f 0000 	mov.w	r0, #0
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	00d9      	lsls	r1, r3, #3
 8002088:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800208c:	00d0      	lsls	r0, r2, #3
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	1912      	adds	r2, r2, r4
 8002094:	eb45 0303 	adc.w	r3, r5, r3
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	0299      	lsls	r1, r3, #10
 80020a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020a6:	0290      	lsls	r0, r2, #10
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f7fe f93a 	bl	8000330 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	60bb      	str	r3, [r7, #8]
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020e2:	60bb      	str	r3, [r7, #8]
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	68bb      	ldr	r3, [r7, #8]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08008358 	.word	0x08008358

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002144:	f7ff ffdc 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0b5b      	lsrs	r3, r3, #13
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	08008358 	.word	0x08008358

08002168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e03f      	b.n	80021fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fe58 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fc7b 	bl	8002aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0ba      	sub	sp, #232	; 0xe8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_UART_IRQHandler+0x66>
 8002256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fb65 	bl	8002932 <UART_Receive_IT>
      return;
 8002268:	e256      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800226a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80de 	beq.w	8002430 <HAL_UART_IRQHandler+0x22c>
 8002274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002284:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80d1 	beq.w	8002430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_UART_IRQHandler+0xae>
 800229a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_UART_IRQHandler+0xd2>
 80022be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_UART_IRQHandler+0xf6>
 80022e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <HAL_UART_IRQHandler+0x126>
 8002306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0208 	orr.w	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 81ed 	beq.w	800270e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_UART_IRQHandler+0x14e>
 8002340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 faf0 	bl	8002932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_UART_IRQHandler+0x17a>
 8002376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04f      	beq.n	800241e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f9f8 	bl	8002774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d141      	bne.n	8002416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023a0:	e853 3f00 	ldrex	r3, [r3]
 80023a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3314      	adds	r3, #20
 80023ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1d9      	bne.n	8002392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d013      	beq.n	800240e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a7d      	ldr	r2, [pc, #500]	; (80025e0 <HAL_UART_IRQHandler+0x3dc>)
 80023ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff f85b 	bl	80014ae <HAL_DMA_Abort_IT>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002408:	4610      	mov	r0, r2
 800240a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	e00e      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f99a 	bl	8002748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	e00a      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f996 	bl	8002748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	e006      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f992 	bl	8002748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800242a:	e170      	b.n	800270e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	bf00      	nop
    return;
 800242e:	e16e      	b.n	800270e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 814a 	bne.w	80026ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8143 	beq.w	80026ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 813c 	beq.w	80026ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	f040 80b4 	bne.w	80025e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8140 	beq.w	8002712 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800249a:	429a      	cmp	r2, r3
 800249c:	f080 8139 	bcs.w	8002712 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	f000 8088 	beq.w	80025c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1d9      	bne.n	80024b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	e853 3f00 	ldrex	r3, [r3]
 8002510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3314      	adds	r3, #20
 8002522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800252a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800252e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e1      	bne.n	8002502 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e3      	bne.n	800253e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	f023 0310 	bic.w	r3, r3, #16
 800259a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80025aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025b0:	e841 2300 	strex	r3, r2, [r1]
 80025b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e3      	bne.n	8002584 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe ff04 	bl	80013ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8c0 	bl	800275c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025dc:	e099      	b.n	8002712 <HAL_UART_IRQHandler+0x50e>
 80025de:	bf00      	nop
 80025e0:	0800283b 	.word	0x0800283b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 808b 	beq.w	8002716 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8086 	beq.w	8002716 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	e853 3f00 	ldrex	r3, [r3]
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800262e:	647a      	str	r2, [r7, #68]	; 0x44
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e3      	bne.n	800260a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3314      	adds	r3, #20
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	e853 3f00 	ldrex	r3, [r3]
 8002650:	623b      	str	r3, [r7, #32]
   return(result);
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3314      	adds	r3, #20
 8002662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002666:	633a      	str	r2, [r7, #48]	; 0x30
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800266c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e3      	bne.n	8002642 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	60fb      	str	r3, [r7, #12]
   return(result);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0310 	bic.w	r3, r3, #16
 800269e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026ac:	61fa      	str	r2, [r7, #28]
 80026ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	69b9      	ldr	r1, [r7, #24]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	617b      	str	r3, [r7, #20]
   return(result);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e3      	bne.n	8002688 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f848 	bl	800275c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026cc:	e023      	b.n	8002716 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_UART_IRQHandler+0x4ea>
 80026da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8bb 	bl	8002862 <UART_Transmit_IT>
    return;
 80026ec:	e014      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <HAL_UART_IRQHandler+0x514>
 80026fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8fb 	bl	8002902 <UART_EndTransmit_IT>
    return;
 800270c:	e004      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
    return;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
      return;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
      return;
 8002716:	bf00      	nop
  }
}
 8002718:	37e8      	adds	r7, #232	; 0xe8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop

08002720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b095      	sub	sp, #84	; 0x54
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279c:	643a      	str	r2, [r7, #64]	; 0x40
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3314      	adds	r3, #20
 80027b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	61fb      	str	r3, [r7, #28]
   return(result);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d119      	bne.n	8002820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800280c:	61ba      	str	r2, [r7, #24]
 800280e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	613b      	str	r3, [r7, #16]
   return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e5      	bne.n	80027ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800282e:	bf00      	nop
 8002830:	3754      	adds	r7, #84	; 0x54
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff ff77 	bl	8002748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b21      	cmp	r3, #33	; 0x21
 8002874:	d13e      	bne.n	80028f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d114      	bne.n	80028aa <UART_Transmit_IT+0x48>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d110      	bne.n	80028aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800289c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]
 80028a8:	e008      	b.n	80028bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	1c59      	adds	r1, r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6211      	str	r1, [r2, #32]
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10f      	bne.n	80028f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fefc 	bl	8002720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b08c      	sub	sp, #48	; 0x30
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	f040 80ab 	bne.w	8002a9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	d117      	bne.n	8002982 <UART_Receive_IT+0x50>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002970:	b29a      	uxth	r2, r3
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
 8002980:	e026      	b.n	80029d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002994:	d007      	beq.n	80029a6 <UART_Receive_IT+0x74>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <UART_Receive_IT+0x82>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e008      	b.n	80029c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4619      	mov	r1, r3
 80029de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d15a      	bne.n	8002a9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0220 	bic.w	r2, r2, #32
 80029f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d135      	bne.n	8002a90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f023 0310 	bic.w	r3, r3, #16
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	623a      	str	r2, [r7, #32]
 8002a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d10a      	bne.n	8002a82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fe67 	bl	800275c <HAL_UARTEx_RxEventCallback>
 8002a8e:	e002      	b.n	8002a96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fe4f 	bl	8002734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e002      	b.n	8002aa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3730      	adds	r7, #48	; 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	b09f      	sub	sp, #124	; 0x7c
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	68d9      	ldr	r1, [r3, #12]
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	ea40 0301 	orr.w	r3, r0, r1
 8002ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002aec:	f021 010c 	bic.w	r1, r1, #12
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af6:	430b      	orrs	r3, r1
 8002af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	6999      	ldr	r1, [r3, #24]
 8002b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	ea40 0301 	orr.w	r3, r0, r1
 8002b10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4bc5      	ldr	r3, [pc, #788]	; (8002e2c <UART_SetConfig+0x384>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d004      	beq.n	8002b26 <UART_SetConfig+0x7e>
 8002b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4bc3      	ldr	r3, [pc, #780]	; (8002e30 <UART_SetConfig+0x388>)
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d103      	bne.n	8002b2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b26:	f7ff fb0b 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8002b2a:	6778      	str	r0, [r7, #116]	; 0x74
 8002b2c:	e002      	b.n	8002b34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b2e:	f7ff faf3 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002b32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3c:	f040 80b6 	bne.w	8002cac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b42:	461c      	mov	r4, r3
 8002b44:	f04f 0500 	mov.w	r5, #0
 8002b48:	4622      	mov	r2, r4
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	1891      	adds	r1, r2, r2
 8002b4e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b50:	415b      	adcs	r3, r3
 8002b52:	647b      	str	r3, [r7, #68]	; 0x44
 8002b54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b58:	1912      	adds	r2, r2, r4
 8002b5a:	eb45 0303 	adc.w	r3, r5, r3
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	00d9      	lsls	r1, r3, #3
 8002b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b6c:	00d0      	lsls	r0, r2, #3
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	1911      	adds	r1, r2, r4
 8002b74:	6639      	str	r1, [r7, #96]	; 0x60
 8002b76:	416b      	adcs	r3, r5
 8002b78:	667b      	str	r3, [r7, #100]	; 0x64
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	1891      	adds	r1, r2, r2
 8002b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b88:	415b      	adcs	r3, r3
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002b94:	f7fd fbcc 	bl	8000330 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4ba5      	ldr	r3, [pc, #660]	; (8002e34 <UART_SetConfig+0x38c>)
 8002b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	011e      	lsls	r6, r3, #4
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba8:	461c      	mov	r4, r3
 8002baa:	f04f 0500 	mov.w	r5, #0
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	1891      	adds	r1, r2, r2
 8002bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8002bb6:	415b      	adcs	r3, r3
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bbe:	1912      	adds	r2, r2, r4
 8002bc0:	eb45 0303 	adc.w	r3, r5, r3
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	00d9      	lsls	r1, r3, #3
 8002bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bd2:	00d0      	lsls	r0, r2, #3
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	1911      	adds	r1, r2, r4
 8002bda:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bdc:	416b      	adcs	r3, r5
 8002bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	1891      	adds	r1, r2, r2
 8002bec:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bee:	415b      	adcs	r3, r3
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bfa:	f7fd fb99 	bl	8000330 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <UART_SetConfig+0x38c>)
 8002c04:	fba3 1302 	umull	r1, r3, r3, r2
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	2164      	movs	r1, #100	; 0x64
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	3332      	adds	r3, #50	; 0x32
 8002c16:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <UART_SetConfig+0x38c>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c24:	441e      	add	r6, r3
 8002c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	1894      	adds	r4, r2, r2
 8002c34:	623c      	str	r4, [r7, #32]
 8002c36:	415b      	adcs	r3, r3
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c3e:	1812      	adds	r2, r2, r0
 8002c40:	eb41 0303 	adc.w	r3, r1, r3
 8002c44:	f04f 0400 	mov.w	r4, #0
 8002c48:	f04f 0500 	mov.w	r5, #0
 8002c4c:	00dd      	lsls	r5, r3, #3
 8002c4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c52:	00d4      	lsls	r4, r2, #3
 8002c54:	4622      	mov	r2, r4
 8002c56:	462b      	mov	r3, r5
 8002c58:	1814      	adds	r4, r2, r0
 8002c5a:	653c      	str	r4, [r7, #80]	; 0x50
 8002c5c:	414b      	adcs	r3, r1
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	61b9      	str	r1, [r7, #24]
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002c7a:	f7fd fb59 	bl	8000330 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <UART_SetConfig+0x38c>)
 8002c84:	fba3 1302 	umull	r1, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	2164      	movs	r1, #100	; 0x64
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	3332      	adds	r3, #50	; 0x32
 8002c96:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <UART_SetConfig+0x38c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	f003 0207 	and.w	r2, r3, #7
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4432      	add	r2, r6
 8002ca8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002caa:	e0b9      	b.n	8002e20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cae:	461c      	mov	r4, r3
 8002cb0:	f04f 0500 	mov.w	r5, #0
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	6139      	str	r1, [r7, #16]
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cc4:	1912      	adds	r2, r2, r4
 8002cc6:	eb45 0303 	adc.w	r3, r5, r3
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	00d9      	lsls	r1, r3, #3
 8002cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd8:	00d0      	lsls	r0, r2, #3
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	eb12 0804 	adds.w	r8, r2, r4
 8002ce2:	eb43 0905 	adc.w	r9, r3, r5
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	008b      	lsls	r3, r1, #2
 8002cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cfe:	0082      	lsls	r2, r0, #2
 8002d00:	4640      	mov	r0, r8
 8002d02:	4649      	mov	r1, r9
 8002d04:	f7fd fb14 	bl	8000330 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <UART_SetConfig+0x38c>)
 8002d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	011e      	lsls	r6, r3, #4
 8002d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	1894      	adds	r4, r2, r2
 8002d24:	60bc      	str	r4, [r7, #8]
 8002d26:	415b      	adcs	r3, r3
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d2e:	1812      	adds	r2, r2, r0
 8002d30:	eb41 0303 	adc.w	r3, r1, r3
 8002d34:	f04f 0400 	mov.w	r4, #0
 8002d38:	f04f 0500 	mov.w	r5, #0
 8002d3c:	00dd      	lsls	r5, r3, #3
 8002d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d42:	00d4      	lsls	r4, r2, #3
 8002d44:	4622      	mov	r2, r4
 8002d46:	462b      	mov	r3, r5
 8002d48:	1814      	adds	r4, r2, r0
 8002d4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d4c:	414b      	adcs	r3, r1
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	008b      	lsls	r3, r1, #2
 8002d64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d68:	0082      	lsls	r2, r0, #2
 8002d6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d6e:	f7fd fadf 	bl	8000330 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <UART_SetConfig+0x38c>)
 8002d78:	fba3 1302 	umull	r1, r3, r3, r2
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	2164      	movs	r1, #100	; 0x64
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	3332      	adds	r3, #50	; 0x32
 8002d8a:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <UART_SetConfig+0x38c>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d96:	441e      	add	r6, r3
 8002d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	1894      	adds	r4, r2, r2
 8002da6:	603c      	str	r4, [r7, #0]
 8002da8:	415b      	adcs	r3, r3
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db0:	1812      	adds	r2, r2, r0
 8002db2:	eb41 0303 	adc.w	r3, r1, r3
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	f04f 0500 	mov.w	r5, #0
 8002dbe:	00dd      	lsls	r5, r3, #3
 8002dc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dc4:	00d4      	lsls	r4, r2, #3
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	462b      	mov	r3, r5
 8002dca:	eb12 0a00 	adds.w	sl, r2, r0
 8002dce:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	008b      	lsls	r3, r1, #2
 8002de6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dea:	0082      	lsls	r2, r0, #2
 8002dec:	4650      	mov	r0, sl
 8002dee:	4659      	mov	r1, fp
 8002df0:	f7fd fa9e 	bl	8000330 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <UART_SetConfig+0x38c>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2164      	movs	r1, #100	; 0x64
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <UART_SetConfig+0x38c>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4432      	add	r2, r6
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	377c      	adds	r7, #124	; 0x7c
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40011400 	.word	0x40011400
 8002e34:	51eb851f 	.word	0x51eb851f

08002e38 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 0208 	add.w	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0208 	add.w	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d103      	bne.n	8002efa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e00c      	b.n	8002f14 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3308      	adds	r3, #8
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e002      	b.n	8002f08 <vListInsert+0x2e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d2f6      	bcs.n	8002f02 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6852      	ldr	r2, [r2, #4]
 8002f6c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d103      	bne.n	8002f80 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002fca:	f002 fa5b 	bl	8005484 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	68f9      	ldr	r1, [r7, #12]
 8002ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	441a      	add	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d114      	bne.n	800304a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01a      	beq.n	800305e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3310      	adds	r3, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f001 f9b7 	bl	80043a0 <xTaskRemoveFromEventList>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <xQueueGenericReset+0xcc>)
 800303a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	e009      	b.n	800305e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3310      	adds	r3, #16
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fef2 	bl	8002e38 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3324      	adds	r3, #36	; 0x24
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff feed 	bl	8002e38 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800305e:	f002 fa41 	bl	80054e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003062:	2301      	movs	r3, #1
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericCreate+0x2a>
        __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61bb      	str	r3, [r7, #24]
    }
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <xQueueGenericCreate+0x48>
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d101      	bne.n	80030bc <xQueueGenericCreate+0x4c>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <xQueueGenericCreate+0x4e>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <xQueueGenericCreate+0x68>
        __asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	617b      	str	r3, [r7, #20]
    }
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80030de:	d90a      	bls.n	80030f6 <xQueueGenericCreate+0x86>
        __asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
    }
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	3350      	adds	r3, #80	; 0x50
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fae6 	bl	80056cc <pvPortMalloc>
 8003100:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3350      	adds	r3, #80	; 0x50
 8003110:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003112:	79fa      	ldrb	r2, [r7, #7]
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f805 	bl	800312e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003124:	6a3b      	ldr	r3, [r7, #32]
    }
 8003126:	4618      	mov	r0, r3
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e002      	b.n	8003150 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800315c:	2101      	movs	r1, #1
 800315e:	69b8      	ldr	r0, [r7, #24]
 8003160:	f7ff ff1e 	bl	8002fa0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08e      	sub	sp, #56	; 0x38
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003182:	2300      	movs	r3, #0
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xQueueGenericSend+0x32>
        __asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <xQueueGenericSend+0x40>
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <xQueueGenericSend+0x44>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <xQueueGenericSend+0x46>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <xQueueGenericSend+0x60>
        __asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d103      	bne.n	80031e2 <xQueueGenericSend+0x6e>
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <xQueueGenericSend+0x72>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueGenericSend+0x74>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <xQueueGenericSend+0x8e>
        __asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	623b      	str	r3, [r7, #32]
    }
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003202:	f001 fa69 	bl	80046d8 <xTaskGetSchedulerState>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <xQueueGenericSend+0x9e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <xQueueGenericSend+0xa2>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <xQueueGenericSend+0xa4>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xQueueGenericSend+0xbe>
        __asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	61fb      	str	r3, [r7, #28]
    }
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003232:	f002 f927 	bl	8005484 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <xQueueGenericSend+0xd4>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d129      	bne.n	800329c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800324e:	f000 fb3d 	bl	80038cc <prvCopyDataToQueue>
 8003252:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	4618      	mov	r0, r3
 8003262:	f001 f89d 	bl	80043a0 <xTaskRemoveFromEventList>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <xQueueGenericSend+0x1f8>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	e00a      	b.n	8003294 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003284:	4b39      	ldr	r3, [pc, #228]	; (800336c <xQueueGenericSend+0x1f8>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003294:	f002 f926 	bl	80054e4 <vPortExitCritical>
                return pdPASS;
 8003298:	2301      	movs	r3, #1
 800329a:	e063      	b.n	8003364 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032a2:	f002 f91f 	bl	80054e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e05c      	b.n	8003364 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f8d5 	bl	8004464 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032be:	f002 f911 	bl	80054e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032c2:	f000 fe3d 	bl	8003f40 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032c6:	f002 f8dd 	bl	8005484 <vPortEnterCritical>
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d103      	bne.n	80032e0 <xQueueGenericSend+0x16c>
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d103      	bne.n	80032f6 <xQueueGenericSend+0x182>
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f6:	f002 f8f5 	bl	80054e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032fa:	1d3a      	adds	r2, r7, #4
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f8c4 	bl	8004490 <xTaskCheckForTimeOut>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d124      	bne.n	8003358 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800330e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003310:	f000 fbd4 	bl	8003abc <prvIsQueueFull>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d018      	beq.n	800334c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	3310      	adds	r3, #16
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ffec 	bl	8004300 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332a:	f000 fb5f 	bl	80039ec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800332e:	f000 fe15 	bl	8003f5c <xTaskResumeAll>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f af7c 	bne.w	8003232 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <xQueueGenericSend+0x1f8>)
 800333c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	e772      	b.n	8003232 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800334c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334e:	f000 fb4d 	bl	80039ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003352:	f000 fe03 	bl	8003f5c <xTaskResumeAll>
 8003356:	e76c      	b.n	8003232 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335a:	f000 fb47 	bl	80039ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800335e:	f000 fdfd 	bl	8003f5c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003362:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003364:	4618      	mov	r0, r3
 8003366:	3738      	adds	r7, #56	; 0x38
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	e000ed04 	.word	0xe000ed04

08003370 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b090      	sub	sp, #64	; 0x40
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <xQueueGenericSendFromISR+0x3c>
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <xQueueGenericSendFromISR+0x40>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <xQueueGenericSendFromISR+0x42>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d103      	bne.n	80033da <xQueueGenericSendFromISR+0x6a>
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <xQueueGenericSendFromISR+0x6e>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGenericSendFromISR+0x70>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	623b      	str	r3, [r7, #32]
    }
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033fa:	f002 f927 	bl	800564c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80033fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	61fa      	str	r2, [r7, #28]
 8003414:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003416:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <xQueueGenericSendFromISR+0xbc>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d13e      	bne.n	80034aa <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003442:	f000 fa43 	bl	80038cc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003446:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d112      	bne.n	8003476 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	3324      	adds	r3, #36	; 0x24
 800345c:	4618      	mov	r0, r3
 800345e:	f000 ff9f 	bl	80043a0 <xTaskRemoveFromEventList>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01d      	beq.n	80034a4 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01a      	beq.n	80034a4 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e016      	b.n	80034a4 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003476:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800347a:	2b7f      	cmp	r3, #127	; 0x7f
 800347c:	d10a      	bne.n	8003494 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	617b      	str	r3, [r7, #20]
    }
 8003490:	bf00      	nop
 8003492:	e7fe      	b.n	8003492 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003498:	3301      	adds	r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	b25a      	sxtb	r2, r3
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80034a4:	2301      	movs	r3, #1
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80034a8:	e001      	b.n	80034ae <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80034b8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3740      	adds	r7, #64	; 0x40
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <xQueueReceive+0x30>
        __asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	623b      	str	r3, [r7, #32]
    }
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <xQueueReceive+0x3e>
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <xQueueReceive+0x42>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <xQueueReceive+0x44>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <xQueueReceive+0x5e>
        __asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	61fb      	str	r3, [r7, #28]
    }
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003522:	f001 f8d9 	bl	80046d8 <xTaskGetSchedulerState>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <xQueueReceive+0x6e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <xQueueReceive+0x72>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <xQueueReceive+0x74>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xQueueReceive+0x8e>
        __asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	61bb      	str	r3, [r7, #24]
    }
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003552:	f001 ff97 	bl	8005484 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01f      	beq.n	80035a2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003566:	f000 fa1b 	bl	80039a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1e5a      	subs	r2, r3, #1
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00f      	beq.n	800359a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	3310      	adds	r3, #16
 800357e:	4618      	mov	r0, r3
 8003580:	f000 ff0e 	bl	80043a0 <xTaskRemoveFromEventList>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <xQueueReceive+0x1bc>)
 800358c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800359a:	f001 ffa3 	bl	80054e4 <vPortExitCritical>
                return pdPASS;
 800359e:	2301      	movs	r3, #1
 80035a0:	e069      	b.n	8003676 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80035a8:	f001 ff9c 	bl	80054e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e062      	b.n	8003676 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80035b6:	f107 0310 	add.w	r3, r7, #16
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 ff52 	bl	8004464 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80035c4:	f001 ff8e 	bl	80054e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80035c8:	f000 fcba 	bl	8003f40 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80035cc:	f001 ff5a 	bl	8005484 <vPortEnterCritical>
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d103      	bne.n	80035e6 <xQueueReceive+0x122>
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d103      	bne.n	80035fc <xQueueReceive+0x138>
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fc:	f001 ff72 	bl	80054e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003600:	1d3a      	adds	r2, r7, #4
 8003602:	f107 0310 	add.w	r3, r7, #16
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 ff41 	bl	8004490 <xTaskCheckForTimeOut>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d123      	bne.n	800365c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003616:	f000 fa3b 	bl	8003a90 <prvIsQueueEmpty>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	3324      	adds	r3, #36	; 0x24
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fe69 	bl	8004300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f9dc 	bl	80039ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003634:	f000 fc92 	bl	8003f5c <xTaskResumeAll>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d189      	bne.n	8003552 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <xQueueReceive+0x1bc>)
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	e780      	b.n	8003552 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003652:	f000 f9cb 	bl	80039ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003656:	f000 fc81 	bl	8003f5c <xTaskResumeAll>
 800365a:	e77a      	b.n	8003552 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800365c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365e:	f000 f9c5 	bl	80039ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003662:	f000 fc7b 	bl	8003f5c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003668:	f000 fa12 	bl	8003a90 <prvIsQueueEmpty>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f43f af6f 	beq.w	8003552 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003674:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003676:	4618      	mov	r0, r3
 8003678:	3730      	adds	r7, #48	; 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08e      	sub	sp, #56	; 0x38
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueSemaphoreTake+0x32>
        __asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	623b      	str	r3, [r7, #32]
    }
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	61fb      	str	r3, [r7, #28]
    }
 80036d0:	bf00      	nop
 80036d2:	e7fe      	b.n	80036d2 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036d4:	f001 f800 	bl	80046d8 <xTaskGetSchedulerState>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <xQueueSemaphoreTake+0x60>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <xQueueSemaphoreTake+0x64>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <xQueueSemaphoreTake+0x66>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	61bb      	str	r3, [r7, #24]
    }
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003704:	f001 febe 	bl	8005484 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d024      	beq.n	800375e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	1e5a      	subs	r2, r3, #1
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003724:	f001 f974 	bl	8004a10 <pvTaskIncrementMutexHeldCount>
 8003728:	4602      	mov	r2, r0
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	3310      	adds	r3, #16
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fe30 	bl	80043a0 <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003746:	4b54      	ldr	r3, [pc, #336]	; (8003898 <xQueueSemaphoreTake+0x214>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003756:	f001 fec5 	bl	80054e4 <vPortExitCritical>
                return pdPASS;
 800375a:	2301      	movs	r3, #1
 800375c:	e097      	b.n	800388e <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d111      	bne.n	8003788 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	617b      	str	r3, [r7, #20]
    }
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003780:	f001 feb0 	bl	80054e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003784:	2300      	movs	r3, #0
 8003786:	e082      	b.n	800388e <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fe66 	bl	8004464 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003798:	2301      	movs	r3, #1
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800379c:	f001 fea2 	bl	80054e4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037a0:	f000 fbce 	bl	8003f40 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037a4:	f001 fe6e 	bl	8005484 <vPortEnterCritical>
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <xQueueSemaphoreTake+0x13a>
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d103      	bne.n	80037d4 <xQueueSemaphoreTake+0x150>
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d4:	f001 fe86 	bl	80054e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d8:	463a      	mov	r2, r7
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fe55 	bl	8004490 <xTaskCheckForTimeOut>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d132      	bne.n	8003852 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037ee:	f000 f94f 	bl	8003a90 <prvIsQueueEmpty>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d026      	beq.n	8003846 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003800:	f001 fe40 	bl	8005484 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ff83 	bl	8004714 <xTaskPriorityInherit>
 800380e:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003810:	f001 fe68 	bl	80054e4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd6f 	bl	8004300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003824:	f000 f8e2 	bl	80039ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003828:	f000 fb98 	bl	8003f5c <xTaskResumeAll>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	f47f af68 	bne.w	8003704 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <xQueueSemaphoreTake+0x214>)
 8003836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	e75e      	b.n	8003704 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003848:	f000 f8d0 	bl	80039ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800384c:	f000 fb86 	bl	8003f5c <xTaskResumeAll>
 8003850:	e758      	b.n	8003704 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003854:	f000 f8ca 	bl	80039ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003858:	f000 fb80 	bl	8003f5c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800385c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800385e:	f000 f917 	bl	8003a90 <prvIsQueueEmpty>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f43f af4d 	beq.w	8003704 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003870:	f001 fe08 	bl	8005484 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003876:	f000 f811 	bl	800389c <prvGetDisinheritPriorityAfterTimeout>
 800387a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f836 	bl	80048f4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003888:	f001 fe2c 	bl	80054e4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800388c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800388e:	4618      	mov	r0, r3
 8003890:	3738      	adds	r7, #56	; 0x38
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1c3 0305 	rsb	r3, r3, #5
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e001      	b.n	80038be <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80038be:	68fb      	ldr	r3, [r7, #12]
    }
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14d      	bne.n	800398e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 ff82 	bl	8004800 <xTaskPriorityDisinherit>
 80038fc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e043      	b.n	800398e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d119      	bne.n	8003940 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6858      	ldr	r0, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	461a      	mov	r2, r3
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	f003 fbbe 	bl	8007098 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d32b      	bcc.n	800398e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	e026      	b.n	800398e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68d8      	ldr	r0, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	461a      	mov	r2, r3
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	f003 fba4 	bl	8007098 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	425b      	negs	r3, r3
 800395a:	441a      	add	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d207      	bcs.n	800397c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	425b      	negs	r3, r3
 8003976:	441a      	add	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d105      	bne.n	800398e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	3b01      	subs	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003996:	697b      	ldr	r3, [r7, #20]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d303      	bcc.n	80039d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68d9      	ldr	r1, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	461a      	mov	r2, r3
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f003 fb5a 	bl	8007098 <memcpy>
    }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80039f4:	f001 fd46 	bl	8005484 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a00:	e011      	b.n	8003a26 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fcc6 	bl	80043a0 <xTaskRemoveFromEventList>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a1a:	f000 fd9f 	bl	800455c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dce9      	bgt.n	8003a02 <prvUnlockQueue+0x16>
 8003a2e:	e000      	b.n	8003a32 <prvUnlockQueue+0x46>
                        break;
 8003a30:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a3a:	f001 fd53 	bl	80054e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a3e:	f001 fd21 	bl	8005484 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a48:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a4a:	e011      	b.n	8003a70 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d012      	beq.n	8003a7a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3310      	adds	r3, #16
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fca1 	bl	80043a0 <xTaskRemoveFromEventList>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a64:	f000 fd7a 	bl	800455c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a68:	7bbb      	ldrb	r3, [r7, #14]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dce9      	bgt.n	8003a4c <prvUnlockQueue+0x60>
 8003a78:	e000      	b.n	8003a7c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a7a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a84:	f001 fd2e 	bl	80054e4 <vPortExitCritical>
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a98:	f001 fcf4 	bl	8005484 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e001      	b.n	8003aae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003aae:	f001 fd19 	bl	80054e4 <vPortExitCritical>

    return xReturn;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ac4:	f001 fcde 	bl	8005484 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d102      	bne.n	8003ada <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e001      	b.n	8003ade <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ade:	f001 fd01 	bl	80054e4 <vPortExitCritical>

    return xReturn;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e014      	b.n	8003b26 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003afc:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <vQueueAddToRegistry+0x50>)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b08:	490c      	ldr	r1, [pc, #48]	; (8003b3c <vQueueAddToRegistry+0x50>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <vQueueAddToRegistry+0x50>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003b1e:	e006      	b.n	8003b2e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	d9e7      	bls.n	8003afc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20014428 	.word	0x20014428

08003b40 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b50:	f001 fc98 	bl	8005484 <vPortEnterCritical>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b5a:	b25b      	sxtb	r3, r3
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d103      	bne.n	8003b6a <vQueueWaitForMessageRestricted+0x2a>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b70:	b25b      	sxtb	r3, r3
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d103      	bne.n	8003b80 <vQueueWaitForMessageRestricted+0x40>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b80:	f001 fcb0 	bl	80054e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fbd7 	bl	8004348 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7ff ff26 	bl	80039ec <prvUnlockQueue>
    }
 8003ba0:	bf00      	nop
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af04      	add	r7, sp, #16
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fd85 	bl	80056cc <pvPortMalloc>
 8003bc2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00e      	beq.n	8003be8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bca:	2058      	movs	r0, #88	; 0x58
 8003bcc:	f001 fd7e 	bl	80056cc <pvPortMalloc>
 8003bd0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bde:	e005      	b.n	8003bec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003be0:	6978      	ldr	r0, [r7, #20]
 8003be2:	f001 fe53 	bl	800588c <vPortFree>
 8003be6:	e001      	b.n	8003bec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d013      	beq.n	8003c1a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9303      	str	r3, [sp, #12]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	9302      	str	r3, [sp, #8]
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f80e 	bl	8003c2a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c0e:	69f8      	ldr	r0, [r7, #28]
 8003c10:	f000 f8a2 	bl	8003d58 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	e002      	b.n	8003c20 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c20:	69bb      	ldr	r3, [r7, #24]
    }
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b088      	sub	sp, #32
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	461a      	mov	r2, r3
 8003c42:	21a5      	movs	r1, #165	; 0xa5
 8003c44:	f003 fa36 	bl	80070b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c52:	3b01      	subs	r3, #1
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	617b      	str	r3, [r7, #20]
    }
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01f      	beq.n	8003cc8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	e012      	b.n	8003cb4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	7819      	ldrb	r1, [r3, #0]
 8003c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3334      	adds	r3, #52	; 0x34
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	d9e9      	bls.n	8003c8e <prvInitialiseNewTask+0x64>
 8003cba:	e000      	b.n	8003cbe <prvInitialiseNewTask+0x94>
            {
                break;
 8003cbc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cc6:	e003      	b.n	8003cd0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d901      	bls.n	8003cda <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff f8c1 	bl	8002e78 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f8bc 	bl	8002e78 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d04:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	f1c3 0205 	rsb	r2, r3, #5
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	3350      	adds	r3, #80	; 0x50
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 f9c8 	bl	80070b4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	3354      	adds	r3, #84	; 0x54
 8003d28:	2201      	movs	r2, #1
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 f9c1 	bl	80070b4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	69b8      	ldr	r0, [r7, #24]
 8003d38:	f001 f9f6 	bl	8005128 <pxPortInitialiseStack>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d4e:	bf00      	nop
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d60:	f001 fb90 	bl	8005484 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d6c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003d76:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d110      	bne.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003d84:	f000 fc0e 	bl	80045a4 <prvInitialiseTaskLists>
 8003d88:	e00d      	b.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <prvAddNewTaskToReadyList+0xc8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d802      	bhi.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003da0:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003da6:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003dae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003db0:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <prvAddNewTaskToReadyList+0xd0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <prvAddNewTaskToReadyList+0xd0>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <prvAddNewTaskToReadyList+0xd4>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7ff f856 	bl	8002e92 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003de6:	f001 fb7d 	bl	80054e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <prvAddNewTaskToReadyList+0xc8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <prvAddNewTaskToReadyList+0xd8>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000170 	.word	0x20000170
 8003e1c:	20000098 	.word	0x20000098
 8003e20:	2000017c 	.word	0x2000017c
 8003e24:	2000018c 	.word	0x2000018c
 8003e28:	20000178 	.word	0x20000178
 8003e2c:	2000009c 	.word	0x2000009c
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <vTaskDelay+0x60>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <vTaskDelay+0x30>
        __asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
    }
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003e64:	f000 f86c 	bl	8003f40 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fde4 	bl	8004a38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003e70:	f000 f874 	bl	8003f5c <xTaskResumeAll>
 8003e74:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <vTaskDelay+0x64>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000198 	.word	0x20000198
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003ea2:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <vTaskStartScheduler+0x88>)
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2282      	movs	r2, #130	; 0x82
 8003eae:	491e      	ldr	r1, [pc, #120]	; (8003f28 <vTaskStartScheduler+0x8c>)
 8003eb0:	481e      	ldr	r0, [pc, #120]	; (8003f2c <vTaskStartScheduler+0x90>)
 8003eb2:	f7ff fe79 	bl	8003ba8 <xTaskCreate>
 8003eb6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d102      	bne.n	8003ec4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003ebe:	f000 fe21 	bl	8004b04 <xTimerCreateTimerTask>
 8003ec2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d116      	bne.n	8003ef8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	60bb      	str	r3, [r7, #8]
    }
 8003edc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003ede:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <vTaskStartScheduler+0x94>)
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <vTaskStartScheduler+0x98>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <vTaskStartScheduler+0x9c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003ef2:	f001 f9a7 	bl	8005244 <xPortStartScheduler>
 8003ef6:	e00e      	b.n	8003f16 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d10a      	bne.n	8003f16 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	607b      	str	r3, [r7, #4]
    }
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <vTaskStartScheduler+0xa0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000194 	.word	0x20000194
 8003f28:	080082bc 	.word	0x080082bc
 8003f2c:	08004575 	.word	0x08004575
 8003f30:	20000190 	.word	0x20000190
 8003f34:	2000017c 	.word	0x2000017c
 8003f38:	20000174 	.word	0x20000174
 8003f3c:	2000000c 	.word	0x2000000c

08003f40 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <vTaskSuspendAll+0x18>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a03      	ldr	r2, [pc, #12]	; (8003f58 <vTaskSuspendAll+0x18>)
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000198 	.word	0x20000198

08003f5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <xTaskResumeAll+0x114>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <xTaskResumeAll+0x2c>
        __asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	603b      	str	r3, [r7, #0]
    }
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003f88:	f001 fa7c 	bl	8005484 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003f8c:	4b38      	ldr	r3, [pc, #224]	; (8004070 <xTaskResumeAll+0x114>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	4a37      	ldr	r2, [pc, #220]	; (8004070 <xTaskResumeAll+0x114>)
 8003f94:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <xTaskResumeAll+0x114>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d161      	bne.n	8004062 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f9e:	4b35      	ldr	r3, [pc, #212]	; (8004074 <xTaskResumeAll+0x118>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d05d      	beq.n	8004062 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa6:	e02e      	b.n	8004006 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <xTaskResumeAll+0x11c>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe ffc9 	bl	8002f4c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe ffc4 	bl	8002f4c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <xTaskResumeAll+0x120>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	4a2a      	ldr	r2, [pc, #168]	; (800407c <xTaskResumeAll+0x120>)
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4a27      	ldr	r2, [pc, #156]	; (8004080 <xTaskResumeAll+0x124>)
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fe ff50 	bl	8002e92 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <xTaskResumeAll+0x128>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <xTaskResumeAll+0x12c>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <xTaskResumeAll+0x11c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1cc      	bne.n	8003fa8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004014:	f000 fb44 	bl	80046a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004018:	4b1c      	ldr	r3, [pc, #112]	; (800408c <xTaskResumeAll+0x130>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004024:	f000 f858 	bl	80040d8 <xTaskIncrementTick>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <xTaskResumeAll+0x12c>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f1      	bne.n	8004024 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <xTaskResumeAll+0x130>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <xTaskResumeAll+0x12c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <xTaskResumeAll+0x134>)
 8004054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004062:	f001 fa3f 	bl	80054e4 <vPortExitCritical>

    return xAlreadyYielded;
 8004066:	68bb      	ldr	r3, [r7, #8]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000198 	.word	0x20000198
 8004074:	20000170 	.word	0x20000170
 8004078:	20000130 	.word	0x20000130
 800407c:	20000178 	.word	0x20000178
 8004080:	2000009c 	.word	0x2000009c
 8004084:	20000098 	.word	0x20000098
 8004088:	20000184 	.word	0x20000184
 800408c:	20000180 	.word	0x20000180
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <xTaskGetTickCount+0x1c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80040a0:	687b      	ldr	r3, [r7, #4]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000174 	.word	0x20000174

080040b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040ba:	f001 fac7 	bl	800564c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80040c2:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <xTaskGetTickCountFromISR+0x20>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80040c8:	683b      	ldr	r3, [r7, #0]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000174 	.word	0x20000174

080040d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e2:	4b4e      	ldr	r3, [pc, #312]	; (800421c <xTaskIncrementTick+0x144>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f040 808e 	bne.w	8004208 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040ec:	4b4c      	ldr	r3, [pc, #304]	; (8004220 <xTaskIncrementTick+0x148>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80040f4:	4a4a      	ldr	r2, [pc, #296]	; (8004220 <xTaskIncrementTick+0x148>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d120      	bne.n	8004142 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004100:	4b48      	ldr	r3, [pc, #288]	; (8004224 <xTaskIncrementTick+0x14c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <xTaskIncrementTick+0x48>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	603b      	str	r3, [r7, #0]
    }
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xTaskIncrementTick+0x46>
 8004120:	4b40      	ldr	r3, [pc, #256]	; (8004224 <xTaskIncrementTick+0x14c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	4b40      	ldr	r3, [pc, #256]	; (8004228 <xTaskIncrementTick+0x150>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a3e      	ldr	r2, [pc, #248]	; (8004224 <xTaskIncrementTick+0x14c>)
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4a3e      	ldr	r2, [pc, #248]	; (8004228 <xTaskIncrementTick+0x150>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b3d      	ldr	r3, [pc, #244]	; (800422c <xTaskIncrementTick+0x154>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	4a3c      	ldr	r2, [pc, #240]	; (800422c <xTaskIncrementTick+0x154>)
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	f000 faaf 	bl	80046a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <xTaskIncrementTick+0x158>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d348      	bcc.n	80041de <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <xTaskIncrementTick+0x14c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004156:	4b36      	ldr	r3, [pc, #216]	; (8004230 <xTaskIncrementTick+0x158>)
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	601a      	str	r2, [r3, #0]
                    break;
 800415e:	e03e      	b.n	80041de <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004160:	4b30      	ldr	r3, [pc, #192]	; (8004224 <xTaskIncrementTick+0x14c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d203      	bcs.n	8004180 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004178:	4a2d      	ldr	r2, [pc, #180]	; (8004230 <xTaskIncrementTick+0x158>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800417e:	e02e      	b.n	80041de <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fee1 	bl	8002f4c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3318      	adds	r3, #24
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fed8 	bl	8002f4c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	4b23      	ldr	r3, [pc, #140]	; (8004234 <xTaskIncrementTick+0x15c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	4a22      	ldr	r2, [pc, #136]	; (8004234 <xTaskIncrementTick+0x15c>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <xTaskIncrementTick+0x160>)
 80041bc:	441a      	add	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fe fe64 	bl	8002e92 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <xTaskIncrementTick+0x164>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d3b9      	bcc.n	800414c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041dc:	e7b6      	b.n	800414c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041de:	4b17      	ldr	r3, [pc, #92]	; (800423c <xTaskIncrementTick+0x164>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4914      	ldr	r1, [pc, #80]	; (8004238 <xTaskIncrementTick+0x160>)
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d901      	bls.n	80041fa <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <xTaskIncrementTick+0x168>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e004      	b.n	8004212 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <xTaskIncrementTick+0x16c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <xTaskIncrementTick+0x16c>)
 8004210:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000198 	.word	0x20000198
 8004220:	20000174 	.word	0x20000174
 8004224:	20000128 	.word	0x20000128
 8004228:	2000012c 	.word	0x2000012c
 800422c:	20000188 	.word	0x20000188
 8004230:	20000190 	.word	0x20000190
 8004234:	20000178 	.word	0x20000178
 8004238:	2000009c 	.word	0x2000009c
 800423c:	20000098 	.word	0x20000098
 8004240:	20000184 	.word	0x20000184
 8004244:	20000180 	.word	0x20000180

08004248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800424e:	4b27      	ldr	r3, [pc, #156]	; (80042ec <vTaskSwitchContext+0xa4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <vTaskSwitchContext+0xa8>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800425c:	e03f      	b.n	80042de <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <vTaskSwitchContext+0xa8>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004264:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <vTaskSwitchContext+0xac>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	fab3 f383 	clz	r3, r3
 8004270:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	f1c3 031f 	rsb	r3, r3, #31
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	491f      	ldr	r1, [pc, #124]	; (80042f8 <vTaskSwitchContext+0xb0>)
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
    }
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vTaskSwitchContext+0x5a>
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <vTaskSwitchContext+0xb0>)
 80042b0:	4413      	add	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3308      	adds	r3, #8
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d104      	bne.n	80042d4 <vTaskSwitchContext+0x8c>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4a08      	ldr	r2, [pc, #32]	; (80042fc <vTaskSwitchContext+0xb4>)
 80042dc:	6013      	str	r3, [r2, #0]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000198 	.word	0x20000198
 80042f0:	20000184 	.word	0x20000184
 80042f4:	20000178 	.word	0x20000178
 80042f8:	2000009c 	.word	0x2000009c
 80042fc:	20000098 	.word	0x20000098

08004300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
    }
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <vTaskPlaceOnEventList+0x44>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3318      	adds	r3, #24
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fe fdd3 	bl	8002eda <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004334:	2101      	movs	r1, #1
 8004336:	6838      	ldr	r0, [r7, #0]
 8004338:	f000 fb7e 	bl	8004a38 <prvAddCurrentTaskToDelayedList>
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000098 	.word	0x20000098

08004348 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	617b      	str	r3, [r7, #20]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <vTaskPlaceOnEventListRestricted+0x54>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3318      	adds	r3, #24
 8004376:	4619      	mov	r1, r3
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7fe fd8a 	bl	8002e92 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	f000 fb53 	bl	8004a38 <prvAddCurrentTaskToDelayedList>
    }
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000098 	.word	0x20000098

080043a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60fb      	str	r3, [r7, #12]
    }
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3318      	adds	r3, #24
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fdbb 	bl	8002f4c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <xTaskRemoveFromEventList+0xac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11c      	bne.n	8004418 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fdb2 	bl	8002f4c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <xTaskRemoveFromEventList+0xb0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <xTaskRemoveFromEventList+0xb0>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <xTaskRemoveFromEventList+0xb4>)
 8004408:	441a      	add	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	3304      	adds	r3, #4
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7fe fd3e 	bl	8002e92 <vListInsertEnd>
 8004416:	e005      	b.n	8004424 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3318      	adds	r3, #24
 800441c:	4619      	mov	r1, r3
 800441e:	480e      	ldr	r0, [pc, #56]	; (8004458 <xTaskRemoveFromEventList+0xb8>)
 8004420:	f7fe fd37 	bl	8002e92 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <xTaskRemoveFromEventList+0xbc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	429a      	cmp	r2, r3
 8004430:	d905      	bls.n	800443e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004432:	2301      	movs	r3, #1
 8004434:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <xTaskRemoveFromEventList+0xc0>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e001      	b.n	8004442 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004442:	697b      	ldr	r3, [r7, #20]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000198 	.word	0x20000198
 8004450:	20000178 	.word	0x20000178
 8004454:	2000009c 	.word	0x2000009c
 8004458:	20000130 	.word	0x20000130
 800445c:	20000098 	.word	0x20000098
 8004460:	20000184 	.word	0x20000184

08004464 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <vTaskInternalSetTimeOutState+0x24>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <vTaskInternalSetTimeOutState+0x28>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	605a      	str	r2, [r3, #4]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000188 	.word	0x20000188
 800448c:	20000174 	.word	0x20000174

08004490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	613b      	str	r3, [r7, #16]
    }
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60fb      	str	r3, [r7, #12]
    }
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80044d2:	f000 ffd7 	bl	8005484 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <xTaskCheckForTimeOut+0xc4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d102      	bne.n	80044f6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e026      	b.n	8004544 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b17      	ldr	r3, [pc, #92]	; (8004558 <xTaskCheckForTimeOut+0xc8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d00a      	beq.n	8004518 <xTaskCheckForTimeOut+0x88>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	429a      	cmp	r2, r3
 800450a:	d305      	bcc.n	8004518 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e015      	b.n	8004544 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20b      	bcs.n	800453a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff98 	bl	8004464 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e004      	b.n	8004544 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004544:	f000 ffce 	bl	80054e4 <vPortExitCritical>

    return xReturn;
 8004548:	69fb      	ldr	r3, [r7, #28]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000174 	.word	0x20000174
 8004558:	20000188 	.word	0x20000188

0800455c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <vTaskMissedYield+0x14>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000184 	.word	0x20000184

08004574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800457c:	f000 f852 	bl	8004624 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <prvIdleTask+0x28>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d9f9      	bls.n	800457c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <prvIdleTask+0x2c>)
 800458a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004598:	e7f0      	b.n	800457c <prvIdleTask+0x8>
 800459a:	bf00      	nop
 800459c:	2000009c 	.word	0x2000009c
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	e00c      	b.n	80045ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <prvInitialiseTaskLists+0x60>)
 80045bc:	4413      	add	r3, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fc3a 	bl	8002e38 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3301      	adds	r3, #1
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d9ef      	bls.n	80045b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80045d0:	480d      	ldr	r0, [pc, #52]	; (8004608 <prvInitialiseTaskLists+0x64>)
 80045d2:	f7fe fc31 	bl	8002e38 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80045d6:	480d      	ldr	r0, [pc, #52]	; (800460c <prvInitialiseTaskLists+0x68>)
 80045d8:	f7fe fc2e 	bl	8002e38 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80045dc:	480c      	ldr	r0, [pc, #48]	; (8004610 <prvInitialiseTaskLists+0x6c>)
 80045de:	f7fe fc2b 	bl	8002e38 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80045e2:	480c      	ldr	r0, [pc, #48]	; (8004614 <prvInitialiseTaskLists+0x70>)
 80045e4:	f7fe fc28 	bl	8002e38 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80045e8:	480b      	ldr	r0, [pc, #44]	; (8004618 <prvInitialiseTaskLists+0x74>)
 80045ea:	f7fe fc25 	bl	8002e38 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <prvInitialiseTaskLists+0x78>)
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <prvInitialiseTaskLists+0x64>)
 80045f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <prvInitialiseTaskLists+0x7c>)
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <prvInitialiseTaskLists+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	2000009c 	.word	0x2000009c
 8004608:	20000100 	.word	0x20000100
 800460c:	20000114 	.word	0x20000114
 8004610:	20000130 	.word	0x20000130
 8004614:	20000144 	.word	0x20000144
 8004618:	2000015c 	.word	0x2000015c
 800461c:	20000128 	.word	0x20000128
 8004620:	2000012c 	.word	0x2000012c

08004624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800462a:	e019      	b.n	8004660 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800462c:	f000 ff2a 	bl	8005484 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <prvCheckTasksWaitingTermination+0x50>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fc85 	bl	8002f4c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <prvCheckTasksWaitingTermination+0x54>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3b01      	subs	r3, #1
 8004648:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <prvCheckTasksWaitingTermination+0x54>)
 800464a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <prvCheckTasksWaitingTermination+0x58>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3b01      	subs	r3, #1
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <prvCheckTasksWaitingTermination+0x58>)
 8004654:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004656:	f000 ff45 	bl	80054e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f810 	bl	8004680 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <prvCheckTasksWaitingTermination+0x58>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e1      	bne.n	800462c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000144 	.word	0x20000144
 8004678:	20000170 	.word	0x20000170
 800467c:	20000158 	.word	0x20000158

08004680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f8fd 	bl	800588c <vPortFree>
                vPortFree( pxTCB );
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 f8fa 	bl	800588c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <prvResetNextTaskUnblockTime+0x30>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <prvResetNextTaskUnblockTime+0x34>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80046b6:	e005      	b.n	80046c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <prvResetNextTaskUnblockTime+0x30>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <prvResetNextTaskUnblockTime+0x34>)
 80046c2:	6013      	str	r3, [r2, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000128 	.word	0x20000128
 80046d4:	20000190 	.word	0x20000190

080046d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <xTaskGetSchedulerState+0x34>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80046e6:	2301      	movs	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	e008      	b.n	80046fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ec:	4b08      	ldr	r3, [pc, #32]	; (8004710 <xTaskGetSchedulerState+0x38>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80046f4:	2302      	movs	r3, #2
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	e001      	b.n	80046fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80046fe:	687b      	ldr	r3, [r7, #4]
    }
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	2000017c 	.word	0x2000017c
 8004710:	20000198 	.word	0x20000198

08004714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05e      	beq.n	80047e8 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <xTaskPriorityInherit+0xe0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d24e      	bcs.n	80047d6 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	db06      	blt.n	800474e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004740:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <xTaskPriorityInherit+0xe0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f1c3 0205 	rsb	r2, r3, #5
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6959      	ldr	r1, [r3, #20]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <xTaskPriorityInherit+0xe4>)
 8004760:	4413      	add	r3, r2
 8004762:	4299      	cmp	r1, r3
 8004764:	d12f      	bne.n	80047c6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3304      	adds	r3, #4
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fbee 	bl	8002f4c <uxListRemove>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	2201      	movs	r2, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43da      	mvns	r2, r3
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <xTaskPriorityInherit+0xe8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <xTaskPriorityInherit+0xe8>)
 800478a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <xTaskPriorityInherit+0xe0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <xTaskPriorityInherit+0xe8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <xTaskPriorityInherit+0xe8>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <xTaskPriorityInherit+0xe4>)
 80047b6:	441a      	add	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f7fe fb67 	bl	8002e92 <vListInsertEnd>
 80047c4:	e004      	b.n	80047d0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <xTaskPriorityInherit+0xe0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e008      	b.n	80047e8 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <xTaskPriorityInherit+0xe0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d201      	bcs.n	80047e8 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80047e8:	68fb      	ldr	r3, [r7, #12]
    }
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000098 	.word	0x20000098
 80047f8:	2000009c 	.word	0x2000009c
 80047fc:	20000178 	.word	0x20000178

08004800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d063      	beq.n	80048de <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004816:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <xTaskPriorityDisinherit+0xe8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d00a      	beq.n	8004836 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
    }
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60bb      	str	r3, [r7, #8]
    }
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	429a      	cmp	r2, r3
 8004868:	d039      	beq.n	80048de <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d135      	bne.n	80048de <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3304      	adds	r3, #4
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fb68 	bl	8002f4c <uxListRemove>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43da      	mvns	r2, r3
 800488e:	4b17      	ldr	r3, [pc, #92]	; (80048ec <xTaskPriorityDisinherit+0xec>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4013      	ands	r3, r2
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <xTaskPriorityDisinherit+0xec>)
 8004896:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	f1c3 0205 	rsb	r2, r3, #5
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2201      	movs	r2, #1
 80048b2:	409a      	lsls	r2, r3
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <xTaskPriorityDisinherit+0xec>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <xTaskPriorityDisinherit+0xec>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <xTaskPriorityDisinherit+0xf0>)
 80048cc:	441a      	add	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fe fadc 	bl	8002e92 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80048de:	697b      	ldr	r3, [r7, #20]
    }
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000098 	.word	0x20000098
 80048ec:	20000178 	.word	0x20000178
 80048f0:	2000009c 	.word	0x2000009c

080048f4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d077      	beq.n	80049fc <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	60fb      	str	r3, [r7, #12]
    }
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d902      	bls.n	800493a <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e002      	b.n	8004940 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	429a      	cmp	r2, r3
 8004948:	d058      	beq.n	80049fc <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	429a      	cmp	r2, r3
 8004952:	d153      	bne.n	80049fc <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	429a      	cmp	r2, r3
 800495c:	d10a      	bne.n	8004974 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60bb      	str	r3, [r7, #8]
    }
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	db04      	blt.n	8004992 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f1c3 0205 	rsb	r2, r3, #5
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	6959      	ldr	r1, [r3, #20]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80049a2:	4413      	add	r3, r2
 80049a4:	4299      	cmp	r1, r3
 80049a6:	d129      	bne.n	80049fc <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe facd 	bl	8002f4c <uxListRemove>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2201      	movs	r2, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43da      	mvns	r2, r3
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049cc:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a06      	ldr	r2, [pc, #24]	; (8004a08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80049ee:	441a      	add	r2, r3
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7fe fa4b 	bl	8002e92 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80049fc:	bf00      	nop
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000098 	.word	0x20000098
 8004a08:	2000009c 	.word	0x2000009c
 8004a0c:	20000178 	.word	0x20000178

08004a10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004a14:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a22:	3201      	adds	r2, #1
 8004a24:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004a26:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a28:	681b      	ldr	r3, [r3, #0]
    }
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	20000098 	.word	0x20000098

08004a38 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a42:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a48:	4b28      	ldr	r3, [pc, #160]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fa7c 	bl	8002f4c <uxListRemove>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	2201      	movs	r2, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43da      	mvns	r2, r3
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d10a      	bne.n	8004a90 <prvAddCurrentTaskToDelayedList+0x58>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	481a      	ldr	r0, [pc, #104]	; (8004af4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a8a:	f7fe fa02 	bl	8002e92 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004a8e:	e026      	b.n	8004ade <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d209      	bcs.n	8004abc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fe fa10 	bl	8002eda <vListInsert>
}
 8004aba:	e010      	b.n	8004ade <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fe fa06 	bl	8002eda <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d202      	bcs.n	8004ade <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004ad8:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6013      	str	r3, [r2, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000174 	.word	0x20000174
 8004aec:	20000098 	.word	0x20000098
 8004af0:	20000178 	.word	0x20000178
 8004af4:	2000015c 	.word	0x2000015c
 8004af8:	2000012c 	.word	0x2000012c
 8004afc:	20000128 	.word	0x20000128
 8004b00:	20000190 	.word	0x20000190

08004b04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004b0e:	f000 fad5 	bl	80050bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <xTimerCreateTimerTask+0x54>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <xTimerCreateTimerTask+0x58>)
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	2302      	movs	r3, #2
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b28:	490d      	ldr	r1, [pc, #52]	; (8004b60 <xTimerCreateTimerTask+0x5c>)
 8004b2a:	480e      	ldr	r0, [pc, #56]	; (8004b64 <xTimerCreateTimerTask+0x60>)
 8004b2c:	f7ff f83c 	bl	8003ba8 <xTaskCreate>
 8004b30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	603b      	str	r3, [r7, #0]
    }
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004b4e:	687b      	ldr	r3, [r7, #4]
    }
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200001cc 	.word	0x200001cc
 8004b5c:	200001d0 	.word	0x200001d0
 8004b60:	080082c4 	.word	0x080082c4
 8004b64:	08004c9d 	.word	0x08004c9d

08004b68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	623b      	str	r3, [r7, #32]
    }
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02a      	beq.n	8004bf4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b05      	cmp	r3, #5
 8004bae:	dc18      	bgt.n	8004be2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bb0:	f7ff fd92 	bl	80046d8 <xTaskGetSchedulerState>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d109      	bne.n	8004bce <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	f107 0114 	add.w	r1, r7, #20
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc6:	f7fe fad5 	bl	8003174 <xQueueGenericSend>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24
 8004bcc:	e012      	b.n	8004bf4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f107 0114 	add.w	r1, r7, #20
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f7fe facb 	bl	8003174 <xQueueGenericSend>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24
 8004be0:	e008      	b.n	8004bf4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <xTimerGenericCommand+0x98>)
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	f107 0114 	add.w	r1, r7, #20
 8004bea:	2300      	movs	r3, #0
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	f7fe fbbf 	bl	8003370 <xQueueGenericSendFromISR>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3728      	adds	r7, #40	; 0x28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	200001cc 	.word	0x200001cc

08004c04 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <prvProcessExpiredTimer+0x94>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe f995 	bl	8002f4c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d022      	beq.n	8004c76 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	18d1      	adds	r1, r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	6978      	ldr	r0, [r7, #20]
 8004c3e:	f000 f8d1 	bl	8004de4 <prvInsertTimerInActiveList>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01f      	beq.n	8004c88 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	2100      	movs	r1, #0
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	f7ff ff88 	bl	8004b68 <xTimerGenericCommand>
 8004c58:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d113      	bne.n	8004c88 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
    }
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	6978      	ldr	r0, [r7, #20]
 8004c8e:	4798      	blx	r3
    }
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200001c4 	.word	0x200001c4

08004c9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ca4:	f107 0308 	add.w	r3, r7, #8
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f857 	bl	8004d5c <prvGetNextExpireTime>
 8004cae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f803 	bl	8004cc0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004cba:	f000 f8d5 	bl	8004e68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cbe:	e7f1      	b.n	8004ca4 <prvTimerTask+0x8>

08004cc0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004cca:	f7ff f939 	bl	8003f40 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f866 	bl	8004da4 <prvSampleTimeNow>
 8004cd8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d130      	bne.n	8004d42 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <prvProcessTimerOrBlockTask+0x3c>
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d806      	bhi.n	8004cfc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004cee:	f7ff f935 	bl	8003f5c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff85 	bl	8004c04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004cfa:	e024      	b.n	8004d46 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <prvProcessTimerOrBlockTask+0x90>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <prvProcessTimerOrBlockTask+0x50>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <prvProcessTimerOrBlockTask+0x52>
 8004d10:	2300      	movs	r3, #0
 8004d12:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <prvProcessTimerOrBlockTask+0x94>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fe ff0d 	bl	8003b40 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004d26:	f7ff f919 	bl	8003f5c <xTaskResumeAll>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <prvProcessTimerOrBlockTask+0x98>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
    }
 8004d40:	e001      	b.n	8004d46 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004d42:	f7ff f90b 	bl	8003f5c <xTaskResumeAll>
    }
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200001c8 	.word	0x200001c8
 8004d54:	200001cc 	.word	0x200001cc
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d64:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <prvGetNextExpireTime+0x44>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <prvGetNextExpireTime+0x16>
 8004d6e:	2201      	movs	r2, #1
 8004d70:	e000      	b.n	8004d74 <prvGetNextExpireTime+0x18>
 8004d72:	2200      	movs	r2, #0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <prvGetNextExpireTime+0x44>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e001      	b.n	8004d90 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d90:	68fb      	ldr	r3, [r7, #12]
    }
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	200001c4 	.word	0x200001c4

08004da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004dac:	f7ff f972 	bl	8004094 <xTaskGetTickCount>
 8004db0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <prvSampleTimeNow+0x3c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d205      	bcs.n	8004dc8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004dbc:	f000 f91a 	bl	8004ff4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e002      	b.n	8004dce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004dce:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <prvSampleTimeNow+0x3c>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
    }
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200001d4 	.word	0x200001d4

08004de4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d812      	bhi.n	8004e30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d302      	bcc.n	8004e1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e01b      	b.n	8004e56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <prvInsertTimerInActiveList+0x7c>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fe f856 	bl	8002eda <vListInsert>
 8004e2e:	e012      	b.n	8004e56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d206      	bcs.n	8004e46 <prvInsertTimerInActiveList+0x62>
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e007      	b.n	8004e56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <prvInsertTimerInActiveList+0x80>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe f842 	bl	8002eda <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004e56:	697b      	ldr	r3, [r7, #20]
    }
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200001c8 	.word	0x200001c8
 8004e64:	200001c4 	.word	0x200001c4

08004e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	; 0x30
 8004e6c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e6e:	e0ae      	b.n	8004fce <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f2c0 80aa 	blt.w	8004fcc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe f85f 	bl	8002f4c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff87 	bl	8004da4 <prvSampleTimeNow>
 8004e96:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b09      	cmp	r3, #9
 8004e9c:	f200 8097 	bhi.w	8004fce <prvProcessReceivedCommands+0x166>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <prvProcessReceivedCommands+0x40>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ed1 	.word	0x08004ed1
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ed1 	.word	0x08004ed1
 8004eb4:	08004f45 	.word	0x08004f45
 8004eb8:	08004f59 	.word	0x08004f59
 8004ebc:	08004fa3 	.word	0x08004fa3
 8004ec0:	08004ed1 	.word	0x08004ed1
 8004ec4:	08004ed1 	.word	0x08004ed1
 8004ec8:	08004f45 	.word	0x08004f45
 8004ecc:	08004f59 	.word	0x08004f59
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	18d1      	adds	r1, r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a3a      	ldr	r2, [r7, #32]
 8004eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef0:	f7ff ff78 	bl	8004de4 <prvInsertTimerInActiveList>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d069      	beq.n	8004fce <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f00:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d05e      	beq.n	8004fce <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	441a      	add	r2, r3
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2100      	movs	r1, #0
 8004f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f22:	f7ff fe21 	bl	8004b68 <xTimerGenericCommand>
 8004f26:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d14f      	bne.n	8004fce <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61bb      	str	r3, [r7, #24]
    }
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004f56:	e03a      	b.n	8004fce <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	617b      	str	r3, [r7, #20]
    }
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	18d1      	adds	r1, r2, r3
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9c:	f7ff ff22 	bl	8004de4 <prvInsertTimerInActiveList>
                        break;
 8004fa0:	e015      	b.n	8004fce <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fb2:	f000 fc6b 	bl	800588c <vPortFree>
 8004fb6:	e00a      	b.n	8004fce <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004fca:	e000      	b.n	8004fce <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004fcc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <prvProcessReceivedCommands+0x188>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f107 0108 	add.w	r1, r7, #8
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe fa73 	bl	80034c4 <xQueueReceive>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f47f af45 	bne.w	8004e70 <prvProcessReceivedCommands+0x8>
        }
    }
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	3728      	adds	r7, #40	; 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200001cc 	.word	0x200001cc

08004ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ffa:	e048      	b.n	800508e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ffc:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <prvSwitchTimerLists+0xc0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005006:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <prvSwitchTimerLists+0xc0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd ff99 	bl	8002f4c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d02e      	beq.n	800508e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d90e      	bls.n	8005060 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800504e:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <prvSwitchTimerLists+0xc0>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f7fd ff3e 	bl	8002eda <vListInsert>
 800505e:	e016      	b.n	800508e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	2100      	movs	r1, #0
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff fd7c 	bl	8004b68 <xTimerGenericCommand>
 8005070:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	603b      	str	r3, [r7, #0]
    }
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <prvSwitchTimerLists+0xc0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1b1      	bne.n	8004ffc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <prvSwitchTimerLists+0xc0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <prvSwitchTimerLists+0xc4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <prvSwitchTimerLists+0xc0>)
 80050a4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80050a6:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <prvSwitchTimerLists+0xc4>)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6013      	str	r3, [r2, #0]
    }
 80050ac:	bf00      	nop
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200001c4 	.word	0x200001c4
 80050b8:	200001c8 	.word	0x200001c8

080050bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80050c0:	f000 f9e0 	bl	8005484 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <prvCheckForValidListAndQueue+0x54>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80050cc:	4811      	ldr	r0, [pc, #68]	; (8005114 <prvCheckForValidListAndQueue+0x58>)
 80050ce:	f7fd feb3 	bl	8002e38 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80050d2:	4811      	ldr	r0, [pc, #68]	; (8005118 <prvCheckForValidListAndQueue+0x5c>)
 80050d4:	f7fd feb0 	bl	8002e38 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80050d8:	4b10      	ldr	r3, [pc, #64]	; (800511c <prvCheckForValidListAndQueue+0x60>)
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <prvCheckForValidListAndQueue+0x58>)
 80050dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <prvCheckForValidListAndQueue+0x64>)
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <prvCheckForValidListAndQueue+0x5c>)
 80050e2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80050e4:	2200      	movs	r2, #0
 80050e6:	210c      	movs	r1, #12
 80050e8:	200a      	movs	r0, #10
 80050ea:	f7fd ffc1 	bl	8003070 <xQueueGenericCreate>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4a07      	ldr	r2, [pc, #28]	; (8005110 <prvCheckForValidListAndQueue+0x54>)
 80050f2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <prvCheckForValidListAndQueue+0x54>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <prvCheckForValidListAndQueue+0x54>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4908      	ldr	r1, [pc, #32]	; (8005124 <prvCheckForValidListAndQueue+0x68>)
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fcf2 	bl	8003aec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005108:	f000 f9ec 	bl	80054e4 <vPortExitCritical>
    }
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	200001cc 	.word	0x200001cc
 8005114:	2000019c 	.word	0x2000019c
 8005118:	200001b0 	.word	0x200001b0
 800511c:	200001c4 	.word	0x200001c4
 8005120:	200001c8 	.word	0x200001c8
 8005124:	080082cc 	.word	0x080082cc

08005128 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3b04      	subs	r3, #4
 8005138:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005140:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3b04      	subs	r3, #4
 8005146:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b04      	subs	r3, #4
 8005156:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005158:	4a0c      	ldr	r2, [pc, #48]	; (800518c <pxPortInitialiseStack+0x64>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b14      	subs	r3, #20
 8005162:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3b04      	subs	r3, #4
 800516e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f06f 0202 	mvn.w	r2, #2
 8005176:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b20      	subs	r3, #32
 800517c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800517e:	68fb      	ldr	r3, [r7, #12]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	08005191 	.word	0x08005191

08005190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <prvTaskExitError+0x54>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d00a      	beq.n	80051ba <prvTaskExitError+0x2a>
        __asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
    }
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <prvTaskExitError+0x28>
        __asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	60bb      	str	r3, [r7, #8]
    }
 80051cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80051ce:	bf00      	nop
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0fc      	beq.n	80051d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	20000010 	.word	0x20000010
	...

080051f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <pxCurrentTCBConst2>)
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	6808      	ldr	r0, [r1, #0]
 80051f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	f380 8809 	msr	PSP, r0
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	4770      	bx	lr
 800520c:	f3af 8000 	nop.w

08005210 <pxCurrentTCBConst2>:
 8005210:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <prvPortStartFirstTask+0x24>)
 800521a:	6800      	ldr	r0, [r0, #0]
 800521c:	6800      	ldr	r0, [r0, #0]
 800521e:	f380 8808 	msr	MSP, r0
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8814 	msr	CONTROL, r0
 800522a:	b662      	cpsie	i
 800522c:	b661      	cpsie	f
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	df00      	svc	0
 8005238:	bf00      	nop
 800523a:	0000      	.short	0x0000
 800523c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop

08005244 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800524a:	4b46      	ldr	r3, [pc, #280]	; (8005364 <xPortStartScheduler+0x120>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a46      	ldr	r2, [pc, #280]	; (8005368 <xPortStartScheduler+0x124>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10a      	bne.n	800526a <xPortStartScheduler+0x26>
        __asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	613b      	str	r3, [r7, #16]
    }
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800526a:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <xPortStartScheduler+0x120>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a3f      	ldr	r2, [pc, #252]	; (800536c <xPortStartScheduler+0x128>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10a      	bne.n	800528a <xPortStartScheduler+0x46>
        __asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
    }
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <xPortStartScheduler+0x12c>)
 800528c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <xPortStartScheduler+0x130>)
 80052b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <xPortStartScheduler+0x134>)
 80052b4:	2207      	movs	r2, #7
 80052b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b8:	e009      	b.n	80052ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <xPortStartScheduler+0x134>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	4a2d      	ldr	r2, [pc, #180]	; (8005378 <xPortStartScheduler+0x134>)
 80052c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d0ef      	beq.n	80052ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052da:	4b27      	ldr	r3, [pc, #156]	; (8005378 <xPortStartScheduler+0x134>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1c3 0307 	rsb	r3, r3, #7
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00a      	beq.n	80052fc <xPortStartScheduler+0xb8>
        __asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
    }
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052fc:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <xPortStartScheduler+0x134>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <xPortStartScheduler+0x134>)
 8005304:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005306:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <xPortStartScheduler+0x134>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800530e:	4a1a      	ldr	r2, [pc, #104]	; (8005378 <xPortStartScheduler+0x134>)
 8005310:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <xPortStartScheduler+0x138>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a17      	ldr	r2, [pc, #92]	; (800537c <xPortStartScheduler+0x138>)
 8005320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005324:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <xPortStartScheduler+0x138>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a14      	ldr	r2, [pc, #80]	; (800537c <xPortStartScheduler+0x138>)
 800532c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005330:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005332:	f000 f95b 	bl	80055ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <xPortStartScheduler+0x13c>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800533c:	f000 f97a 	bl	8005634 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <xPortStartScheduler+0x140>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0f      	ldr	r2, [pc, #60]	; (8005384 <xPortStartScheduler+0x140>)
 8005346:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800534a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800534c:	f7ff ff64 	bl	8005218 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005350:	f7fe ff7a 	bl	8004248 <vTaskSwitchContext>
    prvTaskExitError();
 8005354:	f7ff ff1c 	bl	8005190 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	e000ed00 	.word	0xe000ed00
 8005368:	410fc271 	.word	0x410fc271
 800536c:	410fc270 	.word	0x410fc270
 8005370:	e000e400 	.word	0xe000e400
 8005374:	200001d8 	.word	0x200001d8
 8005378:	200001dc 	.word	0x200001dc
 800537c:	e000ed20 	.word	0xe000ed20
 8005380:	20000010 	.word	0x20000010
 8005384:	e000ef34 	.word	0xe000ef34

08005388 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800538e:	4b37      	ldr	r3, [pc, #220]	; (800546c <vInitPrioGroupValue+0xe4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a37      	ldr	r2, [pc, #220]	; (8005470 <vInitPrioGroupValue+0xe8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10a      	bne.n	80053ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	613b      	str	r3, [r7, #16]
    }
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053ae:	4b2f      	ldr	r3, [pc, #188]	; (800546c <vInitPrioGroupValue+0xe4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a30      	ldr	r2, [pc, #192]	; (8005474 <vInitPrioGroupValue+0xec>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d10a      	bne.n	80053ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	60fb      	str	r3, [r7, #12]
    }
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053ce:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <vInitPrioGroupValue+0xf0>)
 80053d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	22ff      	movs	r2, #255	; 0xff
 80053de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <vInitPrioGroupValue+0xf4>)
 80053f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <vInitPrioGroupValue+0xf8>)
 80053f8:	2207      	movs	r2, #7
 80053fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053fc:	e009      	b.n	8005412 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <vInitPrioGroupValue+0xf8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3b01      	subs	r3, #1
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <vInitPrioGroupValue+0xf8>)
 8005406:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d0ef      	beq.n	80053fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <vInitPrioGroupValue+0xf8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1c3 0307 	rsb	r3, r3, #7
 8005426:	2b04      	cmp	r3, #4
 8005428:	d00a      	beq.n	8005440 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	60bb      	str	r3, [r7, #8]
    }
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <vInitPrioGroupValue+0xf8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <vInitPrioGroupValue+0xf8>)
 8005448:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <vInitPrioGroupValue+0xf8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005452:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <vInitPrioGroupValue+0xf8>)
 8005454:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e000ed00 	.word	0xe000ed00
 8005470:	410fc271 	.word	0x410fc271
 8005474:	410fc270 	.word	0x410fc270
 8005478:	e000e400 	.word	0xe000e400
 800547c:	200001d8 	.word	0x200001d8
 8005480:	200001dc 	.word	0x200001dc

08005484 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
        __asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	607b      	str	r3, [r7, #4]
    }
 800549c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800549e:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <vPortEnterCritical+0x58>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	4a0d      	ldr	r2, [pc, #52]	; (80054dc <vPortEnterCritical+0x58>)
 80054a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80054a8:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <vPortEnterCritical+0x58>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10f      	bne.n	80054d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <vPortEnterCritical+0x5c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	603b      	str	r3, [r7, #0]
    }
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <vPortEnterCritical+0x4a>
    }
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000010 	.word	0x20000010
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <vPortExitCritical+0x50>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <vPortExitCritical+0x24>
        __asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	607b      	str	r3, [r7, #4]
    }
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <vPortExitCritical+0x50>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3b01      	subs	r3, #1
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <vPortExitCritical+0x50>)
 8005510:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <vPortExitCritical+0x50>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <vPortExitCritical+0x42>
 800551a:	2300      	movs	r3, #0
 800551c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f383 8811 	msr	BASEPRI, r3
    }
 8005524:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000010 	.word	0x20000010
	...

08005540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005540:	f3ef 8009 	mrs	r0, PSP
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <pxCurrentTCBConst>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f01e 0f10 	tst.w	lr, #16
 8005550:	bf08      	it	eq
 8005552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	6010      	str	r0, [r2, #0]
 800555c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005564:	f380 8811 	msr	BASEPRI, r0
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f7fe fe6a 	bl	8004248 <vTaskSwitchContext>
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f380 8811 	msr	BASEPRI, r0
 800557c:	bc09      	pop	{r0, r3}
 800557e:	6819      	ldr	r1, [r3, #0]
 8005580:	6808      	ldr	r0, [r1, #0]
 8005582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005586:	f01e 0f10 	tst.w	lr, #16
 800558a:	bf08      	it	eq
 800558c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005590:	f380 8809 	msr	PSP, r0
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	f3af 8000 	nop.w

080055a0 <pxCurrentTCBConst>:
 80055a0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop

080055a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
        __asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	607b      	str	r3, [r7, #4]
    }
 80055c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80055c2:	f7fe fd89 	bl	80040d8 <xTaskIncrementTick>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <SysTick_Handler+0x40>)
 80055ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	2300      	movs	r3, #0
 80055d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f383 8811 	msr	BASEPRI, r3
    }
 80055de:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <vPortSetupTimerInterrupt+0x34>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <vPortSetupTimerInterrupt+0x38>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <vPortSetupTimerInterrupt+0x3c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <vPortSetupTimerInterrupt+0x40>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	099b      	lsrs	r3, r3, #6
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <vPortSetupTimerInterrupt+0x44>)
 800560a:	3b01      	subs	r3, #1
 800560c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800560e:	4b04      	ldr	r3, [pc, #16]	; (8005620 <vPortSetupTimerInterrupt+0x34>)
 8005610:	2207      	movs	r2, #7
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	e000e010 	.word	0xe000e010
 8005624:	e000e018 	.word	0xe000e018
 8005628:	20000000 	.word	0x20000000
 800562c:	10624dd3 	.word	0x10624dd3
 8005630:	e000e014 	.word	0xe000e014

08005634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005644 <vPortEnableVFP+0x10>
 8005638:	6801      	ldr	r1, [r0, #0]
 800563a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800563e:	6001      	str	r1, [r0, #0]
 8005640:	4770      	bx	lr
 8005642:	0000      	.short	0x0000
 8005644:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop

0800564c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005652:	f3ef 8305 	mrs	r3, IPSR
 8005656:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d914      	bls.n	8005688 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800565e:	4a17      	ldr	r2, [pc, #92]	; (80056bc <vPortValidateInterruptPriority+0x70>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <vPortValidateInterruptPriority+0x74>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	7afa      	ldrb	r2, [r7, #11]
 800566e:	429a      	cmp	r2, r3
 8005670:	d20a      	bcs.n	8005688 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	607b      	str	r3, [r7, #4]
    }
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005688:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <vPortValidateInterruptPriority+0x78>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <vPortValidateInterruptPriority+0x7c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d90a      	bls.n	80056ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	603b      	str	r3, [r7, #0]
    }
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <vPortValidateInterruptPriority+0x60>
    }
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000e3f0 	.word	0xe000e3f0
 80056c0:	200001d8 	.word	0x200001d8
 80056c4:	e000ed0c 	.word	0xe000ed0c
 80056c8:	200001dc 	.word	0x200001dc

080056cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80056d8:	f7fe fc32 	bl	8003f40 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80056dc:	4b65      	ldr	r3, [pc, #404]	; (8005874 <pvPortMalloc+0x1a8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80056e4:	f000 f934 	bl	8005950 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056e8:	4b63      	ldr	r3, [pc, #396]	; (8005878 <pvPortMalloc+0x1ac>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 80a7 	bne.w	8005844 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d02d      	beq.n	8005758 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80056fc:	2208      	movs	r2, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d227      	bcs.n	8005758 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005708:	2208      	movs	r2, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d021      	beq.n	800575e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f023 0307 	bic.w	r3, r3, #7
 8005720:	3308      	adds	r3, #8
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d214      	bcs.n	8005752 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	3308      	adds	r3, #8
 8005730:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	2b00      	cmp	r3, #0
 800573a:	d010      	beq.n	800575e <pvPortMalloc+0x92>
        __asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	617b      	str	r3, [r7, #20]
    }
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005756:	e002      	b.n	800575e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	e000      	b.n	8005760 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800575e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d06e      	beq.n	8005844 <pvPortMalloc+0x178>
 8005766:	4b45      	ldr	r3, [pc, #276]	; (800587c <pvPortMalloc+0x1b0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d869      	bhi.n	8005844 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005770:	4b43      	ldr	r3, [pc, #268]	; (8005880 <pvPortMalloc+0x1b4>)
 8005772:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005774:	4b42      	ldr	r3, [pc, #264]	; (8005880 <pvPortMalloc+0x1b4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577a:	e004      	b.n	8005786 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d903      	bls.n	8005798 <pvPortMalloc+0xcc>
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f1      	bne.n	800577c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005798:	4b36      	ldr	r3, [pc, #216]	; (8005874 <pvPortMalloc+0x1a8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579e:	429a      	cmp	r2, r3
 80057a0:	d050      	beq.n	8005844 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2208      	movs	r2, #8
 80057a8:	4413      	add	r3, r2
 80057aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	2308      	movs	r3, #8
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d91f      	bls.n	8005804 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <pvPortMalloc+0x120>
        __asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	613b      	str	r3, [r7, #16]
    }
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057fe:	69b8      	ldr	r0, [r7, #24]
 8005800:	f000 f908 	bl	8005a14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <pvPortMalloc+0x1b0>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <pvPortMalloc+0x1b0>)
 8005810:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <pvPortMalloc+0x1b0>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <pvPortMalloc+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d203      	bcs.n	8005826 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <pvPortMalloc+0x1b0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <pvPortMalloc+0x1b8>)
 8005824:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <pvPortMalloc+0x1ac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	431a      	orrs	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800583a:	4b13      	ldr	r3, [pc, #76]	; (8005888 <pvPortMalloc+0x1bc>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	4a11      	ldr	r2, [pc, #68]	; (8005888 <pvPortMalloc+0x1bc>)
 8005842:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005844:	f7fe fb8a 	bl	8003f5c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <pvPortMalloc+0x19c>
        __asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	60fb      	str	r3, [r7, #12]
    }
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <pvPortMalloc+0x19a>
    return pvReturn;
 8005868:	69fb      	ldr	r3, [r7, #28]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20012de8 	.word	0x20012de8
 8005878:	20012dfc 	.word	0x20012dfc
 800587c:	20012dec 	.word	0x20012dec
 8005880:	20012de0 	.word	0x20012de0
 8005884:	20012df0 	.word	0x20012df0
 8005888:	20012df4 	.word	0x20012df4

0800588c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04d      	beq.n	800593a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800589e:	2308      	movs	r3, #8
 80058a0:	425b      	negs	r3, r3
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4b24      	ldr	r3, [pc, #144]	; (8005944 <vPortFree+0xb8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <vPortFree+0x44>
        __asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60fb      	str	r3, [r7, #12]
    }
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <vPortFree+0x62>
        __asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60bb      	str	r3, [r7, #8]
    }
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <vPortFree+0xb8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01e      	beq.n	800593a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11a      	bne.n	800593a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <vPortFree+0xb8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005914:	f7fe fb14 	bl	8003f40 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vPortFree+0xbc>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4413      	add	r3, r2
 8005922:	4a09      	ldr	r2, [pc, #36]	; (8005948 <vPortFree+0xbc>)
 8005924:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f000 f874 	bl	8005a14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <vPortFree+0xc0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a06      	ldr	r2, [pc, #24]	; (800594c <vPortFree+0xc0>)
 8005934:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005936:	f7fe fb11 	bl	8003f5c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20012dfc 	.word	0x20012dfc
 8005948:	20012dec 	.word	0x20012dec
 800594c:	20012df8 	.word	0x20012df8

08005950 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005956:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800595a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <prvHeapInit+0xac>)
 800595e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3307      	adds	r3, #7
 800596e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0307 	bic.w	r3, r3, #7
 8005976:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <prvHeapInit+0xac>)
 8005980:	4413      	add	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005988:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <prvHeapInit+0xb0>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800598e:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <prvHeapInit+0xb0>)
 8005990:	2200      	movs	r2, #0
 8005992:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	4413      	add	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800599c:	2208      	movs	r2, #8
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <prvHeapInit+0xb4>)
 80059b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80059b2:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <prvHeapInit+0xb4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <prvHeapInit+0xb4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <prvHeapInit+0xb4>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <prvHeapInit+0xb8>)
 80059de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <prvHeapInit+0xbc>)
 80059e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <prvHeapInit+0xc0>)
 80059ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059ee:	601a      	str	r2, [r3, #0]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	200001e0 	.word	0x200001e0
 8005a00:	20012de0 	.word	0x20012de0
 8005a04:	20012de8 	.word	0x20012de8
 8005a08:	20012df0 	.word	0x20012df0
 8005a0c:	20012dec 	.word	0x20012dec
 8005a10:	20012dfc 	.word	0x20012dfc

08005a14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a1c:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <prvInsertBlockIntoFreeList+0xac>)
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e002      	b.n	8005a28 <prvInsertBlockIntoFreeList+0x14>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d8f7      	bhi.n	8005a22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d108      	bne.n	8005a56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	441a      	add	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	441a      	add	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d118      	bne.n	8005a9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d00d      	beq.n	8005a92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	441a      	add	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e008      	b.n	8005aa4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e003      	b.n	8005aa4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d002      	beq.n	8005ab2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20012de0 	.word	0x20012de0
 8005ac4:	20012de8 	.word	0x20012de8

08005ac8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005acc:	4803      	ldr	r0, [pc, #12]	; (8005adc <_cbSendSystemDesc+0x14>)
 8005ace:	f001 f975 	bl	8006dbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005ad2:	4803      	ldr	r0, [pc, #12]	; (8005ae0 <_cbSendSystemDesc+0x18>)
 8005ad4:	f001 f972 	bl	8006dbc <SEGGER_SYSVIEW_SendSysDesc>
}
 8005ad8:	bf00      	nop
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	080082d4 	.word	0x080082d4
 8005ae0:	08008318 	.word	0x08008318

08005ae4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <SEGGER_SYSVIEW_Conf+0x20>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <SEGGER_SYSVIEW_Conf+0x20>)
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <SEGGER_SYSVIEW_Conf+0x24>)
 8005af2:	4a06      	ldr	r2, [pc, #24]	; (8005b0c <SEGGER_SYSVIEW_Conf+0x28>)
 8005af4:	f000 fde6 	bl	80066c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005af8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005afc:	f000 fe28 	bl	8006750 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005b00:	bf00      	nop
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000000 	.word	0x20000000
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08008360 	.word	0x08008360

08005b10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	e033      	b.n	8005b84 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005b1c:	491e      	ldr	r1, [pc, #120]	; (8005b98 <_cbSendTaskList+0x88>)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	491a      	ldr	r1, [pc, #104]	; (8005b98 <_cbSendTaskList+0x88>)
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	4c16      	ldr	r4, [pc, #88]	; (8005b98 <_cbSendTaskList+0x88>)
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4423      	add	r3, r4
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	681c      	ldr	r4, [r3, #0]
 8005b50:	4d11      	ldr	r5, [pc, #68]	; (8005b98 <_cbSendTaskList+0x88>)
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	442b      	add	r3, r5
 8005b5e:	330c      	adds	r3, #12
 8005b60:	681d      	ldr	r5, [r3, #0]
 8005b62:	4e0d      	ldr	r6, [pc, #52]	; (8005b98 <_cbSendTaskList+0x88>)
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4433      	add	r3, r6
 8005b70:	3310      	adds	r3, #16
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	462b      	mov	r3, r5
 8005b78:	4622      	mov	r2, r4
 8005b7a:	f000 f84d 	bl	8005c18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3301      	adds	r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <_cbSendTaskList+0x8c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3c6      	bcc.n	8005b1c <_cbSendTaskList+0xc>
  }
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b98:	20012e00 	.word	0x20012e00
 8005b9c:	20012ea0 	.word	0x20012ea0

08005ba0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005ba0:	b5b0      	push	{r4, r5, r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005ba6:	f7fe fa85 	bl	80040b4 <xTaskGetTickCountFromISR>
 8005baa:	4603      	mov	r3, r0
 8005bac:	461a      	mov	r2, r3
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	f04f 0400 	mov.w	r4, #0
 8005bc2:	f04f 0500 	mov.w	r5, #0
 8005bc6:	015d      	lsls	r5, r3, #5
 8005bc8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005bcc:	0154      	lsls	r4, r2, #5
 8005bce:	4622      	mov	r2, r4
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	1a12      	subs	r2, r2, r0
 8005bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd8:	f04f 0400 	mov.w	r4, #0
 8005bdc:	f04f 0500 	mov.w	r5, #0
 8005be0:	009d      	lsls	r5, r3, #2
 8005be2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8005be6:	0094      	lsls	r4, r2, #2
 8005be8:	4622      	mov	r2, r4
 8005bea:	462b      	mov	r3, r5
 8005bec:	1812      	adds	r2, r2, r0
 8005bee:	eb41 0303 	adc.w	r3, r1, r3
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	00d9      	lsls	r1, r3, #3
 8005bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c00:	00d0      	lsls	r0, r2, #3
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8005c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bdb0      	pop	{r4, r5, r7, pc}

08005c18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	2214      	movs	r2, #20
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fa40 	bl	80070b4 <memset>
  TaskInfo.TaskID     = TaskID;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 ffbd 	bl	8006bcc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005c52:	bf00      	nop
 8005c54:	3728      	adds	r7, #40	; 0x28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <_DoInit+0x98>)
 8005c64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <_DoInit+0x9c>)
 8005c76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <_DoInit+0xa0>)
 8005c7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <_DoInit+0x9c>)
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <_DoInit+0xa4>)
 8005ca2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <_DoInit+0xa8>)
 8005cc2:	6810      	ldr	r0, [r2, #0]
 8005cc4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005cc6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <_DoInit+0xac>)
 8005cce:	6810      	ldr	r0, [r2, #0]
 8005cd0:	6018      	str	r0, [r3, #0]
 8005cd2:	8891      	ldrh	r1, [r2, #4]
 8005cd4:	7992      	ldrb	r2, [r2, #6]
 8005cd6:	8099      	strh	r1, [r3, #4]
 8005cd8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005cda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ce4:	f3bf 8f5f 	dmb	sy
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20014468 	.word	0x20014468
 8005cf8:	08008328 	.word	0x08008328
 8005cfc:	20012ea4 	.word	0x20012ea4
 8005d00:	200132a4 	.word	0x200132a4
 8005d04:	08008334 	.word	0x08008334
 8005d08:	08008338 	.word	0x08008338

08005d0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d905      	bls.n	8005d3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	e007      	b.n	8005d4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	69b9      	ldr	r1, [r7, #24]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	1acb      	subs	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bf28      	it	cs
 8005d5a:	4613      	movcs	r3, r2
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bf28      	it	cs
 8005d66:	4613      	movcs	r3, r2
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f001 f98d 	bl	8007098 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	4413      	add	r3, r2
 8005d84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	4413      	add	r3, r2
 8005d8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	4413      	add	r3, r2
 8005d9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d101      	bne.n	8005dac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1b2      	bne.n	8005d22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3728      	adds	r7, #40	; 0x28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b088      	sub	sp, #32
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d911      	bls.n	8005e0e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	6938      	ldr	r0, [r7, #16]
 8005dfa:	f001 f94d 	bl	8007098 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dfe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005e0c:	e01f      	b.n	8005e4e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	6938      	ldr	r0, [r7, #16]
 8005e22:	f001 f939 	bl	8007098 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	4413      	add	r3, r2
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6938      	ldr	r0, [r7, #16]
 8005e40:	f001 f92a 	bl	8007098 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	60da      	str	r2, [r3, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d808      	bhi.n	8005e84 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e004      	b.n	8005e8e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005e8e:	697b      	ldr	r3, [r7, #20]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08c      	sub	sp, #48	; 0x30
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ea8:	4b3e      	ldr	r3, [pc, #248]	; (8005fa4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <SEGGER_RTT_ReadNoLock+0x1e>
 8005eb6:	f7ff fed1 	bl	8005c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	3360      	adds	r3, #96	; 0x60
 8005ec6:	4a37      	ldr	r2, [pc, #220]	; (8005fa4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005edc:	2300      	movs	r3, #0
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d92b      	bls.n	8005f40 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	bf28      	it	cs
 8005efa:	4613      	movcs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	4413      	add	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	6939      	ldr	r1, [r7, #16]
 8005f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0e:	f001 f8c3 	bl	8007098 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d101      	bne.n	8005f40 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bf28      	it	cs
 8005f50:	4613      	movcs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	4413      	add	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	6939      	ldr	r1, [r7, #16]
 8005f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f6a:	f001 f895 	bl	8007098 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4413      	add	r3, r2
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3730      	adds	r7, #48	; 0x30
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20014468 	.word	0x20014468

08005fa8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4413      	add	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005fc6:	4413      	add	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d029      	beq.n	8006026 <SEGGER_RTT_WriteNoLock+0x7e>
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d82e      	bhi.n	8006034 <SEGGER_RTT_WriteNoLock+0x8c>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <SEGGER_RTT_WriteNoLock+0x38>
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d013      	beq.n	8006006 <SEGGER_RTT_WriteNoLock+0x5e>
 8005fde:	e029      	b.n	8006034 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005fe0:	6978      	ldr	r0, [r7, #20]
 8005fe2:	f7ff ff38 	bl	8005e56 <_GetAvailWriteSpace>
 8005fe6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d202      	bcs.n	8005ff6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005ff4:	e021      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff fee1 	bl	8005dc6 <_WriteNoCheck>
    break;
 8006004:	e019      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006006:	6978      	ldr	r0, [r7, #20]
 8006008:	f7ff ff25 	bl	8005e56 <_GetAvailWriteSpace>
 800600c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4293      	cmp	r3, r2
 8006014:	bf28      	it	cs
 8006016:	4613      	movcs	r3, r2
 8006018:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	69b9      	ldr	r1, [r7, #24]
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f7ff fed1 	bl	8005dc6 <_WriteNoCheck>
    break;
 8006024:	e009      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	6978      	ldr	r0, [r7, #20]
 800602c:	f7ff fe6e 	bl	8005d0c <_WriteBlocking>
 8006030:	61f8      	str	r0, [r7, #28]
    break;
 8006032:	e002      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
    break;
 8006038:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800603a:	69fb      	ldr	r3, [r7, #28]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20014468 	.word	0x20014468

08006048 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <SEGGER_RTT_Write+0x48>)
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <SEGGER_RTT_Write+0x1e>
 8006062:	f7ff fdfb 	bl	8005c5c <_DoInit>
  SEGGER_RTT_LOCK();
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	f04f 0120 	mov.w	r1, #32
 800606e:	f381 8811 	msr	BASEPRI, r1
 8006072:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff95 	bl	8005fa8 <SEGGER_RTT_WriteNoLock>
 800607e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006086:	697b      	ldr	r3, [r7, #20]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20014468 	.word	0x20014468

08006094 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80060a2:	4b3d      	ldr	r3, [pc, #244]	; (8006198 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80060b0:	f7ff fdd4 	bl	8005c5c <_DoInit>
  SEGGER_RTT_LOCK();
 80060b4:	f3ef 8311 	mrs	r3, BASEPRI
 80060b8:	f04f 0120 	mov.w	r1, #32
 80060bc:	f381 8811 	msr	BASEPRI, r1
 80060c0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060c2:	4b35      	ldr	r3, [pc, #212]	; (8006198 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80060c4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80060ca:	6939      	ldr	r1, [r7, #16]
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	4613      	mov	r3, r2
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	4413      	add	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	440b      	add	r3, r1
 80060da:	3304      	adds	r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	dbeb      	blt.n	80060ca <SEGGER_RTT_AllocUpBuffer+0x36>
 80060f2:	e000      	b.n	80060f6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80060f4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	da3f      	bge.n	8006180 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006100:	6939      	ldr	r1, [r7, #16]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	4613      	mov	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	4413      	add	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	440b      	add	r3, r1
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006114:	6939      	ldr	r1, [r7, #16]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	3304      	adds	r3, #4
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800612a:	6939      	ldr	r1, [r7, #16]
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	4613      	mov	r3, r2
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	440b      	add	r3, r1
 8006138:	3320      	adds	r3, #32
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800613e:	6939      	ldr	r1, [r7, #16]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	4613      	mov	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	440b      	add	r3, r1
 800614c:	3328      	adds	r3, #40	; 0x28
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006152:	6939      	ldr	r1, [r7, #16]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	4613      	mov	r3, r2
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	3324      	adds	r3, #36	; 0x24
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006166:	6939      	ldr	r1, [r7, #16]
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	440b      	add	r3, r1
 8006174:	332c      	adds	r3, #44	; 0x2c
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800617a:	f3bf 8f5f 	dmb	sy
 800617e:	e002      	b.n	8006186 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800618c:	69fb      	ldr	r3, [r7, #28]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3720      	adds	r7, #32
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20014468 	.word	0x20014468

0800619c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80061aa:	4b33      	ldr	r3, [pc, #204]	; (8006278 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80061b8:	f7ff fd50 	bl	8005c5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061bc:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80061be:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	461a      	mov	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d24d      	bcs.n	8006268 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80061cc:	f3ef 8311 	mrs	r3, BASEPRI
 80061d0:	f04f 0120 	mov.w	r1, #32
 80061d4:	f381 8811 	msr	BASEPRI, r1
 80061d8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d031      	beq.n	8006244 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80061e0:	6979      	ldr	r1, [r7, #20]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4613      	mov	r3, r2
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	4413      	add	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	440b      	add	r3, r1
 80061ee:	3360      	adds	r3, #96	; 0x60
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	3364      	adds	r3, #100	; 0x64
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006208:	6979      	ldr	r1, [r7, #20]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	3368      	adds	r3, #104	; 0x68
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	3370      	adds	r3, #112	; 0x70
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006230:	6979      	ldr	r1, [r7, #20]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	440b      	add	r3, r1
 800623e:	336c      	adds	r3, #108	; 0x6c
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	3374      	adds	r3, #116	; 0x74
 8006254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006256:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006258:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	e002      	b.n	800626e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
 800626c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800626e:	69fb      	ldr	r3, [r7, #28]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20014468 	.word	0x20014468

0800627c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800628c:	e002      	b.n	8006294 <_EncodeStr+0x18>
    Len++;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3301      	adds	r3, #1
 8006292:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4413      	add	r3, r2
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f6      	bne.n	800628e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d901      	bls.n	80062ac <_EncodeStr+0x30>
    Len = Limit;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2bfe      	cmp	r3, #254	; 0xfe
 80062b0:	d806      	bhi.n	80062c0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	60fa      	str	r2, [r7, #12]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e011      	b.n	80062e4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	60fa      	str	r2, [r7, #12]
 80062c6:	22ff      	movs	r2, #255	; 0xff
 80062c8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	60fa      	str	r2, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	0a19      	lsrs	r1, r3, #8
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	60fa      	str	r2, [r7, #12]
 80062e0:	b2ca      	uxtb	r2, r1
 80062e2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80062e8:	e00a      	b.n	8006300 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	1c53      	adds	r3, r2, #1
 80062ee:	60bb      	str	r3, [r7, #8]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	60f9      	str	r1, [r7, #12]
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	701a      	strb	r2, [r3, #0]
    n++;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	3301      	adds	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	429a      	cmp	r2, r3
 8006306:	d3f0      	bcc.n	80062ea <_EncodeStr+0x6e>
  }
  return pPayload;
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006336:	4b36      	ldr	r3, [pc, #216]	; (8006410 <_HandleIncomingPacket+0xe0>)
 8006338:	7e1b      	ldrb	r3, [r3, #24]
 800633a:	4618      	mov	r0, r3
 800633c:	1cfb      	adds	r3, r7, #3
 800633e:	2201      	movs	r2, #1
 8006340:	4619      	mov	r1, r3
 8006342:	f7ff fdab 	bl	8005e9c <SEGGER_RTT_ReadNoLock>
 8006346:	4603      	mov	r3, r0
 8006348:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	dd54      	ble.n	80063fa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d032      	beq.n	80063bc <_HandleIncomingPacket+0x8c>
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	dc42      	bgt.n	80063e0 <_HandleIncomingPacket+0xb0>
 800635a:	2b07      	cmp	r3, #7
 800635c:	dc16      	bgt.n	800638c <_HandleIncomingPacket+0x5c>
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd3e      	ble.n	80063e0 <_HandleIncomingPacket+0xb0>
 8006362:	3b01      	subs	r3, #1
 8006364:	2b06      	cmp	r3, #6
 8006366:	d83b      	bhi.n	80063e0 <_HandleIncomingPacket+0xb0>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <_HandleIncomingPacket+0x40>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006393 	.word	0x08006393
 8006374:	08006399 	.word	0x08006399
 8006378:	0800639f 	.word	0x0800639f
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063ab 	.word	0x080063ab
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063b7 	.word	0x080063b7
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d036      	beq.n	80063fe <_HandleIncomingPacket+0xce>
 8006390:	e026      	b.n	80063e0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006392:	f000 faa1 	bl	80068d8 <SEGGER_SYSVIEW_Start>
      break;
 8006396:	e037      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006398:	f000 fb58 	bl	8006a4c <SEGGER_SYSVIEW_Stop>
      break;
 800639c:	e034      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800639e:	f000 fd31 	bl	8006e04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80063a2:	e031      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80063a4:	f000 fcf6 	bl	8006d94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80063a8:	e02e      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80063aa:	f000 fb75 	bl	8006a98 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80063ae:	e02b      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80063b0:	f000 fdf8 	bl	8006fa4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80063b4:	e028      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80063b6:	f000 fdd7 	bl	8006f68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80063ba:	e025      	b.n	8006408 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <_HandleIncomingPacket+0xe0>)
 80063be:	7e1b      	ldrb	r3, [r3, #24]
 80063c0:	4618      	mov	r0, r3
 80063c2:	1cfb      	adds	r3, r7, #3
 80063c4:	2201      	movs	r2, #1
 80063c6:	4619      	mov	r1, r3
 80063c8:	f7ff fd68 	bl	8005e9c <SEGGER_RTT_ReadNoLock>
 80063cc:	4603      	mov	r3, r0
 80063ce:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dd15      	ble.n	8006402 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fd45 	bl	8006e68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80063de:	e010      	b.n	8006402 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	b25b      	sxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da0e      	bge.n	8006406 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063e8:	4b09      	ldr	r3, [pc, #36]	; (8006410 <_HandleIncomingPacket+0xe0>)
 80063ea:	7e1b      	ldrb	r3, [r3, #24]
 80063ec:	4618      	mov	r0, r3
 80063ee:	1cfb      	adds	r3, r7, #3
 80063f0:	2201      	movs	r2, #1
 80063f2:	4619      	mov	r1, r3
 80063f4:	f7ff fd52 	bl	8005e9c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80063f8:	e005      	b.n	8006406 <_HandleIncomingPacket+0xd6>
    }
  }
 80063fa:	bf00      	nop
 80063fc:	e004      	b.n	8006408 <_HandleIncomingPacket+0xd8>
      break;
 80063fe:	bf00      	nop
 8006400:	e002      	b.n	8006408 <_HandleIncomingPacket+0xd8>
      break;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <_HandleIncomingPacket+0xd8>
      break;
 8006406:	bf00      	nop
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	200142bc 	.word	0x200142bc

08006414 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800641a:	2301      	movs	r3, #1
 800641c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800641e:	1d3b      	adds	r3, r7, #4
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006428:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
 800642e:	e00b      	b.n	8006448 <_TrySendOverflowPacket+0x34>
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	b2da      	uxtb	r2, r3
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	1c59      	adds	r1, r3, #1
 8006438:	62f9      	str	r1, [r7, #44]	; 0x2c
 800643a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	09db      	lsrs	r3, r3, #7
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	2b7f      	cmp	r3, #127	; 0x7f
 800644c:	d8f0      	bhi.n	8006430 <_TrySendOverflowPacket+0x1c>
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800645e:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <_TrySendOverflowPacket+0xe0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006464:	4b22      	ldr	r3, [pc, #136]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e00b      	b.n	8006490 <_TrySendOverflowPacket+0x7c>
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6279      	str	r1, [r7, #36]	; 0x24
 8006482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b7f      	cmp	r3, #127	; 0x7f
 8006494:	d8f0      	bhi.n	8006478 <_TrySendOverflowPacket+0x64>
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	627a      	str	r2, [r7, #36]	; 0x24
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	4618      	mov	r0, r3
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	f7f9 fe9a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80064bc:	4603      	mov	r3, r0
 80064be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d009      	beq.n	80064da <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80064c6:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80064cc:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e004      	b.n	80064e4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	3301      	adds	r3, #1
 80064e0:	4a03      	ldr	r2, [pc, #12]	; (80064f0 <_TrySendOverflowPacket+0xdc>)
 80064e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80064e4:	693b      	ldr	r3, [r7, #16]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200142bc 	.word	0x200142bc
 80064f4:	e0001004 	.word	0xe0001004

080064f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006504:	4b6c      	ldr	r3, [pc, #432]	; (80066b8 <_SendPacket+0x1c0>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d010      	beq.n	800652e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800650c:	4b6a      	ldr	r3, [pc, #424]	; (80066b8 <_SendPacket+0x1c0>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80a3 	beq.w	800665c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006516:	4b68      	ldr	r3, [pc, #416]	; (80066b8 <_SendPacket+0x1c0>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d109      	bne.n	8006532 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800651e:	f7ff ff79 	bl	8006414 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006522:	4b65      	ldr	r3, [pc, #404]	; (80066b8 <_SendPacket+0x1c0>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	f040 809a 	bne.w	8006660 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800652c:	e001      	b.n	8006532 <_SendPacket+0x3a>
    goto Send;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <_SendPacket+0x3c>
Send:
 8006532:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b1f      	cmp	r3, #31
 8006538:	d809      	bhi.n	800654e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800653a:	4b5f      	ldr	r3, [pc, #380]	; (80066b8 <_SendPacket+0x1c0>)
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 808b 	bne.w	8006664 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b17      	cmp	r3, #23
 8006552:	d807      	bhi.n	8006564 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b01      	subs	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e03d      	b.n	80065e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b7f      	cmp	r3, #127	; 0x7f
 8006570:	d912      	bls.n	8006598 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	09da      	lsrs	r2, r3, #7
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3b01      	subs	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	3a01      	subs	r2, #1
 800658a:	60fa      	str	r2, [r7, #12]
 800658c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006590:	b2da      	uxtb	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e006      	b.n	80065a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3b01      	subs	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b7f      	cmp	r3, #127	; 0x7f
 80065aa:	d912      	bls.n	80065d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	09da      	lsrs	r2, r3, #7
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	3a01      	subs	r2, #1
 80065c4:	60fa      	str	r2, [r7, #12]
 80065c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	e006      	b.n	80065e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065e0:	4b36      	ldr	r3, [pc, #216]	; (80066bc <_SendPacket+0x1c4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80065e6:	4b34      	ldr	r3, [pc, #208]	; (80066b8 <_SendPacket+0x1c0>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	e00b      	b.n	8006612 <_SendPacket+0x11a>
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	6279      	str	r1, [r7, #36]	; 0x24
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <_SendPacket+0x102>
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	627a      	str	r2, [r7, #36]	; 0x24
 800661e:	6a3a      	ldr	r2, [r7, #32]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006628:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <_SendPacket+0x1c0>)
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	4618      	mov	r0, r3
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	461a      	mov	r2, r3
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	f7f9 fdda 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800663c:	4603      	mov	r3, r0
 800663e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006646:	4a1c      	ldr	r2, [pc, #112]	; (80066b8 <_SendPacket+0x1c0>)
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	60d3      	str	r3, [r2, #12]
 800664c:	e00b      	b.n	8006666 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <_SendPacket+0x1c0>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <_SendPacket+0x1c0>)
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e004      	b.n	8006666 <_SendPacket+0x16e>
    goto SendDone;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <_SendPacket+0x16e>
      goto SendDone;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <_SendPacket+0x16e>
      goto SendDone;
 8006664:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <_SendPacket+0x1c0>)
 8006668:	7e1b      	ldrb	r3, [r3, #24]
 800666a:	4619      	mov	r1, r3
 800666c:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <_SendPacket+0x1c8>)
 800666e:	460b      	mov	r3, r1
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	440b      	add	r3, r1
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	4413      	add	r3, r2
 8006678:	336c      	adds	r3, #108	; 0x6c
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <_SendPacket+0x1c0>)
 800667e:	7e1b      	ldrb	r3, [r3, #24]
 8006680:	4618      	mov	r0, r3
 8006682:	490f      	ldr	r1, [pc, #60]	; (80066c0 <_SendPacket+0x1c8>)
 8006684:	4603      	mov	r3, r0
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4403      	add	r3, r0
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	440b      	add	r3, r1
 800668e:	3370      	adds	r3, #112	; 0x70
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d00b      	beq.n	80066ae <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <_SendPacket+0x1c0>)
 8006698:	789b      	ldrb	r3, [r3, #2]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d107      	bne.n	80066ae <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <_SendPacket+0x1c0>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80066a4:	f7ff fe44 	bl	8006330 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <_SendPacket+0x1c0>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80066ae:	bf00      	nop
 80066b0:	3728      	adds	r7, #40	; 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200142bc 	.word	0x200142bc
 80066bc:	e0001004 	.word	0xe0001004
 80066c0:	20014468 	.word	0x20014468

080066c4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066d2:	2300      	movs	r3, #0
 80066d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066d8:	4918      	ldr	r1, [pc, #96]	; (800673c <SEGGER_SYSVIEW_Init+0x78>)
 80066da:	4819      	ldr	r0, [pc, #100]	; (8006740 <SEGGER_SYSVIEW_Init+0x7c>)
 80066dc:	f7ff fcda 	bl	8006094 <SEGGER_RTT_AllocUpBuffer>
 80066e0:	4603      	mov	r3, r0
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b17      	ldr	r3, [pc, #92]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 80066e6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066e8:	4b16      	ldr	r3, [pc, #88]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 80066ea:	785a      	ldrb	r2, [r3, #1]
 80066ec:	4b15      	ldr	r3, [pc, #84]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 80066ee:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066f0:	4b14      	ldr	r3, [pc, #80]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 80066f2:	7e1b      	ldrb	r3, [r3, #24]
 80066f4:	4618      	mov	r0, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	2308      	movs	r3, #8
 80066fc:	4a12      	ldr	r2, [pc, #72]	; (8006748 <SEGGER_SYSVIEW_Init+0x84>)
 80066fe:	4910      	ldr	r1, [pc, #64]	; (8006740 <SEGGER_SYSVIEW_Init+0x7c>)
 8006700:	f7ff fd4c 	bl	800619c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006704:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 8006706:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800670a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <SEGGER_SYSVIEW_Init+0x88>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0c      	ldr	r2, [pc, #48]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 8006712:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006714:	4a0b      	ldr	r2, [pc, #44]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800671a:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <SEGGER_SYSVIEW_Init+0x80>)
 800672e:	2200      	movs	r2, #0
 8006730:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	200132b4 	.word	0x200132b4
 8006740:	08008340 	.word	0x08008340
 8006744:	200142bc 	.word	0x200142bc
 8006748:	200142b4 	.word	0x200142b4
 800674c:	e0001004 	.word	0xe0001004

08006750 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006758:	4a04      	ldr	r2, [pc, #16]	; (800676c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6113      	str	r3, [r2, #16]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	200142bc 	.word	0x200142bc

08006770 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006778:	f3ef 8311 	mrs	r3, BASEPRI
 800677c:	f04f 0120 	mov.w	r1, #32
 8006780:	f381 8811 	msr	BASEPRI, r1
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	4808      	ldr	r0, [pc, #32]	; (80067a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006788:	f7ff fdc5 	bl	8006316 <_PreparePacket>
 800678c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68b8      	ldr	r0, [r7, #8]
 8006794:	f7ff feb0 	bl	80064f8 <_SendPacket>
  RECORD_END();
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f383 8811 	msr	BASEPRI, r3
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200142ec 	.word	0x200142ec

080067ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067b6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ba:	f04f 0120 	mov.w	r1, #32
 80067be:	f381 8811 	msr	BASEPRI, r1
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	4816      	ldr	r0, [pc, #88]	; (8006820 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067c6:	f7ff fda6 	bl	8006316 <_PreparePacket>
 80067ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e00b      	b.n	80067f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	61f9      	str	r1, [r7, #28]
 80067e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	09db      	lsrs	r3, r3, #7
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b7f      	cmp	r3, #127	; 0x7f
 80067f6:	d8f0      	bhi.n	80067da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	61fa      	str	r2, [r7, #28]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6938      	ldr	r0, [r7, #16]
 800680e:	f7ff fe73 	bl	80064f8 <_SendPacket>
  RECORD_END();
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f383 8811 	msr	BASEPRI, r3
}
 8006818:	bf00      	nop
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200142ec 	.word	0x200142ec

08006824 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b08c      	sub	sp, #48	; 0x30
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006830:	f3ef 8311 	mrs	r3, BASEPRI
 8006834:	f04f 0120 	mov.w	r1, #32
 8006838:	f381 8811 	msr	BASEPRI, r1
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	4825      	ldr	r0, [pc, #148]	; (80068d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006840:	f7ff fd69 	bl	8006316 <_PreparePacket>
 8006844:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
 8006852:	e00b      	b.n	800686c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800685e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	09db      	lsrs	r3, r3, #7
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	2b7f      	cmp	r3, #127	; 0x7f
 8006870:	d8f0      	bhi.n	8006854 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	e00b      	b.n	80068a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	1c59      	adds	r1, r3, #1
 8006894:	6279      	str	r1, [r7, #36]	; 0x24
 8006896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	09db      	lsrs	r3, r3, #7
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b7f      	cmp	r3, #127	; 0x7f
 80068a8:	d8f0      	bhi.n	800688c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	627a      	str	r2, [r7, #36]	; 0x24
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	6979      	ldr	r1, [r7, #20]
 80068be:	69b8      	ldr	r0, [r7, #24]
 80068c0:	f7ff fe1a 	bl	80064f8 <_SendPacket>
  RECORD_END();
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f383 8811 	msr	BASEPRI, r3
}
 80068ca:	bf00      	nop
 80068cc:	3730      	adds	r7, #48	; 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200142ec 	.word	0x200142ec

080068d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80068e4:	f3ef 8311 	mrs	r3, BASEPRI
 80068e8:	f04f 0120 	mov.w	r1, #32
 80068ec:	f381 8811 	msr	BASEPRI, r1
 80068f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80068f2:	4b53      	ldr	r3, [pc, #332]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	220a      	movs	r2, #10
 80068f8:	4952      	ldr	r1, [pc, #328]	; (8006a44 <SEGGER_SYSVIEW_Start+0x16c>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7f9 fc78 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006906:	200a      	movs	r0, #10
 8006908:	f7ff ff32 	bl	8006770 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800690c:	f3ef 8311 	mrs	r3, BASEPRI
 8006910:	f04f 0120 	mov.w	r1, #32
 8006914:	f381 8811 	msr	BASEPRI, r1
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	484b      	ldr	r0, [pc, #300]	; (8006a48 <SEGGER_SYSVIEW_Start+0x170>)
 800691c:	f7ff fcfb 	bl	8006316 <_PreparePacket>
 8006920:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800692a:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006930:	e00b      	b.n	800694a <SEGGER_SYSVIEW_Start+0x72>
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	b2da      	uxtb	r2, r3
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	1c59      	adds	r1, r3, #1
 800693a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800693c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	09db      	lsrs	r3, r3, #7
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	2b7f      	cmp	r3, #127	; 0x7f
 800694e:	d8f0      	bhi.n	8006932 <SEGGER_SYSVIEW_Start+0x5a>
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	e00b      	b.n	8006984 <SEGGER_SYSVIEW_Start+0xac>
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	6279      	str	r1, [r7, #36]	; 0x24
 8006976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	09db      	lsrs	r3, r3, #7
 8006982:	623b      	str	r3, [r7, #32]
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	2b7f      	cmp	r3, #127	; 0x7f
 8006988:	d8f0      	bhi.n	800696c <SEGGER_SYSVIEW_Start+0x94>
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	627a      	str	r2, [r7, #36]	; 0x24
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e00b      	b.n	80069be <SEGGER_SYSVIEW_Start+0xe6>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	61f9      	str	r1, [r7, #28]
 80069b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	09db      	lsrs	r3, r3, #7
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b7f      	cmp	r3, #127	; 0x7f
 80069c2:	d8f0      	bhi.n	80069a6 <SEGGER_SYSVIEW_Start+0xce>
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	61fa      	str	r2, [r7, #28]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	e00b      	b.n	80069f6 <SEGGER_SYSVIEW_Start+0x11e>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	6179      	str	r1, [r7, #20]
 80069e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b7f      	cmp	r3, #127	; 0x7f
 80069fa:	d8f0      	bhi.n	80069de <SEGGER_SYSVIEW_Start+0x106>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	617a      	str	r2, [r7, #20]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a0c:	2218      	movs	r2, #24
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fd71 	bl	80064f8 <_SendPacket>
      RECORD_END();
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <SEGGER_SYSVIEW_Start+0x168>)
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a2a:	f000 f9eb 	bl	8006e04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a2e:	f000 f9b1 	bl	8006d94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a32:	f000 fab7 	bl	8006fa4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a36:	bf00      	nop
 8006a38:	3730      	adds	r7, #48	; 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200142bc 	.word	0x200142bc
 8006a44:	08008368 	.word	0x08008368
 8006a48:	200142ec 	.word	0x200142ec

08006a4c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a52:	f3ef 8311 	mrs	r3, BASEPRI
 8006a56:	f04f 0120 	mov.w	r1, #32
 8006a5a:	f381 8811 	msr	BASEPRI, r1
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	480b      	ldr	r0, [pc, #44]	; (8006a90 <SEGGER_SYSVIEW_Stop+0x44>)
 8006a62:	f7ff fc58 	bl	8006316 <_PreparePacket>
 8006a66:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006a70:	220b      	movs	r2, #11
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6838      	ldr	r0, [r7, #0]
 8006a76:	f7ff fd3f 	bl	80064f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f383 8811 	msr	BASEPRI, r3
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200142ec 	.word	0x200142ec
 8006a94:	200142bc 	.word	0x200142bc

08006a98 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	; 0x30
 8006a9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa2:	f04f 0120 	mov.w	r1, #32
 8006aa6:	f381 8811 	msr	BASEPRI, r1
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	4845      	ldr	r0, [pc, #276]	; (8006bc4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006aae:	f7ff fc32 	bl	8006316 <_PreparePacket>
 8006ab2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006abc:	4b42      	ldr	r3, [pc, #264]	; (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	e00b      	b.n	8006adc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	09db      	lsrs	r3, r3, #7
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae0:	d8f0      	bhi.n	8006ac4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
 8006af6:	4b34      	ldr	r3, [pc, #208]	; (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	e00b      	b.n	8006b16 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	1c59      	adds	r1, r3, #1
 8006b06:	6279      	str	r1, [r7, #36]	; 0x24
 8006b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	09db      	lsrs	r3, r3, #7
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1a:	d8f0      	bhi.n	8006afe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	627a      	str	r2, [r7, #36]	; 0x24
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e00b      	b.n	8006b50 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	61f9      	str	r1, [r7, #28]
 8006b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	09db      	lsrs	r3, r3, #7
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b7f      	cmp	r3, #127	; 0x7f
 8006b54:	d8f0      	bhi.n	8006b38 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	61fa      	str	r2, [r7, #28]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	e00b      	b.n	8006b88 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	6179      	str	r1, [r7, #20]
 8006b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	09db      	lsrs	r3, r3, #7
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8c:	d8f0      	bhi.n	8006b70 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	617a      	str	r2, [r7, #20]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b9e:	2218      	movs	r2, #24
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	68b8      	ldr	r0, [r7, #8]
 8006ba4:	f7ff fca8 	bl	80064f8 <_SendPacket>
  RECORD_END();
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006bb6:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	4798      	blx	r3
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3730      	adds	r7, #48	; 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200142ec 	.word	0x200142ec
 8006bc8:	200142bc 	.word	0x200142bc

08006bcc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b092      	sub	sp, #72	; 0x48
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd8:	f04f 0120 	mov.w	r1, #32
 8006bdc:	f381 8811 	msr	BASEPRI, r1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	486a      	ldr	r0, [pc, #424]	; (8006d8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006be4:	f7ff fb97 	bl	8006316 <_PreparePacket>
 8006be8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	6479      	str	r1, [r7, #68]	; 0x44
 8006c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
 8006c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	647a      	str	r2, [r7, #68]	; 0x44
 8006c24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c38:	e00b      	b.n	8006c52 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	1c59      	adds	r1, r3, #1
 8006c42:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	09db      	lsrs	r3, r3, #7
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	2b7f      	cmp	r3, #127	; 0x7f
 8006c56:	d8f0      	bhi.n	8006c3a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fb03 	bl	800627c <_EncodeStr>
 8006c76:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006c78:	2209      	movs	r2, #9
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	6938      	ldr	r0, [r7, #16]
 8006c7e:	f7ff fc3b 	bl	80064f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b40      	ldr	r3, [pc, #256]	; (8006d90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	633b      	str	r3, [r7, #48]	; 0x30
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	6379      	str	r1, [r7, #52]	; 0x34
 8006ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	637a      	str	r2, [r7, #52]	; 0x34
 8006cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd0:	e00b      	b.n	8006cea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	09db      	lsrs	r3, r3, #7
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	2b7f      	cmp	r3, #127	; 0x7f
 8006cee:	d8f0      	bhi.n	8006cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	e00b      	b.n	8006d24 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	6279      	str	r1, [r7, #36]	; 0x24
 8006d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	09db      	lsrs	r3, r3, #7
 8006d22:	623b      	str	r3, [r7, #32]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2b7f      	cmp	r3, #127	; 0x7f
 8006d28:	d8f0      	bhi.n	8006d0c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e00b      	b.n	8006d5c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	61f9      	str	r1, [r7, #28]
 8006d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	09db      	lsrs	r3, r3, #7
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d60:	d8f0      	bhi.n	8006d44 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	61fa      	str	r2, [r7, #28]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006d72:	2215      	movs	r2, #21
 8006d74:	68f9      	ldr	r1, [r7, #12]
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f7ff fbbe 	bl	80064f8 <_SendPacket>
  RECORD_END();
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f383 8811 	msr	BASEPRI, r3
}
 8006d82:	bf00      	nop
 8006d84:	3748      	adds	r7, #72	; 0x48
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200142ec 	.word	0x200142ec
 8006d90:	200142bc 	.word	0x200142bc

08006d94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d98:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006da0:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006daa:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4798      	blx	r3
  }
}
 8006db2:	bf00      	nop
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	200142bc 	.word	0x200142bc

08006dbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc8:	f04f 0120 	mov.w	r1, #32
 8006dcc:	f381 8811 	msr	BASEPRI, r1
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	480b      	ldr	r0, [pc, #44]	; (8006e00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006dd4:	f7ff fa9f 	bl	8006316 <_PreparePacket>
 8006dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7ff fa4c 	bl	800627c <_EncodeStr>
 8006de4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006de6:	220e      	movs	r2, #14
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f7ff fb84 	bl	80064f8 <_SendPacket>
  RECORD_END();
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f383 8811 	msr	BASEPRI, r3
}
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200142ec 	.word	0x200142ec

08006e04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e0a:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01a      	beq.n	8006e48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4798      	blx	r3
 8006e24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	000a      	movs	r2, r1
 8006e38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4621      	mov	r1, r4
 8006e40:	200d      	movs	r0, #13
 8006e42:	f7ff fcef 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x2>
 8006e46:	e006      	b.n	8006e56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	200c      	movs	r0, #12
 8006e50:	f7ff fcac 	bl	80067ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd90      	pop	{r4, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200142bc 	.word	0x200142bc
 8006e64:	e0001004 	.word	0xe0001004

08006e68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08c      	sub	sp, #48	; 0x30
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e72:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d06d      	beq.n	8006f56 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006e7a:	4b39      	ldr	r3, [pc, #228]	; (8006f60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e80:	2300      	movs	r3, #0
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e84:	e008      	b.n	8006e98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	3301      	adds	r3, #1
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3f2      	bcc.n	8006e86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ea0:	e000      	b.n	8006ea4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ea2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d055      	beq.n	8006f56 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8006eae:	f04f 0120 	mov.w	r1, #32
 8006eb2:	f381 8811 	msr	BASEPRI, r1
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	482a      	ldr	r0, [pc, #168]	; (8006f64 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006eba:	f7ff fa2c 	bl	8006316 <_PreparePacket>
 8006ebe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	e00b      	b.n	8006ee6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	09db      	lsrs	r3, r3, #7
 8006ee4:	623b      	str	r3, [r7, #32]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eea:	d8f0      	bhi.n	8006ece <SEGGER_SYSVIEW_SendModule+0x66>
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e00b      	b.n	8006f20 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	1c59      	adds	r1, r3, #1
 8006f10:	61f9      	str	r1, [r7, #28]
 8006f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	09db      	lsrs	r3, r3, #7
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b7f      	cmp	r3, #127	; 0x7f
 8006f24:	d8f0      	bhi.n	8006f08 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	61fa      	str	r2, [r7, #28]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2280      	movs	r2, #128	; 0x80
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff f99c 	bl	800627c <_EncodeStr>
 8006f44:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006f46:	2216      	movs	r2, #22
 8006f48:	68f9      	ldr	r1, [r7, #12]
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f7ff fad4 	bl	80064f8 <_SendPacket>
      RECORD_END();
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006f56:	bf00      	nop
 8006f58:	3730      	adds	r7, #48	; 0x30
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	200142e4 	.word	0x200142e4
 8006f64:	200142ec 	.word	0x200142ec

08006f68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f2      	bne.n	8006f7c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200142e4 	.word	0x200142e4

08006fa4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006faa:	f3ef 8311 	mrs	r3, BASEPRI
 8006fae:	f04f 0120 	mov.w	r1, #32
 8006fb2:	f381 8811 	msr	BASEPRI, r1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	4817      	ldr	r0, [pc, #92]	; (8007018 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006fba:	f7ff f9ac 	bl	8006316 <_PreparePacket>
 8006fbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	4b14      	ldr	r3, [pc, #80]	; (800701c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e00b      	b.n	8006fe8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	6179      	str	r1, [r7, #20]
 8006fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	09db      	lsrs	r3, r3, #7
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b7f      	cmp	r3, #127	; 0x7f
 8006fec:	d8f0      	bhi.n	8006fd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	617a      	str	r2, [r7, #20]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ffe:	221b      	movs	r2, #27
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	68b8      	ldr	r0, [r7, #8]
 8007004:	f7ff fa78 	bl	80064f8 <_SendPacket>
  RECORD_END();
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f383 8811 	msr	BASEPRI, r3
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200142ec 	.word	0x200142ec
 800701c:	200142e8 	.word	0x200142e8

08007020 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	2000      	movs	r0, #0
 8007034:	f7ff f808 	bl	8006048 <SEGGER_RTT_Write>
  return len;
 8007038:	683b      	ldr	r3, [r7, #0]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <__errno>:
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <__errno+0x8>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20000014 	.word	0x20000014

08007050 <__libc_init_array>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	4d0d      	ldr	r5, [pc, #52]	; (8007088 <__libc_init_array+0x38>)
 8007054:	4c0d      	ldr	r4, [pc, #52]	; (800708c <__libc_init_array+0x3c>)
 8007056:	1b64      	subs	r4, r4, r5
 8007058:	10a4      	asrs	r4, r4, #2
 800705a:	2600      	movs	r6, #0
 800705c:	42a6      	cmp	r6, r4
 800705e:	d109      	bne.n	8007074 <__libc_init_array+0x24>
 8007060:	4d0b      	ldr	r5, [pc, #44]	; (8007090 <__libc_init_array+0x40>)
 8007062:	4c0c      	ldr	r4, [pc, #48]	; (8007094 <__libc_init_array+0x44>)
 8007064:	f001 f8aa 	bl	80081bc <_init>
 8007068:	1b64      	subs	r4, r4, r5
 800706a:	10a4      	asrs	r4, r4, #2
 800706c:	2600      	movs	r6, #0
 800706e:	42a6      	cmp	r6, r4
 8007070:	d105      	bne.n	800707e <__libc_init_array+0x2e>
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	f855 3b04 	ldr.w	r3, [r5], #4
 8007078:	4798      	blx	r3
 800707a:	3601      	adds	r6, #1
 800707c:	e7ee      	b.n	800705c <__libc_init_array+0xc>
 800707e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007082:	4798      	blx	r3
 8007084:	3601      	adds	r6, #1
 8007086:	e7f2      	b.n	800706e <__libc_init_array+0x1e>
 8007088:	080084c8 	.word	0x080084c8
 800708c:	080084c8 	.word	0x080084c8
 8007090:	080084c8 	.word	0x080084c8
 8007094:	080084cc 	.word	0x080084cc

08007098 <memcpy>:
 8007098:	440a      	add	r2, r1
 800709a:	4291      	cmp	r1, r2
 800709c:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	4770      	bx	lr
 80070a4:	b510      	push	{r4, lr}
 80070a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ae:	4291      	cmp	r1, r2
 80070b0:	d1f9      	bne.n	80070a6 <memcpy+0xe>
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <memset>:
 80070b4:	4402      	add	r2, r0
 80070b6:	4603      	mov	r3, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d100      	bne.n	80070be <memset+0xa>
 80070bc:	4770      	bx	lr
 80070be:	f803 1b01 	strb.w	r1, [r3], #1
 80070c2:	e7f9      	b.n	80070b8 <memset+0x4>

080070c4 <iprintf>:
 80070c4:	b40f      	push	{r0, r1, r2, r3}
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <iprintf+0x2c>)
 80070c8:	b513      	push	{r0, r1, r4, lr}
 80070ca:	681c      	ldr	r4, [r3, #0]
 80070cc:	b124      	cbz	r4, 80070d8 <iprintf+0x14>
 80070ce:	69a3      	ldr	r3, [r4, #24]
 80070d0:	b913      	cbnz	r3, 80070d8 <iprintf+0x14>
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fabc 	bl	8007650 <__sinit>
 80070d8:	ab05      	add	r3, sp, #20
 80070da:	9a04      	ldr	r2, [sp, #16]
 80070dc:	68a1      	ldr	r1, [r4, #8]
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fca7 	bl	8007a34 <_vfiprintf_r>
 80070e6:	b002      	add	sp, #8
 80070e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ec:	b004      	add	sp, #16
 80070ee:	4770      	bx	lr
 80070f0:	20000014 	.word	0x20000014

080070f4 <_puts_r>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	460e      	mov	r6, r1
 80070f8:	4605      	mov	r5, r0
 80070fa:	b118      	cbz	r0, 8007104 <_puts_r+0x10>
 80070fc:	6983      	ldr	r3, [r0, #24]
 80070fe:	b90b      	cbnz	r3, 8007104 <_puts_r+0x10>
 8007100:	f000 faa6 	bl	8007650 <__sinit>
 8007104:	69ab      	ldr	r3, [r5, #24]
 8007106:	68ac      	ldr	r4, [r5, #8]
 8007108:	b913      	cbnz	r3, 8007110 <_puts_r+0x1c>
 800710a:	4628      	mov	r0, r5
 800710c:	f000 faa0 	bl	8007650 <__sinit>
 8007110:	4b2c      	ldr	r3, [pc, #176]	; (80071c4 <_puts_r+0xd0>)
 8007112:	429c      	cmp	r4, r3
 8007114:	d120      	bne.n	8007158 <_puts_r+0x64>
 8007116:	686c      	ldr	r4, [r5, #4]
 8007118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800711a:	07db      	lsls	r3, r3, #31
 800711c:	d405      	bmi.n	800712a <_puts_r+0x36>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	0598      	lsls	r0, r3, #22
 8007122:	d402      	bmi.n	800712a <_puts_r+0x36>
 8007124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007126:	f000 fb43 	bl	80077b0 <__retarget_lock_acquire_recursive>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	0719      	lsls	r1, r3, #28
 800712e:	d51d      	bpl.n	800716c <_puts_r+0x78>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	b1db      	cbz	r3, 800716c <_puts_r+0x78>
 8007134:	3e01      	subs	r6, #1
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800713c:	3b01      	subs	r3, #1
 800713e:	60a3      	str	r3, [r4, #8]
 8007140:	bb39      	cbnz	r1, 8007192 <_puts_r+0x9e>
 8007142:	2b00      	cmp	r3, #0
 8007144:	da38      	bge.n	80071b8 <_puts_r+0xc4>
 8007146:	4622      	mov	r2, r4
 8007148:	210a      	movs	r1, #10
 800714a:	4628      	mov	r0, r5
 800714c:	f000 f888 	bl	8007260 <__swbuf_r>
 8007150:	3001      	adds	r0, #1
 8007152:	d011      	beq.n	8007178 <_puts_r+0x84>
 8007154:	250a      	movs	r5, #10
 8007156:	e011      	b.n	800717c <_puts_r+0x88>
 8007158:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <_puts_r+0xd4>)
 800715a:	429c      	cmp	r4, r3
 800715c:	d101      	bne.n	8007162 <_puts_r+0x6e>
 800715e:	68ac      	ldr	r4, [r5, #8]
 8007160:	e7da      	b.n	8007118 <_puts_r+0x24>
 8007162:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <_puts_r+0xd8>)
 8007164:	429c      	cmp	r4, r3
 8007166:	bf08      	it	eq
 8007168:	68ec      	ldreq	r4, [r5, #12]
 800716a:	e7d5      	b.n	8007118 <_puts_r+0x24>
 800716c:	4621      	mov	r1, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f8c8 	bl	8007304 <__swsetup_r>
 8007174:	2800      	cmp	r0, #0
 8007176:	d0dd      	beq.n	8007134 <_puts_r+0x40>
 8007178:	f04f 35ff 	mov.w	r5, #4294967295
 800717c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800717e:	07da      	lsls	r2, r3, #31
 8007180:	d405      	bmi.n	800718e <_puts_r+0x9a>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	059b      	lsls	r3, r3, #22
 8007186:	d402      	bmi.n	800718e <_puts_r+0x9a>
 8007188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718a:	f000 fb12 	bl	80077b2 <__retarget_lock_release_recursive>
 800718e:	4628      	mov	r0, r5
 8007190:	bd70      	pop	{r4, r5, r6, pc}
 8007192:	2b00      	cmp	r3, #0
 8007194:	da04      	bge.n	80071a0 <_puts_r+0xac>
 8007196:	69a2      	ldr	r2, [r4, #24]
 8007198:	429a      	cmp	r2, r3
 800719a:	dc06      	bgt.n	80071aa <_puts_r+0xb6>
 800719c:	290a      	cmp	r1, #10
 800719e:	d004      	beq.n	80071aa <_puts_r+0xb6>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	6022      	str	r2, [r4, #0]
 80071a6:	7019      	strb	r1, [r3, #0]
 80071a8:	e7c5      	b.n	8007136 <_puts_r+0x42>
 80071aa:	4622      	mov	r2, r4
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 f857 	bl	8007260 <__swbuf_r>
 80071b2:	3001      	adds	r0, #1
 80071b4:	d1bf      	bne.n	8007136 <_puts_r+0x42>
 80071b6:	e7df      	b.n	8007178 <_puts_r+0x84>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	250a      	movs	r5, #10
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	6022      	str	r2, [r4, #0]
 80071c0:	701d      	strb	r5, [r3, #0]
 80071c2:	e7db      	b.n	800717c <_puts_r+0x88>
 80071c4:	0800844c 	.word	0x0800844c
 80071c8:	0800846c 	.word	0x0800846c
 80071cc:	0800842c 	.word	0x0800842c

080071d0 <puts>:
 80071d0:	4b02      	ldr	r3, [pc, #8]	; (80071dc <puts+0xc>)
 80071d2:	4601      	mov	r1, r0
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	f7ff bf8d 	b.w	80070f4 <_puts_r>
 80071da:	bf00      	nop
 80071dc:	20000014 	.word	0x20000014

080071e0 <rand>:
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <rand+0x60>)
 80071e2:	b510      	push	{r4, lr}
 80071e4:	681c      	ldr	r4, [r3, #0]
 80071e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071e8:	b9b3      	cbnz	r3, 8007218 <rand+0x38>
 80071ea:	2018      	movs	r0, #24
 80071ec:	f000 fb46 	bl	800787c <malloc>
 80071f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80071f2:	b928      	cbnz	r0, 8007200 <rand+0x20>
 80071f4:	4602      	mov	r2, r0
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <rand+0x64>)
 80071f8:	4813      	ldr	r0, [pc, #76]	; (8007248 <rand+0x68>)
 80071fa:	214e      	movs	r1, #78	; 0x4e
 80071fc:	f000 f8f0 	bl	80073e0 <__assert_func>
 8007200:	4a12      	ldr	r2, [pc, #72]	; (800724c <rand+0x6c>)
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <rand+0x70>)
 8007204:	e9c0 2300 	strd	r2, r3, [r0]
 8007208:	4b12      	ldr	r3, [pc, #72]	; (8007254 <rand+0x74>)
 800720a:	6083      	str	r3, [r0, #8]
 800720c:	230b      	movs	r3, #11
 800720e:	8183      	strh	r3, [r0, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	2300      	movs	r3, #0
 8007214:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007218:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800721a:	480f      	ldr	r0, [pc, #60]	; (8007258 <rand+0x78>)
 800721c:	690a      	ldr	r2, [r1, #16]
 800721e:	694b      	ldr	r3, [r1, #20]
 8007220:	4c0e      	ldr	r4, [pc, #56]	; (800725c <rand+0x7c>)
 8007222:	4350      	muls	r0, r2
 8007224:	fb04 0003 	mla	r0, r4, r3, r0
 8007228:	fba2 3404 	umull	r3, r4, r2, r4
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	4404      	add	r4, r0
 8007230:	f144 0000 	adc.w	r0, r4, #0
 8007234:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007238:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800723c:	bd10      	pop	{r4, pc}
 800723e:	bf00      	nop
 8007240:	20000014 	.word	0x20000014
 8007244:	08008378 	.word	0x08008378
 8007248:	0800838f 	.word	0x0800838f
 800724c:	abcd330e 	.word	0xabcd330e
 8007250:	e66d1234 	.word	0xe66d1234
 8007254:	0005deec 	.word	0x0005deec
 8007258:	5851f42d 	.word	0x5851f42d
 800725c:	4c957f2d 	.word	0x4c957f2d

08007260 <__swbuf_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	460e      	mov	r6, r1
 8007264:	4614      	mov	r4, r2
 8007266:	4605      	mov	r5, r0
 8007268:	b118      	cbz	r0, 8007272 <__swbuf_r+0x12>
 800726a:	6983      	ldr	r3, [r0, #24]
 800726c:	b90b      	cbnz	r3, 8007272 <__swbuf_r+0x12>
 800726e:	f000 f9ef 	bl	8007650 <__sinit>
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <__swbuf_r+0x98>)
 8007274:	429c      	cmp	r4, r3
 8007276:	d12b      	bne.n	80072d0 <__swbuf_r+0x70>
 8007278:	686c      	ldr	r4, [r5, #4]
 800727a:	69a3      	ldr	r3, [r4, #24]
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	071a      	lsls	r2, r3, #28
 8007282:	d52f      	bpl.n	80072e4 <__swbuf_r+0x84>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	b36b      	cbz	r3, 80072e4 <__swbuf_r+0x84>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6820      	ldr	r0, [r4, #0]
 800728c:	1ac0      	subs	r0, r0, r3
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	b2f6      	uxtb	r6, r6
 8007292:	4283      	cmp	r3, r0
 8007294:	4637      	mov	r7, r6
 8007296:	dc04      	bgt.n	80072a2 <__swbuf_r+0x42>
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f944 	bl	8007528 <_fflush_r>
 80072a0:	bb30      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	701e      	strb	r6, [r3, #0]
 80072b0:	6963      	ldr	r3, [r4, #20]
 80072b2:	3001      	adds	r0, #1
 80072b4:	4283      	cmp	r3, r0
 80072b6:	d004      	beq.n	80072c2 <__swbuf_r+0x62>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	07db      	lsls	r3, r3, #31
 80072bc:	d506      	bpl.n	80072cc <__swbuf_r+0x6c>
 80072be:	2e0a      	cmp	r6, #10
 80072c0:	d104      	bne.n	80072cc <__swbuf_r+0x6c>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f92f 	bl	8007528 <_fflush_r>
 80072ca:	b988      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072cc:	4638      	mov	r0, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <__swbuf_r+0x9c>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swbuf_r+0x7a>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7cf      	b.n	800727a <__swbuf_r+0x1a>
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <__swbuf_r+0xa0>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7ca      	b.n	800727a <__swbuf_r+0x1a>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f80c 	bl	8007304 <__swsetup_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0cb      	beq.n	8007288 <__swbuf_r+0x28>
 80072f0:	f04f 37ff 	mov.w	r7, #4294967295
 80072f4:	e7ea      	b.n	80072cc <__swbuf_r+0x6c>
 80072f6:	bf00      	nop
 80072f8:	0800844c 	.word	0x0800844c
 80072fc:	0800846c 	.word	0x0800846c
 8007300:	0800842c 	.word	0x0800842c

08007304 <__swsetup_r>:
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <__swsetup_r+0xcc>)
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	681d      	ldr	r5, [r3, #0]
 800730a:	4606      	mov	r6, r0
 800730c:	460c      	mov	r4, r1
 800730e:	b125      	cbz	r5, 800731a <__swsetup_r+0x16>
 8007310:	69ab      	ldr	r3, [r5, #24]
 8007312:	b913      	cbnz	r3, 800731a <__swsetup_r+0x16>
 8007314:	4628      	mov	r0, r5
 8007316:	f000 f99b 	bl	8007650 <__sinit>
 800731a:	4b2e      	ldr	r3, [pc, #184]	; (80073d4 <__swsetup_r+0xd0>)
 800731c:	429c      	cmp	r4, r3
 800731e:	d10f      	bne.n	8007340 <__swsetup_r+0x3c>
 8007320:	686c      	ldr	r4, [r5, #4]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007328:	0719      	lsls	r1, r3, #28
 800732a:	d42c      	bmi.n	8007386 <__swsetup_r+0x82>
 800732c:	06dd      	lsls	r5, r3, #27
 800732e:	d411      	bmi.n	8007354 <__swsetup_r+0x50>
 8007330:	2309      	movs	r3, #9
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e03e      	b.n	80073be <__swsetup_r+0xba>
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <__swsetup_r+0xd4>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d101      	bne.n	800734a <__swsetup_r+0x46>
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	e7eb      	b.n	8007322 <__swsetup_r+0x1e>
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <__swsetup_r+0xd8>)
 800734c:	429c      	cmp	r4, r3
 800734e:	bf08      	it	eq
 8007350:	68ec      	ldreq	r4, [r5, #12]
 8007352:	e7e6      	b.n	8007322 <__swsetup_r+0x1e>
 8007354:	0758      	lsls	r0, r3, #29
 8007356:	d512      	bpl.n	800737e <__swsetup_r+0x7a>
 8007358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800735a:	b141      	cbz	r1, 800736e <__swsetup_r+0x6a>
 800735c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <__swsetup_r+0x66>
 8007364:	4630      	mov	r0, r6
 8007366:	f000 fa91 	bl	800788c <_free_r>
 800736a:	2300      	movs	r3, #0
 800736c:	6363      	str	r3, [r4, #52]	; 0x34
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f043 0308 	orr.w	r3, r3, #8
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b94b      	cbnz	r3, 800739e <__swsetup_r+0x9a>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007394:	d003      	beq.n	800739e <__swsetup_r+0x9a>
 8007396:	4621      	mov	r1, r4
 8007398:	4630      	mov	r0, r6
 800739a:	f000 fa2f 	bl	80077fc <__smakebuf_r>
 800739e:	89a0      	ldrh	r0, [r4, #12]
 80073a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a4:	f010 0301 	ands.w	r3, r0, #1
 80073a8:	d00a      	beq.n	80073c0 <__swsetup_r+0xbc>
 80073aa:	2300      	movs	r3, #0
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	6963      	ldr	r3, [r4, #20]
 80073b0:	425b      	negs	r3, r3
 80073b2:	61a3      	str	r3, [r4, #24]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	b943      	cbnz	r3, 80073ca <__swsetup_r+0xc6>
 80073b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073bc:	d1ba      	bne.n	8007334 <__swsetup_r+0x30>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	0781      	lsls	r1, r0, #30
 80073c2:	bf58      	it	pl
 80073c4:	6963      	ldrpl	r3, [r4, #20]
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	e7f4      	b.n	80073b4 <__swsetup_r+0xb0>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e7f7      	b.n	80073be <__swsetup_r+0xba>
 80073ce:	bf00      	nop
 80073d0:	20000014 	.word	0x20000014
 80073d4:	0800844c 	.word	0x0800844c
 80073d8:	0800846c 	.word	0x0800846c
 80073dc:	0800842c 	.word	0x0800842c

080073e0 <__assert_func>:
 80073e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073e2:	4614      	mov	r4, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <__assert_func+0x2c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4605      	mov	r5, r0
 80073ec:	68d8      	ldr	r0, [r3, #12]
 80073ee:	b14c      	cbz	r4, 8007404 <__assert_func+0x24>
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <__assert_func+0x30>)
 80073f2:	9100      	str	r1, [sp, #0]
 80073f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073f8:	4906      	ldr	r1, [pc, #24]	; (8007414 <__assert_func+0x34>)
 80073fa:	462b      	mov	r3, r5
 80073fc:	f000 f9a6 	bl	800774c <fiprintf>
 8007400:	f000 fe2f 	bl	8008062 <abort>
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <__assert_func+0x38>)
 8007406:	461c      	mov	r4, r3
 8007408:	e7f3      	b.n	80073f2 <__assert_func+0x12>
 800740a:	bf00      	nop
 800740c:	20000014 	.word	0x20000014
 8007410:	080083ee 	.word	0x080083ee
 8007414:	080083fb 	.word	0x080083fb
 8007418:	08008429 	.word	0x08008429

0800741c <__sflush_r>:
 800741c:	898a      	ldrh	r2, [r1, #12]
 800741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	4605      	mov	r5, r0
 8007424:	0710      	lsls	r0, r2, #28
 8007426:	460c      	mov	r4, r1
 8007428:	d458      	bmi.n	80074dc <__sflush_r+0xc0>
 800742a:	684b      	ldr	r3, [r1, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	dc05      	bgt.n	800743c <__sflush_r+0x20>
 8007430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc02      	bgt.n	800743c <__sflush_r+0x20>
 8007436:	2000      	movs	r0, #0
 8007438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800743e:	2e00      	cmp	r6, #0
 8007440:	d0f9      	beq.n	8007436 <__sflush_r+0x1a>
 8007442:	2300      	movs	r3, #0
 8007444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007448:	682f      	ldr	r7, [r5, #0]
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	d032      	beq.n	80074b4 <__sflush_r+0x98>
 800744e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	075a      	lsls	r2, r3, #29
 8007454:	d505      	bpl.n	8007462 <__sflush_r+0x46>
 8007456:	6863      	ldr	r3, [r4, #4]
 8007458:	1ac0      	subs	r0, r0, r3
 800745a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800745c:	b10b      	cbz	r3, 8007462 <__sflush_r+0x46>
 800745e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007460:	1ac0      	subs	r0, r0, r3
 8007462:	2300      	movs	r3, #0
 8007464:	4602      	mov	r2, r0
 8007466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	4628      	mov	r0, r5
 800746c:	47b0      	blx	r6
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	d106      	bne.n	8007482 <__sflush_r+0x66>
 8007474:	6829      	ldr	r1, [r5, #0]
 8007476:	291d      	cmp	r1, #29
 8007478:	d82c      	bhi.n	80074d4 <__sflush_r+0xb8>
 800747a:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <__sflush_r+0x108>)
 800747c:	40ca      	lsrs	r2, r1
 800747e:	07d6      	lsls	r6, r2, #31
 8007480:	d528      	bpl.n	80074d4 <__sflush_r+0xb8>
 8007482:	2200      	movs	r2, #0
 8007484:	6062      	str	r2, [r4, #4]
 8007486:	04d9      	lsls	r1, r3, #19
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	d504      	bpl.n	8007498 <__sflush_r+0x7c>
 800748e:	1c42      	adds	r2, r0, #1
 8007490:	d101      	bne.n	8007496 <__sflush_r+0x7a>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b903      	cbnz	r3, 8007498 <__sflush_r+0x7c>
 8007496:	6560      	str	r0, [r4, #84]	; 0x54
 8007498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800749a:	602f      	str	r7, [r5, #0]
 800749c:	2900      	cmp	r1, #0
 800749e:	d0ca      	beq.n	8007436 <__sflush_r+0x1a>
 80074a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a4:	4299      	cmp	r1, r3
 80074a6:	d002      	beq.n	80074ae <__sflush_r+0x92>
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f9ef 	bl	800788c <_free_r>
 80074ae:	2000      	movs	r0, #0
 80074b0:	6360      	str	r0, [r4, #52]	; 0x34
 80074b2:	e7c1      	b.n	8007438 <__sflush_r+0x1c>
 80074b4:	6a21      	ldr	r1, [r4, #32]
 80074b6:	2301      	movs	r3, #1
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	1c41      	adds	r1, r0, #1
 80074be:	d1c7      	bne.n	8007450 <__sflush_r+0x34>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0c4      	beq.n	8007450 <__sflush_r+0x34>
 80074c6:	2b1d      	cmp	r3, #29
 80074c8:	d001      	beq.n	80074ce <__sflush_r+0xb2>
 80074ca:	2b16      	cmp	r3, #22
 80074cc:	d101      	bne.n	80074d2 <__sflush_r+0xb6>
 80074ce:	602f      	str	r7, [r5, #0]
 80074d0:	e7b1      	b.n	8007436 <__sflush_r+0x1a>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	e7ad      	b.n	8007438 <__sflush_r+0x1c>
 80074dc:	690f      	ldr	r7, [r1, #16]
 80074de:	2f00      	cmp	r7, #0
 80074e0:	d0a9      	beq.n	8007436 <__sflush_r+0x1a>
 80074e2:	0793      	lsls	r3, r2, #30
 80074e4:	680e      	ldr	r6, [r1, #0]
 80074e6:	bf08      	it	eq
 80074e8:	694b      	ldreq	r3, [r1, #20]
 80074ea:	600f      	str	r7, [r1, #0]
 80074ec:	bf18      	it	ne
 80074ee:	2300      	movne	r3, #0
 80074f0:	eba6 0807 	sub.w	r8, r6, r7
 80074f4:	608b      	str	r3, [r1, #8]
 80074f6:	f1b8 0f00 	cmp.w	r8, #0
 80074fa:	dd9c      	ble.n	8007436 <__sflush_r+0x1a>
 80074fc:	6a21      	ldr	r1, [r4, #32]
 80074fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007500:	4643      	mov	r3, r8
 8007502:	463a      	mov	r2, r7
 8007504:	4628      	mov	r0, r5
 8007506:	47b0      	blx	r6
 8007508:	2800      	cmp	r0, #0
 800750a:	dc06      	bgt.n	800751a <__sflush_r+0xfe>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e78e      	b.n	8007438 <__sflush_r+0x1c>
 800751a:	4407      	add	r7, r0
 800751c:	eba8 0800 	sub.w	r8, r8, r0
 8007520:	e7e9      	b.n	80074f6 <__sflush_r+0xda>
 8007522:	bf00      	nop
 8007524:	20400001 	.word	0x20400001

08007528 <_fflush_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	4605      	mov	r5, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b913      	cbnz	r3, 8007538 <_fflush_r+0x10>
 8007532:	2500      	movs	r5, #0
 8007534:	4628      	mov	r0, r5
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	b118      	cbz	r0, 8007542 <_fflush_r+0x1a>
 800753a:	6983      	ldr	r3, [r0, #24]
 800753c:	b90b      	cbnz	r3, 8007542 <_fflush_r+0x1a>
 800753e:	f000 f887 	bl	8007650 <__sinit>
 8007542:	4b14      	ldr	r3, [pc, #80]	; (8007594 <_fflush_r+0x6c>)
 8007544:	429c      	cmp	r4, r3
 8007546:	d11b      	bne.n	8007580 <_fflush_r+0x58>
 8007548:	686c      	ldr	r4, [r5, #4]
 800754a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0ef      	beq.n	8007532 <_fflush_r+0xa>
 8007552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007554:	07d0      	lsls	r0, r2, #31
 8007556:	d404      	bmi.n	8007562 <_fflush_r+0x3a>
 8007558:	0599      	lsls	r1, r3, #22
 800755a:	d402      	bmi.n	8007562 <_fflush_r+0x3a>
 800755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755e:	f000 f927 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007562:	4628      	mov	r0, r5
 8007564:	4621      	mov	r1, r4
 8007566:	f7ff ff59 	bl	800741c <__sflush_r>
 800756a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800756c:	07da      	lsls	r2, r3, #31
 800756e:	4605      	mov	r5, r0
 8007570:	d4e0      	bmi.n	8007534 <_fflush_r+0xc>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	059b      	lsls	r3, r3, #22
 8007576:	d4dd      	bmi.n	8007534 <_fflush_r+0xc>
 8007578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757a:	f000 f91a 	bl	80077b2 <__retarget_lock_release_recursive>
 800757e:	e7d9      	b.n	8007534 <_fflush_r+0xc>
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <_fflush_r+0x70>)
 8007582:	429c      	cmp	r4, r3
 8007584:	d101      	bne.n	800758a <_fflush_r+0x62>
 8007586:	68ac      	ldr	r4, [r5, #8]
 8007588:	e7df      	b.n	800754a <_fflush_r+0x22>
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <_fflush_r+0x74>)
 800758c:	429c      	cmp	r4, r3
 800758e:	bf08      	it	eq
 8007590:	68ec      	ldreq	r4, [r5, #12]
 8007592:	e7da      	b.n	800754a <_fflush_r+0x22>
 8007594:	0800844c 	.word	0x0800844c
 8007598:	0800846c 	.word	0x0800846c
 800759c:	0800842c 	.word	0x0800842c

080075a0 <std>:
 80075a0:	2300      	movs	r3, #0
 80075a2:	b510      	push	{r4, lr}
 80075a4:	4604      	mov	r4, r0
 80075a6:	e9c0 3300 	strd	r3, r3, [r0]
 80075aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ae:	6083      	str	r3, [r0, #8]
 80075b0:	8181      	strh	r1, [r0, #12]
 80075b2:	6643      	str	r3, [r0, #100]	; 0x64
 80075b4:	81c2      	strh	r2, [r0, #14]
 80075b6:	6183      	str	r3, [r0, #24]
 80075b8:	4619      	mov	r1, r3
 80075ba:	2208      	movs	r2, #8
 80075bc:	305c      	adds	r0, #92	; 0x5c
 80075be:	f7ff fd79 	bl	80070b4 <memset>
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <std+0x38>)
 80075c4:	6263      	str	r3, [r4, #36]	; 0x24
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <std+0x3c>)
 80075c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <std+0x40>)
 80075cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <std+0x44>)
 80075d0:	6224      	str	r4, [r4, #32]
 80075d2:	6323      	str	r3, [r4, #48]	; 0x30
 80075d4:	bd10      	pop	{r4, pc}
 80075d6:	bf00      	nop
 80075d8:	08007fdd 	.word	0x08007fdd
 80075dc:	08007fff 	.word	0x08007fff
 80075e0:	08008037 	.word	0x08008037
 80075e4:	0800805b 	.word	0x0800805b

080075e8 <_cleanup_r>:
 80075e8:	4901      	ldr	r1, [pc, #4]	; (80075f0 <_cleanup_r+0x8>)
 80075ea:	f000 b8c1 	b.w	8007770 <_fwalk_reent>
 80075ee:	bf00      	nop
 80075f0:	08007529 	.word	0x08007529

080075f4 <__sfmoreglue>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	1e4a      	subs	r2, r1, #1
 80075f8:	2568      	movs	r5, #104	; 0x68
 80075fa:	4355      	muls	r5, r2
 80075fc:	460e      	mov	r6, r1
 80075fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007602:	f000 f993 	bl	800792c <_malloc_r>
 8007606:	4604      	mov	r4, r0
 8007608:	b140      	cbz	r0, 800761c <__sfmoreglue+0x28>
 800760a:	2100      	movs	r1, #0
 800760c:	e9c0 1600 	strd	r1, r6, [r0]
 8007610:	300c      	adds	r0, #12
 8007612:	60a0      	str	r0, [r4, #8]
 8007614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007618:	f7ff fd4c 	bl	80070b4 <memset>
 800761c:	4620      	mov	r0, r4
 800761e:	bd70      	pop	{r4, r5, r6, pc}

08007620 <__sfp_lock_acquire>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sfp_lock_acquire+0x8>)
 8007622:	f000 b8c5 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8007626:	bf00      	nop
 8007628:	20014518 	.word	0x20014518

0800762c <__sfp_lock_release>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__sfp_lock_release+0x8>)
 800762e:	f000 b8c0 	b.w	80077b2 <__retarget_lock_release_recursive>
 8007632:	bf00      	nop
 8007634:	20014518 	.word	0x20014518

08007638 <__sinit_lock_acquire>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__sinit_lock_acquire+0x8>)
 800763a:	f000 b8b9 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 800763e:	bf00      	nop
 8007640:	20014513 	.word	0x20014513

08007644 <__sinit_lock_release>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sinit_lock_release+0x8>)
 8007646:	f000 b8b4 	b.w	80077b2 <__retarget_lock_release_recursive>
 800764a:	bf00      	nop
 800764c:	20014513 	.word	0x20014513

08007650 <__sinit>:
 8007650:	b510      	push	{r4, lr}
 8007652:	4604      	mov	r4, r0
 8007654:	f7ff fff0 	bl	8007638 <__sinit_lock_acquire>
 8007658:	69a3      	ldr	r3, [r4, #24]
 800765a:	b11b      	cbz	r3, 8007664 <__sinit+0x14>
 800765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007660:	f7ff bff0 	b.w	8007644 <__sinit_lock_release>
 8007664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007668:	6523      	str	r3, [r4, #80]	; 0x50
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <__sinit+0x68>)
 800766c:	4a13      	ldr	r2, [pc, #76]	; (80076bc <__sinit+0x6c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	62a2      	str	r2, [r4, #40]	; 0x28
 8007672:	42a3      	cmp	r3, r4
 8007674:	bf04      	itt	eq
 8007676:	2301      	moveq	r3, #1
 8007678:	61a3      	streq	r3, [r4, #24]
 800767a:	4620      	mov	r0, r4
 800767c:	f000 f820 	bl	80076c0 <__sfp>
 8007680:	6060      	str	r0, [r4, #4]
 8007682:	4620      	mov	r0, r4
 8007684:	f000 f81c 	bl	80076c0 <__sfp>
 8007688:	60a0      	str	r0, [r4, #8]
 800768a:	4620      	mov	r0, r4
 800768c:	f000 f818 	bl	80076c0 <__sfp>
 8007690:	2200      	movs	r2, #0
 8007692:	60e0      	str	r0, [r4, #12]
 8007694:	2104      	movs	r1, #4
 8007696:	6860      	ldr	r0, [r4, #4]
 8007698:	f7ff ff82 	bl	80075a0 <std>
 800769c:	68a0      	ldr	r0, [r4, #8]
 800769e:	2201      	movs	r2, #1
 80076a0:	2109      	movs	r1, #9
 80076a2:	f7ff ff7d 	bl	80075a0 <std>
 80076a6:	68e0      	ldr	r0, [r4, #12]
 80076a8:	2202      	movs	r2, #2
 80076aa:	2112      	movs	r1, #18
 80076ac:	f7ff ff78 	bl	80075a0 <std>
 80076b0:	2301      	movs	r3, #1
 80076b2:	61a3      	str	r3, [r4, #24]
 80076b4:	e7d2      	b.n	800765c <__sinit+0xc>
 80076b6:	bf00      	nop
 80076b8:	08008374 	.word	0x08008374
 80076bc:	080075e9 	.word	0x080075e9

080076c0 <__sfp>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	4607      	mov	r7, r0
 80076c4:	f7ff ffac 	bl	8007620 <__sfp_lock_acquire>
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <__sfp+0x84>)
 80076ca:	681e      	ldr	r6, [r3, #0]
 80076cc:	69b3      	ldr	r3, [r6, #24]
 80076ce:	b913      	cbnz	r3, 80076d6 <__sfp+0x16>
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7ff ffbd 	bl	8007650 <__sinit>
 80076d6:	3648      	adds	r6, #72	; 0x48
 80076d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076dc:	3b01      	subs	r3, #1
 80076de:	d503      	bpl.n	80076e8 <__sfp+0x28>
 80076e0:	6833      	ldr	r3, [r6, #0]
 80076e2:	b30b      	cbz	r3, 8007728 <__sfp+0x68>
 80076e4:	6836      	ldr	r6, [r6, #0]
 80076e6:	e7f7      	b.n	80076d8 <__sfp+0x18>
 80076e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076ec:	b9d5      	cbnz	r5, 8007724 <__sfp+0x64>
 80076ee:	4b16      	ldr	r3, [pc, #88]	; (8007748 <__sfp+0x88>)
 80076f0:	60e3      	str	r3, [r4, #12]
 80076f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076f6:	6665      	str	r5, [r4, #100]	; 0x64
 80076f8:	f000 f859 	bl	80077ae <__retarget_lock_init_recursive>
 80076fc:	f7ff ff96 	bl	800762c <__sfp_lock_release>
 8007700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007708:	6025      	str	r5, [r4, #0]
 800770a:	61a5      	str	r5, [r4, #24]
 800770c:	2208      	movs	r2, #8
 800770e:	4629      	mov	r1, r5
 8007710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007714:	f7ff fcce 	bl	80070b4 <memset>
 8007718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800771c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007720:	4620      	mov	r0, r4
 8007722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007724:	3468      	adds	r4, #104	; 0x68
 8007726:	e7d9      	b.n	80076dc <__sfp+0x1c>
 8007728:	2104      	movs	r1, #4
 800772a:	4638      	mov	r0, r7
 800772c:	f7ff ff62 	bl	80075f4 <__sfmoreglue>
 8007730:	4604      	mov	r4, r0
 8007732:	6030      	str	r0, [r6, #0]
 8007734:	2800      	cmp	r0, #0
 8007736:	d1d5      	bne.n	80076e4 <__sfp+0x24>
 8007738:	f7ff ff78 	bl	800762c <__sfp_lock_release>
 800773c:	230c      	movs	r3, #12
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	e7ee      	b.n	8007720 <__sfp+0x60>
 8007742:	bf00      	nop
 8007744:	08008374 	.word	0x08008374
 8007748:	ffff0001 	.word	0xffff0001

0800774c <fiprintf>:
 800774c:	b40e      	push	{r1, r2, r3}
 800774e:	b503      	push	{r0, r1, lr}
 8007750:	4601      	mov	r1, r0
 8007752:	ab03      	add	r3, sp, #12
 8007754:	4805      	ldr	r0, [pc, #20]	; (800776c <fiprintf+0x20>)
 8007756:	f853 2b04 	ldr.w	r2, [r3], #4
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	f000 f969 	bl	8007a34 <_vfiprintf_r>
 8007762:	b002      	add	sp, #8
 8007764:	f85d eb04 	ldr.w	lr, [sp], #4
 8007768:	b003      	add	sp, #12
 800776a:	4770      	bx	lr
 800776c:	20000014 	.word	0x20000014

08007770 <_fwalk_reent>:
 8007770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007774:	4606      	mov	r6, r0
 8007776:	4688      	mov	r8, r1
 8007778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800777c:	2700      	movs	r7, #0
 800777e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007782:	f1b9 0901 	subs.w	r9, r9, #1
 8007786:	d505      	bpl.n	8007794 <_fwalk_reent+0x24>
 8007788:	6824      	ldr	r4, [r4, #0]
 800778a:	2c00      	cmp	r4, #0
 800778c:	d1f7      	bne.n	800777e <_fwalk_reent+0xe>
 800778e:	4638      	mov	r0, r7
 8007790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d907      	bls.n	80077aa <_fwalk_reent+0x3a>
 800779a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800779e:	3301      	adds	r3, #1
 80077a0:	d003      	beq.n	80077aa <_fwalk_reent+0x3a>
 80077a2:	4629      	mov	r1, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	4307      	orrs	r7, r0
 80077aa:	3568      	adds	r5, #104	; 0x68
 80077ac:	e7e9      	b.n	8007782 <_fwalk_reent+0x12>

080077ae <__retarget_lock_init_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <__retarget_lock_acquire_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_release_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__swhatbuf_r>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	2900      	cmp	r1, #0
 80077be:	b096      	sub	sp, #88	; 0x58
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	da07      	bge.n	80077d6 <__swhatbuf_r+0x22>
 80077c6:	2300      	movs	r3, #0
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	89b3      	ldrh	r3, [r6, #12]
 80077cc:	061a      	lsls	r2, r3, #24
 80077ce:	d410      	bmi.n	80077f2 <__swhatbuf_r+0x3e>
 80077d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d4:	e00e      	b.n	80077f4 <__swhatbuf_r+0x40>
 80077d6:	466a      	mov	r2, sp
 80077d8:	f000 fc5a 	bl	8008090 <_fstat_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	dbf2      	blt.n	80077c6 <__swhatbuf_r+0x12>
 80077e0:	9a01      	ldr	r2, [sp, #4]
 80077e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ea:	425a      	negs	r2, r3
 80077ec:	415a      	adcs	r2, r3
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	e7ee      	b.n	80077d0 <__swhatbuf_r+0x1c>
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	2000      	movs	r0, #0
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	b016      	add	sp, #88	; 0x58
 80077fa:	bd70      	pop	{r4, r5, r6, pc}

080077fc <__smakebuf_r>:
 80077fc:	898b      	ldrh	r3, [r1, #12]
 80077fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007800:	079d      	lsls	r5, r3, #30
 8007802:	4606      	mov	r6, r0
 8007804:	460c      	mov	r4, r1
 8007806:	d507      	bpl.n	8007818 <__smakebuf_r+0x1c>
 8007808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	2301      	movs	r3, #1
 8007812:	6163      	str	r3, [r4, #20]
 8007814:	b002      	add	sp, #8
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	ab01      	add	r3, sp, #4
 800781a:	466a      	mov	r2, sp
 800781c:	f7ff ffca 	bl	80077b4 <__swhatbuf_r>
 8007820:	9900      	ldr	r1, [sp, #0]
 8007822:	4605      	mov	r5, r0
 8007824:	4630      	mov	r0, r6
 8007826:	f000 f881 	bl	800792c <_malloc_r>
 800782a:	b948      	cbnz	r0, 8007840 <__smakebuf_r+0x44>
 800782c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007830:	059a      	lsls	r2, r3, #22
 8007832:	d4ef      	bmi.n	8007814 <__smakebuf_r+0x18>
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	f043 0302 	orr.w	r3, r3, #2
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	e7e3      	b.n	8007808 <__smakebuf_r+0xc>
 8007840:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <__smakebuf_r+0x7c>)
 8007842:	62b3      	str	r3, [r6, #40]	; 0x28
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	6020      	str	r0, [r4, #0]
 8007848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	6163      	str	r3, [r4, #20]
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	6120      	str	r0, [r4, #16]
 8007856:	b15b      	cbz	r3, 8007870 <__smakebuf_r+0x74>
 8007858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800785c:	4630      	mov	r0, r6
 800785e:	f000 fc29 	bl	80080b4 <_isatty_r>
 8007862:	b128      	cbz	r0, 8007870 <__smakebuf_r+0x74>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	89a0      	ldrh	r0, [r4, #12]
 8007872:	4305      	orrs	r5, r0
 8007874:	81a5      	strh	r5, [r4, #12]
 8007876:	e7cd      	b.n	8007814 <__smakebuf_r+0x18>
 8007878:	080075e9 	.word	0x080075e9

0800787c <malloc>:
 800787c:	4b02      	ldr	r3, [pc, #8]	; (8007888 <malloc+0xc>)
 800787e:	4601      	mov	r1, r0
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f000 b853 	b.w	800792c <_malloc_r>
 8007886:	bf00      	nop
 8007888:	20000014 	.word	0x20000014

0800788c <_free_r>:
 800788c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800788e:	2900      	cmp	r1, #0
 8007890:	d048      	beq.n	8007924 <_free_r+0x98>
 8007892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007896:	9001      	str	r0, [sp, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f1a1 0404 	sub.w	r4, r1, #4
 800789e:	bfb8      	it	lt
 80078a0:	18e4      	addlt	r4, r4, r3
 80078a2:	f000 fc29 	bl	80080f8 <__malloc_lock>
 80078a6:	4a20      	ldr	r2, [pc, #128]	; (8007928 <_free_r+0x9c>)
 80078a8:	9801      	ldr	r0, [sp, #4]
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	4615      	mov	r5, r2
 80078ae:	b933      	cbnz	r3, 80078be <_free_r+0x32>
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	6014      	str	r4, [r2, #0]
 80078b4:	b003      	add	sp, #12
 80078b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ba:	f000 bc23 	b.w	8008104 <__malloc_unlock>
 80078be:	42a3      	cmp	r3, r4
 80078c0:	d90b      	bls.n	80078da <_free_r+0x4e>
 80078c2:	6821      	ldr	r1, [r4, #0]
 80078c4:	1862      	adds	r2, r4, r1
 80078c6:	4293      	cmp	r3, r2
 80078c8:	bf04      	itt	eq
 80078ca:	681a      	ldreq	r2, [r3, #0]
 80078cc:	685b      	ldreq	r3, [r3, #4]
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	bf04      	itt	eq
 80078d2:	1852      	addeq	r2, r2, r1
 80078d4:	6022      	streq	r2, [r4, #0]
 80078d6:	602c      	str	r4, [r5, #0]
 80078d8:	e7ec      	b.n	80078b4 <_free_r+0x28>
 80078da:	461a      	mov	r2, r3
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	b10b      	cbz	r3, 80078e4 <_free_r+0x58>
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	d9fa      	bls.n	80078da <_free_r+0x4e>
 80078e4:	6811      	ldr	r1, [r2, #0]
 80078e6:	1855      	adds	r5, r2, r1
 80078e8:	42a5      	cmp	r5, r4
 80078ea:	d10b      	bne.n	8007904 <_free_r+0x78>
 80078ec:	6824      	ldr	r4, [r4, #0]
 80078ee:	4421      	add	r1, r4
 80078f0:	1854      	adds	r4, r2, r1
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	6011      	str	r1, [r2, #0]
 80078f6:	d1dd      	bne.n	80078b4 <_free_r+0x28>
 80078f8:	681c      	ldr	r4, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	6053      	str	r3, [r2, #4]
 80078fe:	4421      	add	r1, r4
 8007900:	6011      	str	r1, [r2, #0]
 8007902:	e7d7      	b.n	80078b4 <_free_r+0x28>
 8007904:	d902      	bls.n	800790c <_free_r+0x80>
 8007906:	230c      	movs	r3, #12
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	e7d3      	b.n	80078b4 <_free_r+0x28>
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	1961      	adds	r1, r4, r5
 8007910:	428b      	cmp	r3, r1
 8007912:	bf04      	itt	eq
 8007914:	6819      	ldreq	r1, [r3, #0]
 8007916:	685b      	ldreq	r3, [r3, #4]
 8007918:	6063      	str	r3, [r4, #4]
 800791a:	bf04      	itt	eq
 800791c:	1949      	addeq	r1, r1, r5
 800791e:	6021      	streq	r1, [r4, #0]
 8007920:	6054      	str	r4, [r2, #4]
 8007922:	e7c7      	b.n	80078b4 <_free_r+0x28>
 8007924:	b003      	add	sp, #12
 8007926:	bd30      	pop	{r4, r5, pc}
 8007928:	200143d0 	.word	0x200143d0

0800792c <_malloc_r>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	1ccd      	adds	r5, r1, #3
 8007930:	f025 0503 	bic.w	r5, r5, #3
 8007934:	3508      	adds	r5, #8
 8007936:	2d0c      	cmp	r5, #12
 8007938:	bf38      	it	cc
 800793a:	250c      	movcc	r5, #12
 800793c:	2d00      	cmp	r5, #0
 800793e:	4606      	mov	r6, r0
 8007940:	db01      	blt.n	8007946 <_malloc_r+0x1a>
 8007942:	42a9      	cmp	r1, r5
 8007944:	d903      	bls.n	800794e <_malloc_r+0x22>
 8007946:	230c      	movs	r3, #12
 8007948:	6033      	str	r3, [r6, #0]
 800794a:	2000      	movs	r0, #0
 800794c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794e:	f000 fbd3 	bl	80080f8 <__malloc_lock>
 8007952:	4921      	ldr	r1, [pc, #132]	; (80079d8 <_malloc_r+0xac>)
 8007954:	680a      	ldr	r2, [r1, #0]
 8007956:	4614      	mov	r4, r2
 8007958:	b99c      	cbnz	r4, 8007982 <_malloc_r+0x56>
 800795a:	4f20      	ldr	r7, [pc, #128]	; (80079dc <_malloc_r+0xb0>)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	b923      	cbnz	r3, 800796a <_malloc_r+0x3e>
 8007960:	4621      	mov	r1, r4
 8007962:	4630      	mov	r0, r6
 8007964:	f000 fb2a 	bl	8007fbc <_sbrk_r>
 8007968:	6038      	str	r0, [r7, #0]
 800796a:	4629      	mov	r1, r5
 800796c:	4630      	mov	r0, r6
 800796e:	f000 fb25 	bl	8007fbc <_sbrk_r>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d123      	bne.n	80079be <_malloc_r+0x92>
 8007976:	230c      	movs	r3, #12
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	4630      	mov	r0, r6
 800797c:	f000 fbc2 	bl	8008104 <__malloc_unlock>
 8007980:	e7e3      	b.n	800794a <_malloc_r+0x1e>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	1b5b      	subs	r3, r3, r5
 8007986:	d417      	bmi.n	80079b8 <_malloc_r+0x8c>
 8007988:	2b0b      	cmp	r3, #11
 800798a:	d903      	bls.n	8007994 <_malloc_r+0x68>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	441c      	add	r4, r3
 8007990:	6025      	str	r5, [r4, #0]
 8007992:	e004      	b.n	800799e <_malloc_r+0x72>
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	42a2      	cmp	r2, r4
 8007998:	bf0c      	ite	eq
 800799a:	600b      	streq	r3, [r1, #0]
 800799c:	6053      	strne	r3, [r2, #4]
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 fbb0 	bl	8008104 <__malloc_unlock>
 80079a4:	f104 000b 	add.w	r0, r4, #11
 80079a8:	1d23      	adds	r3, r4, #4
 80079aa:	f020 0007 	bic.w	r0, r0, #7
 80079ae:	1ac2      	subs	r2, r0, r3
 80079b0:	d0cc      	beq.n	800794c <_malloc_r+0x20>
 80079b2:	1a1b      	subs	r3, r3, r0
 80079b4:	50a3      	str	r3, [r4, r2]
 80079b6:	e7c9      	b.n	800794c <_malloc_r+0x20>
 80079b8:	4622      	mov	r2, r4
 80079ba:	6864      	ldr	r4, [r4, #4]
 80079bc:	e7cc      	b.n	8007958 <_malloc_r+0x2c>
 80079be:	1cc4      	adds	r4, r0, #3
 80079c0:	f024 0403 	bic.w	r4, r4, #3
 80079c4:	42a0      	cmp	r0, r4
 80079c6:	d0e3      	beq.n	8007990 <_malloc_r+0x64>
 80079c8:	1a21      	subs	r1, r4, r0
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 faf6 	bl	8007fbc <_sbrk_r>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1dd      	bne.n	8007990 <_malloc_r+0x64>
 80079d4:	e7cf      	b.n	8007976 <_malloc_r+0x4a>
 80079d6:	bf00      	nop
 80079d8:	200143d0 	.word	0x200143d0
 80079dc:	200143d4 	.word	0x200143d4

080079e0 <__sfputc_r>:
 80079e0:	6893      	ldr	r3, [r2, #8]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	b410      	push	{r4}
 80079e8:	6093      	str	r3, [r2, #8]
 80079ea:	da08      	bge.n	80079fe <__sfputc_r+0x1e>
 80079ec:	6994      	ldr	r4, [r2, #24]
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	db01      	blt.n	80079f6 <__sfputc_r+0x16>
 80079f2:	290a      	cmp	r1, #10
 80079f4:	d103      	bne.n	80079fe <__sfputc_r+0x1e>
 80079f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079fa:	f7ff bc31 	b.w	8007260 <__swbuf_r>
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	1c58      	adds	r0, r3, #1
 8007a02:	6010      	str	r0, [r2, #0]
 8007a04:	7019      	strb	r1, [r3, #0]
 8007a06:	4608      	mov	r0, r1
 8007a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <__sfputs_r>:
 8007a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a10:	4606      	mov	r6, r0
 8007a12:	460f      	mov	r7, r1
 8007a14:	4614      	mov	r4, r2
 8007a16:	18d5      	adds	r5, r2, r3
 8007a18:	42ac      	cmp	r4, r5
 8007a1a:	d101      	bne.n	8007a20 <__sfputs_r+0x12>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e007      	b.n	8007a30 <__sfputs_r+0x22>
 8007a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a24:	463a      	mov	r2, r7
 8007a26:	4630      	mov	r0, r6
 8007a28:	f7ff ffda 	bl	80079e0 <__sfputc_r>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d1f3      	bne.n	8007a18 <__sfputs_r+0xa>
 8007a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a34 <_vfiprintf_r>:
 8007a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	460d      	mov	r5, r1
 8007a3a:	b09d      	sub	sp, #116	; 0x74
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	4698      	mov	r8, r3
 8007a40:	4606      	mov	r6, r0
 8007a42:	b118      	cbz	r0, 8007a4c <_vfiprintf_r+0x18>
 8007a44:	6983      	ldr	r3, [r0, #24]
 8007a46:	b90b      	cbnz	r3, 8007a4c <_vfiprintf_r+0x18>
 8007a48:	f7ff fe02 	bl	8007650 <__sinit>
 8007a4c:	4b89      	ldr	r3, [pc, #548]	; (8007c74 <_vfiprintf_r+0x240>)
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	d11b      	bne.n	8007a8a <_vfiprintf_r+0x56>
 8007a52:	6875      	ldr	r5, [r6, #4]
 8007a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a56:	07d9      	lsls	r1, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_vfiprintf_r+0x32>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	059a      	lsls	r2, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_vfiprintf_r+0x32>
 8007a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a62:	f7ff fea5 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	071b      	lsls	r3, r3, #28
 8007a6a:	d501      	bpl.n	8007a70 <_vfiprintf_r+0x3c>
 8007a6c:	692b      	ldr	r3, [r5, #16]
 8007a6e:	b9eb      	cbnz	r3, 8007aac <_vfiprintf_r+0x78>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff fc46 	bl	8007304 <__swsetup_r>
 8007a78:	b1c0      	cbz	r0, 8007aac <_vfiprintf_r+0x78>
 8007a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a7c:	07dc      	lsls	r4, r3, #31
 8007a7e:	d50e      	bpl.n	8007a9e <_vfiprintf_r+0x6a>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	b01d      	add	sp, #116	; 0x74
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	4b7b      	ldr	r3, [pc, #492]	; (8007c78 <_vfiprintf_r+0x244>)
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	d101      	bne.n	8007a94 <_vfiprintf_r+0x60>
 8007a90:	68b5      	ldr	r5, [r6, #8]
 8007a92:	e7df      	b.n	8007a54 <_vfiprintf_r+0x20>
 8007a94:	4b79      	ldr	r3, [pc, #484]	; (8007c7c <_vfiprintf_r+0x248>)
 8007a96:	429d      	cmp	r5, r3
 8007a98:	bf08      	it	eq
 8007a9a:	68f5      	ldreq	r5, [r6, #12]
 8007a9c:	e7da      	b.n	8007a54 <_vfiprintf_r+0x20>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	0598      	lsls	r0, r3, #22
 8007aa2:	d4ed      	bmi.n	8007a80 <_vfiprintf_r+0x4c>
 8007aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa6:	f7ff fe84 	bl	80077b2 <__retarget_lock_release_recursive>
 8007aaa:	e7e9      	b.n	8007a80 <_vfiprintf_r+0x4c>
 8007aac:	2300      	movs	r3, #0
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aba:	2330      	movs	r3, #48	; 0x30
 8007abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c80 <_vfiprintf_r+0x24c>
 8007ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ac4:	f04f 0901 	mov.w	r9, #1
 8007ac8:	4623      	mov	r3, r4
 8007aca:	469a      	mov	sl, r3
 8007acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad0:	b10a      	cbz	r2, 8007ad6 <_vfiprintf_r+0xa2>
 8007ad2:	2a25      	cmp	r2, #37	; 0x25
 8007ad4:	d1f9      	bne.n	8007aca <_vfiprintf_r+0x96>
 8007ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8007ada:	d00b      	beq.n	8007af4 <_vfiprintf_r+0xc0>
 8007adc:	465b      	mov	r3, fp
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff ff93 	bl	8007a0e <__sfputs_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f000 80aa 	beq.w	8007c42 <_vfiprintf_r+0x20e>
 8007aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af0:	445a      	add	r2, fp
 8007af2:	9209      	str	r2, [sp, #36]	; 0x24
 8007af4:	f89a 3000 	ldrb.w	r3, [sl]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80a2 	beq.w	8007c42 <_vfiprintf_r+0x20e>
 8007afe:	2300      	movs	r3, #0
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295
 8007b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b08:	f10a 0a01 	add.w	sl, sl, #1
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	9307      	str	r3, [sp, #28]
 8007b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b14:	931a      	str	r3, [sp, #104]	; 0x68
 8007b16:	4654      	mov	r4, sl
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1e:	4858      	ldr	r0, [pc, #352]	; (8007c80 <_vfiprintf_r+0x24c>)
 8007b20:	f7f8 fbb6 	bl	8000290 <memchr>
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	b9d8      	cbnz	r0, 8007b60 <_vfiprintf_r+0x12c>
 8007b28:	06d1      	lsls	r1, r2, #27
 8007b2a:	bf44      	itt	mi
 8007b2c:	2320      	movmi	r3, #32
 8007b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b32:	0713      	lsls	r3, r2, #28
 8007b34:	bf44      	itt	mi
 8007b36:	232b      	movmi	r3, #43	; 0x2b
 8007b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b40:	2b2a      	cmp	r3, #42	; 0x2a
 8007b42:	d015      	beq.n	8007b70 <_vfiprintf_r+0x13c>
 8007b44:	9a07      	ldr	r2, [sp, #28]
 8007b46:	4654      	mov	r4, sl
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f04f 0c0a 	mov.w	ip, #10
 8007b4e:	4621      	mov	r1, r4
 8007b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b54:	3b30      	subs	r3, #48	; 0x30
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d94e      	bls.n	8007bf8 <_vfiprintf_r+0x1c4>
 8007b5a:	b1b0      	cbz	r0, 8007b8a <_vfiprintf_r+0x156>
 8007b5c:	9207      	str	r2, [sp, #28]
 8007b5e:	e014      	b.n	8007b8a <_vfiprintf_r+0x156>
 8007b60:	eba0 0308 	sub.w	r3, r0, r8
 8007b64:	fa09 f303 	lsl.w	r3, r9, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	46a2      	mov	sl, r4
 8007b6e:	e7d2      	b.n	8007b16 <_vfiprintf_r+0xe2>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	1d19      	adds	r1, r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	9103      	str	r1, [sp, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bfbb      	ittet	lt
 8007b7c:	425b      	neglt	r3, r3
 8007b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b82:	9307      	strge	r3, [sp, #28]
 8007b84:	9307      	strlt	r3, [sp, #28]
 8007b86:	bfb8      	it	lt
 8007b88:	9204      	strlt	r2, [sp, #16]
 8007b8a:	7823      	ldrb	r3, [r4, #0]
 8007b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b8e:	d10c      	bne.n	8007baa <_vfiprintf_r+0x176>
 8007b90:	7863      	ldrb	r3, [r4, #1]
 8007b92:	2b2a      	cmp	r3, #42	; 0x2a
 8007b94:	d135      	bne.n	8007c02 <_vfiprintf_r+0x1ce>
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	9203      	str	r2, [sp, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfb8      	it	lt
 8007ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ba6:	3402      	adds	r4, #2
 8007ba8:	9305      	str	r3, [sp, #20]
 8007baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c90 <_vfiprintf_r+0x25c>
 8007bae:	7821      	ldrb	r1, [r4, #0]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	f7f8 fb6c 	bl	8000290 <memchr>
 8007bb8:	b140      	cbz	r0, 8007bcc <_vfiprintf_r+0x198>
 8007bba:	2340      	movs	r3, #64	; 0x40
 8007bbc:	eba0 000a 	sub.w	r0, r0, sl
 8007bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	4303      	orrs	r3, r0
 8007bc8:	3401      	adds	r4, #1
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd0:	482c      	ldr	r0, [pc, #176]	; (8007c84 <_vfiprintf_r+0x250>)
 8007bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bd6:	2206      	movs	r2, #6
 8007bd8:	f7f8 fb5a 	bl	8000290 <memchr>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d03f      	beq.n	8007c60 <_vfiprintf_r+0x22c>
 8007be0:	4b29      	ldr	r3, [pc, #164]	; (8007c88 <_vfiprintf_r+0x254>)
 8007be2:	bb1b      	cbnz	r3, 8007c2c <_vfiprintf_r+0x1f8>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	3307      	adds	r3, #7
 8007be8:	f023 0307 	bic.w	r3, r3, #7
 8007bec:	3308      	adds	r3, #8
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	443b      	add	r3, r7
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	e767      	b.n	8007ac8 <_vfiprintf_r+0x94>
 8007bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	2001      	movs	r0, #1
 8007c00:	e7a5      	b.n	8007b4e <_vfiprintf_r+0x11a>
 8007c02:	2300      	movs	r3, #0
 8007c04:	3401      	adds	r4, #1
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f04f 0c0a 	mov.w	ip, #10
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c14:	3a30      	subs	r2, #48	; 0x30
 8007c16:	2a09      	cmp	r2, #9
 8007c18:	d903      	bls.n	8007c22 <_vfiprintf_r+0x1ee>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0c5      	beq.n	8007baa <_vfiprintf_r+0x176>
 8007c1e:	9105      	str	r1, [sp, #20]
 8007c20:	e7c3      	b.n	8007baa <_vfiprintf_r+0x176>
 8007c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c26:	4604      	mov	r4, r0
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e7f0      	b.n	8007c0e <_vfiprintf_r+0x1da>
 8007c2c:	ab03      	add	r3, sp, #12
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	462a      	mov	r2, r5
 8007c32:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <_vfiprintf_r+0x258>)
 8007c34:	a904      	add	r1, sp, #16
 8007c36:	4630      	mov	r0, r6
 8007c38:	f3af 8000 	nop.w
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	1c78      	adds	r0, r7, #1
 8007c40:	d1d6      	bne.n	8007bf0 <_vfiprintf_r+0x1bc>
 8007c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c44:	07d9      	lsls	r1, r3, #31
 8007c46:	d405      	bmi.n	8007c54 <_vfiprintf_r+0x220>
 8007c48:	89ab      	ldrh	r3, [r5, #12]
 8007c4a:	059a      	lsls	r2, r3, #22
 8007c4c:	d402      	bmi.n	8007c54 <_vfiprintf_r+0x220>
 8007c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c50:	f7ff fdaf 	bl	80077b2 <__retarget_lock_release_recursive>
 8007c54:	89ab      	ldrh	r3, [r5, #12]
 8007c56:	065b      	lsls	r3, r3, #25
 8007c58:	f53f af12 	bmi.w	8007a80 <_vfiprintf_r+0x4c>
 8007c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c5e:	e711      	b.n	8007a84 <_vfiprintf_r+0x50>
 8007c60:	ab03      	add	r3, sp, #12
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	462a      	mov	r2, r5
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <_vfiprintf_r+0x258>)
 8007c68:	a904      	add	r1, sp, #16
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f000 f880 	bl	8007d70 <_printf_i>
 8007c70:	e7e4      	b.n	8007c3c <_vfiprintf_r+0x208>
 8007c72:	bf00      	nop
 8007c74:	0800844c 	.word	0x0800844c
 8007c78:	0800846c 	.word	0x0800846c
 8007c7c:	0800842c 	.word	0x0800842c
 8007c80:	0800848c 	.word	0x0800848c
 8007c84:	08008496 	.word	0x08008496
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	08007a0f 	.word	0x08007a0f
 8007c90:	08008492 	.word	0x08008492

08007c94 <_printf_common>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	4616      	mov	r6, r2
 8007c9a:	4699      	mov	r9, r3
 8007c9c:	688a      	ldr	r2, [r1, #8]
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bfb8      	it	lt
 8007ca8:	4613      	movlt	r3, r2
 8007caa:	6033      	str	r3, [r6, #0]
 8007cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b10a      	cbz	r2, 8007cba <_printf_common+0x26>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	0699      	lsls	r1, r3, #26
 8007cbe:	bf42      	ittt	mi
 8007cc0:	6833      	ldrmi	r3, [r6, #0]
 8007cc2:	3302      	addmi	r3, #2
 8007cc4:	6033      	strmi	r3, [r6, #0]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d106      	bne.n	8007cdc <_printf_common+0x48>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	6832      	ldr	r2, [r6, #0]
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	dc26      	bgt.n	8007d2a <_printf_common+0x96>
 8007cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce0:	1e13      	subs	r3, r2, #0
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	bf18      	it	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	0692      	lsls	r2, r2, #26
 8007cea:	d42b      	bmi.n	8007d44 <_printf_common+0xb0>
 8007cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c0      	blx	r8
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d01e      	beq.n	8007d38 <_printf_common+0xa4>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	68e5      	ldr	r5, [r4, #12]
 8007cfe:	6832      	ldr	r2, [r6, #0]
 8007d00:	f003 0306 	and.w	r3, r3, #6
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	bf08      	it	eq
 8007d08:	1aad      	subeq	r5, r5, r2
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	bf0c      	ite	eq
 8007d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d14:	2500      	movne	r5, #0
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bfc4      	itt	gt
 8007d1a:	1a9b      	subgt	r3, r3, r2
 8007d1c:	18ed      	addgt	r5, r5, r3
 8007d1e:	2600      	movs	r6, #0
 8007d20:	341a      	adds	r4, #26
 8007d22:	42b5      	cmp	r5, r6
 8007d24:	d11a      	bne.n	8007d5c <_printf_common+0xc8>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e008      	b.n	8007d3c <_printf_common+0xa8>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4638      	mov	r0, r7
 8007d32:	47c0      	blx	r8
 8007d34:	3001      	adds	r0, #1
 8007d36:	d103      	bne.n	8007d40 <_printf_common+0xac>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d40:	3501      	adds	r5, #1
 8007d42:	e7c6      	b.n	8007cd2 <_printf_common+0x3e>
 8007d44:	18e1      	adds	r1, r4, r3
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	2030      	movs	r0, #48	; 0x30
 8007d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d4e:	4422      	add	r2, r4
 8007d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d58:	3302      	adds	r3, #2
 8007d5a:	e7c7      	b.n	8007cec <_printf_common+0x58>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4649      	mov	r1, r9
 8007d62:	4638      	mov	r0, r7
 8007d64:	47c0      	blx	r8
 8007d66:	3001      	adds	r0, #1
 8007d68:	d0e6      	beq.n	8007d38 <_printf_common+0xa4>
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7d9      	b.n	8007d22 <_printf_common+0x8e>
	...

08007d70 <_printf_i>:
 8007d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	460c      	mov	r4, r1
 8007d76:	4691      	mov	r9, r2
 8007d78:	7e27      	ldrb	r7, [r4, #24]
 8007d7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d7c:	2f78      	cmp	r7, #120	; 0x78
 8007d7e:	4680      	mov	r8, r0
 8007d80:	469a      	mov	sl, r3
 8007d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d86:	d807      	bhi.n	8007d98 <_printf_i+0x28>
 8007d88:	2f62      	cmp	r7, #98	; 0x62
 8007d8a:	d80a      	bhi.n	8007da2 <_printf_i+0x32>
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	f000 80d8 	beq.w	8007f42 <_printf_i+0x1d2>
 8007d92:	2f58      	cmp	r7, #88	; 0x58
 8007d94:	f000 80a3 	beq.w	8007ede <_printf_i+0x16e>
 8007d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da0:	e03a      	b.n	8007e18 <_printf_i+0xa8>
 8007da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007da6:	2b15      	cmp	r3, #21
 8007da8:	d8f6      	bhi.n	8007d98 <_printf_i+0x28>
 8007daa:	a001      	add	r0, pc, #4	; (adr r0, 8007db0 <_printf_i+0x40>)
 8007dac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e1d 	.word	0x08007e1d
 8007db8:	08007d99 	.word	0x08007d99
 8007dbc:	08007d99 	.word	0x08007d99
 8007dc0:	08007d99 	.word	0x08007d99
 8007dc4:	08007d99 	.word	0x08007d99
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d99 	.word	0x08007d99
 8007dd0:	08007d99 	.word	0x08007d99
 8007dd4:	08007d99 	.word	0x08007d99
 8007dd8:	08007d99 	.word	0x08007d99
 8007ddc:	08007f29 	.word	0x08007f29
 8007de0:	08007e4d 	.word	0x08007e4d
 8007de4:	08007f0b 	.word	0x08007f0b
 8007de8:	08007d99 	.word	0x08007d99
 8007dec:	08007d99 	.word	0x08007d99
 8007df0:	08007f4b 	.word	0x08007f4b
 8007df4:	08007d99 	.word	0x08007d99
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007d99 	.word	0x08007d99
 8007e00:	08007d99 	.word	0x08007d99
 8007e04:	08007f13 	.word	0x08007f13
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	600a      	str	r2, [r1, #0]
 8007e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0a3      	b.n	8007f64 <_printf_i+0x1f4>
 8007e1c:	6825      	ldr	r5, [r4, #0]
 8007e1e:	6808      	ldr	r0, [r1, #0]
 8007e20:	062e      	lsls	r6, r5, #24
 8007e22:	f100 0304 	add.w	r3, r0, #4
 8007e26:	d50a      	bpl.n	8007e3e <_printf_i+0xce>
 8007e28:	6805      	ldr	r5, [r0, #0]
 8007e2a:	600b      	str	r3, [r1, #0]
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	da03      	bge.n	8007e38 <_printf_i+0xc8>
 8007e30:	232d      	movs	r3, #45	; 0x2d
 8007e32:	426d      	negs	r5, r5
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	485e      	ldr	r0, [pc, #376]	; (8007fb4 <_printf_i+0x244>)
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	e019      	b.n	8007e72 <_printf_i+0x102>
 8007e3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e42:	6805      	ldr	r5, [r0, #0]
 8007e44:	600b      	str	r3, [r1, #0]
 8007e46:	bf18      	it	ne
 8007e48:	b22d      	sxthne	r5, r5
 8007e4a:	e7ef      	b.n	8007e2c <_printf_i+0xbc>
 8007e4c:	680b      	ldr	r3, [r1, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	1d18      	adds	r0, r3, #4
 8007e52:	6008      	str	r0, [r1, #0]
 8007e54:	0628      	lsls	r0, r5, #24
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0xec>
 8007e58:	681d      	ldr	r5, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0xf2>
 8007e5c:	0669      	lsls	r1, r5, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0xe8>
 8007e60:	881d      	ldrh	r5, [r3, #0]
 8007e62:	4854      	ldr	r0, [pc, #336]	; (8007fb4 <_printf_i+0x244>)
 8007e64:	2f6f      	cmp	r7, #111	; 0x6f
 8007e66:	bf0c      	ite	eq
 8007e68:	2308      	moveq	r3, #8
 8007e6a:	230a      	movne	r3, #10
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e72:	6866      	ldr	r6, [r4, #4]
 8007e74:	60a6      	str	r6, [r4, #8]
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	bfa2      	ittt	ge
 8007e7a:	6821      	ldrge	r1, [r4, #0]
 8007e7c:	f021 0104 	bicge.w	r1, r1, #4
 8007e80:	6021      	strge	r1, [r4, #0]
 8007e82:	b90d      	cbnz	r5, 8007e88 <_printf_i+0x118>
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	d04d      	beq.n	8007f24 <_printf_i+0x1b4>
 8007e88:	4616      	mov	r6, r2
 8007e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e92:	5dc7      	ldrb	r7, [r0, r7]
 8007e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e98:	462f      	mov	r7, r5
 8007e9a:	42bb      	cmp	r3, r7
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	d9f4      	bls.n	8007e8a <_printf_i+0x11a>
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d10b      	bne.n	8007ebc <_printf_i+0x14c>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	07df      	lsls	r7, r3, #31
 8007ea8:	d508      	bpl.n	8007ebc <_printf_i+0x14c>
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	bfde      	ittt	le
 8007eb2:	2330      	movle	r3, #48	; 0x30
 8007eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ebc:	1b92      	subs	r2, r2, r6
 8007ebe:	6122      	str	r2, [r4, #16]
 8007ec0:	f8cd a000 	str.w	sl, [sp]
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	aa03      	add	r2, sp, #12
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff fee2 	bl	8007c94 <_printf_common>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d14c      	bne.n	8007f6e <_printf_i+0x1fe>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	b004      	add	sp, #16
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	4835      	ldr	r0, [pc, #212]	; (8007fb4 <_printf_i+0x244>)
 8007ee0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	680e      	ldr	r6, [r1, #0]
 8007ee8:	061f      	lsls	r7, r3, #24
 8007eea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eee:	600e      	str	r6, [r1, #0]
 8007ef0:	d514      	bpl.n	8007f1c <_printf_i+0x1ac>
 8007ef2:	07d9      	lsls	r1, r3, #31
 8007ef4:	bf44      	itt	mi
 8007ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8007efa:	6023      	strmi	r3, [r4, #0]
 8007efc:	b91d      	cbnz	r5, 8007f06 <_printf_i+0x196>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	f023 0320 	bic.w	r3, r3, #32
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	2310      	movs	r3, #16
 8007f08:	e7b0      	b.n	8007e6c <_printf_i+0xfc>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	f043 0320 	orr.w	r3, r3, #32
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	2378      	movs	r3, #120	; 0x78
 8007f14:	4828      	ldr	r0, [pc, #160]	; (8007fb8 <_printf_i+0x248>)
 8007f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f1a:	e7e3      	b.n	8007ee4 <_printf_i+0x174>
 8007f1c:	065e      	lsls	r6, r3, #25
 8007f1e:	bf48      	it	mi
 8007f20:	b2ad      	uxthmi	r5, r5
 8007f22:	e7e6      	b.n	8007ef2 <_printf_i+0x182>
 8007f24:	4616      	mov	r6, r2
 8007f26:	e7bb      	b.n	8007ea0 <_printf_i+0x130>
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	6826      	ldr	r6, [r4, #0]
 8007f2c:	6960      	ldr	r0, [r4, #20]
 8007f2e:	1d1d      	adds	r5, r3, #4
 8007f30:	600d      	str	r5, [r1, #0]
 8007f32:	0635      	lsls	r5, r6, #24
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	d501      	bpl.n	8007f3c <_printf_i+0x1cc>
 8007f38:	6018      	str	r0, [r3, #0]
 8007f3a:	e002      	b.n	8007f42 <_printf_i+0x1d2>
 8007f3c:	0671      	lsls	r1, r6, #25
 8007f3e:	d5fb      	bpl.n	8007f38 <_printf_i+0x1c8>
 8007f40:	8018      	strh	r0, [r3, #0]
 8007f42:	2300      	movs	r3, #0
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	4616      	mov	r6, r2
 8007f48:	e7ba      	b.n	8007ec0 <_printf_i+0x150>
 8007f4a:	680b      	ldr	r3, [r1, #0]
 8007f4c:	1d1a      	adds	r2, r3, #4
 8007f4e:	600a      	str	r2, [r1, #0]
 8007f50:	681e      	ldr	r6, [r3, #0]
 8007f52:	6862      	ldr	r2, [r4, #4]
 8007f54:	2100      	movs	r1, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7f8 f99a 	bl	8000290 <memchr>
 8007f5c:	b108      	cbz	r0, 8007f62 <_printf_i+0x1f2>
 8007f5e:	1b80      	subs	r0, r0, r6
 8007f60:	6060      	str	r0, [r4, #4]
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	2300      	movs	r3, #0
 8007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6c:	e7a8      	b.n	8007ec0 <_printf_i+0x150>
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d0ab      	beq.n	8007ed4 <_printf_i+0x164>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	079b      	lsls	r3, r3, #30
 8007f80:	d413      	bmi.n	8007faa <_printf_i+0x23a>
 8007f82:	68e0      	ldr	r0, [r4, #12]
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	4298      	cmp	r0, r3
 8007f88:	bfb8      	it	lt
 8007f8a:	4618      	movlt	r0, r3
 8007f8c:	e7a4      	b.n	8007ed8 <_printf_i+0x168>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4632      	mov	r2, r6
 8007f92:	4649      	mov	r1, r9
 8007f94:	4640      	mov	r0, r8
 8007f96:	47d0      	blx	sl
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d09b      	beq.n	8007ed4 <_printf_i+0x164>
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	9903      	ldr	r1, [sp, #12]
 8007fa2:	1a5b      	subs	r3, r3, r1
 8007fa4:	42ab      	cmp	r3, r5
 8007fa6:	dcf2      	bgt.n	8007f8e <_printf_i+0x21e>
 8007fa8:	e7eb      	b.n	8007f82 <_printf_i+0x212>
 8007faa:	2500      	movs	r5, #0
 8007fac:	f104 0619 	add.w	r6, r4, #25
 8007fb0:	e7f5      	b.n	8007f9e <_printf_i+0x22e>
 8007fb2:	bf00      	nop
 8007fb4:	0800849d 	.word	0x0800849d
 8007fb8:	080084ae 	.word	0x080084ae

08007fbc <_sbrk_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_sbrk_r+0x1c>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	f7f9 f820 	bl	800100c <_sbrk>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_sbrk_r+0x1a>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_sbrk_r+0x1a>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	2001451c 	.word	0x2001451c

08007fdc <__sread>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	460c      	mov	r4, r1
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	f000 f894 	bl	8008110 <_read_r>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	bfab      	itete	ge
 8007fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff0:	181b      	addge	r3, r3, r0
 8007ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ff6:	bfac      	ite	ge
 8007ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ffa:	81a3      	strhlt	r3, [r4, #12]
 8007ffc:	bd10      	pop	{r4, pc}

08007ffe <__swrite>:
 8007ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	461f      	mov	r7, r3
 8008004:	898b      	ldrh	r3, [r1, #12]
 8008006:	05db      	lsls	r3, r3, #23
 8008008:	4605      	mov	r5, r0
 800800a:	460c      	mov	r4, r1
 800800c:	4616      	mov	r6, r2
 800800e:	d505      	bpl.n	800801c <__swrite+0x1e>
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	2302      	movs	r3, #2
 8008016:	2200      	movs	r2, #0
 8008018:	f000 f85c 	bl	80080d4 <_lseek_r>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	4632      	mov	r2, r6
 800802a:	463b      	mov	r3, r7
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	f7fe bff5 	b.w	8007020 <_write_r>

08008036 <__sseek>:
 8008036:	b510      	push	{r4, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 f849 	bl	80080d4 <_lseek_r>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	bf15      	itete	ne
 8008048:	6560      	strne	r0, [r4, #84]	; 0x54
 800804a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800804e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008052:	81a3      	strheq	r3, [r4, #12]
 8008054:	bf18      	it	ne
 8008056:	81a3      	strhne	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__sclose>:
 800805a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805e:	f000 b807 	b.w	8008070 <_close_r>

08008062 <abort>:
 8008062:	b508      	push	{r3, lr}
 8008064:	2006      	movs	r0, #6
 8008066:	f000 f88d 	bl	8008184 <raise>
 800806a:	2001      	movs	r0, #1
 800806c:	f7f8 ff72 	bl	8000f54 <_exit>

08008070 <_close_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d06      	ldr	r5, [pc, #24]	; (800808c <_close_r+0x1c>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	f7f8 ff91 	bl	8000fa2 <_close>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_close_r+0x1a>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_close_r+0x1a>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	2001451c 	.word	0x2001451c

08008090 <_fstat_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	; (80080b0 <_fstat_r+0x20>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	4611      	mov	r1, r2
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	f7f8 ff8c 	bl	8000fba <_fstat>
 80080a2:	1c43      	adds	r3, r0, #1
 80080a4:	d102      	bne.n	80080ac <_fstat_r+0x1c>
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	b103      	cbz	r3, 80080ac <_fstat_r+0x1c>
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	bd38      	pop	{r3, r4, r5, pc}
 80080ae:	bf00      	nop
 80080b0:	2001451c 	.word	0x2001451c

080080b4 <_isatty_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d06      	ldr	r5, [pc, #24]	; (80080d0 <_isatty_r+0x1c>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	602b      	str	r3, [r5, #0]
 80080c0:	f7f8 ff8b 	bl	8000fda <_isatty>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_isatty_r+0x1a>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_isatty_r+0x1a>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	2001451c 	.word	0x2001451c

080080d4 <_lseek_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	; (80080f4 <_lseek_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7f8 ff84 	bl	8000ff0 <_lseek>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_lseek_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_lseek_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	2001451c 	.word	0x2001451c

080080f8 <__malloc_lock>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__malloc_lock+0x8>)
 80080fa:	f7ff bb59 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 80080fe:	bf00      	nop
 8008100:	20014514 	.word	0x20014514

08008104 <__malloc_unlock>:
 8008104:	4801      	ldr	r0, [pc, #4]	; (800810c <__malloc_unlock+0x8>)
 8008106:	f7ff bb54 	b.w	80077b2 <__retarget_lock_release_recursive>
 800810a:	bf00      	nop
 800810c:	20014514 	.word	0x20014514

08008110 <_read_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d07      	ldr	r5, [pc, #28]	; (8008130 <_read_r+0x20>)
 8008114:	4604      	mov	r4, r0
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	2200      	movs	r2, #0
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f7f8 ff22 	bl	8000f68 <_read>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_read_r+0x1e>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_read_r+0x1e>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	2001451c 	.word	0x2001451c

08008134 <_raise_r>:
 8008134:	291f      	cmp	r1, #31
 8008136:	b538      	push	{r3, r4, r5, lr}
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	d904      	bls.n	8008148 <_raise_r+0x14>
 800813e:	2316      	movs	r3, #22
 8008140:	6003      	str	r3, [r0, #0]
 8008142:	f04f 30ff 	mov.w	r0, #4294967295
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800814a:	b112      	cbz	r2, 8008152 <_raise_r+0x1e>
 800814c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008150:	b94b      	cbnz	r3, 8008166 <_raise_r+0x32>
 8008152:	4620      	mov	r0, r4
 8008154:	f000 f830 	bl	80081b8 <_getpid_r>
 8008158:	462a      	mov	r2, r5
 800815a:	4601      	mov	r1, r0
 800815c:	4620      	mov	r0, r4
 800815e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008162:	f000 b817 	b.w	8008194 <_kill_r>
 8008166:	2b01      	cmp	r3, #1
 8008168:	d00a      	beq.n	8008180 <_raise_r+0x4c>
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	d103      	bne.n	8008176 <_raise_r+0x42>
 800816e:	2316      	movs	r3, #22
 8008170:	6003      	str	r3, [r0, #0]
 8008172:	2001      	movs	r0, #1
 8008174:	e7e7      	b.n	8008146 <_raise_r+0x12>
 8008176:	2400      	movs	r4, #0
 8008178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800817c:	4628      	mov	r0, r5
 800817e:	4798      	blx	r3
 8008180:	2000      	movs	r0, #0
 8008182:	e7e0      	b.n	8008146 <_raise_r+0x12>

08008184 <raise>:
 8008184:	4b02      	ldr	r3, [pc, #8]	; (8008190 <raise+0xc>)
 8008186:	4601      	mov	r1, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	f7ff bfd3 	b.w	8008134 <_raise_r>
 800818e:	bf00      	nop
 8008190:	20000014 	.word	0x20000014

08008194 <_kill_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <_kill_r+0x20>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	f7f8 fec7 	bl	8000f34 <_kill>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d102      	bne.n	80081b0 <_kill_r+0x1c>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	b103      	cbz	r3, 80081b0 <_kill_r+0x1c>
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
 80081b2:	bf00      	nop
 80081b4:	2001451c 	.word	0x2001451c

080081b8 <_getpid_r>:
 80081b8:	f7f8 beb4 	b.w	8000f24 <_getpid>

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
