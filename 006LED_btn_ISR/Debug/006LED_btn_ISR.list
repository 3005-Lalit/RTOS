
006LED_btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080078a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014498  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186c5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311a  00000000  00000000  00038709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0003b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  0003cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256a2  00000000  00000000  0003dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149d7  00000000  00000000  00063342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e64cd  00000000  00000000  00077d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015e1e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f58  00000000  00000000  0015e23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080076e4 	.word	0x080076e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080076e4 	.word	0x080076e4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20014404 	.word	0x20014404

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96e 	b.w	8000578 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468c      	mov	ip, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8083 	bne.w	80003ca <__udivmoddi4+0x116>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d947      	bls.n	800035a <__udivmoddi4+0xa6>
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	b142      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	f1c2 0020 	rsb	r0, r2, #32
 80002d4:	fa24 f000 	lsr.w	r0, r4, r0
 80002d8:	4091      	lsls	r1, r2
 80002da:	4097      	lsls	r7, r2
 80002dc:	ea40 0c01 	orr.w	ip, r0, r1
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fbbc f6f8 	udiv	r6, ip, r8
 80002ec:	fa1f fe87 	uxth.w	lr, r7
 80002f0:	fb08 c116 	mls	r1, r8, r6, ip
 80002f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f8:	fb06 f10e 	mul.w	r1, r6, lr
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x60>
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 8119 	bcs.w	800053c <__udivmoddi4+0x288>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 8116 	bls.w	800053c <__udivmoddi4+0x288>
 8000310:	3e02      	subs	r6, #2
 8000312:	443b      	add	r3, r7
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	45a6      	cmp	lr, r4
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x8c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	f080 8105 	bcs.w	8000540 <__udivmoddi4+0x28c>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f240 8102 	bls.w	8000540 <__udivmoddi4+0x28c>
 800033c:	3802      	subs	r0, #2
 800033e:	443c      	add	r4, r7
 8000340:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa0>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xaa>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	2a00      	cmp	r2, #0
 8000364:	d150      	bne.n	8000408 <__udivmoddi4+0x154>
 8000366:	1bcb      	subs	r3, r1, r7
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	2601      	movs	r6, #1
 8000372:	fbb3 fcfe 	udiv	ip, r3, lr
 8000376:	0c21      	lsrs	r1, r4, #16
 8000378:	fb0e 331c 	mls	r3, lr, ip, r3
 800037c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000380:	fb08 f30c 	mul.w	r3, r8, ip
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xe4>
 8000388:	1879      	adds	r1, r7, r1
 800038a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0xe2>
 8000390:	428b      	cmp	r3, r1
 8000392:	f200 80e9 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 8000396:	4684      	mov	ip, r0
 8000398:	1ac9      	subs	r1, r1, r3
 800039a:	b2a3      	uxth	r3, r4
 800039c:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a8:	fb08 f800 	mul.w	r8, r8, r0
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x10c>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x10a>
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	f200 80d9 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 80003be:	4618      	mov	r0, r3
 80003c0:	eba4 0408 	sub.w	r4, r4, r8
 80003c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c8:	e7bf      	b.n	800034a <__udivmoddi4+0x96>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x12e>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80b1 	beq.w	8000536 <__udivmoddi4+0x282>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x1cc>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0x140>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80b8 	bhi.w	8000564 <__udivmoddi4+0x2b0>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0103 	sbc.w	r1, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	468c      	mov	ip, r1
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0a8      	beq.n	8000354 <__udivmoddi4+0xa0>
 8000402:	e9c5 4c00 	strd	r4, ip, [r5]
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f603 	lsr.w	r6, r0, r3
 8000410:	4097      	lsls	r7, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800041a:	40d9      	lsrs	r1, r3
 800041c:	4330      	orrs	r0, r6
 800041e:	0c03      	lsrs	r3, r0, #16
 8000420:	fbb1 f6fe 	udiv	r6, r1, lr
 8000424:	fa1f f887 	uxth.w	r8, r7
 8000428:	fb0e 1116 	mls	r1, lr, r6, r1
 800042c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000430:	fb06 f108 	mul.w	r1, r6, r8
 8000434:	4299      	cmp	r1, r3
 8000436:	fa04 f402 	lsl.w	r4, r4, r2
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x19c>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000442:	f080 808d 	bcs.w	8000560 <__udivmoddi4+0x2ac>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 808a 	bls.w	8000560 <__udivmoddi4+0x2ac>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b281      	uxth	r1, r0
 8000454:	fbb3 f0fe 	udiv	r0, r3, lr
 8000458:	fb0e 3310 	mls	r3, lr, r0, r3
 800045c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000460:	fb00 f308 	mul.w	r3, r0, r8
 8000464:	428b      	cmp	r3, r1
 8000466:	d907      	bls.n	8000478 <__udivmoddi4+0x1c4>
 8000468:	1879      	adds	r1, r7, r1
 800046a:	f100 3cff 	add.w	ip, r0, #4294967295
 800046e:	d273      	bcs.n	8000558 <__udivmoddi4+0x2a4>
 8000470:	428b      	cmp	r3, r1
 8000472:	d971      	bls.n	8000558 <__udivmoddi4+0x2a4>
 8000474:	3802      	subs	r0, #2
 8000476:	4439      	add	r1, r7
 8000478:	1acb      	subs	r3, r1, r3
 800047a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047e:	e778      	b.n	8000372 <__udivmoddi4+0xbe>
 8000480:	f1c6 0c20 	rsb	ip, r6, #32
 8000484:	fa03 f406 	lsl.w	r4, r3, r6
 8000488:	fa22 f30c 	lsr.w	r3, r2, ip
 800048c:	431c      	orrs	r4, r3
 800048e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800049a:	fa21 f10c 	lsr.w	r1, r1, ip
 800049e:	431f      	orrs	r7, r3
 80004a0:	0c3b      	lsrs	r3, r7, #16
 80004a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a6:	fa1f f884 	uxth.w	r8, r4
 80004aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004b2:	fb09 fa08 	mul.w	sl, r9, r8
 80004b6:	458a      	cmp	sl, r1
 80004b8:	fa02 f206 	lsl.w	r2, r2, r6
 80004bc:	fa00 f306 	lsl.w	r3, r0, r6
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x220>
 80004c2:	1861      	adds	r1, r4, r1
 80004c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c8:	d248      	bcs.n	800055c <__udivmoddi4+0x2a8>
 80004ca:	458a      	cmp	sl, r1
 80004cc:	d946      	bls.n	800055c <__udivmoddi4+0x2a8>
 80004ce:	f1a9 0902 	sub.w	r9, r9, #2
 80004d2:	4421      	add	r1, r4
 80004d4:	eba1 010a 	sub.w	r1, r1, sl
 80004d8:	b2bf      	uxth	r7, r7
 80004da:	fbb1 f0fe 	udiv	r0, r1, lr
 80004de:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e6:	fb00 f808 	mul.w	r8, r0, r8
 80004ea:	45b8      	cmp	r8, r7
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x24a>
 80004ee:	19e7      	adds	r7, r4, r7
 80004f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f4:	d22e      	bcs.n	8000554 <__udivmoddi4+0x2a0>
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d92c      	bls.n	8000554 <__udivmoddi4+0x2a0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4427      	add	r7, r4
 80004fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000502:	eba7 0708 	sub.w	r7, r7, r8
 8000506:	fba0 8902 	umull	r8, r9, r0, r2
 800050a:	454f      	cmp	r7, r9
 800050c:	46c6      	mov	lr, r8
 800050e:	4649      	mov	r1, r9
 8000510:	d31a      	bcc.n	8000548 <__udivmoddi4+0x294>
 8000512:	d017      	beq.n	8000544 <__udivmoddi4+0x290>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x27a>
 8000516:	ebb3 020e 	subs.w	r2, r3, lr
 800051a:	eb67 0701 	sbc.w	r7, r7, r1
 800051e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000522:	40f2      	lsrs	r2, r6
 8000524:	ea4c 0202 	orr.w	r2, ip, r2
 8000528:	40f7      	lsrs	r7, r6
 800052a:	e9c5 2700 	strd	r2, r7, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e70b      	b.n	8000354 <__udivmoddi4+0xa0>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e9      	b.n	8000314 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fd      	b.n	8000340 <__udivmoddi4+0x8c>
 8000544:	4543      	cmp	r3, r8
 8000546:	d2e5      	bcs.n	8000514 <__udivmoddi4+0x260>
 8000548:	ebb8 0e02 	subs.w	lr, r8, r2
 800054c:	eb69 0104 	sbc.w	r1, r9, r4
 8000550:	3801      	subs	r0, #1
 8000552:	e7df      	b.n	8000514 <__udivmoddi4+0x260>
 8000554:	4608      	mov	r0, r1
 8000556:	e7d2      	b.n	80004fe <__udivmoddi4+0x24a>
 8000558:	4660      	mov	r0, ip
 800055a:	e78d      	b.n	8000478 <__udivmoddi4+0x1c4>
 800055c:	4681      	mov	r9, r0
 800055e:	e7b9      	b.n	80004d4 <__udivmoddi4+0x220>
 8000560:	4666      	mov	r6, ip
 8000562:	e775      	b.n	8000450 <__udivmoddi4+0x19c>
 8000564:	4630      	mov	r0, r6
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14a>
 8000568:	f1ac 0c02 	sub.w	ip, ip, #2
 800056c:	4439      	add	r1, r7
 800056e:	e713      	b.n	8000398 <__udivmoddi4+0xe4>
 8000570:	3802      	subs	r0, #2
 8000572:	443c      	add	r4, r7
 8000574:	e724      	b.n	80003c0 <__udivmoddi4+0x10c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fcdd 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f855 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8bf 	bl	800070c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= ( 1 << 0);
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <main+0x98>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a20      	ldr	r2, [pc, #128]	; (8000614 <main+0x98>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800059a:	f004 fe4b 	bl	8005234 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800059e:	f006 fa79 	bl	8006a94 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &ledg_task_handle);
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <main+0x9c>)
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2302      	movs	r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	22c8      	movs	r2, #200	; 0xc8
 80005ae:	491b      	ldr	r1, [pc, #108]	; (800061c <main+0xa0>)
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <main+0xa4>)
 80005b2:	f002 fd3b 	bl	800302c <xTaskCreate>
 80005b6:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d00a      	beq.n	80005d4 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d0:	bf00      	nop
 80005d2:	e7fe      	b.n	80005d2 <main+0x56>

  next_task_handle = ledg_task_handle;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0x9c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <main+0xa8>)
 80005da:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0xac>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	22c8      	movs	r2, #200	; 0xc8
 80005e8:	4910      	ldr	r1, [pc, #64]	; (800062c <main+0xb0>)
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0xb4>)
 80005ec:	f002 fd1e 	bl	800302c <xTaskCreate>
 80005f0:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00a      	beq.n	800060e <main+0x92>
        __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	607b      	str	r3, [r7, #4]
    }
 800060a:	bf00      	nop
 800060c:	e7fe      	b.n	800060c <main+0x90>

  //start the freeRTOS scheduler
    vTaskStartScheduler();
 800060e:	f002 ff1b 	bl	8003448 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x96>
 8000614:	e0001000 	.word	0xe0001000
 8000618:	2001436c 	.word	0x2001436c
 800061c:	080076fc 	.word	0x080076fc
 8000620:	08000c65 	.word	0x08000c65
 8000624:	20000030 	.word	0x20000030
 8000628:	20014374 	.word	0x20014374
 800062c:	0800770c 	.word	0x0800770c
 8000630:	08000cd5 	.word	0x08000cd5

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 f846 	bl	80076d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd4>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006ac:	2332      	movs	r3, #50	; 0x32
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff67 	bl	8001590 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 fb4c 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9c8 	bl	8001a80 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 fb35 	bl	8000d64 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	4bb2      	ldr	r3, [pc, #712]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4ab1      	ldr	r2, [pc, #708]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4baf      	ldr	r3, [pc, #700]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	4bab      	ldr	r3, [pc, #684]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4aaa      	ldr	r2, [pc, #680]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4ba8      	ldr	r3, [pc, #672]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4ba4      	ldr	r3, [pc, #656]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4aa3      	ldr	r2, [pc, #652]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4ba1      	ldr	r3, [pc, #644]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b9d      	ldr	r3, [pc, #628]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a9c      	ldr	r2, [pc, #624]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b9a      	ldr	r3, [pc, #616]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b96      	ldr	r3, [pc, #600]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a95      	ldr	r2, [pc, #596]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b93      	ldr	r3, [pc, #588]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a8e      	ldr	r2, [pc, #568]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b88      	ldr	r3, [pc, #544]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a87      	ldr	r2, [pc, #540]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b85      	ldr	r3, [pc, #532]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a80      	ldr	r2, [pc, #512]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b7e      	ldr	r3, [pc, #504]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2116      	movs	r1, #22
 8000806:	487b      	ldr	r0, [pc, #492]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 8000808:	f000 fe6a 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000812:	f000 fe65 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <MX_GPIO_Init+0x2f0>)
 800081e:	f000 fe5f 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000828:	4875      	ldr	r0, [pc, #468]	; (8000a00 <MX_GPIO_Init+0x2f4>)
 800082a:	f000 fe59 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800082e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000840:	230c      	movs	r3, #12
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	486e      	ldr	r0, [pc, #440]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 800084c:	f000 fc9c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000850:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000862:	2305      	movs	r3, #5
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	4865      	ldr	r0, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 800086e:	f000 fc8b 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000884:	230e      	movs	r3, #14
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	485d      	ldr	r0, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 8000890:	f000 fc7a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a4:	230c      	movs	r3, #12
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4851      	ldr	r0, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 80008b0:	f000 fc6a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008b4:	2316      	movs	r3, #22
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	484a      	ldr	r0, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 80008cc:	f000 fc5c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4844      	ldr	r0, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 80008e6:	f000 fc4f 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008ea:	f248 0306 	movw	r3, #32774	; 0x8006
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	483d      	ldr	r0, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000902:	f000 fc41 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000906:	f641 0358 	movw	r3, #6232	; 0x1858
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000918:	230e      	movs	r3, #14
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000924:	f000 fc30 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000940:	f000 fc22 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000948:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 800095a:	f000 fc15 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800095e:	2303      	movs	r3, #3
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800096e:	2309      	movs	r3, #9
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4823      	ldr	r0, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x2fc>)
 800097a:	f000 fc05 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097e:	2304      	movs	r3, #4
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x2fc>)
 8000992:	f000 fbf9 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000996:	f248 1333 	movw	r3, #33075	; 0x8133
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a8:	230c      	movs	r3, #12
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x2f4>)
 80009b4:	f000 fbe8 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ca:	230c      	movs	r3, #12
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_GPIO_Init+0x300>)
 80009d6:	f000 fbd7 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
 80009ec:	e010      	b.n	8000a10 <MX_GPIO_Init+0x304>
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40021400 	.word	0x40021400
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a10:	230e      	movs	r3, #14
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4877      	ldr	r0, [pc, #476]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a1c:	f000 fbb4 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a20:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a32:	230c      	movs	r3, #12
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	486e      	ldr	r0, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a3e:	f000 fba3 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4868      	ldr	r0, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a58:	f000 fb96 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a5c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4860      	ldr	r0, [pc, #384]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000a7a:	f000 fb85 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	485a      	ldr	r0, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000a94:	f000 fb78 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4852      	ldr	r0, [pc, #328]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000ab2:	f000 fb69 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ab6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac8:	230e      	movs	r3, #14
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	484b      	ldr	r0, [pc, #300]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000ad4:	f000 fb58 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ad8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aea:	230e      	movs	r3, #14
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4843      	ldr	r0, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x4f8>)
 8000af6:	f000 fb47 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	483b      	ldr	r0, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x4f8>)
 8000b18:	f000 fb36 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4833      	ldr	r0, [pc, #204]	; (8000c08 <MX_GPIO_Init+0x4fc>)
 8000b3a:	f000 fb25 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b50:	2307      	movs	r3, #7
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482b      	ldr	r0, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x4fc>)
 8000b5c:	f000 fb14 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b60:	2348      	movs	r3, #72	; 0x48
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b70:	230e      	movs	r3, #14
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4820      	ldr	r0, [pc, #128]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000b7c:	f000 fb04 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b92:	2309      	movs	r3, #9
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000b9e:	f000 faf3 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ba2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000bbc:	f000 fae4 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bc0:	2360      	movs	r3, #96	; 0x60
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000bdc:	f000 fad4 	bl	8001188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2106      	movs	r1, #6
 8000be4:	2006      	movs	r0, #6
 8000be6:	f000 faa5 	bl	8001134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bea:	2006      	movs	r0, #6
 8000bec:	f000 fabe 	bl	800116c <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020000 	.word	0x40020000

08000c0c <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]


	traceISR_ENTER();
 8000c16:	f006 fa05 	bl	8007024 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <button_interrupt_handler+0x50>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f003 f97c 	bl	8003f28 <xTaskGenericNotifyFromISR>

	/* once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00a      	beq.n	8000c4c <button_interrupt_handler+0x40>
 8000c36:	f006 fa53 	bl	80070e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <button_interrupt_handler+0x54>)
 8000c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	e001      	b.n	8000c50 <button_interrupt_handler+0x44>
 8000c4c:	f006 fa2c 	bl	80070a8 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000c50:	f006 fa2a 	bl	80070a8 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000030 	.word	0x20000030
 8000c60:	e000ed04 	.word	0xe000ed04

08000c64 <led_green_handler>:


static void led_green_handler(void* parameters)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000c6c:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <led_green_handler+0x5c>)
 8000c6e:	f006 fc81 	bl	8007574 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, LED_GREEN_PIN);
 8000c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <led_green_handler+0x60>)
 8000c78:	f000 fc4b 	bl	8001512 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f003 f8c5 	bl	8003e18 <xTaskGenericNotifyWait>
 8000c8e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d1ea      	bne.n	8000c6c <led_green_handler+0x8>
			portENTER_CRITICAL();
 8000c96:	f003 ff95 	bl	8004bc4 <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <led_green_handler+0x64>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <led_green_handler+0x68>)
 8000ca0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOG, LED_GREEN_PIN,GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <led_green_handler+0x60>)
 8000caa:	f000 fc19 	bl	80014e0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <led_green_handler+0x6c>)
 8000cb0:	f006 fc60 	bl	8007574 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000cb4:	f003 ffb6 	bl	8004c24 <vPortExitCritical>
			vTaskDelete(NULL);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f002 fb1b 	bl	80032f4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000cbe:	e7d5      	b.n	8000c6c <led_green_handler+0x8>
 8000cc0:	0800771c 	.word	0x0800771c
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	20014374 	.word	0x20014374
 8000ccc:	20000030 	.word	0x20000030
 8000cd0:	08007730 	.word	0x08007730

08000cd4 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <led_red_handler+0x5c>)
 8000cde:	f006 fc49 	bl	8007574 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, LED_RED_PIN);
 8000ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce6:	4813      	ldr	r0, [pc, #76]	; (8000d34 <led_red_handler+0x60>)
 8000ce8:	f000 fc13 	bl	8001512 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000cec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f003 f88d 	bl	8003e18 <xTaskGenericNotifyWait>
 8000cfe:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d1ea      	bne.n	8000cdc <led_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000d06:	f003 ff5d 	bl	8004bc4 <vPortEnterCritical>
			next_task_handle = NULL;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <led_red_handler+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOG, LED_RED_PIN,GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <led_red_handler+0x60>)
 8000d18:	f000 fbe2 	bl	80014e0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <led_red_handler+0x68>)
 8000d1e:	f006 fc29 	bl	8007574 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000d22:	f003 ff7f 	bl	8004c24 <vPortExitCritical>
			vTaskDelete(NULL);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f002 fae4 	bl	80032f4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000d2c:	e7d6      	b.n	8000cdc <led_red_handler+0x8>
 8000d2e:	bf00      	nop
 8000d30:	08007748 	.word	0x08007748
 8000d34:	40021800 	.word	0x40021800
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	0800775c 	.word	0x0800775c

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d52:	f000 f917 	bl	8000f84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40001000 	.word	0x40001000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000dae:	f003 fe8b 	bl	8004ac8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	2036      	movs	r0, #54	; 0x36
 8000dd6:	f000 f9ad 	bl	8001134 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dda:	2036      	movs	r0, #54	; 0x36
 8000ddc:	f000 f9c6 	bl	800116c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_InitTick+0xa4>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <HAL_InitTick+0xa4>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_InitTick+0xa4>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dfc:	f107 0210 	add.w	r2, r7, #16
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 f822 	bl	8001e50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e0c:	f001 f80c 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8000e10:	4603      	mov	r3, r0
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_InitTick+0xa8>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	0c9b      	lsrs	r3, r3, #18
 8000e20:	3b01      	subs	r3, #1
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_InitTick+0xac>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <HAL_InitTick+0xb0>)
 8000e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_InitTick+0xac>)
 8000e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_InitTick+0xac>)
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_InitTick+0xac>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_InitTick+0xac>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <HAL_InitTick+0xac>)
 8000e46:	f001 f835 	bl	8001eb4 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d104      	bne.n	8000e5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_InitTick+0xac>)
 8000e52:	f001 f889 	bl	8001f68 <HAL_TIM_Base_Start_IT>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	20014378 	.word	0x20014378
 8000e70:	40001000 	.word	0x40001000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000ea4:	f7ff feb2 	bl	8000c0c <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 fb4d 	bl	8001548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM6_DAC_IRQHandler+0x10>)
 8000eba:	f001 f8c5 	bl	8002048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20014378 	.word	0x20014378

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f08:	4c0b      	ldr	r4, [pc, #44]	; (8000f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f16:	f7ff ffd7 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f006 fb9b 	bl	8007654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fb2d 	bl	800057c <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f30:	080078a0 	.word	0x080078a0
  ldr r2, =_sbss
 8000f34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f38:	200144ac 	.word	0x200144ac

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f8d8 	bl	800111e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f7ff ff26 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fefc 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	200143c0 	.word	0x200143c0

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200143c0 	.word	0x200143c0

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff4c 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001146:	f7ff ff61 	bl	800100c <__NVIC_GetPriorityGrouping>
 800114a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f7ff ffb1 	bl	80010b8 <NVIC_EncodePriority>
 8001156:	4602      	mov	r2, r0
 8001158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff80 	bl	8001064 <__NVIC_SetPriority>
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff54 	bl	8001028 <__NVIC_EnableIRQ>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	e177      	b.n	8001494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8166 	bne.w	800148e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d005      	beq.n	80011da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d130      	bne.n	800123c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 0201 	and.w	r2, r3, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d017      	beq.n	8001278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d123      	bne.n	80012cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0203 	and.w	r2, r3, #3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80c0 	beq.w	800148e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b66      	ldr	r3, [pc, #408]	; (80014ac <HAL_GPIO_Init+0x324>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a65      	ldr	r2, [pc, #404]	; (80014ac <HAL_GPIO_Init+0x324>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <HAL_GPIO_Init+0x324>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132a:	4a61      	ldr	r2, [pc, #388]	; (80014b0 <HAL_GPIO_Init+0x328>)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d037      	beq.n	80013c6 <HAL_GPIO_Init+0x23e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a57      	ldr	r2, [pc, #348]	; (80014b8 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d031      	beq.n	80013c2 <HAL_GPIO_Init+0x23a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a56      	ldr	r2, [pc, #344]	; (80014bc <HAL_GPIO_Init+0x334>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d02b      	beq.n	80013be <HAL_GPIO_Init+0x236>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <HAL_GPIO_Init+0x338>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d025      	beq.n	80013ba <HAL_GPIO_Init+0x232>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a54      	ldr	r2, [pc, #336]	; (80014c4 <HAL_GPIO_Init+0x33c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x22e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a53      	ldr	r2, [pc, #332]	; (80014c8 <HAL_GPIO_Init+0x340>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x22a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a52      	ldr	r2, [pc, #328]	; (80014cc <HAL_GPIO_Init+0x344>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x226>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a51      	ldr	r2, [pc, #324]	; (80014d0 <HAL_GPIO_Init+0x348>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x222>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a50      	ldr	r2, [pc, #320]	; (80014d4 <HAL_GPIO_Init+0x34c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x21e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <HAL_GPIO_Init+0x350>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x21a>
 800139e:	2309      	movs	r3, #9
 80013a0:	e012      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013a2:	230a      	movs	r3, #10
 80013a4:	e010      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00e      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e00c      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013ae:	2306      	movs	r3, #6
 80013b0:	e00a      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x240>
 80013c6:	2300      	movs	r3, #0
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	4935      	ldr	r1, [pc, #212]	; (80014b0 <HAL_GPIO_Init+0x328>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <HAL_GPIO_Init+0x354>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140a:	4a34      	ldr	r2, [pc, #208]	; (80014dc <HAL_GPIO_Init+0x354>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_GPIO_Init+0x354>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001434:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_GPIO_Init+0x354>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_GPIO_Init+0x354>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <HAL_GPIO_Init+0x354>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_GPIO_Init+0x354>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_GPIO_Init+0x354>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	f67f ae84 	bls.w	80011a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40021400 	.word	0x40021400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40022400 	.word	0x40022400
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43d9      	mvns	r1, r3
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	400b      	ands	r3, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f806 	bl	8001578 <HAL_GPIO_EXTI_Callback>
  }
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e264      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d075      	beq.n	800169a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ae:	4ba3      	ldr	r3, [pc, #652]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d00c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d112      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4b9d      	ldr	r3, [pc, #628]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b99      	ldr	r3, [pc, #612]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05b      	beq.n	8001698 <HAL_RCC_OscConfig+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d157      	bne.n	8001698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e23f      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x74>
 80015f6:	4b91      	ldr	r3, [pc, #580]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a90      	ldr	r2, [pc, #576]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a8a      	ldr	r2, [pc, #552]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a87      	ldr	r2, [pc, #540]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001628:	4b84      	ldr	r3, [pc, #528]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a83      	ldr	r2, [pc, #524]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b81      	ldr	r3, [pc, #516]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a80      	ldr	r2, [pc, #512]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fcb0 	bl	8000fac <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fcac 	bl	8000fac <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e204      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b76      	ldr	r3, [pc, #472]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xc0>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fc9c 	bl	8000fac <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fc98 	bl	8000fac <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1f0      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	4b6c      	ldr	r3, [pc, #432]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0xe8>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d063      	beq.n	800176e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b62      	ldr	r3, [pc, #392]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d11c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b5f      	ldr	r3, [pc, #380]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x152>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e1c4      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4952      	ldr	r1, [pc, #328]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	e03a      	b.n	800176e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <HAL_RCC_OscConfig+0x2b0>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fc51 	bl	8000fac <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fc4d 	bl	8000fac <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1a5      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	4b46      	ldr	r3, [pc, #280]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4940      	ldr	r1, [pc, #256]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_OscConfig+0x2b0>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fc30 	bl	8000fac <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff fc2c 	bl	8000fac <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e184      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d030      	beq.n	80017dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d016      	beq.n	80017b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_RCC_OscConfig+0x2b4>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fc10 	bl	8000fac <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fc0c 	bl	8000fac <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e164      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x200>
 80017ae:	e015      	b.n	80017dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x2b4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbf9 	bl	8000fac <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fbf5 	bl	8000fac <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e14d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a0 	beq.w	800192a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_OscConfig+0x2b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d121      	bne.n	800186a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_RCC_OscConfig+0x2b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_RCC_OscConfig+0x2b8>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff fbbb 	bl	8000fac <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e011      	b.n	800185e <HAL_RCC_OscConfig+0x2ce>
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	42470000 	.word	0x42470000
 8001844:	42470e80 	.word	0x42470e80
 8001848:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff fbae 	bl	8000fac <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e106      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <HAL_RCC_OscConfig+0x4e4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x2f0>
 8001872:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	e01c      	b.n	80018ba <HAL_RCC_OscConfig+0x32a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x312>
 8001888:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a7a      	ldr	r2, [pc, #488]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a77      	ldr	r2, [pc, #476]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	e00b      	b.n	80018ba <HAL_RCC_OscConfig+0x32a>
 80018a2:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a74      	ldr	r2, [pc, #464]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a71      	ldr	r2, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d015      	beq.n	80018ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fb73 	bl	8000fac <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fb6f 	bl	8000fac <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0c5      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ee      	beq.n	80018ca <HAL_RCC_OscConfig+0x33a>
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fb5d 	bl	8000fac <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff fb59 	bl	8000fac <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0af      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ee      	bne.n	80018f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 809b 	beq.w	8001a6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d05c      	beq.n	80019fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d141      	bne.n	80019cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x4ec>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff fb2d 	bl	8000fac <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff fb29 	bl	8000fac <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e081      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	019b      	lsls	r3, r3, #6
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	061b      	lsls	r3, r3, #24
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_RCC_OscConfig+0x4ec>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb02 	bl	8000fac <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fafe 	bl	8000fac <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e056      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x41c>
 80019ca:	e04e      	b.n	8001a6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x4ec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff faeb 	bl	8000fac <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff fae7 	bl	8000fac <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e03f      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x44a>
 80019f8:	e037      	b.n	8001a6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e032      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d028      	beq.n	8001a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d121      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d11a      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d111      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40007000 	.word	0x40007000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470060 	.word	0x42470060

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0cc      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d90c      	bls.n	8001abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d044      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d119      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e067      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4934      	ldr	r1, [pc, #208]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fa1c 	bl	8000fac <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff fa18 	bl	8000fac <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d20c      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8ca 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08007854 	.word	0x08007854
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c64:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d00d      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x40>
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f200 80bd 	bhi.w	8001df0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7e:	e0b7      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c82:	60bb      	str	r3, [r7, #8]
       break;
 8001c84:	e0b7      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c88:	60bb      	str	r3, [r7, #8]
      break;
 8001c8a:	e0b4      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d04d      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	ea02 0800 	and.w	r8, r2, r0
 8001cba:	ea03 0901 	and.w	r9, r3, r1
 8001cbe:	4640      	mov	r0, r8
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	014b      	lsls	r3, r1, #5
 8001ccc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd0:	0142      	lsls	r2, r0, #5
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	ebb0 0008 	subs.w	r0, r0, r8
 8001cda:	eb61 0109 	sbc.w	r1, r1, r9
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	018b      	lsls	r3, r1, #6
 8001ce8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cec:	0182      	lsls	r2, r0, #6
 8001cee:	1a12      	subs	r2, r2, r0
 8001cf0:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	f04f 0100 	mov.w	r1, #0
 8001cfc:	00d9      	lsls	r1, r3, #3
 8001cfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d02:	00d0      	lsls	r0, r2, #3
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	eb12 0208 	adds.w	r2, r2, r8
 8001d0c:	eb43 0309 	adc.w	r3, r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0259      	lsls	r1, r3, #9
 8001d1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d1e:	0250      	lsls	r0, r2, #9
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f7fe faa8 	bl	8000284 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e04a      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	461a      	mov	r2, r3
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	ea02 0400 	and.w	r4, r2, r0
 8001d56:	ea03 0501 	and.w	r5, r3, r1
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	014b      	lsls	r3, r1, #5
 8001d68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d6c:	0142      	lsls	r2, r0, #5
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	1b00      	subs	r0, r0, r4
 8001d74:	eb61 0105 	sbc.w	r1, r1, r5
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	018b      	lsls	r3, r1, #6
 8001d82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d86:	0182      	lsls	r2, r0, #6
 8001d88:	1a12      	subs	r2, r2, r0
 8001d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	00d9      	lsls	r1, r3, #3
 8001d98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d9c:	00d0      	lsls	r0, r2, #3
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	1912      	adds	r2, r2, r4
 8001da4:	eb45 0303 	adc.w	r3, r5, r3
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	0299      	lsls	r1, r3, #10
 8001db2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001db6:	0290      	lsls	r0, r2, #10
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	f7fe fa5c 	bl	8000284 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	60bb      	str	r3, [r7, #8]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001df2:	60bb      	str	r3, [r7, #8]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	68bb      	ldr	r3, [r7, #8]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4903      	ldr	r1, [pc, #12]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	08007864 	.word	0x08007864

08001e50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_GetClockConfig+0x5c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_RCC_GetClockConfig+0x5c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_GetClockConfig+0x5c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCC_GetClockConfig+0x60>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 020f 	and.w	r2, r3, #15
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e041      	b.n	8001f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f839 	bl	8001f52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f000 f9d8 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d001      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e04e      	b.n	800201e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_TIM_Base_Start_IT+0xc4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d022      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d01d      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_TIM_Base_Start_IT+0xd4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d010      	beq.n	800201c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200a:	e007      	b.n	800201c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000
 8002030:	40000400 	.word	0x40000400
 8002034:	40000800 	.word	0x40000800
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40010400 	.word	0x40010400
 8002040:	40014000 	.word	0x40014000
 8002044:	40001800 	.word	0x40001800

08002048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8ee 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8e0 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8f1 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0204 	mvn.w	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8c4 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8b6 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8c7 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0208 	mvn.w	r2, #8
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f89a 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f88c 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f89d 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0210 	mvn.w	r2, #16
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f870 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f862 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f873 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fdba 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f902 	bl	80023fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f838 	bl	8002294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8cc 	bl	80023e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a40      	ldr	r2, [pc, #256]	; (80023bc <TIM_Base_SetConfig+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c6:	d00f      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a3d      	ldr	r2, [pc, #244]	; (80023c0 <TIM_Base_SetConfig+0x118>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00b      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a3c      	ldr	r2, [pc, #240]	; (80023c4 <TIM_Base_SetConfig+0x11c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a3b      	ldr	r2, [pc, #236]	; (80023c8 <TIM_Base_SetConfig+0x120>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a3a      	ldr	r2, [pc, #232]	; (80023cc <TIM_Base_SetConfig+0x124>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <TIM_Base_SetConfig+0x114>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d027      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <TIM_Base_SetConfig+0x118>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d023      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <TIM_Base_SetConfig+0x11c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <TIM_Base_SetConfig+0x120>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a29      	ldr	r2, [pc, #164]	; (80023cc <TIM_Base_SetConfig+0x124>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d017      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <TIM_Base_SetConfig+0x128>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <TIM_Base_SetConfig+0x12c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00f      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <TIM_Base_SetConfig+0x130>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a25      	ldr	r2, [pc, #148]	; (80023dc <TIM_Base_SetConfig+0x134>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a24      	ldr	r2, [pc, #144]	; (80023e0 <TIM_Base_SetConfig+0x138>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <TIM_Base_SetConfig+0x13c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <TIM_Base_SetConfig+0x114>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_Base_SetConfig+0xf8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <TIM_Base_SetConfig+0x124>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d103      	bne.n	80023a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	615a      	str	r2, [r3, #20]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40000c00 	.word	0x40000c00
 80023cc:	40010400 	.word	0x40010400
 80023d0:	40014000 	.word	0x40014000
 80023d4:	40014400 	.word	0x40014400
 80023d8:	40014800 	.word	0x40014800
 80023dc:	40001800 	.word	0x40001800
 80023e0:	40001c00 	.word	0x40001c00
 80023e4:	40002000 	.word	0x40002000

080023e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f103 0208 	add.w	r2, r3, #8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f103 0208 	add.w	r2, r3, #8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0208 	add.w	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	601a      	str	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d103      	bne.n	80024d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e00c      	b.n	80024ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3308      	adds	r3, #8
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e002      	b.n	80024e0 <vListInsert+0x2e>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d2f6      	bcs.n	80024da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6852      	ldr	r2, [r2, #4]
 8002544:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d103      	bne.n	8002558 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <xQueueGenericReset+0x2a>
        __asm volatile
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	60bb      	str	r3, [r7, #8]
    }
 800259e:	bf00      	nop
 80025a0:	e7fe      	b.n	80025a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80025a2:	f002 fb0f 	bl	8004bc4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	441a      	add	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	3b01      	subs	r3, #1
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	441a      	add	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	22ff      	movs	r2, #255	; 0xff
 80025e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	22ff      	movs	r2, #255	; 0xff
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d114      	bne.n	8002622 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01a      	beq.n	8002636 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3310      	adds	r3, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f001 f9c9 	bl	800399c <xTaskRemoveFromEventList>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d012      	beq.n	8002636 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <xQueueGenericReset+0xcc>)
 8002612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	e009      	b.n	8002636 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3310      	adds	r3, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fef2 	bl	8002410 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3324      	adds	r3, #36	; 0x24
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff feed 	bl	8002410 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002636:	f002 faf5 	bl	8004c24 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xQueueGenericCreate+0x2a>
        __asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	61bb      	str	r3, [r7, #24]
    }
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <xQueueGenericCreate+0x48>
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d101      	bne.n	8002694 <xQueueGenericCreate+0x4c>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <xQueueGenericCreate+0x4e>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <xQueueGenericCreate+0x68>
        __asm volatile
 800269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	617b      	str	r3, [r7, #20]
    }
 80026ac:	bf00      	nop
 80026ae:	e7fe      	b.n	80026ae <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026b6:	d90a      	bls.n	80026ce <xQueueGenericCreate+0x86>
        __asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	613b      	str	r3, [r7, #16]
    }
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	3350      	adds	r3, #80	; 0x50
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 fba2 	bl	8004e1c <pvPortMalloc>
 80026d8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3350      	adds	r3, #80	; 0x50
 80026e8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ea:	79fa      	ldrb	r2, [r7, #7]
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f805 	bl	8002706 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
    }
 80026fe:	4618      	mov	r0, r3
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e002      	b.n	8002728 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002734:	2101      	movs	r1, #1
 8002736:	69b8      	ldr	r0, [r7, #24]
 8002738:	f7ff ff1e 	bl	8002578 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	2073      	movs	r0, #115	; 0x73
 800274c:	f003 ffec 	bl	8006728 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b090      	sub	sp, #64	; 0x40
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <xQueueGenericSend+0x32>
        __asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <xQueueGenericSend+0x40>
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <xQueueGenericSend+0x44>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <xQueueGenericSend+0x46>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <xQueueGenericSend+0x60>
        __asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d103      	bne.n	80027c6 <xQueueGenericSend+0x6e>
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <xQueueGenericSend+0x72>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueGenericSend+0x74>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	623b      	str	r3, [r7, #32]
    }
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e6:	f001 fa79 	bl	8003cdc <xTaskGetSchedulerState>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <xQueueGenericSend+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <xQueueGenericSend+0xa2>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xQueueGenericSend+0xa4>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericSend+0xbe>
        __asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	61fb      	str	r3, [r7, #28]
    }
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002816:	f002 f9d5 	bl	8004bc4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <xQueueGenericSend+0xd4>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d136      	bne.n	800289a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	4618      	mov	r0, r3
 8002830:	f004 fdb4 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	460b      	mov	r3, r1
 800283e:	4601      	mov	r1, r0
 8002840:	205a      	movs	r0, #90	; 0x5a
 8002842:	f003 ffe7 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284c:	f000 fa78 	bl	8002d40 <prvCopyDataToQueue>
 8002850:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	3324      	adds	r3, #36	; 0x24
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f89c 	bl	800399c <xTaskRemoveFromEventList>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <xQueueGenericSend+0x248>)
 800286c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	e00a      	b.n	8002892 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <xQueueGenericSend+0x248>)
 8002884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002892:	f002 f9c7 	bl	8004c24 <vPortExitCritical>
                return pdPASS;
 8002896:	2301      	movs	r3, #1
 8002898:	e07d      	b.n	8002996 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d110      	bne.n	80028c2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028a0:	f002 f9c0 	bl	8004c24 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fd78 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	4601      	mov	r1, r0
 80028b8:	205a      	movs	r0, #90	; 0x5a
 80028ba:	f003 ffab 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	e069      	b.n	8002996 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 f8cb 	bl	8003a68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028d6:	f002 f9a5 	bl	8004c24 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028da:	f000 fe17 	bl	800350c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028de:	f002 f971 	bl	8004bc4 <vPortEnterCritical>
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d103      	bne.n	80028f8 <xQueueGenericSend+0x1a0>
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d103      	bne.n	800290e <xQueueGenericSend+0x1b6>
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800290e:	f002 f989 	bl	8004c24 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002912:	1d3a      	adds	r2, r7, #4
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f001 f8ba 	bl	8003a94 <xTaskCheckForTimeOut>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d124      	bne.n	8002970 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002928:	f000 fb02 	bl	8002f30 <prvIsQueueFull>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	3310      	adds	r3, #16
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ffdc 	bl	80038f8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002942:	f000 fa8d 	bl	8002e60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002946:	f000 fdef 	bl	8003528 <xTaskResumeAll>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af62 	bne.w	8002816 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <xQueueGenericSend+0x248>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	e758      	b.n	8002816 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002966:	f000 fa7b 	bl	8002e60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800296a:	f000 fddd 	bl	8003528 <xTaskResumeAll>
 800296e:	e752      	b.n	8002816 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002972:	f000 fa75 	bl	8002e60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002976:	f000 fdd7 	bl	8003528 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fd0d 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	460b      	mov	r3, r1
 800298c:	4601      	mov	r1, r0
 800298e:	205a      	movs	r0, #90	; 0x5a
 8002990:	f003 ff40 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002994:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002996:	4618      	mov	r0, r3
 8002998:	3738      	adds	r7, #56	; 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b090      	sub	sp, #64	; 0x40
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <xQueueGenericSendFromISR+0x3c>
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <xQueueGenericSendFromISR+0x40>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <xQueueGenericSendFromISR+0x42>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d103      	bne.n	8002a0e <xQueueGenericSendFromISR+0x6a>
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <xQueueGenericSendFromISR+0x6e>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <xQueueGenericSendFromISR+0x70>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	623b      	str	r3, [r7, #32]
    }
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a2e:	f002 f9b5 	bl	8004d9c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a32:	f3ef 8211 	mrs	r2, BASEPRI
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	61fa      	str	r2, [r7, #28]
 8002a48:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <xQueueGenericSendFromISR+0xbc>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d148      	bne.n	8002af2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 fc92 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002a78:	4601      	mov	r1, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2060      	movs	r0, #96	; 0x60
 8002a80:	f003 fdf8 	bl	8006674 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a8a:	f000 f959 	bl	8002d40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d112      	bne.n	8002abe <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d025      	beq.n	8002aec <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ff79 	bl	800399c <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01d      	beq.n	8002aec <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e016      	b.n	8002aec <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002abe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac4:	d10a      	bne.n	8002adc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	617b      	str	r3, [r7, #20]
    }
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002aec:	2301      	movs	r3, #1
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002af0:	e00b      	b.n	8002b0a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fc51 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002afa:	4601      	mov	r1, r0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	461a      	mov	r2, r3
 8002b00:	2060      	movs	r0, #96	; 0x60
 8002b02:	f003 fdb7 	bl	8006674 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b14:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3740      	adds	r7, #64	; 0x40
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b08f      	sub	sp, #60	; 0x3c
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <xQueueReceive+0x30>
        __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	623b      	str	r3, [r7, #32]
    }
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <xQueueReceive+0x3e>
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <xQueueReceive+0x42>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <xQueueReceive+0x44>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xQueueReceive+0x5e>
        __asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	61fb      	str	r3, [r7, #28]
    }
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b7e:	f001 f8ad 	bl	8003cdc <xTaskGetSchedulerState>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <xQueueReceive+0x6e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <xQueueReceive+0x72>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <xQueueReceive+0x74>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueReceive+0x8e>
        __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61bb      	str	r3, [r7, #24]
    }
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bae:	f002 f809 	bl	8004bc4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02f      	beq.n	8002c1e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc2:	f000 f927 	bl	8002e14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fbe7 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002bce:	4604      	mov	r4, r0
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f004 fbe3 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	9100      	str	r1, [sp, #0]
 8002bde:	4621      	mov	r1, r4
 8002be0:	205c      	movs	r0, #92	; 0x5c
 8002be2:	f003 fe17 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00f      	beq.n	8002c16 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	3310      	adds	r3, #16
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fece 	bl	800399c <xTaskRemoveFromEventList>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c06:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <xQueueReceive+0x21c>)
 8002c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c16:	f002 f805 	bl	8004c24 <vPortExitCritical>
                return pdPASS;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e08a      	b.n	8002d34 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c24:	f001 fffe 	bl	8004c24 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 fbb6 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002c30:	4604      	mov	r4, r0
 8002c32:	2000      	movs	r0, #0
 8002c34:	f004 fbb2 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	9100      	str	r1, [sp, #0]
 8002c40:	4621      	mov	r1, r4
 8002c42:	205c      	movs	r0, #92	; 0x5c
 8002c44:	f003 fde6 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e073      	b.n	8002d34 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 ff06 	bl	8003a68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c60:	f001 ffe0 	bl	8004c24 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c64:	f000 fc52 	bl	800350c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c68:	f001 ffac 	bl	8004bc4 <vPortEnterCritical>
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d103      	bne.n	8002c82 <xQueueReceive+0x162>
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d103      	bne.n	8002c98 <xQueueReceive+0x178>
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	f001 ffc4 	bl	8004c24 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c9c:	1d3a      	adds	r2, r7, #4
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fef5 	bl	8003a94 <xTaskCheckForTimeOut>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d124      	bne.n	8002cfa <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb2:	f000 f927 	bl	8002f04 <prvIsQueueEmpty>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d018      	beq.n	8002cee <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	3324      	adds	r3, #36	; 0x24
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fe17 	bl	80038f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ccc:	f000 f8c8 	bl	8002e60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cd0:	f000 fc2a 	bl	8003528 <xTaskResumeAll>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f af69 	bne.w	8002bae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <xQueueReceive+0x21c>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	e75f      	b.n	8002bae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf0:	f000 f8b6 	bl	8002e60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cf4:	f000 fc18 	bl	8003528 <xTaskResumeAll>
 8002cf8:	e759      	b.n	8002bae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfc:	f000 f8b0 	bl	8002e60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d00:	f000 fc12 	bl	8003528 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f000 f8fd 	bl	8002f04 <prvIsQueueEmpty>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f43f af4e 	beq.w	8002bae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fb41 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f004 fb3d 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2101      	movs	r1, #1
 8002d28:	9100      	str	r1, [sp, #0]
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	205c      	movs	r0, #92	; 0x5c
 8002d2e:	f003 fd71 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3734      	adds	r7, #52	; 0x34
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	e000ed04 	.word	0xe000ed04

08002d40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d14d      	bne.n	8002e02 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 ffd4 	bl	8003d18 <xTaskPriorityDisinherit>
 8002d70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e043      	b.n	8002e02 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d119      	bne.n	8002db4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6858      	ldr	r0, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	f004 fc94 	bl	80076b8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	441a      	add	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d32b      	bcc.n	8002e02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e026      	b.n	8002e02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68d8      	ldr	r0, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	f004 fc7a 	bl	80076b8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	425b      	negs	r3, r3
 8002dce:	441a      	add	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	425b      	negs	r3, r3
 8002dea:	441a      	add	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d105      	bne.n	8002e02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e0a:	697b      	ldr	r3, [r7, #20]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	441a      	add	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d303      	bcc.n	8002e48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68d9      	ldr	r1, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	461a      	mov	r2, r3
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f004 fc30 	bl	80076b8 <memcpy>
    }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e68:	f001 feac 	bl	8004bc4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e74:	e011      	b.n	8002e9a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3324      	adds	r3, #36	; 0x24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fd8a 	bl	800399c <xTaskRemoveFromEventList>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e8e:	f000 fe67 	bl	8003b60 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	dce9      	bgt.n	8002e76 <prvUnlockQueue+0x16>
 8002ea2:	e000      	b.n	8002ea6 <prvUnlockQueue+0x46>
                        break;
 8002ea4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002eae:	f001 feb9 	bl	8004c24 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002eb2:	f001 fe87 	bl	8004bc4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ebc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ebe:	e011      	b.n	8002ee4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3310      	adds	r3, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fd65 	bl	800399c <xTaskRemoveFromEventList>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ed8:	f000 fe42 	bl	8003b60 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dce9      	bgt.n	8002ec0 <prvUnlockQueue+0x60>
 8002eec:	e000      	b.n	8002ef0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002eee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	22ff      	movs	r2, #255	; 0xff
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ef8:	f001 fe94 	bl	8004c24 <vPortExitCritical>
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f0c:	f001 fe5a 	bl	8004bc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e001      	b.n	8002f22 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f22:	f001 fe7f 	bl	8004c24 <vPortExitCritical>

    return xReturn;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f38:	f001 fe44 	bl	8004bc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d102      	bne.n	8002f4e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f52:	f001 fe67 	bl	8004c24 <vPortExitCritical>

    return xReturn;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e01e      	b.n	8002fae <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f70:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <vQueueAddToRegistry+0x60>)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d115      	bne.n	8002fa8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f7c:	4910      	ldr	r1, [pc, #64]	; (8002fc0 <vQueueAddToRegistry+0x60>)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <vQueueAddToRegistry+0x60>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 fa01 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2071      	movs	r0, #113	; 0x71
 8002fa2:	f003 fb67 	bl	8006674 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002fa6:	e006      	b.n	8002fb6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d9dd      	bls.n	8002f70 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200143c4 	.word	0x200143c4

08002fc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fd4:	f001 fdf6 	bl	8004bc4 <vPortEnterCritical>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fde:	b25b      	sxtb	r3, r3
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d103      	bne.n	8002fee <vQueueWaitForMessageRestricted+0x2a>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d103      	bne.n	8003004 <vQueueWaitForMessageRestricted+0x40>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003004:	f001 fe0e 	bl	8004c24 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fc91 	bl	8003940 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff1e 	bl	8002e60 <prvUnlockQueue>
    }
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af04      	add	r7, sp, #16
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f001 feeb 	bl	8004e1c <pvPortMalloc>
 8003046:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800304e:	2058      	movs	r0, #88	; 0x58
 8003050:	f001 fee4 	bl	8004e1c <pvPortMalloc>
 8003054:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
 8003062:	e005      	b.n	8003070 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003064:	6978      	ldr	r0, [r7, #20]
 8003066:	f001 ffb9 	bl	8004fdc <vPortFree>
 800306a:	e001      	b.n	8003070 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	2300      	movs	r3, #0
 800307a:	9303      	str	r3, [sp, #12]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f80e 	bl	80030ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003092:	69f8      	ldr	r0, [r7, #28]
 8003094:	f000 f8a2 	bl	80031dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003098:	2301      	movs	r3, #1
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e002      	b.n	80030a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030a4:	69bb      	ldr	r3, [r7, #24]
    }
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b088      	sub	sp, #32
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	461a      	mov	r2, r3
 80030c6:	21a5      	movs	r1, #165	; 0xa5
 80030c8:	f004 fb04 	bl	80076d4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030d6:	3b01      	subs	r3, #1
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f023 0307 	bic.w	r3, r3, #7
 80030e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <prvInitialiseNewTask+0x58>
        __asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	617b      	str	r3, [r7, #20]
    }
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01f      	beq.n	800314c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e012      	b.n	8003138 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	7819      	ldrb	r1, [r3, #0]
 800311a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	4413      	add	r3, r2
 8003120:	3334      	adds	r3, #52	; 0x34
 8003122:	460a      	mov	r2, r1
 8003124:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b09      	cmp	r3, #9
 800313c:	d9e9      	bls.n	8003112 <prvInitialiseNewTask+0x64>
 800313e:	e000      	b.n	8003142 <prvInitialiseNewTask+0x94>
            {
                break;
 8003140:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800314a:	e003      	b.n	8003154 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	2b04      	cmp	r3, #4
 8003158:	d901      	bls.n	800315e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800315a:	2304      	movs	r3, #4
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003168:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2200      	movs	r2, #0
 800316e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	3304      	adds	r3, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f96b 	bl	8002450 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	3318      	adds	r3, #24
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f966 	bl	8002450 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003188:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f1c3 0205 	rsb	r2, r3, #5
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	3350      	adds	r3, #80	; 0x50
 800319e:	2204      	movs	r2, #4
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f004 fa96 	bl	80076d4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	3354      	adds	r3, #84	; 0x54
 80031ac:	2201      	movs	r2, #1
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fa8f 	bl	80076d4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	69b8      	ldr	r0, [r7, #24]
 80031bc:	f001 fb54 	bl	8004868 <pxPortInitialiseStack>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031d2:	bf00      	nop
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031e4:	f001 fcee 	bl	8004bc4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <prvAddNewTaskToReadyList+0xfc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <prvAddNewTaskToReadyList+0xfc>)
 80031f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <prvAddNewTaskToReadyList+0x100>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031fa:	4a38      	ldr	r2, [pc, #224]	; (80032dc <prvAddNewTaskToReadyList+0x100>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <prvAddNewTaskToReadyList+0xfc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d110      	bne.n	800322a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003208:	f000 fcce 	bl	8003ba8 <prvInitialiseTaskLists>
 800320c:	e00d      	b.n	800322a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <prvAddNewTaskToReadyList+0x104>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <prvAddNewTaskToReadyList+0x100>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	429a      	cmp	r2, r3
 8003222:	d802      	bhi.n	800322a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003224:	4a2d      	ldr	r2, [pc, #180]	; (80032dc <prvAddNewTaskToReadyList+0x100>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <prvAddNewTaskToReadyList+0x108>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <prvAddNewTaskToReadyList+0x108>)
 8003232:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <prvAddNewTaskToReadyList+0x108>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <prvAddNewTaskToReadyList+0x94>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 ff83 	bl	8007150 <SEGGER_SYSVIEW_OnTaskCreate>
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	461d      	mov	r5, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461c      	mov	r4, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	1ae3      	subs	r3, r4, r3
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	462b      	mov	r3, r5
 800326c:	f002 f87c 	bl	8005368 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fff0 	bl	8007258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <prvAddNewTaskToReadyList+0x10c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <prvAddNewTaskToReadyList+0x10c>)
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <prvAddNewTaskToReadyList+0x110>)
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7ff f8e2 	bl	800246a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032a6:	f001 fcbd 	bl	8004c24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <prvAddNewTaskToReadyList+0x104>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <prvAddNewTaskToReadyList+0x100>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	429a      	cmp	r2, r3
 80032be:	d207      	bcs.n	80032d0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <prvAddNewTaskToReadyList+0x114>)
 80032c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}
 80032d8:	2000010c 	.word	0x2000010c
 80032dc:	20000034 	.word	0x20000034
 80032e0:	20000118 	.word	0x20000118
 80032e4:	20000128 	.word	0x20000128
 80032e8:	20000114 	.word	0x20000114
 80032ec:	20000038 	.word	0x20000038
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80032fc:	f001 fc62 	bl	8004bc4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <vTaskDelete+0x18>
 8003306:	4b46      	ldr	r3, [pc, #280]	; (8003420 <vTaskDelete+0x12c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	e000      	b.n	800330e <vTaskDelete+0x1a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3304      	adds	r3, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f905 	bl	8002524 <uxListRemove>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d115      	bne.n	800334c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	493f      	ldr	r1, [pc, #252]	; (8003424 <vTaskDelete+0x130>)
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <vTaskDelete+0x58>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	2201      	movs	r2, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	4b39      	ldr	r3, [pc, #228]	; (8003428 <vTaskDelete+0x134>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4013      	ands	r3, r2
 8003348:	4a37      	ldr	r2, [pc, #220]	; (8003428 <vTaskDelete+0x134>)
 800334a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f8e3 	bl	8002524 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800335e:	4b33      	ldr	r3, [pc, #204]	; (800342c <vTaskDelete+0x138>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a31      	ldr	r2, [pc, #196]	; (800342c <vTaskDelete+0x138>)
 8003366:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <vTaskDelete+0x12c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	429a      	cmp	r2, r3
 8003370:	d118      	bne.n	80033a4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	482d      	ldr	r0, [pc, #180]	; (8003430 <vTaskDelete+0x13c>)
 800337a:	f7ff f876 	bl	800246a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <vTaskDelete+0x140>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <vTaskDelete+0x140>)
 8003386:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f004 f806 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 8003390:	4603      	mov	r3, r0
 8003392:	4619      	mov	r1, r3
 8003394:	2022      	movs	r0, #34	; 0x22
 8003396:	f003 f931 	bl	80065fc <SEGGER_SYSVIEW_RecordU32>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	f002 f84b 	bl	8005438 <SYSVIEW_DeleteTask>
 80033a2:	e016      	b.n	80033d2 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <vTaskDelete+0x144>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	4a23      	ldr	r2, [pc, #140]	; (8003438 <vTaskDelete+0x144>)
 80033ac:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fff3 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4619      	mov	r1, r3
 80033ba:	2022      	movs	r0, #34	; 0x22
 80033bc:	f003 f91e 	bl	80065fc <SEGGER_SYSVIEW_RecordU32>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 f838 	bl	8005438 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fc5b 	bl	8003c84 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80033ce:	f000 fc69 	bl	8003ca4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80033d2:	f001 fc27 	bl	8004c24 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <vTaskDelete+0x148>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01b      	beq.n	8003416 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <vTaskDelete+0x12c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d116      	bne.n	8003416 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <vTaskDelete+0x14c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <vTaskDelete+0x112>
        __asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60bb      	str	r3, [r7, #8]
    }
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <vTaskDelete+0x150>)
 8003408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000034 	.word	0x20000034
 8003424:	20000038 	.word	0x20000038
 8003428:	20000114 	.word	0x20000114
 800342c:	20000128 	.word	0x20000128
 8003430:	200000e0 	.word	0x200000e0
 8003434:	200000f4 	.word	0x200000f4
 8003438:	2000010c 	.word	0x2000010c
 800343c:	20000118 	.word	0x20000118
 8003440:	20000134 	.word	0x20000134
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <vTaskStartScheduler+0xa4>)
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2300      	movs	r3, #0
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	2282      	movs	r2, #130	; 0x82
 800345a:	4925      	ldr	r1, [pc, #148]	; (80034f0 <vTaskStartScheduler+0xa8>)
 800345c:	4825      	ldr	r0, [pc, #148]	; (80034f4 <vTaskStartScheduler+0xac>)
 800345e:	f7ff fde5 	bl	800302c <xTaskCreate>
 8003462:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800346a:	f000 feeb 	bl	8004244 <xTimerCreateTimerTask>
 800346e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d124      	bne.n	80034c0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60bb      	str	r3, [r7, #8]
    }
 8003488:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <vTaskStartScheduler+0xb0>)
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <vTaskStartScheduler+0xb4>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <vTaskStartScheduler+0xb8>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <vTaskStartScheduler+0xbc>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <vTaskStartScheduler+0xa4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d102      	bne.n	80034b0 <vTaskStartScheduler+0x68>
 80034aa:	f003 fe35 	bl	8007118 <SEGGER_SYSVIEW_OnIdle>
 80034ae:	e004      	b.n	80034ba <vTaskStartScheduler+0x72>
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <vTaskStartScheduler+0xbc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fe8d 	bl	80071d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80034ba:	f001 fa63 	bl	8004984 <xPortStartScheduler>
 80034be:	e00e      	b.n	80034de <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d10a      	bne.n	80034de <vTaskStartScheduler+0x96>
        __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	607b      	str	r3, [r7, #4]
    }
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <vTaskStartScheduler+0xc0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000130 	.word	0x20000130
 80034f0:	08007770 	.word	0x08007770
 80034f4:	08003b79 	.word	0x08003b79
 80034f8:	2000012c 	.word	0x2000012c
 80034fc:	20000118 	.word	0x20000118
 8003500:	20000110 	.word	0x20000110
 8003504:	20000034 	.word	0x20000034
 8003508:	2000000c 	.word	0x2000000c

0800350c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <vTaskSuspendAll+0x18>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a03      	ldr	r2, [pc, #12]	; (8003524 <vTaskSuspendAll+0x18>)
 8003518:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	20000134 	.word	0x20000134

08003528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <xTaskResumeAll+0x11c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <xTaskResumeAll+0x2c>
        __asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	603b      	str	r3, [r7, #0]
    }
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003554:	f001 fb36 	bl	8004bc4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003558:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <xTaskResumeAll+0x11c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3b01      	subs	r3, #1
 800355e:	4a39      	ldr	r2, [pc, #228]	; (8003644 <xTaskResumeAll+0x11c>)
 8003560:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003562:	4b38      	ldr	r3, [pc, #224]	; (8003644 <xTaskResumeAll+0x11c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d165      	bne.n	8003636 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <xTaskResumeAll+0x120>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d061      	beq.n	8003636 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003572:	e032      	b.n	80035da <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003574:	4b35      	ldr	r3, [pc, #212]	; (800364c <xTaskResumeAll+0x124>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3318      	adds	r3, #24
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe ffcf 	bl	8002524 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe ffca 	bl	8002524 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 fe60 	bl	8007258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	2201      	movs	r2, #1
 800359e:	409a      	lsls	r2, r3
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <xTaskResumeAll+0x128>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <xTaskResumeAll+0x128>)
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4a27      	ldr	r2, [pc, #156]	; (8003654 <xTaskResumeAll+0x12c>)
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe ff52 	bl	800246a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <xTaskResumeAll+0x130>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d302      	bcc.n	80035da <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <xTaskResumeAll+0x134>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035da:	4b1c      	ldr	r3, [pc, #112]	; (800364c <xTaskResumeAll+0x124>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1c8      	bne.n	8003574 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035e8:	f000 fb5c 	bl	8003ca4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <xTaskResumeAll+0x138>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035f8:	f000 f858 	bl	80036ac <xTaskIncrementTick>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <xTaskResumeAll+0x134>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f1      	bne.n	80035f8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <xTaskResumeAll+0x138>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <xTaskResumeAll+0x134>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <xTaskResumeAll+0x13c>)
 8003628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003636:	f001 faf5 	bl	8004c24 <vPortExitCritical>

    return xAlreadyYielded;
 800363a:	68bb      	ldr	r3, [r7, #8]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000134 	.word	0x20000134
 8003648:	2000010c 	.word	0x2000010c
 800364c:	200000cc 	.word	0x200000cc
 8003650:	20000114 	.word	0x20000114
 8003654:	20000038 	.word	0x20000038
 8003658:	20000034 	.word	0x20000034
 800365c:	20000120 	.word	0x20000120
 8003660:	2000011c 	.word	0x2000011c
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <xTaskGetTickCount+0x1c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000110 	.word	0x20000110

08003688 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800368e:	f001 fb85 	bl	8004d9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <xTaskGetTickCountFromISR+0x20>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800369c:	683b      	ldr	r3, [r7, #0]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000110 	.word	0x20000110

080036ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b6:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <xTaskIncrementTick+0x14c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 8092 	bne.w	80037e4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036c0:	4b4e      	ldr	r3, [pc, #312]	; (80037fc <xTaskIncrementTick+0x150>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80036c8:	4a4c      	ldr	r2, [pc, #304]	; (80037fc <xTaskIncrementTick+0x150>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d120      	bne.n	8003716 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80036d4:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <xTaskIncrementTick+0x154>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	603b      	str	r3, [r7, #0]
    }
 80036f0:	bf00      	nop
 80036f2:	e7fe      	b.n	80036f2 <xTaskIncrementTick+0x46>
 80036f4:	4b42      	ldr	r3, [pc, #264]	; (8003800 <xTaskIncrementTick+0x154>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b42      	ldr	r3, [pc, #264]	; (8003804 <xTaskIncrementTick+0x158>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a40      	ldr	r2, [pc, #256]	; (8003800 <xTaskIncrementTick+0x154>)
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <xTaskIncrementTick+0x158>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <xTaskIncrementTick+0x15c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <xTaskIncrementTick+0x15c>)
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	f000 fac7 	bl	8003ca4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003716:	4b3d      	ldr	r3, [pc, #244]	; (800380c <xTaskIncrementTick+0x160>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d34c      	bcc.n	80037ba <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003720:	4b37      	ldr	r3, [pc, #220]	; (8003800 <xTaskIncrementTick+0x154>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372a:	4b38      	ldr	r3, [pc, #224]	; (800380c <xTaskIncrementTick+0x160>)
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	601a      	str	r2, [r3, #0]
                    break;
 8003732:	e042      	b.n	80037ba <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <xTaskIncrementTick+0x154>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d203      	bcs.n	8003754 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <xTaskIncrementTick+0x160>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003752:	e032      	b.n	80037ba <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3304      	adds	r3, #4
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fee3 	bl	8002524 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	3318      	adds	r3, #24
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe feda 	bl	8002524 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fd70 	bl	8007258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	2201      	movs	r2, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <xTaskIncrementTick+0x164>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <xTaskIncrementTick+0x164>)
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <xTaskIncrementTick+0x168>)
 8003798:	441a      	add	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3304      	adds	r3, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f7fe fe62 	bl	800246a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <xTaskIncrementTick+0x16c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3b5      	bcc.n	8003720 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b8:	e7b2      	b.n	8003720 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <xTaskIncrementTick+0x16c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4914      	ldr	r1, [pc, #80]	; (8003814 <xTaskIncrementTick+0x168>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d901      	bls.n	80037d6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <xTaskIncrementTick+0x170>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e004      	b.n	80037ee <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <xTaskIncrementTick+0x174>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <xTaskIncrementTick+0x174>)
 80037ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80037ee:	697b      	ldr	r3, [r7, #20]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000134 	.word	0x20000134
 80037fc:	20000110 	.word	0x20000110
 8003800:	200000c4 	.word	0x200000c4
 8003804:	200000c8 	.word	0x200000c8
 8003808:	20000124 	.word	0x20000124
 800380c:	2000012c 	.word	0x2000012c
 8003810:	20000114 	.word	0x20000114
 8003814:	20000038 	.word	0x20000038
 8003818:	20000034 	.word	0x20000034
 800381c:	20000120 	.word	0x20000120
 8003820:	2000011c 	.word	0x2000011c

08003824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <vTaskSwitchContext+0xbc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <vTaskSwitchContext+0xc0>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003838:	e04d      	b.n	80038d6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800383a:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <vTaskSwitchContext+0xc0>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <vTaskSwitchContext+0xc4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	f1c3 031f 	rsb	r3, r3, #31
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4925      	ldr	r1, [pc, #148]	; (80038ec <vTaskSwitchContext+0xc8>)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <vTaskSwitchContext+0x5c>
        __asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	607b      	str	r3, [r7, #4]
    }
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <vTaskSwitchContext+0x5a>
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a18      	ldr	r2, [pc, #96]	; (80038ec <vTaskSwitchContext+0xc8>)
 800388c:	4413      	add	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3308      	adds	r3, #8
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d104      	bne.n	80038b0 <vTaskSwitchContext+0x8c>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <vTaskSwitchContext+0xcc>)
 80038b8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <vTaskSwitchContext+0xcc>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <vTaskSwitchContext+0xd0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d102      	bne.n	80038cc <vTaskSwitchContext+0xa8>
 80038c6:	f003 fc27 	bl	8007118 <SEGGER_SYSVIEW_OnIdle>
}
 80038ca:	e004      	b.n	80038d6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <vTaskSwitchContext+0xcc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fc7f 	bl	80071d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000134 	.word	0x20000134
 80038e4:	20000120 	.word	0x20000120
 80038e8:	20000114 	.word	0x20000114
 80038ec:	20000038 	.word	0x20000038
 80038f0:	20000034 	.word	0x20000034
 80038f4:	20000130 	.word	0x20000130

080038f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60fb      	str	r3, [r7, #12]
    }
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <vTaskPlaceOnEventList+0x44>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3318      	adds	r3, #24
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe fdc3 	bl	80024b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800392c:	2101      	movs	r1, #1
 800392e:	6838      	ldr	r0, [r7, #0]
 8003930:	f000 fc10 	bl	8004154 <prvAddCurrentTaskToDelayedList>
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000034 	.word	0x20000034

08003940 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	617b      	str	r3, [r7, #20]
    }
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <vTaskPlaceOnEventListRestricted+0x58>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3318      	adds	r3, #24
 800396e:	4619      	mov	r1, r3
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fe fd7a 	bl	800246a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003982:	2024      	movs	r0, #36	; 0x24
 8003984:	f002 fe1c 	bl	80065c0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	68b8      	ldr	r0, [r7, #8]
 800398c:	f000 fbe2 	bl	8004154 <prvAddCurrentTaskToDelayedList>
    }
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000034 	.word	0x20000034

0800399c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60fb      	str	r3, [r7, #12]
    }
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	3318      	adds	r3, #24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fda9 	bl	8002524 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d2:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <xTaskRemoveFromEventList+0xb4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d120      	bne.n	8003a1c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3304      	adds	r3, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fda0 	bl	8002524 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fc36 	bl	8007258 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	2201      	movs	r2, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <xTaskRemoveFromEventList+0xb8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <xTaskRemoveFromEventList+0xb8>)
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <xTaskRemoveFromEventList+0xbc>)
 8003a0c:	441a      	add	r2, r3
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7fe fd28 	bl	800246a <vListInsertEnd>
 8003a1a:	e005      	b.n	8003a28 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	3318      	adds	r3, #24
 8003a20:	4619      	mov	r1, r3
 8003a22:	480e      	ldr	r0, [pc, #56]	; (8003a5c <xTaskRemoveFromEventList+0xc0>)
 8003a24:	f7fe fd21 	bl	800246a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <xTaskRemoveFromEventList+0xc4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d905      	bls.n	8003a42 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <xTaskRemoveFromEventList+0xc8>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e001      	b.n	8003a46 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a46:	697b      	ldr	r3, [r7, #20]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000134 	.word	0x20000134
 8003a54:	20000114 	.word	0x20000114
 8003a58:	20000038 	.word	0x20000038
 8003a5c:	200000cc 	.word	0x200000cc
 8003a60:	20000034 	.word	0x20000034
 8003a64:	20000120 	.word	0x20000120

08003a68 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <vTaskInternalSetTimeOutState+0x24>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <vTaskInternalSetTimeOutState+0x28>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000124 	.word	0x20000124
 8003a90:	20000110 	.word	0x20000110

08003a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	613b      	str	r3, [r7, #16]
    }
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
    }
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ad6:	f001 f875 	bl	8004bc4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <xTaskCheckForTimeOut+0xc4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d102      	bne.n	8003afa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	e026      	b.n	8003b48 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <xTaskCheckForTimeOut+0xc8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d00a      	beq.n	8003b1c <xTaskCheckForTimeOut+0x88>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d305      	bcc.n	8003b1c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e015      	b.n	8003b48 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d20b      	bcs.n	8003b3e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff98 	bl	8003a68 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e004      	b.n	8003b48 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b48:	f001 f86c 	bl	8004c24 <vPortExitCritical>

    return xReturn;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000110 	.word	0x20000110
 8003b5c:	20000124 	.word	0x20000124

08003b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <vTaskMissedYield+0x14>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000120 	.word	0x20000120

08003b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b80:	f000 f852 	bl	8003c28 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <prvIdleTask+0x28>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d9f9      	bls.n	8003b80 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <prvIdleTask+0x2c>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b9c:	e7f0      	b.n	8003b80 <prvIdleTask+0x8>
 8003b9e:	bf00      	nop
 8003ba0:	20000038 	.word	0x20000038
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <prvInitialiseTaskLists+0x60>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fc24 	bl	8002410 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bd6:	f7fe fc1b 	bl	8002410 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bda:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bdc:	f7fe fc18 	bl	8002410 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003be2:	f7fe fc15 	bl	8002410 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x70>)
 8003be8:	f7fe fc12 	bl	8002410 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003bec:	480b      	ldr	r0, [pc, #44]	; (8003c1c <prvInitialiseTaskLists+0x74>)
 8003bee:	f7fe fc0f 	bl	8002410 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000038 	.word	0x20000038
 8003c0c:	2000009c 	.word	0x2000009c
 8003c10:	200000b0 	.word	0x200000b0
 8003c14:	200000cc 	.word	0x200000cc
 8003c18:	200000e0 	.word	0x200000e0
 8003c1c:	200000f8 	.word	0x200000f8
 8003c20:	200000c4 	.word	0x200000c4
 8003c24:	200000c8 	.word	0x200000c8

08003c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c2e:	e019      	b.n	8003c64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c30:	f000 ffc8 	bl	8004bc4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvCheckTasksWaitingTermination+0x50>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fc6f 	bl	8002524 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c5a:	f000 ffe3 	bl	8004c24 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f810 	bl	8003c84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200000e0 	.word	0x200000e0
 8003c7c:	2000010c 	.word	0x2000010c
 8003c80:	200000f4 	.word	0x200000f4

08003c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 f9a3 	bl	8004fdc <vPortFree>
                vPortFree( pxTCB );
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f001 f9a0 	bl	8004fdc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvResetNextTaskUnblockTime+0x30>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <prvResetNextTaskUnblockTime+0x34>)
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cba:	e005      	b.n	8003cc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <prvResetNextTaskUnblockTime+0x30>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <prvResetNextTaskUnblockTime+0x34>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200000c4 	.word	0x200000c4
 8003cd8:	2000012c 	.word	0x2000012c

08003cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <xTaskGetSchedulerState+0x34>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cea:	2301      	movs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	e008      	b.n	8003d02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <xTaskGetSchedulerState+0x38>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e001      	b.n	8003d02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d02:	687b      	ldr	r3, [r7, #4]
    }
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000118 	.word	0x20000118
 8003d14:	20000134 	.word	0x20000134

08003d18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d068      	beq.n	8003e00 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <xTaskPriorityDisinherit+0xf4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d00a      	beq.n	8003d4e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
    }
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60bb      	str	r3, [r7, #8]
    }
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d03e      	beq.n	8003e00 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d13a      	bne.n	8003e00 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fbc8 	bl	8002524 <uxListRemove>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43da      	mvns	r2, r3
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4013      	ands	r3, r2
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003dae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4619      	mov	r1, r3
 8003db4:	204a      	movs	r0, #74	; 0x4a
 8003db6:	f002 fc21 	bl	80065fc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f1c3 0205 	rsb	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <xTaskPriorityDisinherit+0xfc>)
 8003dee:	441a      	add	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe fb37 	bl	800246a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
    }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000034 	.word	0x20000034
 8003e10:	20000114 	.word	0x20000114
 8003e14:	20000038 	.word	0x20000038

08003e18 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	613b      	str	r3, [r7, #16]
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003e42:	f000 febf 	bl	8004bc4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3354      	adds	r3, #84	; 0x54
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d022      	beq.n	8003e9e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003e58:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	3214      	adds	r2, #20
 8003e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	43d2      	mvns	r2, r2
 8003e68:	4011      	ands	r1, r2
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	3214      	adds	r2, #20
 8003e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3354      	adds	r3, #84	; 0x54
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e86:	2101      	movs	r1, #1
 8003e88:	6a38      	ldr	r0, [r7, #32]
 8003e8a:	f000 f963 	bl	8004154 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003e8e:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <xTaskGenericNotifyWait+0x10c>)
 8003e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e9e:	f000 fec1 	bl	8004c24 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003ea2:	f000 fe8f 	bl	8004bc4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	2040      	movs	r0, #64	; 0x40
 8003eb4:	f002 fcae 	bl	8006814 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	3214      	adds	r2, #20
 8003ec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3354      	adds	r3, #84	; 0x54
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d002      	beq.n	8003ee6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e00e      	b.n	8003f04 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	3214      	adds	r2, #20
 8003eee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	43d2      	mvns	r2, r2
 8003ef6:	4011      	ands	r1, r2
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	3214      	adds	r2, #20
 8003efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <xTaskGenericNotifyWait+0x108>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3354      	adds	r3, #84	; 0x54
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003f12:	f000 fe87 	bl	8004c24 <vPortExitCritical>

        return xReturn;
 8003f16:	697b      	ldr	r3, [r7, #20]
    }
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000034 	.word	0x20000034
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b092      	sub	sp, #72	; 0x48
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003f36:	2301      	movs	r3, #1
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f72:	f000 ff13 	bl	8004d9c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f90:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	3214      	adds	r2, #20
 8003fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4413      	add	r3, r2
 8003fb0:	3354      	adds	r3, #84	; 0x54
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3354      	adds	r3, #84	; 0x54
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d83b      	bhi.n	8004042 <xTaskGenericNotifyFromISR+0x11a>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <xTaskGenericNotifyFromISR+0xa8>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08004061 	.word	0x08004061
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004019 	.word	0x08004019
 8003fe0:	08004027 	.word	0x08004027
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	3214      	adds	r2, #20
 8003fea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	ea42 0103 	orr.w	r1, r2, r3
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	3214      	adds	r2, #20
 8003ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ffe:	e032      	b.n	8004066 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	3214      	adds	r2, #20
 8004006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800400a:	1c59      	adds	r1, r3, #1
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	3214      	adds	r2, #20
 8004012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004016:	e026      	b.n	8004066 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	3214      	adds	r2, #20
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004024:	e01f      	b.n	8004066 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800402a:	2b02      	cmp	r3, #2
 800402c:	d006      	beq.n	800403c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	3214      	adds	r2, #20
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800403a:	e014      	b.n	8004066 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800403c:	2300      	movs	r3, #0
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004040:	e011      	b.n	8004066 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004042:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <xTaskGenericNotifyFromISR+0x210>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	61fb      	str	r3, [r7, #28]
    }
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004064:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	4618      	mov	r0, r3
 800406a:	f003 f997 	bl	800739c <SEGGER_SYSVIEW_ShrinkId>
 800406e:	78f9      	ldrb	r1, [r7, #3]
 8004070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004074:	9201      	str	r2, [sp, #4]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4601      	mov	r1, r0
 800407e:	203f      	movs	r0, #63	; 0x3f
 8004080:	f002 fc5a 	bl	8006938 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004088:	2b01      	cmp	r3, #1
 800408a:	d149      	bne.n	8004120 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	61bb      	str	r3, [r7, #24]
    }
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <xTaskGenericNotifyFromISR+0x214>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d120      	bne.n	80040f4 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	3304      	adds	r3, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe fa34 	bl	8002524 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80040bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 f8ca 	bl	8007258 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <xTaskGenericNotifyFromISR+0x218>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <xTaskGenericNotifyFromISR+0x218>)
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <xTaskGenericNotifyFromISR+0x21c>)
 80040e4:	441a      	add	r2, r3
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7fe f9bc 	bl	800246a <vListInsertEnd>
 80040f2:	e005      	b.n	8004100 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	3318      	adds	r3, #24
 80040f8:	4619      	mov	r1, r3
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <xTaskGenericNotifyFromISR+0x220>)
 80040fc:	f7fe f9b5 	bl	800246a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <xTaskGenericNotifyFromISR+0x224>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	429a      	cmp	r2, r3
 800410c:	d908      	bls.n	8004120 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <xTaskGenericNotifyFromISR+0x228>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f383 8811 	msr	BASEPRI, r3
    }
 800412a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800412e:	4618      	mov	r0, r3
 8004130:	3740      	adds	r7, #64	; 0x40
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000110 	.word	0x20000110
 800413c:	20000134 	.word	0x20000134
 8004140:	20000114 	.word	0x20000114
 8004144:	20000038 	.word	0x20000038
 8004148:	200000cc 	.word	0x200000cc
 800414c:	20000034 	.word	0x20000034
 8004150:	20000120 	.word	0x20000120

08004154 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3304      	adds	r3, #4
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe f9da 	bl	8002524 <uxListRemove>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004176:	4b2d      	ldr	r3, [pc, #180]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2201      	movs	r2, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4013      	ands	r3, r2
 800418a:	4a29      	ldr	r2, [pc, #164]	; (8004230 <prvAddCurrentTaskToDelayedList+0xdc>)
 800418c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d110      	bne.n	80041b8 <prvAddCurrentTaskToDelayedList+0x64>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	211b      	movs	r1, #27
 80041a2:	4618      	mov	r0, r3
 80041a4:	f003 f89a 	bl	80072dc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b20      	ldr	r3, [pc, #128]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4820      	ldr	r0, [pc, #128]	; (8004234 <prvAddCurrentTaskToDelayedList+0xe0>)
 80041b2:	f7fe f95a 	bl	800246a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041b6:	e032      	b.n	800421e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d20f      	bcs.n	80041f0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80041d0:	4b16      	ldr	r3, [pc, #88]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2104      	movs	r1, #4
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 f880 	bl	80072dc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041dc:	4b16      	ldr	r3, [pc, #88]	; (8004238 <prvAddCurrentTaskToDelayedList+0xe4>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe f962 	bl	80024b2 <vListInsert>
}
 80041ee:	e016      	b.n	800421e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2104      	movs	r1, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 f870 	bl	80072dc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <prvAddCurrentTaskToDelayedList+0xe8>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fe f952 	bl	80024b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <prvAddCurrentTaskToDelayedList+0xec>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d202      	bcs.n	800421e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <prvAddCurrentTaskToDelayedList+0xec>)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6013      	str	r3, [r2, #0]
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000110 	.word	0x20000110
 800422c:	20000034 	.word	0x20000034
 8004230:	20000114 	.word	0x20000114
 8004234:	200000f8 	.word	0x200000f8
 8004238:	200000c8 	.word	0x200000c8
 800423c:	200000c4 	.word	0x200000c4
 8004240:	2000012c 	.word	0x2000012c

08004244 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800424e:	f000 fad5 	bl	80047fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <xTimerCreateTimerTask+0x54>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <xTimerCreateTimerTask+0x58>)
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	2302      	movs	r3, #2
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2300      	movs	r3, #0
 8004264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004268:	490d      	ldr	r1, [pc, #52]	; (80042a0 <xTimerCreateTimerTask+0x5c>)
 800426a:	480e      	ldr	r0, [pc, #56]	; (80042a4 <xTimerCreateTimerTask+0x60>)
 800426c:	f7fe fede 	bl	800302c <xTaskCreate>
 8004270:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	603b      	str	r3, [r7, #0]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800428e:	687b      	ldr	r3, [r7, #4]
    }
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000168 	.word	0x20000168
 800429c:	2000016c 	.word	0x2000016c
 80042a0:	08007778 	.word	0x08007778
 80042a4:	080043dd 	.word	0x080043dd

080042a8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	623b      	str	r3, [r7, #32]
    }
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <xTimerGenericCommand+0x98>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02a      	beq.n	8004334 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	dc18      	bgt.n	8004322 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042f0:	f7ff fcf4 	bl	8003cdc <xTaskGetSchedulerState>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d109      	bne.n	800430e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <xTimerGenericCommand+0x98>)
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f107 0114 	add.w	r1, r7, #20
 8004302:	2300      	movs	r3, #0
 8004304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004306:	f7fe fa27 	bl	8002758 <xQueueGenericSend>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
 800430c:	e012      	b.n	8004334 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <xTimerGenericCommand+0x98>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f107 0114 	add.w	r1, r7, #20
 8004316:	2300      	movs	r3, #0
 8004318:	2200      	movs	r2, #0
 800431a:	f7fe fa1d 	bl	8002758 <xQueueGenericSend>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24
 8004320:	e008      	b.n	8004334 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <xTimerGenericCommand+0x98>)
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f107 0114 	add.w	r1, r7, #20
 800432a:	2300      	movs	r3, #0
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	f7fe fb39 	bl	80029a4 <xQueueGenericSendFromISR>
 8004332:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004336:	4618      	mov	r0, r3
 8004338:	3728      	adds	r7, #40	; 0x28
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000168 	.word	0x20000168

08004344 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <prvProcessExpiredTimer+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3304      	adds	r3, #4
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe f8e1 	bl	8002524 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d022      	beq.n	80043b6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	18d1      	adds	r1, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	6978      	ldr	r0, [r7, #20]
 800437e:	f000 f8d1 	bl	8004524 <prvInsertTimerInActiveList>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01f      	beq.n	80043c8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	2100      	movs	r1, #0
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff88 	bl	80042a8 <xTimerGenericCommand>
 8004398:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d113      	bne.n	80043c8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
    }
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	6978      	ldr	r0, [r7, #20]
 80043ce:	4798      	blx	r3
    }
 80043d0:	bf00      	nop
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000160 	.word	0x20000160

080043dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f857 	bl	800449c <prvGetNextExpireTime>
 80043ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4619      	mov	r1, r3
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f803 	bl	8004400 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80043fa:	f000 f8d5 	bl	80045a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043fe:	e7f1      	b.n	80043e4 <prvTimerTask+0x8>

08004400 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800440a:	f7ff f87f 	bl	800350c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f866 	bl	80044e4 <prvSampleTimeNow>
 8004418:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d130      	bne.n	8004482 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <prvProcessTimerOrBlockTask+0x3c>
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d806      	bhi.n	800443c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800442e:	f7ff f87b 	bl	8003528 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ff85 	bl	8004344 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800443a:	e024      	b.n	8004486 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <prvProcessTimerOrBlockTask+0x90>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <prvProcessTimerOrBlockTask+0x50>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <prvProcessTimerOrBlockTask+0x52>
 8004450:	2300      	movs	r3, #0
 8004452:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <prvProcessTimerOrBlockTask+0x94>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	f7fe fdaf 	bl	8002fc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004466:	f7ff f85f 	bl	8003528 <xTaskResumeAll>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <prvProcessTimerOrBlockTask+0x98>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
    }
 8004480:	e001      	b.n	8004486 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004482:	f7ff f851 	bl	8003528 <xTaskResumeAll>
    }
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000164 	.word	0x20000164
 8004494:	20000168 	.word	0x20000168
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <prvGetNextExpireTime+0x44>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <prvGetNextExpireTime+0x16>
 80044ae:	2201      	movs	r2, #1
 80044b0:	e000      	b.n	80044b4 <prvGetNextExpireTime+0x18>
 80044b2:	2200      	movs	r2, #0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <prvGetNextExpireTime+0x44>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e001      	b.n	80044d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044d0:	68fb      	ldr	r3, [r7, #12]
    }
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000160 	.word	0x20000160

080044e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80044ec:	f7ff f8bc 	bl	8003668 <xTaskGetTickCount>
 80044f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <prvSampleTimeNow+0x3c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d205      	bcs.n	8004508 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80044fc:	f000 f91a 	bl	8004734 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e002      	b.n	800450e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvSampleTimeNow+0x3c>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004514:	68fb      	ldr	r3, [r7, #12]
    }
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000170 	.word	0x20000170

08004524 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d812      	bhi.n	8004570 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e01b      	b.n	8004596 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <prvInsertTimerInActiveList+0x7c>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fd ffa2 	bl	80024b2 <vListInsert>
 800456e:	e012      	b.n	8004596 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d206      	bcs.n	8004586 <prvInsertTimerInActiveList+0x62>
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004580:	2301      	movs	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e007      	b.n	8004596 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <prvInsertTimerInActiveList+0x80>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f7fd ff8e 	bl	80024b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004596:	697b      	ldr	r3, [r7, #20]
    }
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000164 	.word	0x20000164
 80045a4:	20000160 	.word	0x20000160

080045a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045ae:	e0ae      	b.n	800470e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f2c0 80aa 	blt.w	800470c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	3304      	adds	r3, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fd ffab 	bl	8002524 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff87 	bl	80044e4 <prvSampleTimeNow>
 80045d6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b09      	cmp	r3, #9
 80045dc:	f200 8097 	bhi.w	800470e <prvProcessReceivedCommands+0x166>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <prvProcessReceivedCommands+0x40>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	08004611 	.word	0x08004611
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004611 	.word	0x08004611
 80045f4:	08004685 	.word	0x08004685
 80045f8:	08004699 	.word	0x08004699
 80045fc:	080046e3 	.word	0x080046e3
 8004600:	08004611 	.word	0x08004611
 8004604:	08004611 	.word	0x08004611
 8004608:	08004685 	.word	0x08004685
 800460c:	08004699 	.word	0x08004699
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	18d1      	adds	r1, r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004630:	f7ff ff78 	bl	8004524 <prvInsertTimerInActiveList>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d069      	beq.n	800470e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004640:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05e      	beq.n	800470e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	441a      	add	r2, r3
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	2100      	movs	r1, #0
 8004660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004662:	f7ff fe21 	bl	80042a8 <xTimerGenericCommand>
 8004666:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d14f      	bne.n	800470e <prvProcessReceivedCommands+0x166>
        __asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	61bb      	str	r3, [r7, #24]
    }
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004696:	e03a      	b.n	800470e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <prvProcessReceivedCommands+0x126>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	617b      	str	r3, [r7, #20]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046dc:	f7ff ff22 	bl	8004524 <prvInsertTimerInActiveList>
                        break;
 80046e0:	e015      	b.n	800470e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80046f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046f2:	f000 fc73 	bl	8004fdc <vPortFree>
 80046f6:	e00a      	b.n	800470e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	b2da      	uxtb	r2, r3
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800470a:	e000      	b.n	800470e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800470c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <prvProcessReceivedCommands+0x188>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f107 0108 	add.w	r1, r7, #8
 8004716:	2200      	movs	r2, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f7fe fa01 	bl	8002b20 <xQueueReceive>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	f47f af45 	bne.w	80045b0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000168 	.word	0x20000168

08004734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800473a:	e048      	b.n	80047ce <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fd fee5 	bl	8002524 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02e      	beq.n	80047ce <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90e      	bls.n	80047a0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800478e:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fd fe8a 	bl	80024b2 <vListInsert>
 800479e:	e016      	b.n	80047ce <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047a0:	2300      	movs	r3, #0
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	2100      	movs	r1, #0
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fd7c 	bl	80042a8 <xTimerGenericCommand>
 80047b0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <prvSwitchTimerLists+0x9a>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	603b      	str	r3, [r7, #0]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1b1      	bne.n	800473c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <prvSwitchTimerLists+0xc4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <prvSwitchTimerLists+0xc0>)
 80047e4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80047e6:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <prvSwitchTimerLists+0xc4>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6013      	str	r3, [r2, #0]
    }
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000160 	.word	0x20000160
 80047f8:	20000164 	.word	0x20000164

080047fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004800:	f000 f9e0 	bl	8004bc4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <prvCheckForValidListAndQueue+0x54>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11d      	bne.n	8004848 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800480c:	4811      	ldr	r0, [pc, #68]	; (8004854 <prvCheckForValidListAndQueue+0x58>)
 800480e:	f7fd fdff 	bl	8002410 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004812:	4811      	ldr	r0, [pc, #68]	; (8004858 <prvCheckForValidListAndQueue+0x5c>)
 8004814:	f7fd fdfc 	bl	8002410 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004818:	4b10      	ldr	r3, [pc, #64]	; (800485c <prvCheckForValidListAndQueue+0x60>)
 800481a:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <prvCheckForValidListAndQueue+0x58>)
 800481c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <prvCheckForValidListAndQueue+0x64>)
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <prvCheckForValidListAndQueue+0x5c>)
 8004822:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004824:	2200      	movs	r2, #0
 8004826:	210c      	movs	r1, #12
 8004828:	200a      	movs	r0, #10
 800482a:	f7fd ff0d 	bl	8002648 <xQueueGenericCreate>
 800482e:	4603      	mov	r3, r0
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <prvCheckForValidListAndQueue+0x54>)
 8004832:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <prvCheckForValidListAndQueue+0x54>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <prvCheckForValidListAndQueue+0x54>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4908      	ldr	r1, [pc, #32]	; (8004864 <prvCheckForValidListAndQueue+0x68>)
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fb8c 	bl	8002f60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004848:	f000 f9ec 	bl	8004c24 <vPortExitCritical>
    }
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000168 	.word	0x20000168
 8004854:	20000138 	.word	0x20000138
 8004858:	2000014c 	.word	0x2000014c
 800485c:	20000160 	.word	0x20000160
 8004860:	20000164 	.word	0x20000164
 8004864:	08007780 	.word	0x08007780

08004868 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b04      	subs	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004880:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3b04      	subs	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b04      	subs	r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <pxPortInitialiseStack+0x64>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b14      	subs	r3, #20
 80048a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f06f 0202 	mvn.w	r2, #2
 80048b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b20      	subs	r3, #32
 80048bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	080048d1 	.word	0x080048d1

080048d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <prvTaskExitError+0x54>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d00a      	beq.n	80048fa <prvTaskExitError+0x2a>
        __asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60fb      	str	r3, [r7, #12]
    }
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <prvTaskExitError+0x28>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
    }
 800490c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800490e:	bf00      	nop
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0fc      	beq.n	8004910 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	20000010 	.word	0x20000010
	...

08004930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <pxCurrentTCBConst2>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	f380 8809 	msr	PSP, r0
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8811 	msr	BASEPRI, r0
 800494a:	4770      	bx	lr
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst2>:
 8004950:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004958:	4808      	ldr	r0, [pc, #32]	; (800497c <prvPortStartFirstTask+0x24>)
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f380 8808 	msr	MSP, r0
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8814 	msr	CONTROL, r0
 800496a:	b662      	cpsie	i
 800496c:	b661      	cpsie	f
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	df00      	svc	0
 8004978:	bf00      	nop
 800497a:	0000      	.short	0x0000
 800497c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop

08004984 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800498a:	4b46      	ldr	r3, [pc, #280]	; (8004aa4 <xPortStartScheduler+0x120>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a46      	ldr	r2, [pc, #280]	; (8004aa8 <xPortStartScheduler+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10a      	bne.n	80049aa <xPortStartScheduler+0x26>
        __asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	613b      	str	r3, [r7, #16]
    }
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049aa:	4b3e      	ldr	r3, [pc, #248]	; (8004aa4 <xPortStartScheduler+0x120>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a3f      	ldr	r2, [pc, #252]	; (8004aac <xPortStartScheduler+0x128>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d10a      	bne.n	80049ca <xPortStartScheduler+0x46>
        __asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60fb      	str	r3, [r7, #12]
    }
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <xPortStartScheduler+0x12c>)
 80049cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <xPortStartScheduler+0x130>)
 80049f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <xPortStartScheduler+0x134>)
 80049f4:	2207      	movs	r2, #7
 80049f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049f8:	e009      	b.n	8004a0e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80049fa:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <xPortStartScheduler+0x134>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <xPortStartScheduler+0x134>)
 8004a02:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d0ef      	beq.n	80049fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <xPortStartScheduler+0x134>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1c3 0307 	rsb	r3, r3, #7
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d00a      	beq.n	8004a3c <xPortStartScheduler+0xb8>
        __asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	60bb      	str	r3, [r7, #8]
    }
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <xPortStartScheduler+0x134>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <xPortStartScheduler+0x134>)
 8004a44:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <xPortStartScheduler+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <xPortStartScheduler+0x134>)
 8004a50:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <xPortStartScheduler+0x138>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a17      	ldr	r2, [pc, #92]	; (8004abc <xPortStartScheduler+0x138>)
 8004a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <xPortStartScheduler+0x138>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a14      	ldr	r2, [pc, #80]	; (8004abc <xPortStartScheduler+0x138>)
 8004a6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a72:	f000 f963 	bl	8004d3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a76:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <xPortStartScheduler+0x13c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a7c:	f000 f982 	bl	8004d84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <xPortStartScheduler+0x140>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <xPortStartScheduler+0x140>)
 8004a86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a8c:	f7ff ff64 	bl	8004958 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a90:	f7fe fec8 	bl	8003824 <vTaskSwitchContext>
    prvTaskExitError();
 8004a94:	f7ff ff1c 	bl	80048d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	e000ed00 	.word	0xe000ed00
 8004aa8:	410fc271 	.word	0x410fc271
 8004aac:	410fc270 	.word	0x410fc270
 8004ab0:	e000e400 	.word	0xe000e400
 8004ab4:	20000174 	.word	0x20000174
 8004ab8:	20000178 	.word	0x20000178
 8004abc:	e000ed20 	.word	0xe000ed20
 8004ac0:	20000010 	.word	0x20000010
 8004ac4:	e000ef34 	.word	0xe000ef34

08004ac8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ace:	4b37      	ldr	r3, [pc, #220]	; (8004bac <vInitPrioGroupValue+0xe4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a37      	ldr	r2, [pc, #220]	; (8004bb0 <vInitPrioGroupValue+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10a      	bne.n	8004aee <vInitPrioGroupValue+0x26>
        __asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	613b      	str	r3, [r7, #16]
    }
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <vInitPrioGroupValue+0xe4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <vInitPrioGroupValue+0xec>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10a      	bne.n	8004b0e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	60fb      	str	r3, [r7, #12]
    }
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <vInitPrioGroupValue+0xf0>)
 8004b10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <vInitPrioGroupValue+0xf4>)
 8004b34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b36:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b38:	2207      	movs	r2, #7
 8004b3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b3c:	e009      	b.n	8004b52 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b3e:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d0ef      	beq.n	8004b3e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b5e:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1c3 0307 	rsb	r3, r3, #7
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d00a      	beq.n	8004b80 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4a0e      	ldr	r2, [pc, #56]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b88:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <vInitPrioGroupValue+0xf8>)
 8004b94:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000ed00 	.word	0xe000ed00
 8004bb0:	410fc271 	.word	0x410fc271
 8004bb4:	410fc270 	.word	0x410fc270
 8004bb8:	e000e400 	.word	0xe000e400
 8004bbc:	20000174 	.word	0x20000174
 8004bc0:	20000178 	.word	0x20000178

08004bc4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
        __asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	607b      	str	r3, [r7, #4]
    }
 8004bdc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <vPortEnterCritical+0x58>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <vPortEnterCritical+0x58>)
 8004be6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <vPortEnterCritical+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10f      	bne.n	8004c10 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vPortEnterCritical+0x5c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <vPortEnterCritical+0x4c>
        __asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	603b      	str	r3, [r7, #0]
    }
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vPortEnterCritical+0x4a>
    }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000010 	.word	0x20000010
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <vPortExitCritical+0x50>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <vPortExitCritical+0x24>
        __asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	607b      	str	r3, [r7, #4]
    }
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <vPortExitCritical+0x50>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <vPortExitCritical+0x50>)
 8004c50:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d105      	bne.n	8004c66 <vPortExitCritical+0x42>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f383 8811 	msr	BASEPRI, r3
    }
 8004c64:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000010 	.word	0x20000010
	...

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f01e 0f10 	tst.w	lr, #16
 8004c90:	bf08      	it	eq
 8004c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ca4:	f380 8811 	msr	BASEPRI, r0
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f7fe fdb8 	bl	8003824 <vTaskSwitchContext>
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f380 8811 	msr	BASEPRI, r0
 8004cbc:	bc09      	pop	{r0, r3}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc6:	f01e 0f10 	tst.w	lr, #16
 8004cca:	bf08      	it	eq
 8004ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cd0:	f380 8809 	msr	PSP, r0
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
        __asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
    }
 8004d00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d02:	f002 f98f 	bl	8007024 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d06:	f7fe fcd1 	bl	80036ac <xTaskIncrementTick>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d10:	f002 f9e6 	bl	80070e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <SysTick_Handler+0x50>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e001      	b.n	8004d22 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d1e:	f002 f9c3 	bl	80070a8 <SEGGER_SYSVIEW_RecordExitISR>
 8004d22:	2300      	movs	r3, #0
 8004d24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f383 8811 	msr	BASEPRI, r3
    }
 8004d2c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <vPortSetupTimerInterrupt+0x34>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <vPortSetupTimerInterrupt+0x38>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <vPortSetupTimerInterrupt+0x3c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <vPortSetupTimerInterrupt+0x40>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <vPortSetupTimerInterrupt+0x44>)
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d5e:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <vPortSetupTimerInterrupt+0x34>)
 8004d60:	2207      	movs	r2, #7
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000e010 	.word	0xe000e010
 8004d74:	e000e018 	.word	0xe000e018
 8004d78:	20000000 	.word	0x20000000
 8004d7c:	10624dd3 	.word	0x10624dd3
 8004d80:	e000e014 	.word	0xe000e014

08004d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d94 <vPortEnableVFP+0x10>
 8004d88:	6801      	ldr	r1, [r0, #0]
 8004d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d8e:	6001      	str	r1, [r0, #0]
 8004d90:	4770      	bx	lr
 8004d92:	0000      	.short	0x0000
 8004d94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop

08004d9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004da2:	f3ef 8305 	mrs	r3, IPSR
 8004da6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	d914      	bls.n	8004dd8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dae:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <vPortValidateInterruptPriority+0x70>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <vPortValidateInterruptPriority+0x74>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	7afa      	ldrb	r2, [r7, #11]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d20a      	bcs.n	8004dd8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
    }
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <vPortValidateInterruptPriority+0x78>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004de0:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <vPortValidateInterruptPriority+0x7c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d90a      	bls.n	8004dfe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	603b      	str	r3, [r7, #0]
    }
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <vPortValidateInterruptPriority+0x60>
    }
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	e000e3f0 	.word	0xe000e3f0
 8004e10:	20000174 	.word	0x20000174
 8004e14:	e000ed0c 	.word	0xe000ed0c
 8004e18:	20000178 	.word	0x20000178

08004e1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e28:	f7fe fb70 	bl	800350c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e2c:	4b65      	ldr	r3, [pc, #404]	; (8004fc4 <pvPortMalloc+0x1a8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e34:	f000 f934 	bl	80050a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e38:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <pvPortMalloc+0x1ac>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 80a7 	bne.w	8004f94 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02d      	beq.n	8004ea8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d227      	bcs.n	8004ea8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d021      	beq.n	8004eae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	3308      	adds	r3, #8
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d214      	bcs.n	8004ea2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	3308      	adds	r3, #8
 8004e80:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <pvPortMalloc+0x92>
        __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	617b      	str	r3, [r7, #20]
    }
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ea6:	e002      	b.n	8004eae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e000      	b.n	8004eb0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d06e      	beq.n	8004f94 <pvPortMalloc+0x178>
 8004eb6:	4b45      	ldr	r3, [pc, #276]	; (8004fcc <pvPortMalloc+0x1b0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d869      	bhi.n	8004f94 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ec0:	4b43      	ldr	r3, [pc, #268]	; (8004fd0 <pvPortMalloc+0x1b4>)
 8004ec2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ec4:	4b42      	ldr	r3, [pc, #264]	; (8004fd0 <pvPortMalloc+0x1b4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eca:	e004      	b.n	8004ed6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d903      	bls.n	8004ee8 <pvPortMalloc+0xcc>
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f1      	bne.n	8004ecc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <pvPortMalloc+0x1a8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d050      	beq.n	8004f94 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	4413      	add	r3, r2
 8004efa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d91f      	bls.n	8004f54 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <pvPortMalloc+0x120>
        __asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	613b      	str	r3, [r7, #16]
    }
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f4e:	69b8      	ldr	r0, [r7, #24]
 8004f50:	f000 f908 	bl	8005164 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <pvPortMalloc+0x1b0>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <pvPortMalloc+0x1b0>)
 8004f60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <pvPortMalloc+0x1b0>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <pvPortMalloc+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d203      	bcs.n	8004f76 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f6e:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <pvPortMalloc+0x1b0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <pvPortMalloc+0x1b8>)
 8004f74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <pvPortMalloc+0x1ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <pvPortMalloc+0x1bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <pvPortMalloc+0x1bc>)
 8004f92:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f94:	f7fe fac8 	bl	8003528 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <pvPortMalloc+0x19c>
        __asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
    }
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20012d84 	.word	0x20012d84
 8004fc8:	20012d98 	.word	0x20012d98
 8004fcc:	20012d88 	.word	0x20012d88
 8004fd0:	20012d7c 	.word	0x20012d7c
 8004fd4:	20012d8c 	.word	0x20012d8c
 8004fd8:	20012d90 	.word	0x20012d90

08004fdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04d      	beq.n	800508a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004fee:	2308      	movs	r3, #8
 8004ff0:	425b      	negs	r3, r3
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <vPortFree+0xb8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <vPortFree+0x44>
        __asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	60fb      	str	r3, [r7, #12]
    }
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <vPortFree+0x62>
        __asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60bb      	str	r3, [r7, #8]
    }
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	4b14      	ldr	r3, [pc, #80]	; (8005094 <vPortFree+0xb8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11a      	bne.n	800508a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <vPortFree+0xb8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	43db      	mvns	r3, r3
 800505e:	401a      	ands	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005064:	f7fe fa52 	bl	800350c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vPortFree+0xbc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4413      	add	r3, r2
 8005072:	4a09      	ldr	r2, [pc, #36]	; (8005098 <vPortFree+0xbc>)
 8005074:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005076:	6938      	ldr	r0, [r7, #16]
 8005078:	f000 f874 	bl	8005164 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <vPortFree+0xc0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	4a06      	ldr	r2, [pc, #24]	; (800509c <vPortFree+0xc0>)
 8005084:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005086:	f7fe fa4f 	bl	8003528 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20012d98 	.word	0x20012d98
 8005098:	20012d88 	.word	0x20012d88
 800509c:	20012d94 	.word	0x20012d94

080050a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <prvHeapInit+0xac>)
 80050ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3307      	adds	r3, #7
 80050be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0307 	bic.w	r3, r3, #7
 80050c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	4a1f      	ldr	r2, [pc, #124]	; (800514c <prvHeapInit+0xac>)
 80050d0:	4413      	add	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <prvHeapInit+0xb0>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050de:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <prvHeapInit+0xb0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	4413      	add	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80050ec:	2208      	movs	r2, #8
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0307 	bic.w	r3, r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a15      	ldr	r2, [pc, #84]	; (8005154 <prvHeapInit+0xb4>)
 8005100:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <prvHeapInit+0xb4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <prvHeapInit+0xb4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	1ad2      	subs	r2, r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <prvHeapInit+0xb4>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <prvHeapInit+0xb8>)
 800512e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <prvHeapInit+0xbc>)
 8005136:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <prvHeapInit+0xc0>)
 800513a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	2000017c 	.word	0x2000017c
 8005150:	20012d7c 	.word	0x20012d7c
 8005154:	20012d84 	.word	0x20012d84
 8005158:	20012d8c 	.word	0x20012d8c
 800515c:	20012d88 	.word	0x20012d88
 8005160:	20012d98 	.word	0x20012d98

08005164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800516c:	4b28      	ldr	r3, [pc, #160]	; (8005210 <prvInsertBlockIntoFreeList+0xac>)
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e002      	b.n	8005178 <prvInsertBlockIntoFreeList+0x14>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d8f7      	bhi.n	8005172 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4413      	add	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d108      	bne.n	80051a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d118      	bne.n	80051ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <prvInsertBlockIntoFreeList+0xb0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d00d      	beq.n	80051e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e008      	b.n	80051f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <prvInsertBlockIntoFreeList+0xb0>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e003      	b.n	80051f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d002      	beq.n	8005202 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20012d7c 	.word	0x20012d7c
 8005214:	20012d84 	.word	0x20012d84

08005218 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800521c:	4803      	ldr	r0, [pc, #12]	; (800522c <_cbSendSystemDesc+0x14>)
 800521e:	f001 feab 	bl	8006f78 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005222:	4803      	ldr	r0, [pc, #12]	; (8005230 <_cbSendSystemDesc+0x18>)
 8005224:	f001 fea8 	bl	8006f78 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005228:	bf00      	nop
 800522a:	bd80      	pop	{r7, pc}
 800522c:	08007788 	.word	0x08007788
 8005230:	080077cc 	.word	0x080077cc

08005234 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <SEGGER_SYSVIEW_Conf+0x20>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <SEGGER_SYSVIEW_Conf+0x20>)
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <SEGGER_SYSVIEW_Conf+0x24>)
 8005242:	4a06      	ldr	r2, [pc, #24]	; (800525c <SEGGER_SYSVIEW_Conf+0x28>)
 8005244:	f001 f966 	bl	8006514 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005248:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800524c:	f001 f9a8 	bl	80065a0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000000 	.word	0x20000000
 8005258:	08005219 	.word	0x08005219
 800525c:	0800786c 	.word	0x0800786c

08005260 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	b085      	sub	sp, #20
 8005264:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	e033      	b.n	80052d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800526c:	491e      	ldr	r1, [pc, #120]	; (80052e8 <_cbSendTaskList+0x88>)
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	491a      	ldr	r1, [pc, #104]	; (80052e8 <_cbSendTaskList+0x88>)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3304      	adds	r3, #4
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	4c16      	ldr	r4, [pc, #88]	; (80052e8 <_cbSendTaskList+0x88>)
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4423      	add	r3, r4
 800529c:	3308      	adds	r3, #8
 800529e:	681c      	ldr	r4, [r3, #0]
 80052a0:	4d11      	ldr	r5, [pc, #68]	; (80052e8 <_cbSendTaskList+0x88>)
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	442b      	add	r3, r5
 80052ae:	330c      	adds	r3, #12
 80052b0:	681d      	ldr	r5, [r3, #0]
 80052b2:	4e0d      	ldr	r6, [pc, #52]	; (80052e8 <_cbSendTaskList+0x88>)
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4433      	add	r3, r6
 80052c0:	3310      	adds	r3, #16
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	462b      	mov	r3, r5
 80052c8:	4622      	mov	r2, r4
 80052ca:	f000 f971 	bl	80055b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3301      	adds	r3, #1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <_cbSendTaskList+0x8c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3c6      	bcc.n	800526c <_cbSendTaskList+0xc>
  }
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e8:	20012d9c 	.word	0x20012d9c
 80052ec:	20012e3c 	.word	0x20012e3c

080052f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052f0:	b5b0      	push	{r4, r5, r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80052f6:	f7fe f9c7 	bl	8003688 <xTaskGetTickCountFromISR>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	f04f 0400 	mov.w	r4, #0
 8005312:	f04f 0500 	mov.w	r5, #0
 8005316:	015d      	lsls	r5, r3, #5
 8005318:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800531c:	0154      	lsls	r4, r2, #5
 800531e:	4622      	mov	r2, r4
 8005320:	462b      	mov	r3, r5
 8005322:	1a12      	subs	r2, r2, r0
 8005324:	eb63 0301 	sbc.w	r3, r3, r1
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	f04f 0500 	mov.w	r5, #0
 8005330:	009d      	lsls	r5, r3, #2
 8005332:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8005336:	0094      	lsls	r4, r2, #2
 8005338:	4622      	mov	r2, r4
 800533a:	462b      	mov	r3, r5
 800533c:	1812      	adds	r2, r2, r0
 800533e:	eb41 0303 	adc.w	r3, r1, r3
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	00d9      	lsls	r1, r3, #3
 800534c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005350:	00d0      	lsls	r0, r2, #3
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800535a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bdb0      	pop	{r4, r5, r7, pc}

08005368 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005376:	2205      	movs	r2, #5
 8005378:	492b      	ldr	r1, [pc, #172]	; (8005428 <SYSVIEW_AddTask+0xc0>)
 800537a:	68b8      	ldr	r0, [r7, #8]
 800537c:	f002 f98e 	bl	800769c <memcmp>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d04b      	beq.n	800541e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005386:	4b29      	ldr	r3, [pc, #164]	; (800542c <SYSVIEW_AddTask+0xc4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b07      	cmp	r3, #7
 800538c:	d903      	bls.n	8005396 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800538e:	4828      	ldr	r0, [pc, #160]	; (8005430 <SYSVIEW_AddTask+0xc8>)
 8005390:	f002 f904 	bl	800759c <SEGGER_SYSVIEW_Warn>
    return;
 8005394:	e044      	b.n	8005420 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005396:	4b25      	ldr	r3, [pc, #148]	; (800542c <SYSVIEW_AddTask+0xc4>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4926      	ldr	r1, [pc, #152]	; (8005434 <SYSVIEW_AddTask+0xcc>)
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <SYSVIEW_AddTask+0xc4>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4921      	ldr	r1, [pc, #132]	; (8005434 <SYSVIEW_AddTask+0xcc>)
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3304      	adds	r3, #4
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80053c0:	4b1a      	ldr	r3, [pc, #104]	; (800542c <SYSVIEW_AddTask+0xc4>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	491b      	ldr	r1, [pc, #108]	; (8005434 <SYSVIEW_AddTask+0xcc>)
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3308      	adds	r3, #8
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <SYSVIEW_AddTask+0xc4>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4916      	ldr	r1, [pc, #88]	; (8005434 <SYSVIEW_AddTask+0xcc>)
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	330c      	adds	r3, #12
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <SYSVIEW_AddTask+0xc4>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4910      	ldr	r1, [pc, #64]	; (8005434 <SYSVIEW_AddTask+0xcc>)
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3310      	adds	r3, #16
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <SYSVIEW_AddTask+0xc4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a08      	ldr	r2, [pc, #32]	; (800542c <SYSVIEW_AddTask+0xc4>)
 800540a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f8ca 	bl	80055b0 <SYSVIEW_SendTaskInfo>
 800541c:	e000      	b.n	8005420 <SYSVIEW_AddTask+0xb8>
    return;
 800541e:	bf00      	nop

}
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	080077dc 	.word	0x080077dc
 800542c:	20012e3c 	.word	0x20012e3c
 8005430:	080077e4 	.word	0x080077e4
 8005434:	20012d9c 	.word	0x20012d9c

08005438 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005440:	4b59      	ldr	r3, [pc, #356]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80ab 	beq.w	80055a0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e00d      	b.n	800546c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005450:	4956      	ldr	r1, [pc, #344]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d008      	beq.n	8005478 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	429a      	cmp	r2, r3
 8005474:	d3ec      	bcc.n	8005450 <SYSVIEW_DeleteTask+0x18>
 8005476:	e000      	b.n	800547a <SYSVIEW_DeleteTask+0x42>
      break;
 8005478:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800547a:	4b4b      	ldr	r3, [pc, #300]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3b01      	subs	r3, #1
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d111      	bne.n	80054aa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4a46      	ldr	r2, [pc, #280]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005492:	4413      	add	r3, r2
 8005494:	2214      	movs	r2, #20
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f002 f91b 	bl	80076d4 <memset>
    _NumTasks--;
 800549e:	4b42      	ldr	r3, [pc, #264]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	4a40      	ldr	r2, [pc, #256]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e07b      	b.n	80055a2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80054aa:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d276      	bcs.n	80055a2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80054b4:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	493c      	ldr	r1, [pc, #240]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	6819      	ldr	r1, [r3, #0]
 80054c8:	4838      	ldr	r0, [pc, #224]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4403      	add	r3, r0
 80054d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80054d8:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	1e5a      	subs	r2, r3, #1
 80054de:	4933      	ldr	r1, [pc, #204]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	3304      	adds	r3, #4
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	482f      	ldr	r0, [pc, #188]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4403      	add	r3, r0
 80054fc:	3304      	adds	r3, #4
 80054fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005500:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	4929      	ldr	r1, [pc, #164]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	3308      	adds	r3, #8
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	4825      	ldr	r0, [pc, #148]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4403      	add	r3, r0
 8005524:	3308      	adds	r3, #8
 8005526:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005528:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	491f      	ldr	r1, [pc, #124]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	330c      	adds	r3, #12
 800553c:	6819      	ldr	r1, [r3, #0]
 800553e:	481b      	ldr	r0, [pc, #108]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4403      	add	r3, r0
 800554c:	330c      	adds	r3, #12
 800554e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	4915      	ldr	r1, [pc, #84]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	3310      	adds	r3, #16
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	4811      	ldr	r0, [pc, #68]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4403      	add	r3, r0
 8005574:	3310      	adds	r3, #16
 8005576:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4a09      	ldr	r2, [pc, #36]	; (80055ac <SYSVIEW_DeleteTask+0x174>)
 8005588:	4413      	add	r3, r2
 800558a:	2214      	movs	r2, #20
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f002 f8a0 	bl	80076d4 <memset>
    _NumTasks--;
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3b01      	subs	r3, #1
 800559a:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <SYSVIEW_DeleteTask+0x170>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e000      	b.n	80055a2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80055a0:	bf00      	nop
  }
}
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20012e3c 	.word	0x20012e3c
 80055ac:	20012d9c 	.word	0x20012d9c

080055b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	2214      	movs	r2, #20
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 f884 	bl	80076d4 <memset>
  TaskInfo.TaskID     = TaskID;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fbcf 	bl	8006d88 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80055ea:	bf00      	nop
 80055ec:	3728      	adds	r7, #40	; 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <_DoInit+0x98>)
 80055fc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2203      	movs	r2, #3
 8005602:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a20      	ldr	r2, [pc, #128]	; (8005690 <_DoInit+0x9c>)
 800560e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a20      	ldr	r2, [pc, #128]	; (8005694 <_DoInit+0xa0>)
 8005614:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800561c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <_DoInit+0x9c>)
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a17      	ldr	r2, [pc, #92]	; (8005698 <_DoInit+0xa4>)
 800563a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2210      	movs	r2, #16
 8005640:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3307      	adds	r3, #7
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <_DoInit+0xa8>)
 800565a:	6810      	ldr	r0, [r2, #0]
 800565c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800565e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a0e      	ldr	r2, [pc, #56]	; (80056a0 <_DoInit+0xac>)
 8005666:	6810      	ldr	r0, [r2, #0]
 8005668:	6018      	str	r0, [r3, #0]
 800566a:	8891      	ldrh	r1, [r2, #4]
 800566c:	7992      	ldrb	r2, [r2, #6]
 800566e:	8099      	strh	r1, [r3, #4]
 8005670:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005672:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800567c:	f3bf 8f5f 	dmb	sy
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20014404 	.word	0x20014404
 8005690:	08007834 	.word	0x08007834
 8005694:	20012e40 	.word	0x20012e40
 8005698:	20013240 	.word	0x20013240
 800569c:	08007840 	.word	0x08007840
 80056a0:	08007844 	.word	0x08007844

080056a4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80056b0:	4b3e      	ldr	r3, [pc, #248]	; (80057ac <SEGGER_RTT_ReadNoLock+0x108>)
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <SEGGER_RTT_ReadNoLock+0x1e>
 80056be:	f7ff ff99 	bl	80055f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	3360      	adds	r3, #96	; 0x60
 80056ce:	4a37      	ldr	r2, [pc, #220]	; (80057ac <SEGGER_RTT_ReadNoLock+0x108>)
 80056d0:	4413      	add	r3, r2
 80056d2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056e4:	2300      	movs	r3, #0
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d92b      	bls.n	8005748 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4293      	cmp	r3, r2
 8005700:	bf28      	it	cs
 8005702:	4613      	movcs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	4413      	add	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005716:	f001 ffcf 	bl	80076b8 <memcpy>
    NumBytesRead += NumBytesRem;
 800571a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	429a      	cmp	r2, r3
 8005742:	d101      	bne.n	8005748 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005744:	2300      	movs	r3, #0
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4293      	cmp	r3, r2
 8005756:	bf28      	it	cs
 8005758:	4613      	movcs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d019      	beq.n	8005796 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	4413      	add	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	6939      	ldr	r1, [r7, #16]
 8005770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005772:	f001 ffa1 	bl	80076b8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4413      	add	r3, r2
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800578e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3730      	adds	r7, #48	; 0x30
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	20014404 	.word	0x20014404

080057b0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80057be:	4b3d      	ldr	r3, [pc, #244]	; (80058b4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80057cc:	f7ff ff12 	bl	80055f4 <_DoInit>
  SEGGER_RTT_LOCK();
 80057d0:	f3ef 8311 	mrs	r3, BASEPRI
 80057d4:	f04f 0120 	mov.w	r1, #32
 80057d8:	f381 8811 	msr	BASEPRI, r1
 80057dc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057de:	4b35      	ldr	r3, [pc, #212]	; (80058b4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80057e0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80057e6:	6939      	ldr	r1, [r7, #16]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3304      	adds	r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	3301      	adds	r3, #1
 8005802:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	429a      	cmp	r2, r3
 800580c:	dbeb      	blt.n	80057e6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800580e:	e000      	b.n	8005812 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005810:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	429a      	cmp	r2, r3
 800581a:	da3f      	bge.n	800589c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800581c:	6939      	ldr	r1, [r7, #16]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	4613      	mov	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	440b      	add	r3, r1
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005830:	6939      	ldr	r1, [r7, #16]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	440b      	add	r3, r1
 8005840:	3304      	adds	r3, #4
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	3320      	adds	r3, #32
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800585a:	6939      	ldr	r1, [r7, #16]
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	3328      	adds	r3, #40	; 0x28
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800586e:	6939      	ldr	r1, [r7, #16]
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	440b      	add	r3, r1
 800587c:	3324      	adds	r3, #36	; 0x24
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005882:	6939      	ldr	r1, [r7, #16]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	440b      	add	r3, r1
 8005890:	332c      	adds	r3, #44	; 0x2c
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005896:	f3bf 8f5f 	dmb	sy
 800589a:	e002      	b.n	80058a2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80058a8:	69fb      	ldr	r3, [r7, #28]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20014404 	.word	0x20014404

080058b8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80058d4:	f7ff fe8e 	bl	80055f4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058d8:	4b2e      	ldr	r3, [pc, #184]	; (8005994 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80058da:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	461a      	mov	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d24d      	bcs.n	8005984 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80058e8:	f3ef 8311 	mrs	r3, BASEPRI
 80058ec:	f04f 0120 	mov.w	r1, #32
 80058f0:	f381 8811 	msr	BASEPRI, r1
 80058f4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d031      	beq.n	8005960 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	440b      	add	r3, r1
 800590a:	3360      	adds	r3, #96	; 0x60
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005910:	6979      	ldr	r1, [r7, #20]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4613      	mov	r3, r2
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4413      	add	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	3364      	adds	r3, #100	; 0x64
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	3368      	adds	r3, #104	; 0x68
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005938:	6979      	ldr	r1, [r7, #20]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	440b      	add	r3, r1
 8005946:	3370      	adds	r3, #112	; 0x70
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800594c:	6979      	ldr	r1, [r7, #20]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	440b      	add	r3, r1
 800595a:	336c      	adds	r3, #108	; 0x6c
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005960:	6979      	ldr	r1, [r7, #20]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	3374      	adds	r3, #116	; 0x74
 8005970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005972:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005974:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e002      	b.n	800598a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20014404 	.word	0x20014404

08005998 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80059a8:	e002      	b.n	80059b0 <_EncodeStr+0x18>
    Len++;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3301      	adds	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f6      	bne.n	80059aa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d901      	bls.n	80059c8 <_EncodeStr+0x30>
    Len = Limit;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2bfe      	cmp	r3, #254	; 0xfe
 80059cc:	d806      	bhi.n	80059dc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	60fa      	str	r2, [r7, #12]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e011      	b.n	8005a00 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	60fa      	str	r2, [r7, #12]
 80059e2:	22ff      	movs	r2, #255	; 0xff
 80059e4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	60fa      	str	r2, [r7, #12]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	0a19      	lsrs	r1, r3, #8
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	60fa      	str	r2, [r7, #12]
 80059fc:	b2ca      	uxtb	r2, r1
 80059fe:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005a04:	e00a      	b.n	8005a1c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	1c53      	adds	r3, r2, #1
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	60f9      	str	r1, [r7, #12]
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	701a      	strb	r2, [r3, #0]
    n++;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d3f0      	bcc.n	8005a06 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <_HandleIncomingPacket+0xe0>)
 8005a54:	7e1b      	ldrb	r3, [r3, #24]
 8005a56:	4618      	mov	r0, r3
 8005a58:	1cfb      	adds	r3, r7, #3
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f7ff fe21 	bl	80056a4 <SEGGER_RTT_ReadNoLock>
 8005a62:	4603      	mov	r3, r0
 8005a64:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	dd54      	ble.n	8005b16 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d032      	beq.n	8005ad8 <_HandleIncomingPacket+0x8c>
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	dc42      	bgt.n	8005afc <_HandleIncomingPacket+0xb0>
 8005a76:	2b07      	cmp	r3, #7
 8005a78:	dc16      	bgt.n	8005aa8 <_HandleIncomingPacket+0x5c>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd3e      	ble.n	8005afc <_HandleIncomingPacket+0xb0>
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d83b      	bhi.n	8005afc <_HandleIncomingPacket+0xb0>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <_HandleIncomingPacket+0x40>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005aaf 	.word	0x08005aaf
 8005a90:	08005ab5 	.word	0x08005ab5
 8005a94:	08005abb 	.word	0x08005abb
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac7 	.word	0x08005ac7
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aaa:	d036      	beq.n	8005b1a <_HandleIncomingPacket+0xce>
 8005aac:	e026      	b.n	8005afc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005aae:	f000 fff1 	bl	8006a94 <SEGGER_SYSVIEW_Start>
      break;
 8005ab2:	e037      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ab4:	f001 f8a8 	bl	8006c08 <SEGGER_SYSVIEW_Stop>
      break;
 8005ab8:	e034      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005aba:	f001 fa81 	bl	8006fc0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005abe:	e031      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ac0:	f001 fa46 	bl	8006f50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ac4:	e02e      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ac6:	f001 f8c5 	bl	8006c54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005aca:	e02b      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005acc:	f001 fd14 	bl	80074f8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005ad0:	e028      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005ad2:	f001 fcf3 	bl	80074bc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ad6:	e025      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <_HandleIncomingPacket+0xe0>)
 8005ada:	7e1b      	ldrb	r3, [r3, #24]
 8005adc:	4618      	mov	r0, r3
 8005ade:	1cfb      	adds	r3, r7, #3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f7ff fdde 	bl	80056a4 <SEGGER_RTT_ReadNoLock>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd15      	ble.n	8005b1e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fc61 	bl	80073bc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005afa:	e010      	b.n	8005b1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da0e      	bge.n	8005b22 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <_HandleIncomingPacket+0xe0>)
 8005b06:	7e1b      	ldrb	r3, [r3, #24]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	1cfb      	adds	r3, r7, #3
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f7ff fdc8 	bl	80056a4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005b14:	e005      	b.n	8005b22 <_HandleIncomingPacket+0xd6>
    }
  }
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <_HandleIncomingPacket+0xd8>
      break;
 8005b22:	bf00      	nop
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20014258 	.word	0x20014258

08005b30 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08c      	sub	sp, #48	; 0x30
 8005b34:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b36:	2301      	movs	r3, #1
 8005b38:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b3a:	1d3b      	adds	r3, r7, #4
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b44:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4a:	e00b      	b.n	8005b64 <_TrySendOverflowPacket+0x34>
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	1c59      	adds	r1, r3, #1
 8005b54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	09db      	lsrs	r3, r3, #7
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	2b7f      	cmp	r3, #127	; 0x7f
 8005b68:	d8f0      	bhi.n	8005b4c <_TrySendOverflowPacket+0x1c>
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b7a:	4b25      	ldr	r3, [pc, #148]	; (8005c10 <_TrySendOverflowPacket+0xe0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b80:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	e00b      	b.n	8005bac <_TrySendOverflowPacket+0x7c>
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	09db      	lsrs	r3, r3, #7
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb0:	d8f0      	bhi.n	8005b94 <_TrySendOverflowPacket+0x64>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f7fa fb0c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005be8:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	e004      	b.n	8005c00 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	4a03      	ldr	r2, [pc, #12]	; (8005c0c <_TrySendOverflowPacket+0xdc>)
 8005bfe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005c00:	693b      	ldr	r3, [r7, #16]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3730      	adds	r7, #48	; 0x30
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20014258 	.word	0x20014258
 8005c10:	e0001004 	.word	0xe0001004

08005c14 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005c20:	4b6c      	ldr	r3, [pc, #432]	; (8005dd4 <_SendPacket+0x1c0>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d010      	beq.n	8005c4a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c28:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <_SendPacket+0x1c0>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80a3 	beq.w	8005d78 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c32:	4b68      	ldr	r3, [pc, #416]	; (8005dd4 <_SendPacket+0x1c0>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d109      	bne.n	8005c4e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c3a:	f7ff ff79 	bl	8005b30 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c3e:	4b65      	ldr	r3, [pc, #404]	; (8005dd4 <_SendPacket+0x1c0>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	f040 809a 	bne.w	8005d7c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005c48:	e001      	b.n	8005c4e <_SendPacket+0x3a>
    goto Send;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <_SendPacket+0x3c>
Send:
 8005c4e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b1f      	cmp	r3, #31
 8005c54:	d809      	bhi.n	8005c6a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c56:	4b5f      	ldr	r3, [pc, #380]	; (8005dd4 <_SendPacket+0x1c0>)
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 808b 	bne.w	8005d80 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b17      	cmp	r3, #23
 8005c6e:	d807      	bhi.n	8005c80 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e03d      	b.n	8005cfc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8c:	d912      	bls.n	8005cb4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	09da      	lsrs	r2, r3, #7
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	3a01      	subs	r2, #1
 8005ca6:	60fa      	str	r2, [r7, #12]
 8005ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e006      	b.n	8005cc2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d912      	bls.n	8005cee <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	09da      	lsrs	r2, r3, #7
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	60fa      	str	r2, [r7, #12]
 8005ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e006      	b.n	8005cfc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cfc:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <_SendPacket+0x1c4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d02:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	e00b      	b.n	8005d2e <_SendPacket+0x11a>
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	09db      	lsrs	r3, r3, #7
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b7f      	cmp	r3, #127	; 0x7f
 8005d32:	d8f0      	bhi.n	8005d16 <_SendPacket+0x102>
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	627a      	str	r2, [r7, #36]	; 0x24
 8005d3a:	6a3a      	ldr	r2, [r7, #32]
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f7fa fa4c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d62:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	60d3      	str	r3, [r2, #12]
 8005d68:	e00b      	b.n	8005d82 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e004      	b.n	8005d82 <_SendPacket+0x16e>
    goto SendDone;
 8005d78:	bf00      	nop
 8005d7a:	e002      	b.n	8005d82 <_SendPacket+0x16e>
      goto SendDone;
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <_SendPacket+0x16e>
      goto SendDone;
 8005d80:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d84:	7e1b      	ldrb	r3, [r3, #24]
 8005d86:	4619      	mov	r1, r3
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <_SendPacket+0x1c8>)
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	440b      	add	r3, r1
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	336c      	adds	r3, #108	; 0x6c
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <_SendPacket+0x1c0>)
 8005d9a:	7e1b      	ldrb	r3, [r3, #24]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	490f      	ldr	r1, [pc, #60]	; (8005ddc <_SendPacket+0x1c8>)
 8005da0:	4603      	mov	r3, r0
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4403      	add	r3, r0
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	3370      	adds	r3, #112	; 0x70
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d00b      	beq.n	8005dca <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <_SendPacket+0x1c0>)
 8005db4:	789b      	ldrb	r3, [r3, #2]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <_SendPacket+0x1c0>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005dc0:	f7ff fe44 	bl	8005a4c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <_SendPacket+0x1c0>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005dca:	bf00      	nop
 8005dcc:	3728      	adds	r7, #40	; 0x28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20014258 	.word	0x20014258
 8005dd8:	e0001004 	.word	0xe0001004
 8005ddc:	20014404 	.word	0x20014404

08005de0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	3301      	adds	r3, #1
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d80a      	bhi.n	8005e10 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6051      	str	r1, [r2, #4]
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b80      	cmp	r3, #128	; 0x80
 8005e16:	d15a      	bne.n	8005ece <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	e00b      	b.n	8005e52 <_StoreChar+0x72>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	6279      	str	r1, [r7, #36]	; 0x24
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	623b      	str	r3, [r7, #32]
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <_StoreChar+0x5a>
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	e00b      	b.n	8005e8a <_StoreChar+0xaa>
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	1c59      	adds	r1, r3, #1
 8005e7a:	61f9      	str	r1, [r7, #28]
 8005e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	09db      	lsrs	r3, r3, #7
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8e:	d8f0      	bhi.n	8005e72 <_StoreChar+0x92>
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	61fa      	str	r2, [r7, #28]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	221a      	movs	r2, #26
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff feb3 	bl	8005c14 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fdbd 	bl	8005a32 <_PreparePacket>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	611a      	str	r2, [r3, #16]
  }
}
 8005ece:	bf00      	nop
 8005ed0:	3728      	adds	r7, #40	; 0x28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005eea:	2301      	movs	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ef2:	e007      	b.n	8005f04 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	623b      	str	r3, [r7, #32]
    Width++;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f04:	6a3a      	ldr	r2, [r7, #32]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d2f3      	bcs.n	8005ef4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d901      	bls.n	8005f18 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11f      	bne.n	8005f62 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01c      	beq.n	8005f62 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <_PrintUnsigned+0x66>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <_PrintUnsigned+0x66>
        c = '0';
 8005f38:	2330      	movs	r3, #48	; 0x30
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e001      	b.n	8005f42 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005f3e:	2320      	movs	r3, #32
 8005f40:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f42:	e007      	b.n	8005f54 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	3b01      	subs	r3, #1
 8005f48:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005f4a:	7efb      	ldrb	r3, [r7, #27]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff ff46 	bl	8005de0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <_PrintUnsigned+0x8a>
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d3f0      	bcc.n	8005f44 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d903      	bls.n	8005f70 <_PrintUnsigned+0x98>
      NumDigits--;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	e009      	b.n	8005f84 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d200      	bcs.n	8005f84 <_PrintUnsigned+0xac>
        break;
 8005f82:	e005      	b.n	8005f90 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f8e:	e7e8      	b.n	8005f62 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <_PrintUnsigned+0x128>)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff ff14 	bl	8005de0 <_StoreChar>
    Digit /= Base;
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e3      	bne.n	8005f90 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fd8:	e006      	b.n	8005fe8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005fe0:	2120      	movs	r1, #32
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fefc 	bl	8005de0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <_PrintUnsigned+0x11e>
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d3f1      	bcc.n	8005fda <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	3728      	adds	r7, #40	; 0x28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08007880 	.word	0x08007880

08006004 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	bfb8      	it	lt
 8006018:	425b      	neglt	r3, r3
 800601a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800601c:	2301      	movs	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006020:	e007      	b.n	8006032 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	fb92 f3f3 	sdiv	r3, r2, r3
 800602a:	613b      	str	r3, [r7, #16]
    Width++;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	daf3      	bge.n	8006022 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	429a      	cmp	r2, r3
 8006040:	d901      	bls.n	8006046 <_PrintInt+0x42>
    Width = NumDigits;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <_PrintInt+0x5e>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	db04      	blt.n	800605c <_PrintInt+0x58>
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <_PrintInt+0x5e>
    FieldWidth--;
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	3b01      	subs	r3, #1
 8006060:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <_PrintInt+0x6e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <_PrintInt+0x9c>
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d111      	bne.n	80060a0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006082:	e006      	b.n	8006092 <_PrintInt+0x8e>
        FieldWidth--;
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	3b01      	subs	r3, #1
 8006088:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800608a:	2120      	movs	r1, #32
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fea7 	bl	8005de0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <_PrintInt+0x9c>
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	429a      	cmp	r2, r3
 800609e:	d3f1      	bcc.n	8006084 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da07      	bge.n	80060b6 <_PrintInt+0xb2>
    v = -v;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	425b      	negs	r3, r3
 80060aa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80060ac:	212d      	movs	r1, #45	; 0x2d
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fe96 	bl	8005de0 <_StoreChar>
 80060b4:	e008      	b.n	80060c8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80060c0:	212b      	movs	r1, #43	; 0x2b
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff fe8c 	bl	8005de0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d019      	beq.n	8006106 <_PrintInt+0x102>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d114      	bne.n	8006106 <_PrintInt+0x102>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d111      	bne.n	8006106 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00e      	beq.n	8006106 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060e8:	e006      	b.n	80060f8 <_PrintInt+0xf4>
        FieldWidth--;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80060f0:	2130      	movs	r1, #48	; 0x30
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fe74 	bl	8005de0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <_PrintInt+0x102>
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	429a      	cmp	r2, r3
 8006104:	d3f1      	bcc.n	80060ea <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff fedf 	bl	8005ed8 <_PrintUnsigned>
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b098      	sub	sp, #96	; 0x60
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006130:	f3ef 8311 	mrs	r3, BASEPRI
 8006134:	f04f 0120 	mov.w	r1, #32
 8006138:	f381 8811 	msr	BASEPRI, r1
 800613c:	633b      	str	r3, [r7, #48]	; 0x30
 800613e:	48b7      	ldr	r0, [pc, #732]	; (800641c <_VPrintTarget+0x2f8>)
 8006140:	f7ff fc77 	bl	8005a32 <_PreparePacket>
 8006144:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006146:	4bb5      	ldr	r3, [pc, #724]	; (800641c <_VPrintTarget+0x2f8>)
 8006148:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3301      	adds	r3, #1
 8006156:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800616a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8183 	beq.w	800647a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006178:	2b25      	cmp	r3, #37	; 0x25
 800617a:	f040 8170 	bne.w	800645e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800617e:	2300      	movs	r3, #0
 8006180:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800618e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006192:	3b23      	subs	r3, #35	; 0x23
 8006194:	2b0d      	cmp	r3, #13
 8006196:	d83f      	bhi.n	8006218 <_VPrintTarget+0xf4>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <_VPrintTarget+0x7c>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006219 	.word	0x08006219
 80061a8:	08006219 	.word	0x08006219
 80061ac:	08006219 	.word	0x08006219
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006219 	.word	0x08006219
 80061b8:	08006219 	.word	0x08006219
 80061bc:	08006219 	.word	0x08006219
 80061c0:	080061f9 	.word	0x080061f9
 80061c4:	08006219 	.word	0x08006219
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	08006219 	.word	0x08006219
 80061d0:	08006219 	.word	0x08006219
 80061d4:	080061e9 	.word	0x080061e9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80061d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e01a      	b.n	800621e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ea:	f043 0302 	orr.w	r3, r3, #2
 80061ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e012      	b.n	800621e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80061f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fa:	f043 0304 	orr.w	r3, r3, #4
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e00a      	b.n	800621e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620a:	f043 0308 	orr.w	r3, r3, #8
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e002      	b.n	800621e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006218:	2300      	movs	r3, #0
 800621a:	653b      	str	r3, [r7, #80]	; 0x50
 800621c:	bf00      	nop
        }
      } while (v);
 800621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1b0      	bne.n	8006186 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006224:	2300      	movs	r3, #0
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006234:	2b2f      	cmp	r3, #47	; 0x2f
 8006236:	d912      	bls.n	800625e <_VPrintTarget+0x13a>
 8006238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800623c:	2b39      	cmp	r3, #57	; 0x39
 800623e:	d80e      	bhi.n	800625e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	461a      	mov	r2, r3
 8006252:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006256:	4413      	add	r3, r2
 8006258:	3b30      	subs	r3, #48	; 0x30
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800625c:	e7e4      	b.n	8006228 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800625e:	2300      	movs	r3, #0
 8006260:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800626a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800626e:	2b2e      	cmp	r3, #46	; 0x2e
 8006270:	d11d      	bne.n	80062ae <_VPrintTarget+0x18a>
        sFormat++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006284:	2b2f      	cmp	r3, #47	; 0x2f
 8006286:	d912      	bls.n	80062ae <_VPrintTarget+0x18a>
 8006288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800628c:	2b39      	cmp	r3, #57	; 0x39
 800628e:	d80e      	bhi.n	80062ae <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3301      	adds	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	461a      	mov	r2, r3
 80062a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062a6:	4413      	add	r3, r2
 80062a8:	3b30      	subs	r3, #48	; 0x30
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80062ac:	e7e4      	b.n	8006278 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80062b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ba:	2b6c      	cmp	r3, #108	; 0x6c
 80062bc:	d003      	beq.n	80062c6 <_VPrintTarget+0x1a2>
 80062be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062c2:	2b68      	cmp	r3, #104	; 0x68
 80062c4:	d107      	bne.n	80062d6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80062d4:	e7ef      	b.n	80062b6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80062d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062da:	2b25      	cmp	r3, #37	; 0x25
 80062dc:	f000 80b3 	beq.w	8006446 <_VPrintTarget+0x322>
 80062e0:	2b25      	cmp	r3, #37	; 0x25
 80062e2:	f2c0 80b7 	blt.w	8006454 <_VPrintTarget+0x330>
 80062e6:	2b78      	cmp	r3, #120	; 0x78
 80062e8:	f300 80b4 	bgt.w	8006454 <_VPrintTarget+0x330>
 80062ec:	2b58      	cmp	r3, #88	; 0x58
 80062ee:	f2c0 80b1 	blt.w	8006454 <_VPrintTarget+0x330>
 80062f2:	3b58      	subs	r3, #88	; 0x58
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	f200 80ad 	bhi.w	8006454 <_VPrintTarget+0x330>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <_VPrintTarget+0x1dc>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	080063f7 	.word	0x080063f7
 8006304:	08006455 	.word	0x08006455
 8006308:	08006455 	.word	0x08006455
 800630c:	08006455 	.word	0x08006455
 8006310:	08006455 	.word	0x08006455
 8006314:	08006455 	.word	0x08006455
 8006318:	08006455 	.word	0x08006455
 800631c:	08006455 	.word	0x08006455
 8006320:	08006455 	.word	0x08006455
 8006324:	08006455 	.word	0x08006455
 8006328:	08006455 	.word	0x08006455
 800632c:	08006385 	.word	0x08006385
 8006330:	080063ab 	.word	0x080063ab
 8006334:	08006455 	.word	0x08006455
 8006338:	08006455 	.word	0x08006455
 800633c:	08006455 	.word	0x08006455
 8006340:	08006455 	.word	0x08006455
 8006344:	08006455 	.word	0x08006455
 8006348:	08006455 	.word	0x08006455
 800634c:	08006455 	.word	0x08006455
 8006350:	08006455 	.word	0x08006455
 8006354:	08006455 	.word	0x08006455
 8006358:	08006455 	.word	0x08006455
 800635c:	08006455 	.word	0x08006455
 8006360:	08006421 	.word	0x08006421
 8006364:	08006455 	.word	0x08006455
 8006368:	08006455 	.word	0x08006455
 800636c:	08006455 	.word	0x08006455
 8006370:	08006455 	.word	0x08006455
 8006374:	080063d1 	.word	0x080063d1
 8006378:	08006455 	.word	0x08006455
 800637c:	08006455 	.word	0x08006455
 8006380:	080063f7 	.word	0x080063f7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6011      	str	r1, [r2, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006398:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800639c:	f107 0314 	add.w	r3, r7, #20
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fd1c 	bl	8005de0 <_StoreChar>
        break;
 80063a8:	e055      	b.n	8006456 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	1d19      	adds	r1, r3, #4
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6011      	str	r1, [r2, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80063b8:	f107 0014 	add.w	r0, r7, #20
 80063bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c6:	220a      	movs	r2, #10
 80063c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063ca:	f7ff fe1b 	bl	8006004 <_PrintInt>
        break;
 80063ce:	e042      	b.n	8006456 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1d19      	adds	r1, r3, #4
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6011      	str	r1, [r2, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80063de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063e0:	f107 0014 	add.w	r0, r7, #20
 80063e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ee:	220a      	movs	r2, #10
 80063f0:	f7ff fd72 	bl	8005ed8 <_PrintUnsigned>
        break;
 80063f4:	e02f      	b.n	8006456 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	1d19      	adds	r1, r3, #4
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6011      	str	r1, [r2, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006404:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006406:	f107 0014 	add.w	r0, r7, #20
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	2210      	movs	r2, #16
 8006416:	f7ff fd5f 	bl	8005ed8 <_PrintUnsigned>
        break;
 800641a:	e01c      	b.n	8006456 <_VPrintTarget+0x332>
 800641c:	20014288 	.word	0x20014288
      case 'p':
        v = va_arg(*pParamList, int);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800642e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006430:	f107 0014 	add.w	r0, r7, #20
 8006434:	2300      	movs	r3, #0
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	2308      	movs	r3, #8
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2308      	movs	r3, #8
 800643e:	2210      	movs	r2, #16
 8006440:	f7ff fd4a 	bl	8005ed8 <_PrintUnsigned>
        break;
 8006444:	e007      	b.n	8006456 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006446:	f107 0314 	add.w	r3, r7, #20
 800644a:	2125      	movs	r1, #37	; 0x25
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fcc7 	bl	8005de0 <_StoreChar>
        break;
 8006452:	e000      	b.n	8006456 <_VPrintTarget+0x332>
      default:
        break;
 8006454:	bf00      	nop
      }
      sFormat++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e007      	b.n	800646e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800645e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006462:	f107 0314 	add.w	r3, r7, #20
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fcb9 	bl	8005de0 <_StoreChar>
    }
  } while (*sFormat);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f47f ae72 	bne.w	800615c <_VPrintTarget+0x38>
 8006478:	e000      	b.n	800647c <_VPrintTarget+0x358>
      break;
 800647a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d041      	beq.n	8006506 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	643b      	str	r3, [r7, #64]	; 0x40
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006492:	e00b      	b.n	80064ac <_VPrintTarget+0x388>
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	6439      	str	r1, [r7, #64]	; 0x40
 800649e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ae:	2b7f      	cmp	r3, #127	; 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <_VPrintTarget+0x370>
 80064b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	643a      	str	r2, [r7, #64]	; 0x40
 80064b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c6:	2300      	movs	r3, #0
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ca:	e00b      	b.n	80064e4 <_VPrintTarget+0x3c0>
 80064cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	63b9      	str	r1, [r7, #56]	; 0x38
 80064d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	2b7f      	cmp	r3, #127	; 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <_VPrintTarget+0x3a8>
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80064f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	221a      	movs	r2, #26
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fb87 	bl	8005c14 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800650c:	bf00      	nop
 800650e:	3758      	adds	r7, #88	; 0x58
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006522:	2300      	movs	r3, #0
 8006524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006528:	4918      	ldr	r1, [pc, #96]	; (800658c <SEGGER_SYSVIEW_Init+0x78>)
 800652a:	4819      	ldr	r0, [pc, #100]	; (8006590 <SEGGER_SYSVIEW_Init+0x7c>)
 800652c:	f7ff f940 	bl	80057b0 <SEGGER_RTT_AllocUpBuffer>
 8006530:	4603      	mov	r3, r0
 8006532:	b2da      	uxtb	r2, r3
 8006534:	4b17      	ldr	r3, [pc, #92]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006536:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006538:	4b16      	ldr	r3, [pc, #88]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 800653a:	785a      	ldrb	r2, [r3, #1]
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 800653e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006540:	4b14      	ldr	r3, [pc, #80]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006542:	7e1b      	ldrb	r3, [r3, #24]
 8006544:	4618      	mov	r0, r3
 8006546:	2300      	movs	r3, #0
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2308      	movs	r3, #8
 800654c:	4a12      	ldr	r2, [pc, #72]	; (8006598 <SEGGER_SYSVIEW_Init+0x84>)
 800654e:	4910      	ldr	r1, [pc, #64]	; (8006590 <SEGGER_SYSVIEW_Init+0x7c>)
 8006550:	f7ff f9b2 	bl	80058b8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006554:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006556:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800655a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <SEGGER_SYSVIEW_Init+0x88>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0c      	ldr	r2, [pc, #48]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006562:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006564:	4a0b      	ldr	r2, [pc, #44]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800656a:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006570:	4a08      	ldr	r2, [pc, #32]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006576:	4a07      	ldr	r2, [pc, #28]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <SEGGER_SYSVIEW_Init+0x80>)
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20013250 	.word	0x20013250
 8006590:	0800784c 	.word	0x0800784c
 8006594:	20014258 	.word	0x20014258
 8006598:	20014250 	.word	0x20014250
 800659c:	e0001004 	.word	0xe0001004

080065a0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80065a8:	4a04      	ldr	r2, [pc, #16]	; (80065bc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6113      	str	r3, [r2, #16]
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20014258 	.word	0x20014258

080065c0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065c8:	f3ef 8311 	mrs	r3, BASEPRI
 80065cc:	f04f 0120 	mov.w	r1, #32
 80065d0:	f381 8811 	msr	BASEPRI, r1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	4808      	ldr	r0, [pc, #32]	; (80065f8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80065d8:	f7ff fa2b 	bl	8005a32 <_PreparePacket>
 80065dc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68b8      	ldr	r0, [r7, #8]
 80065e4:	f7ff fb16 	bl	8005c14 <_SendPacket>
  RECORD_END();
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20014288 	.word	0x20014288

080065fc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006606:	f3ef 8311 	mrs	r3, BASEPRI
 800660a:	f04f 0120 	mov.w	r1, #32
 800660e:	f381 8811 	msr	BASEPRI, r1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	4816      	ldr	r0, [pc, #88]	; (8006670 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006616:	f7ff fa0c 	bl	8005a32 <_PreparePacket>
 800661a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	e00b      	b.n	8006642 <SEGGER_SYSVIEW_RecordU32+0x46>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	1c59      	adds	r1, r3, #1
 8006632:	61f9      	str	r1, [r7, #28]
 8006634:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	09db      	lsrs	r3, r3, #7
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b7f      	cmp	r3, #127	; 0x7f
 8006646:	d8f0      	bhi.n	800662a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	61fa      	str	r2, [r7, #28]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	6938      	ldr	r0, [r7, #16]
 800665e:	f7ff fad9 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f383 8811 	msr	BASEPRI, r3
}
 8006668:	bf00      	nop
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20014288 	.word	0x20014288

08006674 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006680:	f3ef 8311 	mrs	r3, BASEPRI
 8006684:	f04f 0120 	mov.w	r1, #32
 8006688:	f381 8811 	msr	BASEPRI, r1
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	4825      	ldr	r0, [pc, #148]	; (8006724 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006690:	f7ff f9cf 	bl	8005a32 <_PreparePacket>
 8006694:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a2:	e00b      	b.n	80066bc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b7f      	cmp	r3, #127	; 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	e00b      	b.n	80066f4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	1c59      	adds	r1, r3, #1
 80066e4:	6279      	str	r1, [r7, #36]	; 0x24
 80066e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	09db      	lsrs	r3, r3, #7
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	2b7f      	cmp	r3, #127	; 0x7f
 80066f8:	d8f0      	bhi.n	80066dc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006700:	6a3a      	ldr	r2, [r7, #32]
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69b8      	ldr	r0, [r7, #24]
 8006710:	f7ff fa80 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f383 8811 	msr	BASEPRI, r3
}
 800671a:	bf00      	nop
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20014288 	.word	0x20014288

08006728 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b08e      	sub	sp, #56	; 0x38
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006736:	f3ef 8311 	mrs	r3, BASEPRI
 800673a:	f04f 0120 	mov.w	r1, #32
 800673e:	f381 8811 	msr	BASEPRI, r1
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	4832      	ldr	r0, [pc, #200]	; (8006810 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006746:	f7ff f974 	bl	8005a32 <_PreparePacket>
 800674a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
 8006758:	e00b      	b.n	8006772 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	b2da      	uxtb	r2, r3
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	6379      	str	r1, [r7, #52]	; 0x34
 8006764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	633b      	str	r3, [r7, #48]	; 0x30
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2b7f      	cmp	r3, #127	; 0x7f
 8006776:	d8f0      	bhi.n	800675a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	637a      	str	r2, [r7, #52]	; 0x34
 800677e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	e00b      	b.n	80067aa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	1c59      	adds	r1, r3, #1
 800679a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800679c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	09db      	lsrs	r3, r3, #7
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2b7f      	cmp	r3, #127	; 0x7f
 80067ae:	d8f0      	bhi.n	8006792 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	e00b      	b.n	80067e2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	6279      	str	r1, [r7, #36]	; 0x24
 80067d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	09db      	lsrs	r3, r3, #7
 80067e0:	623b      	str	r3, [r7, #32]
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	2b7f      	cmp	r3, #127	; 0x7f
 80067e6:	d8f0      	bhi.n	80067ca <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	627a      	str	r2, [r7, #36]	; 0x24
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	6979      	ldr	r1, [r7, #20]
 80067fc:	69b8      	ldr	r0, [r7, #24]
 80067fe:	f7ff fa09 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f383 8811 	msr	BASEPRI, r3
}
 8006808:	bf00      	nop
 800680a:	3738      	adds	r7, #56	; 0x38
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20014288 	.word	0x20014288

08006814 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b090      	sub	sp, #64	; 0x40
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006822:	f3ef 8311 	mrs	r3, BASEPRI
 8006826:	f04f 0120 	mov.w	r1, #32
 800682a:	f381 8811 	msr	BASEPRI, r1
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	4840      	ldr	r0, [pc, #256]	; (8006934 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006832:	f7ff f8fe 	bl	8005a32 <_PreparePacket>
 8006836:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	63fa      	str	r2, [r7, #60]	; 0x3c
 800686a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	633b      	str	r3, [r7, #48]	; 0x30
 800687c:	e00b      	b.n	8006896 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	b2da      	uxtb	r2, r3
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	1c59      	adds	r1, r3, #1
 8006886:	6379      	str	r1, [r7, #52]	; 0x34
 8006888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	09db      	lsrs	r3, r3, #7
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	2b7f      	cmp	r3, #127	; 0x7f
 800689a:	d8f0      	bhi.n	800687e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	637a      	str	r2, [r7, #52]	; 0x34
 80068a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b4:	e00b      	b.n	80068ce <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	1c59      	adds	r1, r3, #1
 80068be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	09db      	lsrs	r3, r3, #7
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	2b7f      	cmp	r3, #127	; 0x7f
 80068d2:	d8f0      	bhi.n	80068b6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	e00b      	b.n	8006906 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	6279      	str	r1, [r7, #36]	; 0x24
 80068f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	623b      	str	r3, [r7, #32]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	2b7f      	cmp	r3, #127	; 0x7f
 800690a:	d8f0      	bhi.n	80068ee <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	627a      	str	r2, [r7, #36]	; 0x24
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	6979      	ldr	r1, [r7, #20]
 8006920:	69b8      	ldr	r0, [r7, #24]
 8006922:	f7ff f977 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f383 8811 	msr	BASEPRI, r3
}
 800692c:	bf00      	nop
 800692e:	3740      	adds	r7, #64	; 0x40
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20014288 	.word	0x20014288

08006938 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b092      	sub	sp, #72	; 0x48
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006946:	f3ef 8311 	mrs	r3, BASEPRI
 800694a:	f04f 0120 	mov.w	r1, #32
 800694e:	f381 8811 	msr	BASEPRI, r1
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	484e      	ldr	r0, [pc, #312]	; (8006a90 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006956:	f7ff f86c 	bl	8005a32 <_PreparePacket>
 800695a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	647b      	str	r3, [r7, #68]	; 0x44
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
 8006968:	e00b      	b.n	8006982 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800696a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696c:	b2da      	uxtb	r2, r3
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	6479      	str	r1, [r7, #68]	; 0x44
 8006974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	643b      	str	r3, [r7, #64]	; 0x40
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	2b7f      	cmp	r3, #127	; 0x7f
 8006986:	d8f0      	bhi.n	800696a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	647a      	str	r2, [r7, #68]	; 0x44
 800698e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006996:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a0:	e00b      	b.n	80069ba <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	1c59      	adds	r1, r3, #1
 80069aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	09db      	lsrs	r3, r3, #7
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b7f      	cmp	r3, #127	; 0x7f
 80069be:	d8f0      	bhi.n	80069a2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
 80069d8:	e00b      	b.n	80069f2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	1c59      	adds	r1, r3, #1
 80069e2:	6379      	str	r1, [r7, #52]	; 0x34
 80069e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	09db      	lsrs	r3, r3, #7
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	2b7f      	cmp	r3, #127	; 0x7f
 80069f6:	d8f0      	bhi.n	80069da <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	637a      	str	r2, [r7, #52]	; 0x34
 80069fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a10:	e00b      	b.n	8006a2a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	1c59      	adds	r1, r3, #1
 8006a1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	09db      	lsrs	r3, r3, #7
 8006a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2e:	d8f0      	bhi.n	8006a12 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	e00b      	b.n	8006a62 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	6279      	str	r1, [r7, #36]	; 0x24
 8006a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	2b7f      	cmp	r3, #127	; 0x7f
 8006a66:	d8f0      	bhi.n	8006a4a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	69b8      	ldr	r0, [r7, #24]
 8006a7e:	f7ff f8c9 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f383 8811 	msr	BASEPRI, r3
}
 8006a88:	bf00      	nop
 8006a8a:	3748      	adds	r7, #72	; 0x48
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20014288 	.word	0x20014288

08006a94 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08c      	sub	sp, #48	; 0x30
 8006a98:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006a9a:	4b58      	ldr	r3, [pc, #352]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa4:	f04f 0120 	mov.w	r1, #32
 8006aa8:	f381 8811 	msr	BASEPRI, r1
 8006aac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006aae:	4b53      	ldr	r3, [pc, #332]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	220a      	movs	r2, #10
 8006ab4:	4952      	ldr	r1, [pc, #328]	; (8006c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fb9a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006ac2:	200a      	movs	r0, #10
 8006ac4:	f7ff fd7c 	bl	80065c0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	f04f 0120 	mov.w	r1, #32
 8006ad0:	f381 8811 	msr	BASEPRI, r1
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	484b      	ldr	r0, [pc, #300]	; (8006c04 <SEGGER_SYSVIEW_Start+0x170>)
 8006ad8:	f7fe ffab 	bl	8005a32 <_PreparePacket>
 8006adc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae6:	4b45      	ldr	r3, [pc, #276]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aec:	e00b      	b.n	8006b06 <SEGGER_SYSVIEW_Start+0x72>
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	1c59      	adds	r1, r3, #1
 8006af6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	09db      	lsrs	r3, r3, #7
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0a:	d8f0      	bhi.n	8006aee <SEGGER_SYSVIEW_Start+0x5a>
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b20:	4b36      	ldr	r3, [pc, #216]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	e00b      	b.n	8006b40 <SEGGER_SYSVIEW_Start+0xac>
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	6279      	str	r1, [r7, #36]	; 0x24
 8006b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	09db      	lsrs	r3, r3, #7
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	2b7f      	cmp	r3, #127	; 0x7f
 8006b44:	d8f0      	bhi.n	8006b28 <SEGGER_SYSVIEW_Start+0x94>
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	4b28      	ldr	r3, [pc, #160]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	e00b      	b.n	8006b7a <SEGGER_SYSVIEW_Start+0xe6>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	1c59      	adds	r1, r3, #1
 8006b6a:	61f9      	str	r1, [r7, #28]
 8006b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	09db      	lsrs	r3, r3, #7
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7e:	d8f0      	bhi.n	8006b62 <SEGGER_SYSVIEW_Start+0xce>
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	61fa      	str	r2, [r7, #28]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	e00b      	b.n	8006bb2 <SEGGER_SYSVIEW_Start+0x11e>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	6179      	str	r1, [r7, #20]
 8006ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	09db      	lsrs	r3, r3, #7
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb6:	d8f0      	bhi.n	8006b9a <SEGGER_SYSVIEW_Start+0x106>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	617a      	str	r2, [r7, #20]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006bc8:	2218      	movs	r2, #24
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff f821 	bl	8005c14 <_SendPacket>
      RECORD_END();
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bd8:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006be0:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <SEGGER_SYSVIEW_Start+0x168>)
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006be6:	f000 f9eb 	bl	8006fc0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006bea:	f000 f9b1 	bl	8006f50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006bee:	f000 fc83 	bl	80074f8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006bf2:	bf00      	nop
 8006bf4:	3730      	adds	r7, #48	; 0x30
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20014258 	.word	0x20014258
 8006c00:	08007874 	.word	0x08007874
 8006c04:	20014288 	.word	0x20014288

08006c08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c12:	f04f 0120 	mov.w	r1, #32
 8006c16:	f381 8811 	msr	BASEPRI, r1
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	480b      	ldr	r0, [pc, #44]	; (8006c4c <SEGGER_SYSVIEW_Stop+0x44>)
 8006c1e:	f7fe ff08 	bl	8005a32 <_PreparePacket>
 8006c22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c2c:	220b      	movs	r2, #11
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6838      	ldr	r0, [r7, #0]
 8006c32:	f7fe ffef 	bl	8005c14 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20014288 	.word	0x20014288
 8006c50:	20014258 	.word	0x20014258

08006c54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	; 0x30
 8006c58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5e:	f04f 0120 	mov.w	r1, #32
 8006c62:	f381 8811 	msr	BASEPRI, r1
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	4845      	ldr	r0, [pc, #276]	; (8006d80 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006c6a:	f7fe fee2 	bl	8005a32 <_PreparePacket>
 8006c6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c78:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7e:	e00b      	b.n	8006c98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	1c59      	adds	r1, r3, #1
 8006c88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	09db      	lsrs	r3, r3, #7
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9c:	d8f0      	bhi.n	8006c80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	4b34      	ldr	r3, [pc, #208]	; (8006d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	e00b      	b.n	8006cd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	6279      	str	r1, [r7, #36]	; 0x24
 8006cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d8f0      	bhi.n	8006cba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8006cde:	6a3a      	ldr	r2, [r7, #32]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e00b      	b.n	8006d0c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	1c59      	adds	r1, r3, #1
 8006cfc:	61f9      	str	r1, [r7, #28]
 8006cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	09db      	lsrs	r3, r3, #7
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d10:	d8f0      	bhi.n	8006cf4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	61fa      	str	r2, [r7, #28]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	e00b      	b.n	8006d44 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	1c59      	adds	r1, r3, #1
 8006d34:	6179      	str	r1, [r7, #20]
 8006d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	09db      	lsrs	r3, r3, #7
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b7f      	cmp	r3, #127	; 0x7f
 8006d48:	d8f0      	bhi.n	8006d2c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	617a      	str	r2, [r7, #20]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d5a:	2218      	movs	r2, #24
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	68b8      	ldr	r0, [r7, #8]
 8006d60:	f7fe ff58 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006d72:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	4798      	blx	r3
  }
}
 8006d78:	bf00      	nop
 8006d7a:	3730      	adds	r7, #48	; 0x30
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20014288 	.word	0x20014288
 8006d84:	20014258 	.word	0x20014258

08006d88 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b092      	sub	sp, #72	; 0x48
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006d90:	f3ef 8311 	mrs	r3, BASEPRI
 8006d94:	f04f 0120 	mov.w	r1, #32
 8006d98:	f381 8811 	msr	BASEPRI, r1
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	486a      	ldr	r0, [pc, #424]	; (8006f48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006da0:	f7fe fe47 	bl	8005a32 <_PreparePacket>
 8006da4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	647b      	str	r3, [r7, #68]	; 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b66      	ldr	r3, [pc, #408]	; (8006f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dba:	e00b      	b.n	8006dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	6479      	str	r1, [r7, #68]	; 0x44
 8006dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd0:	09db      	lsrs	r3, r3, #7
 8006dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd8:	d8f0      	bhi.n	8006dbc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	647a      	str	r2, [r7, #68]	; 0x44
 8006de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df4:	e00b      	b.n	8006e0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	1c59      	adds	r1, r3, #1
 8006dfe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	09db      	lsrs	r3, r3, #7
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	2b7f      	cmp	r3, #127	; 0x7f
 8006e12:	d8f0      	bhi.n	8006df6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7fe fdb3 	bl	8005998 <_EncodeStr>
 8006e32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e34:	2209      	movs	r2, #9
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	6938      	ldr	r0, [r7, #16]
 8006e3a:	f7fe feeb 	bl	8005c14 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b40      	ldr	r3, [pc, #256]	; (8006f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	633b      	str	r3, [r7, #48]	; 0x30
 8006e52:	e00b      	b.n	8006e6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	6379      	str	r1, [r7, #52]	; 0x34
 8006e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	09db      	lsrs	r3, r3, #7
 8006e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d8f0      	bhi.n	8006e54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	637a      	str	r2, [r7, #52]	; 0x34
 8006e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8c:	e00b      	b.n	8006ea6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	1c59      	adds	r1, r3, #1
 8006e96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	09db      	lsrs	r3, r3, #7
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eaa:	d8f0      	bhi.n	8006e8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	623b      	str	r3, [r7, #32]
 8006ec6:	e00b      	b.n	8006ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	09db      	lsrs	r3, r3, #7
 8006ede:	623b      	str	r3, [r7, #32]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee4:	d8f0      	bhi.n	8006ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	627a      	str	r2, [r7, #36]	; 0x24
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e00b      	b.n	8006f18 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	61f9      	str	r1, [r7, #28]
 8006f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	09db      	lsrs	r3, r3, #7
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1c:	d8f0      	bhi.n	8006f00 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	61fa      	str	r2, [r7, #28]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f2e:	2215      	movs	r2, #21
 8006f30:	68f9      	ldr	r1, [r7, #12]
 8006f32:	6938      	ldr	r0, [r7, #16]
 8006f34:	f7fe fe6e 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f383 8811 	msr	BASEPRI, r3
}
 8006f3e:	bf00      	nop
 8006f40:	3748      	adds	r7, #72	; 0x48
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20014288 	.word	0x20014288
 8006f4c:	20014258 	.word	0x20014258

08006f50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006f66:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4798      	blx	r3
  }
}
 8006f6e:	bf00      	nop
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20014258 	.word	0x20014258

08006f78 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f80:	f3ef 8311 	mrs	r3, BASEPRI
 8006f84:	f04f 0120 	mov.w	r1, #32
 8006f88:	f381 8811 	msr	BASEPRI, r1
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	480b      	ldr	r0, [pc, #44]	; (8006fbc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006f90:	f7fe fd4f 	bl	8005a32 <_PreparePacket>
 8006f94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	6938      	ldr	r0, [r7, #16]
 8006f9c:	f7fe fcfc 	bl	8005998 <_EncodeStr>
 8006fa0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006fa2:	220e      	movs	r2, #14
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	6938      	ldr	r0, [r7, #16]
 8006fa8:	f7fe fe34 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f383 8811 	msr	BASEPRI, r3
}
 8006fb2:	bf00      	nop
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20014288 	.word	0x20014288

08006fc0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01a      	beq.n	8007004 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006fd8:	4b10      	ldr	r3, [pc, #64]	; (800701c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4798      	blx	r3
 8006fe0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006fe4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	000a      	movs	r2, r1
 8006ff4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	200d      	movs	r0, #13
 8006ffe:	f7ff fb39 	bl	8006674 <SEGGER_SYSVIEW_RecordU32x2>
 8007002:	e006      	b.n	8007012 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4619      	mov	r1, r3
 800700a:	200c      	movs	r0, #12
 800700c:	f7ff faf6 	bl	80065fc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bd90      	pop	{r4, r7, pc}
 800701a:	bf00      	nop
 800701c:	20014258 	.word	0x20014258
 8007020:	e0001004 	.word	0xe0001004

08007024 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800702a:	f3ef 8311 	mrs	r3, BASEPRI
 800702e:	f04f 0120 	mov.w	r1, #32
 8007032:	f381 8811 	msr	BASEPRI, r1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4819      	ldr	r0, [pc, #100]	; (80070a0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800703a:	f7fe fcfa 	bl	8005a32 <_PreparePacket>
 800703e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007044:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	e00b      	b.n	8007070 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	1c59      	adds	r1, r3, #1
 8007060:	6179      	str	r1, [r7, #20]
 8007062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	09db      	lsrs	r3, r3, #7
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b7f      	cmp	r3, #127	; 0x7f
 8007074:	d8f0      	bhi.n	8007058 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	617a      	str	r2, [r7, #20]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007086:	2202      	movs	r2, #2
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68b8      	ldr	r0, [r7, #8]
 800708c:	f7fe fdc2 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f383 8811 	msr	BASEPRI, r3
}
 8007096:	bf00      	nop
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20014288 	.word	0x20014288
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070ae:	f3ef 8311 	mrs	r3, BASEPRI
 80070b2:	f04f 0120 	mov.w	r1, #32
 80070b6:	f381 8811 	msr	BASEPRI, r1
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	4807      	ldr	r0, [pc, #28]	; (80070dc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80070be:	f7fe fcb8 	bl	8005a32 <_PreparePacket>
 80070c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80070c4:	2203      	movs	r2, #3
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6838      	ldr	r0, [r7, #0]
 80070ca:	f7fe fda3 	bl	8005c14 <_SendPacket>
  RECORD_END();
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f383 8811 	msr	BASEPRI, r3
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20014288 	.word	0x20014288

080070e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070e6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ea:	f04f 0120 	mov.w	r1, #32
 80070ee:	f381 8811 	msr	BASEPRI, r1
 80070f2:	607b      	str	r3, [r7, #4]
 80070f4:	4807      	ldr	r0, [pc, #28]	; (8007114 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80070f6:	f7fe fc9c 	bl	8005a32 <_PreparePacket>
 80070fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80070fc:	2212      	movs	r2, #18
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6838      	ldr	r0, [r7, #0]
 8007102:	f7fe fd87 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f383 8811 	msr	BASEPRI, r3
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20014288 	.word	0x20014288

08007118 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800711e:	f3ef 8311 	mrs	r3, BASEPRI
 8007122:	f04f 0120 	mov.w	r1, #32
 8007126:	f381 8811 	msr	BASEPRI, r1
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	4807      	ldr	r0, [pc, #28]	; (800714c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800712e:	f7fe fc80 	bl	8005a32 <_PreparePacket>
 8007132:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007134:	2211      	movs	r2, #17
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6838      	ldr	r0, [r7, #0]
 800713a:	f7fe fd6b 	bl	8005c14 <_SendPacket>
  RECORD_END();
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f383 8811 	msr	BASEPRI, r3
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20014288 	.word	0x20014288

08007150 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007158:	f3ef 8311 	mrs	r3, BASEPRI
 800715c:	f04f 0120 	mov.w	r1, #32
 8007160:	f381 8811 	msr	BASEPRI, r1
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	4819      	ldr	r0, [pc, #100]	; (80071cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007168:	f7fe fc63 	bl	8005a32 <_PreparePacket>
 800716c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007172:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e00b      	b.n	800719e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	1c59      	adds	r1, r3, #1
 800718e:	61f9      	str	r1, [r7, #28]
 8007190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	09db      	lsrs	r3, r3, #7
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b7f      	cmp	r3, #127	; 0x7f
 80071a2:	d8f0      	bhi.n	8007186 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	61fa      	str	r2, [r7, #28]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80071b4:	2208      	movs	r2, #8
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	6938      	ldr	r0, [r7, #16]
 80071ba:	f7fe fd2b 	bl	8005c14 <_SendPacket>
  RECORD_END();
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f383 8811 	msr	BASEPRI, r3
}
 80071c4:	bf00      	nop
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20014288 	.word	0x20014288
 80071d0:	20014258 	.word	0x20014258

080071d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071dc:	f3ef 8311 	mrs	r3, BASEPRI
 80071e0:	f04f 0120 	mov.w	r1, #32
 80071e4:	f381 8811 	msr	BASEPRI, r1
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	4819      	ldr	r0, [pc, #100]	; (8007250 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80071ec:	f7fe fc21 	bl	8005a32 <_PreparePacket>
 80071f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	e00b      	b.n	8007222 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	1c59      	adds	r1, r3, #1
 8007212:	61f9      	str	r1, [r7, #28]
 8007214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b7f      	cmp	r3, #127	; 0x7f
 8007226:	d8f0      	bhi.n	800720a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	61fa      	str	r2, [r7, #28]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007238:	2204      	movs	r2, #4
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	6938      	ldr	r0, [r7, #16]
 800723e:	f7fe fce9 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f383 8811 	msr	BASEPRI, r3
}
 8007248:	bf00      	nop
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20014288 	.word	0x20014288
 8007254:	20014258 	.word	0x20014258

08007258 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007260:	f3ef 8311 	mrs	r3, BASEPRI
 8007264:	f04f 0120 	mov.w	r1, #32
 8007268:	f381 8811 	msr	BASEPRI, r1
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	4819      	ldr	r0, [pc, #100]	; (80072d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007270:	f7fe fbdf 	bl	8005a32 <_PreparePacket>
 8007274:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	e00b      	b.n	80072a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	61f9      	str	r1, [r7, #28]
 8007298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	09db      	lsrs	r3, r3, #7
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b7f      	cmp	r3, #127	; 0x7f
 80072aa:	d8f0      	bhi.n	800728e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	61fa      	str	r2, [r7, #28]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80072bc:	2206      	movs	r2, #6
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	6938      	ldr	r0, [r7, #16]
 80072c2:	f7fe fca7 	bl	8005c14 <_SendPacket>
  RECORD_END();
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f383 8811 	msr	BASEPRI, r3
}
 80072cc:	bf00      	nop
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20014288 	.word	0x20014288
 80072d8:	20014258 	.word	0x20014258

080072dc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80072e6:	f3ef 8311 	mrs	r3, BASEPRI
 80072ea:	f04f 0120 	mov.w	r1, #32
 80072ee:	f381 8811 	msr	BASEPRI, r1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	4827      	ldr	r0, [pc, #156]	; (8007394 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80072f6:	f7fe fb9c 	bl	8005a32 <_PreparePacket>
 80072fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007300:	4b25      	ldr	r3, [pc, #148]	; (8007398 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	e00b      	b.n	800732c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	6279      	str	r1, [r7, #36]	; 0x24
 800731e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	09db      	lsrs	r3, r3, #7
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	2b7f      	cmp	r3, #127	; 0x7f
 8007330:	d8f0      	bhi.n	8007314 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	627a      	str	r2, [r7, #36]	; 0x24
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e00b      	b.n	8007364 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	1c59      	adds	r1, r3, #1
 8007354:	61f9      	str	r1, [r7, #28]
 8007356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	09db      	lsrs	r3, r3, #7
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	2b7f      	cmp	r3, #127	; 0x7f
 8007368:	d8f0      	bhi.n	800734c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	61fa      	str	r2, [r7, #28]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800737a:	2207      	movs	r2, #7
 800737c:	68f9      	ldr	r1, [r7, #12]
 800737e:	6938      	ldr	r0, [r7, #16]
 8007380:	f7fe fc48 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f383 8811 	msr	BASEPRI, r3
}
 800738a:	bf00      	nop
 800738c:	3728      	adds	r7, #40	; 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20014288 	.word	0x20014288
 8007398:	20014258 	.word	0x20014258

0800739c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	1ad3      	subs	r3, r2, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	20014258 	.word	0x20014258

080073bc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08c      	sub	sp, #48	; 0x30
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80073c6:	4b3b      	ldr	r3, [pc, #236]	; (80074b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d06d      	beq.n	80074aa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80073ce:	4b39      	ldr	r3, [pc, #228]	; (80074b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80073d4:	2300      	movs	r3, #0
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d8:	e008      	b.n	80073ec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	3301      	adds	r3, #1
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d3f2      	bcc.n	80073da <SEGGER_SYSVIEW_SendModule+0x1e>
 80073f4:	e000      	b.n	80073f8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80073f6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d055      	beq.n	80074aa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007402:	f04f 0120 	mov.w	r1, #32
 8007406:	f381 8811 	msr	BASEPRI, r1
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	482a      	ldr	r0, [pc, #168]	; (80074b8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800740e:	f7fe fb10 	bl	8005a32 <_PreparePacket>
 8007412:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	623b      	str	r3, [r7, #32]
 8007420:	e00b      	b.n	800743a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	b2da      	uxtb	r2, r3
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	1c59      	adds	r1, r3, #1
 800742a:	6279      	str	r1, [r7, #36]	; 0x24
 800742c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007430:	b2d2      	uxtb	r2, r2
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	09db      	lsrs	r3, r3, #7
 8007438:	623b      	str	r3, [r7, #32]
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	2b7f      	cmp	r3, #127	; 0x7f
 800743e:	d8f0      	bhi.n	8007422 <SEGGER_SYSVIEW_SendModule+0x66>
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	627a      	str	r2, [r7, #36]	; 0x24
 8007446:	6a3a      	ldr	r2, [r7, #32]
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	e00b      	b.n	8007474 <SEGGER_SYSVIEW_SendModule+0xb8>
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	61f9      	str	r1, [r7, #28]
 8007466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	09db      	lsrs	r3, r3, #7
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b7f      	cmp	r3, #127	; 0x7f
 8007478:	d8f0      	bhi.n	800745c <SEGGER_SYSVIEW_SendModule+0xa0>
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	61fa      	str	r2, [r7, #28]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2280      	movs	r2, #128	; 0x80
 8007490:	4619      	mov	r1, r3
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7fe fa80 	bl	8005998 <_EncodeStr>
 8007498:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800749a:	2216      	movs	r2, #22
 800749c:	68f9      	ldr	r1, [r7, #12]
 800749e:	6938      	ldr	r0, [r7, #16]
 80074a0:	f7fe fbb8 	bl	8005c14 <_SendPacket>
      RECORD_END();
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80074aa:	bf00      	nop
 80074ac:	3730      	adds	r7, #48	; 0x30
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20014280 	.word	0x20014280
 80074b8:	20014288 	.word	0x20014288

080074bc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80074ca:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f2      	bne.n	80074d0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20014280 	.word	0x20014280

080074f8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80074fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007502:	f04f 0120 	mov.w	r1, #32
 8007506:	f381 8811 	msr	BASEPRI, r1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	4817      	ldr	r0, [pc, #92]	; (800756c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800750e:	f7fe fa90 	bl	8005a32 <_PreparePacket>
 8007512:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e00b      	b.n	800753c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	1c59      	adds	r1, r3, #1
 800752c:	6179      	str	r1, [r7, #20]
 800752e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	09db      	lsrs	r3, r3, #7
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b7f      	cmp	r3, #127	; 0x7f
 8007540:	d8f0      	bhi.n	8007524 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	617a      	str	r2, [r7, #20]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007552:	221b      	movs	r2, #27
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	68b8      	ldr	r0, [r7, #8]
 8007558:	f7fe fb5c 	bl	8005c14 <_SendPacket>
  RECORD_END();
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f383 8811 	msr	BASEPRI, r3
}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20014288 	.word	0x20014288
 8007570:	20014284 	.word	0x20014284

08007574 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007574:	b40f      	push	{r0, r1, r2, r3}
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007582:	1d3b      	adds	r3, r7, #4
 8007584:	461a      	mov	r2, r3
 8007586:	2100      	movs	r1, #0
 8007588:	6938      	ldr	r0, [r7, #16]
 800758a:	f7fe fdcb 	bl	8006124 <_VPrintTarget>
  va_end(ParamList);
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007598:	b004      	add	sp, #16
 800759a:	4770      	bx	lr

0800759c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800759c:	b580      	push	{r7, lr}
 800759e:	b08a      	sub	sp, #40	; 0x28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075a4:	f3ef 8311 	mrs	r3, BASEPRI
 80075a8:	f04f 0120 	mov.w	r1, #32
 80075ac:	f381 8811 	msr	BASEPRI, r1
 80075b0:	617b      	str	r3, [r7, #20]
 80075b2:	4827      	ldr	r0, [pc, #156]	; (8007650 <SEGGER_SYSVIEW_Warn+0xb4>)
 80075b4:	f7fe fa3d 	bl	8005a32 <_PreparePacket>
 80075b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075ba:	2280      	movs	r2, #128	; 0x80
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	6938      	ldr	r0, [r7, #16]
 80075c0:	f7fe f9ea 	bl	8005998 <_EncodeStr>
 80075c4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
 80075ca:	2301      	movs	r3, #1
 80075cc:	623b      	str	r3, [r7, #32]
 80075ce:	e00b      	b.n	80075e8 <SEGGER_SYSVIEW_Warn+0x4c>
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	1c59      	adds	r1, r3, #1
 80075d8:	6279      	str	r1, [r7, #36]	; 0x24
 80075da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	09db      	lsrs	r3, r3, #7
 80075e6:	623b      	str	r3, [r7, #32]
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2b7f      	cmp	r3, #127	; 0x7f
 80075ec:	d8f0      	bhi.n	80075d0 <SEGGER_SYSVIEW_Warn+0x34>
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	627a      	str	r2, [r7, #36]	; 0x24
 80075f4:	6a3a      	ldr	r2, [r7, #32]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e00b      	b.n	8007620 <SEGGER_SYSVIEW_Warn+0x84>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	b2da      	uxtb	r2, r3
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	1c59      	adds	r1, r3, #1
 8007610:	61f9      	str	r1, [r7, #28]
 8007612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	09db      	lsrs	r3, r3, #7
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b7f      	cmp	r3, #127	; 0x7f
 8007624:	d8f0      	bhi.n	8007608 <SEGGER_SYSVIEW_Warn+0x6c>
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	61fa      	str	r2, [r7, #28]
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007636:	221a      	movs	r2, #26
 8007638:	68f9      	ldr	r1, [r7, #12]
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f7fe faea 	bl	8005c14 <_SendPacket>
  RECORD_END();
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f383 8811 	msr	BASEPRI, r3
}
 8007646:	bf00      	nop
 8007648:	3728      	adds	r7, #40	; 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20014288 	.word	0x20014288

08007654 <__libc_init_array>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	4d0d      	ldr	r5, [pc, #52]	; (800768c <__libc_init_array+0x38>)
 8007658:	4c0d      	ldr	r4, [pc, #52]	; (8007690 <__libc_init_array+0x3c>)
 800765a:	1b64      	subs	r4, r4, r5
 800765c:	10a4      	asrs	r4, r4, #2
 800765e:	2600      	movs	r6, #0
 8007660:	42a6      	cmp	r6, r4
 8007662:	d109      	bne.n	8007678 <__libc_init_array+0x24>
 8007664:	4d0b      	ldr	r5, [pc, #44]	; (8007694 <__libc_init_array+0x40>)
 8007666:	4c0c      	ldr	r4, [pc, #48]	; (8007698 <__libc_init_array+0x44>)
 8007668:	f000 f83c 	bl	80076e4 <_init>
 800766c:	1b64      	subs	r4, r4, r5
 800766e:	10a4      	asrs	r4, r4, #2
 8007670:	2600      	movs	r6, #0
 8007672:	42a6      	cmp	r6, r4
 8007674:	d105      	bne.n	8007682 <__libc_init_array+0x2e>
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	f855 3b04 	ldr.w	r3, [r5], #4
 800767c:	4798      	blx	r3
 800767e:	3601      	adds	r6, #1
 8007680:	e7ee      	b.n	8007660 <__libc_init_array+0xc>
 8007682:	f855 3b04 	ldr.w	r3, [r5], #4
 8007686:	4798      	blx	r3
 8007688:	3601      	adds	r6, #1
 800768a:	e7f2      	b.n	8007672 <__libc_init_array+0x1e>
 800768c:	08007898 	.word	0x08007898
 8007690:	08007898 	.word	0x08007898
 8007694:	08007898 	.word	0x08007898
 8007698:	0800789c 	.word	0x0800789c

0800769c <memcmp>:
 800769c:	b530      	push	{r4, r5, lr}
 800769e:	3901      	subs	r1, #1
 80076a0:	2400      	movs	r4, #0
 80076a2:	42a2      	cmp	r2, r4
 80076a4:	d101      	bne.n	80076aa <memcmp+0xe>
 80076a6:	2000      	movs	r0, #0
 80076a8:	e005      	b.n	80076b6 <memcmp+0x1a>
 80076aa:	5d03      	ldrb	r3, [r0, r4]
 80076ac:	3401      	adds	r4, #1
 80076ae:	5d0d      	ldrb	r5, [r1, r4]
 80076b0:	42ab      	cmp	r3, r5
 80076b2:	d0f6      	beq.n	80076a2 <memcmp+0x6>
 80076b4:	1b58      	subs	r0, r3, r5
 80076b6:	bd30      	pop	{r4, r5, pc}

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ce:	4291      	cmp	r1, r2
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <memset>:
 80076d4:	4402      	add	r2, r0
 80076d6:	4603      	mov	r3, r0
 80076d8:	4293      	cmp	r3, r2
 80076da:	d100      	bne.n	80076de <memset+0xa>
 80076dc:	4770      	bx	lr
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7f9      	b.n	80076d8 <memset+0x4>

080076e4 <_init>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	bf00      	nop
 80076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ea:	bc08      	pop	{r3}
 80076ec:	469e      	mov	lr, r3
 80076ee:	4770      	bx	lr

080076f0 <_fini>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr
